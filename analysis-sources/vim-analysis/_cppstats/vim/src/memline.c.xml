<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\memline.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SASC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__amigaos4__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;proto/dos.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>block0</name></name></type> <name>ZERO_BL</name>;</typedef> 

<typedef>typedef <type><name><name>struct</name> <name>pointer_block</name></name></type> <name>PTR_BL</name>;</typedef> 

<typedef>typedef <type><name><name>struct</name> <name>data_block</name></name></type> <name>DATA_BL</name>;</typedef> 

<typedef>typedef <type><name><name>struct</name> <name>pointer_entry</name></name></type> <name>PTR_EN</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_ID</name></cpp:macro> <cpp:value>(('d' &lt;&lt; 8) + 'a')</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_ID</name></cpp:macro> <cpp:value>(('p' &lt;&lt; 8) + 't')</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK0_ID0</name></cpp:macro> <cpp:value>'b'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK0_ID1</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK0_ID1_C0</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK0_ID1_C1</name></cpp:macro> <cpp:value>'C'</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK0_ID1_C2</name></cpp:macro> <cpp:value>'d'</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>id1_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>BLOCK0_ID1_C0</name></expr>, 

<expr><name>BLOCK0_ID1_C1</name></expr>, 

<expr><name>BLOCK0_ID1_C2</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>pointer_entry</name>

<block>{

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>pe_bnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>pe_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>pe_old_lnum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pe_page_count</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>pointer_block</name>

<block>{

<decl_stmt><decl><type><name>short_u</name></type> <name>pb_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short_u</name></type> <name>pb_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short_u</name></type> <name>pb_count_max</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PTR_EN</name></type> <name><name>pb_pointer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>data_block</name>

<block>{

<decl_stmt><decl><type><name>short_u</name></type> <name>db_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>db_free</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>db_txt_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>db_txt_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>linenr_T</name></type> <name>db_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>db_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_MARKED</name></cpp:macro> <cpp:value>((unsigned)1 &lt;&lt; ((sizeof(unsigned) * 8) - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_INDEX_MASK</name></cpp:macro> <cpp:value>(~DB_MARKED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_SIZE</name></cpp:macro> <cpp:value>(sizeof(unsigned))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>(sizeof(DATA_BL) - INDEX_SIZE)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_FNAME_SIZE_ORG</name></cpp:macro> <cpp:value>900</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_FNAME_SIZE_NOCRYPT</name></cpp:macro> <cpp:value>898</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_FNAME_SIZE_CRYPT</name></cpp:macro> <cpp:value>890</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_UNAME_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_HNAME_SIZE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_MAGIC_LONG</name></cpp:macro> <cpp:value>0x30313233L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_MAGIC_INT</name></cpp:macro> <cpp:value>0x20212223L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_MAGIC_SHORT</name></cpp:macro> <cpp:value>0x10111213L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_MAGIC_CHAR</name></cpp:macro> <cpp:value>0x55</cpp:value></cpp:define>

<struct>struct <name>block0</name>

<block>{

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_version</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_page_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_mtime</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_ino</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_pid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_uname</name><index>[<expr><name>B0_UNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_hname</name><index>[<expr><name>B0_HNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>b0_fname</name><index>[<expr><name>B0_FNAME_SIZE_ORG</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>b0_magic_long</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>b0_magic_int</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>b0_magic_short</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name>b0_magic_char</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_DIRTY</name></cpp:macro> <cpp:value>0x55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b0_dirty</name></cpp:macro> <cpp:value>b0_fname[B0_FNAME_SIZE_ORG - 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b0_flags</name></cpp:macro> <cpp:value>b0_fname[B0_FNAME_SIZE_ORG - 2]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b0_seed</name></cpp:macro> <cpp:value>b0_fname[B0_FNAME_SIZE_ORG - 2 - MF_SEED_LEN]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_FF_MASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_SAME_DIR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B0_HAS_FENC</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_INCR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>lowest_marked</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_DELETE</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_INSERT</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_FIND</name></cpp:macro> <cpp:value>0x13</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_FLUSH</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ML_SIMPLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; 0x10)</cpp:value></cpp:define> 

<typedef>typedef <type><enum>enum <block>{

<decl><name>UB_FNAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> 

, <decl><name>UB_SAME_DIR</name></decl> 

, <decl><name>UB_CRYPT</name></decl> 

}</block></enum></type> <name>upd_block0_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ml_set_b0_crypt</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ml_upd_block0</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>upd_block0_T</name></type> <name>what</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_b0_fname</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_b0_dir_flag</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_b0_fenc</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>swapfile_info</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>recov_file_names</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prepend_dot</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ml_delete_int</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>findswapname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ml_flush_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>ml_new_data</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>ml_new_ptr</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type><name>ml_find_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ml_add_stack</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ml_lineadd</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>b0_magic_wrong</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fnamecmp_ino</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>long_to_char</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>char_to_long</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>cryptstate_T</name> <modifier>*</modifier></type><name>ml_crypt_prepare</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>off_T</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reading</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ml_updatechunk</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>updtype</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>ml_open</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_uc</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_may_swap</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_may_swap</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <call><name>mf_open</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>=</operator> <name>mfp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>=</operator> <name>ML_EMPTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_new</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E298: Didn't get block nr 0?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b0p</name> <operator>=</operator> <operator>(</operator><name>ZERO_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>BLOCK0_ID0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>BLOCK0_ID1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_long</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>B0_MAGIC_LONG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_int</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>B0_MAGIC_INT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_short</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>B0_MAGIC_SHORT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_char</name></name> <operator>=</operator> <name>B0_MAGIC_CHAR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_version</name></name></expr></argument>, <argument><expr><literal type="string">"VIM "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_version</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>Version</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_spell</name></name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_dirty</name></name> <operator>=</operator> <ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_changed</name></name></expr> ?</condition><then> <expr><name>B0_DIRTY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>=</operator> <call><name>get_fileformat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_b0_fname</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_user_name</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_uname</name></name></expr></argument>, <argument><expr><name>B0_UNAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_uname</name><index>[<expr><name>B0_UNAME_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_get_host_name</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_hname</name></name></expr></argument>, <argument><expr><name>B0_HNAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_hname</name><index>[<expr><name>B0_HNAME_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><call><name>mch_get_pid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ml_set_b0_crypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>b0p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>B_SPELL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mf_sync</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_new_ptr</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E298: Didn't get block nr 1?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_new_data</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E298: Didn't get block nr 2?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>--</operator><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<return>return <expr><name>OK</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_close</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_set_mfp_crypt</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method_nr</name> <init>= <expr><call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>method_nr</name> <operator>&gt;</operator> <name>CRYPT_M_ZIP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sha2_seed</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_seed</name></name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_set_b0_crypt</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>BLOCK0_ID1</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method_nr</name> <init>= <expr><call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>id1_codes</name><index>[<expr><name>method_nr</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>method_nr</name> <operator>&gt;</operator> <name>CRYPT_M_ZIP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sha2_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_seed</name></name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_seed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_seed</name></name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_set_crypt_key</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_cm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>bnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_method</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>old_method</name> <operator>=</operator> <call><name>crypt_method_nr_from_name</name><argument_list>(<argument><expr><name>old_cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_key</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_buf_cm</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name>old_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <name>old_cm</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_preserve</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name>new_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <name>new_buf_cm</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_old_key</name></name> <operator>=</operator> <name>old_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_old_cm</name></name> <operator>=</operator> <name>old_method</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_method</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>old_key</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_old_seed</name></name></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_seed</name></name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ml_upd_block0</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UB_CRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>ML_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>( <init>;</init> <condition><expr><operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><operator>(</operator><name>blocknr_T</name><operator>)</operator><name>bnum</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>==</operator> <name>PTR_ID</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>top</name> <operator>=</operator> <call><name>ml_add_stack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>top</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name> <operator>=</operator> <name>bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>!=</operator> <name>DATA_ID</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>)</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E843: Error while updating swap file crypt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_old_key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>ml_setname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_uc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <name>p_dir</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirp</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>findswapname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirp</name></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_rename</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_ffname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>mf_set_ffname</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ml_upd_block0</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UB_SAME_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E301: Oops, lost the swap file!!!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fdflags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdflags</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>fdflags</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>fdflags</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E302: Could not rename swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_open_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_open_file</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_swf</name></name> <operator>||</operator> <name><name>cmdmod</name><operator>.</operator><name>noswapfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_spell</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mf_open_file</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_may_swap</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <name>p_dir</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirp</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>findswapname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dirp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mf_open_file</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>mf_fullname</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ml_upd_block0</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UB_SAME_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mf_sync</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>MFS_ZERO</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_set_dirty</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mf_close_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dir</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E303: Unable to open swap file for \"%s\", recovery impossible"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_may_swap</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>check_need_swap</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>newfile</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_may_swap</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>||</operator> <operator>!</operator><name>newfile</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_open_file</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>old_msg_silent</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_close</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_close</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></argument>, <argument><expr><name>del_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BF_RECOVERED</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_close_all</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>del_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>ml_close</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>del_file</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_PRESERVED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_PRESERVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>spell_delete_wordlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPDIRNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_deltempdir</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_close_notmod</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_close</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_timestamp</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_upd_block0</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>UB_FNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ml_check_b0_id</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID0</name>

<operator>||</operator> <operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1</name>

<operator>&amp;&amp;</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1_C0</name>

<operator>&amp;&amp;</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1_C1</name>

<operator>&amp;&amp;</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1_C2</name><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_upd_block0</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>upd_block0_T</name></type> <name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><operator>(</operator><name>blocknr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>UB_CRYPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_set_mfp_crypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b0p</name> <operator>=</operator> <operator>(</operator><name>ZERO_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_check_b0_id</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E304: ml_upd_block0(): Didn't get block 0??"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <name>UB_FNAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_b0_fname</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>what</name> <operator>==</operator> <name>UB_CRYPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_set_b0_crypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>b0p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>set_b0_dir_flag</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_b0_fname</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>B0_FNAME_SIZE_CRYPT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>forward_slash</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>size_t</name></type> <name>flen</name></decl>, <decl><type ref="prev"/><name>ulen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>uname</name><index>[<expr><name>B0_UNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>,

<argument><expr><name>B0_FNAME_SIZE_CRYPT</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_user_name</name><argument_list>(<argument><expr><name>uname</name></expr></argument>, <argument><expr><name>B0_UNAME_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <operator>(</operator><name>ulen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>uname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>flen</name> <operator>&gt;</operator> <name>B0_FNAME_SIZE_CRYPT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>,

<argument><expr><name>B0_FNAME_SIZE_CRYPT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <name>ulen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>uname</name></expr></argument>, <argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>buf_store_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_mtime_read</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>long_to_char</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_mtime_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_orig_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_orig_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_b0_fenc</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_b0_dir_flag</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>same_directory</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>|=</operator> <name>B0_SAME_DIR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>B0_SAME_DIR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_b0_fenc</name><parameter_list>(

<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>,

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>B0_FNAME_SIZE_NOCRYPT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>B0_FNAME_SIZE_CRYPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>B0_HAS_FENC</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>n</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>|=</operator> <name>B0_HAS_FENC</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_recover</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>checkext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_used</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b0_ff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>b0_fenc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>b0_cm</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>bnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stat_T</name></type> <name>org_stat</name></decl>, <decl><type ref="prev"/><name>swp_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>directly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cannot_open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>line_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>txt_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_T</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>called_from_main</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>serious_error</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>mtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_file_status</name> <init>= <expr><name>NOTDONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>recoverymode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>called_from_main</name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>checkext</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>STRNICMP</name><argument_list>(<argument>fname + len - <literal type="number">4</literal></argument>, <argument><literal type="string">"_s"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<call><name>STRNICMP</name><argument_list>(<argument><expr><name>fname</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".s"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"abcdefghijklmnopqrstuvw"</literal></expr></argument>,

<argument><expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>ASCII_ISALPHA</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fname_used</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>recover_names</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E305: No swap file found for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>recover_names</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Enter number of swap file to use (0 to quit): "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_number</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>recover_names</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fname_used</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>called_from_main</name> <operator>&amp;&amp;</operator> <call><name>ml_open</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>getout</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>buf_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <call><name>mf_open</name><argument_list>(<argument><expr><name>fname_used</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname_used</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname_used</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E306: Cannot open %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>=</operator> <name>mfp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>=</operator> <name>MIN_SWAP_PAGE_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><operator>(</operator><name>blocknr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to read block 0 from "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nMaybe no changes were made or Vim did not update the swap file."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b0p</name> <operator>=</operator> <operator>(</operator><name>ZERO_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_version</name></name></expr></argument>, <argument><expr><literal type="string">"VIM 3.0"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" cannot be used with this version of Vim.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Use Vim version 3.0.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_check_b0_id</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E307: %s does not look like a Vim swap file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>b0_magic_wrong</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_hname</name></name></expr></argument>, <argument><expr><literal type="string">"PC "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" cannot be used with this version of Vim.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" cannot be used on this computer.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The file was created on "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_hname</name></name></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">",\nor the file has been damaged."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>id1_codes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>id1_codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b0_cm</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>b0_cm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_seed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_seed</name></name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>crypt_set_cm_option</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b0_cm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>b0_cm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E833: %s is encrypted and this version of Vim does not support encryption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_page_size</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>previous_page_size</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mf_new_page_size</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_page_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>&lt;</operator> <name>previous_page_size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans_attr</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" has been damaged (page size is smaller than minimum value).\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr</name> <operator>|</operator> <name>MSG_HIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>vim_lseek</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_T</name><operator>)</operator><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name> <operator>=</operator> <operator>(</operator><name>blocknr_T</name><operator>)</operator><operator>(</operator><name>size</name> <operator>/</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_infile_count</name></name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_blocknr_max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>, <argument><expr><name>previous_page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b0p</name> <operator>=</operator> <operator>(</operator><name>ZERO_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>directly</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setfname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Using swap file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Original file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mtime</name> <operator>=</operator> <call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>org_stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>swp_stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>org_stat</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name><name>swp_stat</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator>

<operator>||</operator> <name><name>org_stat</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name>mtime</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E308: Warning: Original file may have been changed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b0_ff</name> <operator>=</operator> <operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>&amp;</operator> <name>B0_FF_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>&amp;</operator> <name>B0_HAS_FENC</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fnsize</name> <init>= <expr><name>B0_FNAME_SIZE_NOCRYPT</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>BLOCK0_ID1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fnsize</name> <operator>=</operator> <name>B0_FNAME_SIZE_CRYPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <name>fnsize</name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>--</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>b0_fenc</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_fname</name></name> <operator>+</operator> <name>fnsize</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>orig_file_status</name> <operator>=</operator> <call><name>readfile</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>READ_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>b0_cm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap file is encrypted: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nIf you entered a new crypt key but did not write the text file,"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nenter the new crypt key."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nIf you wrote the text file after changing the crypt key press enter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nto use the same key for text file and swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>need_key_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <call><name>crypt_get_key</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>b0_ff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_fileformat</name><argument_list>(<argument><expr><name>b0_ff</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b0_fenc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fenc"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>b0_fenc</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>b0_fenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unchanged</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cannot_open</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cannot_open</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>serious_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><operator>(</operator><name>blocknr_T</name><operator>)</operator><name>bnum</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E309: Unable to read block 1 from %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???MANY LINES MISSING"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>==</operator> <name>PTR_ID</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>line_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_count</name> <operator>-=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???LINE COUNT WRONG"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???EMPTY BLOCK"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cannot_open</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>readfile</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>,

<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>line_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cannot_open</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>line_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cannot_open</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???LINES MISSING"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>top</name> <operator>=</operator> <call><name>ml_add_stack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>top</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name> <operator>=</operator> <name>bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>!=</operator> <name>DATA_ID</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E310: Block 1 ID wrong (%s not a .swp file?)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???BLOCK MISSING"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>has_error</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>page_count</name> <operator>*</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>!=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"??? from here until ???END lines may be messed up"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>=</operator> <name>page_count</name> <operator>*</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>!=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"??? from here until ???END lines may have been inserted/deleted"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

<expr_stmt><expr><name>has_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>txt_start</name> <operator>=</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>txt_start</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HEADER_SIZE</name>

<operator>||</operator> <name>txt_start</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"???"</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>error</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>txt_start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>has_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???END"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>)</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>orig_file_status</name> <operator>!=</operator> <name>OK</name> <operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>!=</operator> <name>lnum</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>changed_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>lnum</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>changed_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>&gt;</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>|=</operator> <name>BF_RECOVERED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>recoverymode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E311: Recovery Interrupted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E312: Errors detected while recovering; look for lines starting with ???"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"See \":help E312\" for more information."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Recovery completed. You should check if everything is OK."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n(You might want to write out this file under another name\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"and run diff with the original file to check for changes)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Recovery completed. Buffer contents equals file contents."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nYou may want to delete the .swp file now.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Using crypt key from swap file for the text file.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"key"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recoverymode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_close</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_cm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>serious_error</name> <operator>&amp;&amp;</operator> <name>called_from_main</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_close</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFREADPOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_BUFWINENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>recover_names</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fname_out</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_names</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>char_u</name> <argument_list>*<argument><expr><operator>(</operator><name><name>names</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><name>tail</name></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><name>p</name></expr></argument>;

<argument><expr><name>int</name> <name>num_files</name></expr></argument>;

<argument><expr><name>int</name> <name>file_count</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><operator>*</operator><name>files</name></expr></argument>;

<argument><expr><name>int</name> <name>i</name></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><name>dirp</name></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><name>dir_name</name></expr></argument>;

<argument><expr><name>char_u</name> <operator>*</operator><name>fname_res</name> <operator>=</operator> <name>NULL</name></expr></argument>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>char_u</name> <name><name>fname_buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></expr></argument>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <argument><expr><operator>(</operator><name>fname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>resolve_symlink</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname_res</name> <operator>=</operator> <name>fname_buf</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fname_res</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

}</block></expr></argument></argument_list></call></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap files found:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dir_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <name>p_dir</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dir_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dirp</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirp</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><literal type="number">31000</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>dir_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*_sw%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*.sw?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".*.sw?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".sw?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".*_sw%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <call><name>recov_file_names</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>fname_res</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*_sw%"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"*.sw?"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".*.sw?"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".sw?"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".*_sw%"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dir_name</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>after_pathsep</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>make_percent_swname</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>fname_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>fname_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <call><name>recov_file_names</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_names</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_names</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_names</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_files</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>expand_wildcards</name><argument_list>(<argument><expr><name>num_names</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>,

<argument><expr><name>EW_NOTENV</name><operator>|</operator><name>EW_KEEPALL</name><operator>|</operator><name>EW_FILE</name><operator>|</operator><name>EW_SILENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_files</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirp</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>file_count</name> <operator>+</operator> <name>num_files</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>swapname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>swapname</name> <operator>=</operator> <call><name>modname</name><argument_list>(<argument><expr><name>fname_res</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"_swp"</literal></expr></argument>, <argument><expr><call><name>FALSE</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></call><literal type="string">".swp"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>swapname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>swapname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>files</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>swapname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>swapname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_files</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>swapname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_fname</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fullpathcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPC_SAME</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>num_files</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>files</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>file_count</name> <operator>+=</operator> <name>num_files</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <name>file_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fname_out</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><name><name>files</name><index>[<expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>num_files</name> <operator>-</operator> <name>file_count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirp</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>list</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dir_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>dir_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" In current directory:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Using specified name:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" In directory "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_home_replace</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">":\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_files</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>++</operator><name>file_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">". "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>gettail</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>swapfile_info</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" -- none --\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>file_count</name> <operator>+=</operator> <name>num_files</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_names</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>num_files</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeWild</name><argument_list>(<argument><expr><name>num_files</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>file_count</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>make_percent_swname</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fix_fname</name><argument_list>(<argument><expr><ternary><condition><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_ispathsep</name><argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PROCESS_STILL_RUNNING</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>process_still_running</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>get_b0_dict</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block0</name></name></type> <name>b0</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ml_check_b0_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Not a swap file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>b0_magic_wrong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Magic number mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>dict_add_string_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>b0</name><operator>.</operator><name>b0_version</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name><name>b0</name><operator>.</operator><name>b0_uname</name></name></expr></argument>, <argument><expr><name>B0_UNAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>, <argument><expr><name><name>b0</name><operator>.</operator><name>b0_hname</name></name></expr></argument>, <argument><expr><name>B0_HNAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string_len</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"fname"</literal></expr></argument>, <argument><expr><name><name>b0</name><operator>.</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name>B0_FNAME_SIZE_ORG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"mtime"</literal></expr></argument>, <argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_mtime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"dirty"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>b0</name><operator>.</operator><name>b0_dirty</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"inode"</literal></expr></argument>, <argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_ino</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Cannot read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Cannot open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>time_t</name></type>

<name>swapfile_info</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block0</name></name></type> <name>b0</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>uname</name><index>[<expr><name>B0_UNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_get_uname</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><name>uname</name></expr></argument>, <argument><expr><name>B0_UNAME_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" owned by: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" dated: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" dated: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>get_ctime</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_version</name></name></expr></argument>, <argument><expr><literal type="string">"VIM 3.0"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [from Vim version 3.0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>ml_check_b0_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [does not look like a Vim swap file]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" file name: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>.</operator><name>b0_fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[No Name]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n modified: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>b0</name><operator>.</operator><name>b0_dirty</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>b0</name><operator>.</operator><name>b0_uname</name></name><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n user name: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>b0</name><operator>.</operator><name>b0_hname</name></name><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>b0</name><operator>.</operator><name>b0_uname</name></name><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" host name: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n host name: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_hname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n process ID: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outnum</name><argument_list>(<argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>mch_process_running</name><argument_list>(<argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (STILL RUNNING)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_STILL_RUNNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>process_still_running</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>b0_magic_wrong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_hname</name></name></expr></argument>, <argument><expr><literal type="string">"PC "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n [not usable with this version of Vim]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n [not usable on this computer]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [cannot be read]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [cannot be opened]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>time_t</name></type>

<name>swapfile_unchanged</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block0</name></name></type> <name>b0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>long</name></type> <name>pid</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ml_check_b0_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>||</operator> <call><name>b0_magic_wrong</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>.</operator><name>b0_dirty</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0L</literal> <operator>||</operator> <call><name>mch_process_running</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>recov_file_names</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prepend_dot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>shortname</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_shortname</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_shortname</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>num_names</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prepend_dot</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>=</operator> <call><name>modname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".sw?"</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>num_names</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"_sw%"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".sw?"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_names</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>names</name><index>[<expr><name>num_names</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>num_names</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>num_names</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_shortname</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>=</operator> <call><name>modname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"_sw%"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>=</operator> <call><name>modname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".sw?"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>num_names</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>num_names</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>end</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_shortname</name></name> <operator>=</operator> <name>shortname</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>num_names</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_sync_all</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check_file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>ML_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>check_file</name> <operator>&amp;&amp;</operator> <call><name>mf_need_trans</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime_read</name></name>

<operator>||</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_orig_size</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_preserve</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_check_timestamps</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_check_timestamps</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_dirty</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mf_sync</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>check_char</name></expr> ?</condition><then> <expr><name>MFS_STOP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MFS_FLUSH</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check_char</name> <operator>&amp;&amp;</operator> <call><name>ui_char_avail</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_preserve</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_int_save</name> <init>= <expr><name>got_int</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E313: Cannot preserve, there is no swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>ML_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mf_sync</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>MFS_ALL</name> <operator>|</operator> <name>MFS_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mf_need_trans</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>mf_need_trans</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name> <operator>!=</operator> <name>lnum</name></expr></argument>, <argument><expr><literal type="string">"low != lnum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>ML_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>mf_sync</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>MFS_ALL</name> <operator>|</operator> <name>MFS_FLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>got_int</name> <operator>|=</operator> <name>got_int_save</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"File preserved"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E314: Preserve failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_get</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_get_pos</name><parameter_list>(<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_get_curline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_get_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_get_buf</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>will_change</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E315: ml_get: invalid lnum: %ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>errorret</name>:</label>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><name>IObuff</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>!=</operator> <name>lnum</name> <operator>||</operator> <name>mf_dont_release</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>recursive</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>recursive</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shorten_dir</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E316: ml_get: cannot find line %ld in buffer %d %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>recursive</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<goto>goto <name>errorret</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ML_LINE_DIRTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>will_change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <operator>(</operator><name>ML_LOCKED_DIRTY</name> <operator>|</operator> <name>ML_LOCKED_POS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ml_line_alloced</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_text_props_for_append</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>tofree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_prop_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_prop_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>new_len</name> <operator>=</operator> <operator>*</operator><name>len</name> <operator>+</operator> <name>new_prop_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>new_line</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><operator>*</operator><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_prop_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>get_text_props</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><name>props</name> <operator>+</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_NEXT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_flags</name></name> <operator>|=</operator> <name>TP_FLAG_CONT_PREV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_col</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prop</name><operator>.</operator><name>tp_len</name></name> <operator>=</operator> <operator>*</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_line</name> <operator>+</operator> <operator>*</operator><name>len</name> <operator>+</operator> <name>new_prop_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>new_prop_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>line</name> <operator>=</operator> <name>new_line</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tofree</name> <operator>=</operator> <name>new_line</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ml_append_int</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_arg</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>len_arg</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>newfile</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>mark</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>line_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name> <init>= <expr><name>len_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>space_needed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>page_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>db_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>lowest_marked</name> <operator>&amp;&amp;</operator> <name>lowest_marked</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lowest_marked</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_text_props_for_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>space_needed</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>lnum</name></expr></else></ternary></expr></argument>,

<argument><expr><name>ML_INSERT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ML_EMPTY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>db_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>db_idx</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>&lt;</operator> <name>space_needed</name> <operator>&amp;&amp;</operator> <name>db_idx</name> <operator>==</operator> <name>line_count</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ML_INSERT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>db_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>line_count</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name> <operator>!=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"locked_low != lnum + 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>&gt;=</operator> <name>space_needed</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <name>space_needed</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&gt;</operator> <name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>offset</name> <operator>-</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>+</operator> <name>len</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>line_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>db_idx</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mark</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>DB_MARKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_DIRTY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_POS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>line_count_left</name></decl>, <decl><type ref="prev"/><name>line_count_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_count_left</name></decl>, <decl><type ref="prev"/><name>page_count_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lines_moved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_moved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>total_moved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp_right</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stack_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineadd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>bnum_left</name></decl>, <decl><type ref="prev"/><name>bnum_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_left</name></decl>, <decl><type ref="prev"/><name>lnum_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pb_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp_new</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>lines_moved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>lines_moved</name> <operator>=</operator> <name>line_count</name> <operator>-</operator> <name>db_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines_moved</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else

<block>{<block_content>

<expr_stmt><expr><name>data_moved</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>db_idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator> <operator>-</operator>

<name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_moved</name> <operator>=</operator> <name>data_moved</name> <operator>+</operator> <name>lines_moved</name> <operator>*</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>+</operator> <name>total_moved</name> <operator>&gt;=</operator> <name>space_needed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>in_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>space_needed</name> <operator>=</operator> <name>total_moved</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>in_left</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>space_needed</name> <operator>+=</operator> <name>total_moved</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>space_needed</name> <operator>+</operator> <name>HEADER_SIZE</name><operator>)</operator> <operator>+</operator> <name>page_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>page_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp_new</name> <operator>=</operator> <call><name>ml_new_data</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>db_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>hp_left</name> <operator>=</operator> <name>hp_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hp_right</name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_right</name> <operator>=</operator> <name>line_count</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>hp_left</name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hp_right</name> <operator>=</operator> <name>hp_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_left</name> <operator>=</operator> <name>line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dp_right</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp_right</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dp_left</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp_left</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum_left</name> <operator>=</operator> <name><name>hp_left</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum_right</name> <operator>=</operator> <name><name>hp_right</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count_left</name> <operator>=</operator> <name><name>hp_left</name><operator>-&gt;</operator><name>bh_page_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count_right</name> <operator>=</operator> <name><name>hp_right</name><operator>-&gt;</operator><name>bh_page_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_left</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <name>len</name> <operator>+</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mark</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>DB_MARKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp_right</name> <operator>+</operator> <name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>line_count_right</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lines_moved</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-=</operator> <name>data_moved</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <name>total_moved</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp_right</name> <operator>+</operator> <name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp_left</name> <operator>+</operator> <name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>data_moved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>dp_right</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-</operator> <name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>+=</operator> <name>data_moved</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_free</name></name> <operator>+=</operator> <name>total_moved</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>to</name> <operator>=</operator> <name>line_count_right</name></expr><operator>,</operator> <expr><name>from</name> <operator>=</operator> <name>db_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init>

<condition><expr><name>from</name> <operator>&lt;</operator> <name>line_count_left</name></expr>;</condition> <incr><expr><operator>++</operator><name>from</name></expr><operator>,</operator> <expr><operator>++</operator><name>to</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>to</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>from</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>line_count_right</name> <operator>+=</operator> <name>lines_moved</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_left</name> <operator>-=</operator> <name>lines_moved</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_left</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <name>len</name> <operator>+</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>line_count_left</name></expr>]</index></name> <operator>=</operator> <name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mark</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>line_count_left</name></expr>]</index></name> <operator>|=</operator> <name>DB_MARKED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp_left</name> <operator>+</operator> <name><name>dp_left</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>line_count_left</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>db_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>lnum_left</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>lnum_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_right</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum_right</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dp_left</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>=</operator> <name>line_count_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp_right</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>=</operator> <name>line_count_right</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lines_moved</name> <operator>||</operator> <name>in_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_DIRTY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newfile</name> <operator>&amp;&amp;</operator> <name>db_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>in_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_POS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp_new</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lineadd</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>ML_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>stack_idx</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>stack_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><operator>--</operator><name>stack_idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>stack_idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pb_idx</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>!=</operator> <name>PTR_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E317: pointer block id wrong 3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>&lt;</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_count_max</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>-</operator> <name>pb_idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PTR_EN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name>line_count_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <name>page_count_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name>line_count_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <name>page_count_right</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_left</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <name>lnum_left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_right</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <name>lnum_right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <name>stack_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>lineadd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_lineadd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lineadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name></expr>]</index></name><operator>.</operator><name>ip_high</name> <operator>+=</operator>

<name>lineadd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> 

<block>{<block_content>

<expr_stmt><expr><name>hp_new</name> <operator>=</operator> <call><name>ml_new_ptr</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp_new</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp_new</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>pp_new</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name><name>hp_new</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>hp_new</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name>pp_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>stack_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"stack_idx should be 0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>stack_idx</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><name>total_moved</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>-</operator> <name>pb_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_moved</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>total_moved</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PTR_EN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>=</operator> <name>total_moved</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>-=</operator> <name>total_moved</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name>line_count_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <name>page_count_right</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <name>lnum_right</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name>line_count_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <name>page_count_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <name>lnum_right</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>=</operator> <name>line_count_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_page_count</name> <operator>=</operator> <name>page_count_left</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>pb_idx</name></expr>]</index></name><operator>.</operator><name>pe_old_lnum</name> <operator>=</operator> <name>lnum_left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lnum_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line_count_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp_new</name><operator>-&gt;</operator><name>pb_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_count_right</name> <operator>+=</operator> <name><name>pp_new</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>line_count_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>line_count_left</name> <operator>+=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bnum_left</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum_right</name> <operator>=</operator> <name><name>hp_new</name><operator>-&gt;</operator><name>bh_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count_right</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp_new</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>stack_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E318: Updated too many blocks?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ml_updatechunk</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>ML_CHNK_ADDLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_write_to_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>channel_write_new_lines</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ml_append_flush</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>newfile</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>may_invoke_listeners</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ml_append_int</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ml_append</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>newfile</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>open_buffer</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ml_append_flush</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>ml_append_buf</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 

<parameter><decl><type><name>colnr_T</name></type> <name>len</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>newfile</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ml_append_flush</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>newfile</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>ml_replace</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ml_replace_len</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>ml_replace_len</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_arg</name></decl></parameter>,

<parameter><decl><type><name>colnr_T</name></type> <name>len_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_props</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>line_arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name> <init>= <expr><name>len_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>open_buffer</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_props</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>has_props</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>vim_memsave</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_inserted</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>!=</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ML_LINE_DIRTY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_props</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_has_textprop</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_props</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>oldtextlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldtextlen</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>textproplen</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>-</operator> <name>oldtextlen</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>textproplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newline</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name>

<operator>+</operator> <name>oldtextlen</name></expr></argument>, <argument><expr><name>textproplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>textproplen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>=</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|</operator> <name>ML_LINE_DIRTY</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>ML_EMPTY</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>adjust_text_props_for_delete</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>del_props</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>del_props_len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>above</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_get_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_del</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_this</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop_del</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>textprop_T</name></type> <name>prop_this</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>line_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>this_props_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>done_del</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done_del</name> <operator>&lt;</operator> <name>del_props_len</name></expr>;</condition> <incr><expr><name>done_del</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop_del</name></expr></argument>, <argument><expr><name>del_props</name> <operator>+</operator> <name>done_del</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>above</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>prop_del</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_PREV</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>prop_del</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_NEXT</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>above</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>prop_del</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_NEXT</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>prop_del</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>TP_FLAG_CONT_PREV</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_get_line</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_get_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>line_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textlen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>textlen</name> <operator>&gt;=</operator> <name>line_size</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>above</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"no text property above deleted line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"no text property below deleted line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>this_props_len</name> <operator>=</operator> <name>line_size</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>textlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>done_this</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>done_this</name> <operator>&lt;</operator> <name>this_props_len</name></expr>;</condition> <incr><expr><name>done_this</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop_this</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator> <name>textlen</name> <operator>+</operator> <name>done_del</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop_del</name><operator>.</operator><name>tp_id</name></name> <operator>==</operator> <name><name>prop_this</name><operator>.</operator><name>tp_id</name></name>

<operator>&amp;&amp;</operator> <name><name>prop_del</name><operator>.</operator><name>tp_type</name></name> <operator>==</operator> <name><name>prop_this</name><operator>.</operator><name>tp_type</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><ternary><condition><expr><name>above</name></expr> ?</condition><then> <expr><name>TP_FLAG_CONT_NEXT</name></expr> </then><else>: <expr><name>TP_FLAG_CONT_PREV</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prop_this</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>prop_this</name><operator>.</operator><name>tp_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>textlen</name> <operator>+</operator> <name>done_del</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prop_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>textprop_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>above</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"text property above deleted line does not continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"text property below deleted line does not continue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>above</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"text property above deleted line not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"text property below deleted line not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <operator>(</operator><name>ML_LOCKED_DIRTY</name> <operator>|</operator> <name>ML_LOCKED_POS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>ml_delete</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>may_invoke_listeners</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ml_delete_int</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ml_delete_int</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stack_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>line_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textprop_save</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textprop_save_len</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>lowest_marked</name> <operator>&amp;&amp;</operator> <name>lowest_marked</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lowest_marked</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>netbeansSuppressNoLines</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_keep_msg</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>no_lines_msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ml_replace</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_EMPTY</name></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_DELETE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>line_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator> <operator>-</operator> <name>line_start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netbeans_removed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>textlen</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>line_start</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>textlen</name> <operator>&lt;</operator> <name>line_size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textprop_save_len</name> <operator>=</operator> <name>line_size</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>textlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>textprop_save</name> <operator>=</operator> <call><name>vim_memsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>line_start</name> <operator>+</operator> <name>textlen</name></expr></argument>,

<argument><expr><name>textprop_save_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>stack_idx</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>stack_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition>

<incr><expr><operator>--</operator><name>stack_idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>stack_idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>!=</operator> <name>PTR_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E317: pointer block id wrong 4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>--</operator><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>mf_free</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>!=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>count</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PTR_EN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <name>stack_idx</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_lineadd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name></expr>]</index></name><operator>.</operator><name>ip_high</name> <operator>+=</operator>

<name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>stack_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"deleted block 1?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>text_start</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>text_start</name> <operator>+</operator> <name>line_size</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>text_start</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>line_start</name> <operator>-</operator> <name>text_start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>line_size</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>+=</operator> <name>line_size</name> <operator>+</operator> <name>INDEX_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <operator>(</operator><name>ML_LOCKED_DIRTY</name> <operator>|</operator> <name>ML_LOCKED_POS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ml_updatechunk</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>ML_CHNK_DELLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>textprop_save</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adjust_text_props_for_delete</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>textprop_save</name></expr></argument>, <argument><expr><name>textprop_save_len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adjust_text_props_for_delete</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>textprop_save</name></expr></argument>, <argument><expr><name>textprop_save_len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>textprop_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_setmarked</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>lowest_marked</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>lowest_marked</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lowest_marked</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>lnum</name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>]</index></name> <operator>|=</operator> <name>DB_MARKED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_DIRTY</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type>

<name>ml_firstmarked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>lowest_marked</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</init>

<condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>lnum</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_MARKED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;=</operator> <name>DB_INDEX_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_DIRTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lowest_marked</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>lnum</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_clearmarked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <name>lowest_marked</name></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</init>

<condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>lnum</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_MARKED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;=</operator> <name>DB_INDEX_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <name>ML_LOCKED_DIRTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>lowest_marked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_flush_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>new_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LINE_DIRTY</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_line</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E320: Cannot find line %ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>old_line</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>old_len</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>old_len</name> <operator>=</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator> <operator>-</operator> <name>start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>new_len</name> <operator>-</operator> <name>old_len</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>&gt;=</operator> <name>extra</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-</operator> <name>extra</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>start</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>extra</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>-=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-=</operator> <name>extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>old_line</name> <operator>-</operator> <name>extra</name></expr></argument>, <argument><expr><name>new_line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>|=</operator> <operator>(</operator><name>ML_LOCKED_DIRTY</name> <operator>|</operator> <name>ML_LOCKED_POS</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ml_updatechunk</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><name>ML_CHNK_UPDLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_append_int</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>new_line</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;</operator> <name>DB_MARKED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ml_delete_int</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type>

<name>ml_new_data</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negative</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_new</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>=</operator> <name>DATA_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>=</operator> <name>page_count</name> <operator>*</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_free</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>-</operator> <name>HEADER_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type>

<name>ml_new_ptr</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_new</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>=</operator> <name>PTR_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_count_max</name></name> <operator>=</operator> <operator>(</operator><name>short_u</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mfp</name><operator>-&gt;</operator><name>mf_page_size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PTR_BL</name></expr></argument>)</argument_list></sizeof><operator>)</operator>

<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PTR_EN</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bhdr_T</name> <modifier>*</modifier></type>

<name>ml_find_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>bnum</name></decl>, <decl><type ref="prev"/><name>bnum2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mfp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ML_SIMPLE</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name> <operator>&lt;=</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>&gt;=</operator> <name>lnum</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name>mf_dont_release</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_INSERT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_DELETE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LOCKED_DIRTY</name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_LOCKED_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_lineadd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_FLUSH</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_FIND</name></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init><expr><name>top</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>top</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>top</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>top</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>-&gt;</operator><name>ip_low</name></name> <operator>&lt;=</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_high</name></name> <operator>&gt;=</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>ip</name><operator>-&gt;</operator><name>ip_high</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>bnum</name></expr></argument>, <argument><expr><name>page_count</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_noblock</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>high</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_DELETE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>==</operator> <name>DATA_ID</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked</name></name> <operator>=</operator> <name>hp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_lineadd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ML_LOCKED_DIRTY</name> <operator>|</operator> <name>ML_LOCKED_POS</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>hp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dp</name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>!=</operator> <name>PTR_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E317: pointer block id wrong"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_block</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>top</name> <operator>=</operator> <call><name>ml_add_stack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>error_block</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>top</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name> <operator>=</operator> <name>bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_low</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_high</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pe_line_count is zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>low</name> <operator>+=</operator> <name>t</name><operator>)</operator> <operator>&gt;</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_count</name> <operator>=</operator> <name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_page_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bnum2</name> <operator>=</operator> <call><name>mf_trans_del</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bnum</name> <operator>!=</operator> <name>bnum2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bnum</name> <operator>=</operator> <name>bnum2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_bnum</name> <operator>=</operator> <name>bnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pp</name><operator>-&gt;</operator><name>pb_count</name></name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E322: line number out of range: %ld past the end"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>lnum</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>siemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E323: line count wrong in block %ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<goto>goto <name>error_block</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_DELETE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_INSERT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pe_line_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>dirty</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>error_block</name>:</label>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_noblock</name>:</label>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_DELETE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_lineadd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>ML_INSERT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ml_lineadd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ml_add_stack</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>newstack</name></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Stack size increases"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>newstack</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>infoptr_T</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>+</operator> <name>STACK_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newstack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>newstack</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>top</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>infoptr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name></name> <operator>=</operator> <name>newstack</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_size</name></name> <operator>+=</operator> <name>STACK_INCR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>top</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_lineadd</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>infoptr_T</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PTR_BL</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack_top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_stack</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>mf_get</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_bnum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>PTR_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>-&gt;</operator><name>pb_id</name></name> <operator>!=</operator> <name>PTR_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iemsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E317: pointer block id wrong 2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pb_pointer</name><index>[<expr><name><name>ip</name><operator>-&gt;</operator><name>ip_index</name></name></expr>]</index></name><operator>.</operator><name>pe_line_count</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><operator>-&gt;</operator><name>ip_high</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_put</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>hp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>resolve_symlink</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>tmp</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>depth</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E773: Symlink loop for \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>vim_FullName</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>makeswapname</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>ffname</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_res</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname_buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>dir_name</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>after_pathsep</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>make_percent_swname</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>modname</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".swp"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_READLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>resolve_symlink</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname_res</name> <operator>=</operator> <name>fname_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>buf_modname</name><argument_list>(

<argument><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sn</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>fname_res</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<literal type="string">"_swp"</literal></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">".swp"</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name><name>dir_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>dir_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>get_file_in_dir</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_file_in_dir</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_char</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>dname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>dname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>vim_ispathsep</name><argument_list>(<argument><expr><name><name>dname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>fname</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>save_char</name> <operator>=</operator> <operator>*</operator><name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>dname</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <name>save_char</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>concat_fnames</name><argument_list>(<argument><expr><name>dname</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>t</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>attention_message</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>swap_mtime</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>no_wait_return</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E325: ATTENTION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nFound a swap file by the name \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_home_replace</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>swap_mtime</name> <operator>=</operator> <call><name>swapfile_info</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"While opening file \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" CANNOT BE FOUND"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" dated: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>get_ctime</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>swap_mtime</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name>swap_mtime</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" NEWER than swap file!\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n(1) Another program may be editing the same file. If this is the case,\n be careful not to end up with two different instances of the same\n file when making changes. Quit, or continue with caution.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(2) An edit session for this file crashed.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" If this is the case, use \":recover\" or \"vim -r "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\"\n to recover the changes (see \":help recovery\").\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" If you did this already, delete the swap file \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_outtrans</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\"\n to avoid this message.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdline_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>no_wait_return</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>do_swapexists</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPNAME</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPCHOICE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>allbuf_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_SWAPEXISTS</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>allbuf_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SWAPNAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SWAPCHOICE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><literal type="char">'q'</literal></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <return>return <expr><literal type="number">6</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>findswapname</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>dirp</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_fname</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dir_name</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>BPTR</name></type> <name>fh</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf_fname</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_DUMMY_FILE</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dummyfd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>buf_fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mch_isFullName</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf_fname</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_fname</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>t</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sn</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>buf_fname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>mch_getperm</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dummyfd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dir_name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><operator>*</operator><name>dirp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dirp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>copy_option_part</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><literal type="number">31000</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>makeswapname</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sn</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stat_T</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>created1</name> <init>= <expr><name>FALSE</name></expr></init></decl>, <decl><type ref="prev"/><name>created2</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>||</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">8</literal>

<operator>||</operator> <operator>*</operator><call><name>gettail</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fname2</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fname2</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><call><name>gettail</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fname2</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fname2</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fname2</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>mch_open_rw</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>,

<argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>created1</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname2</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>mch_open_rw</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname2</name></expr></argument>,

<argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>created2</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_fstat</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>mch_fstat</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>s1</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>s2</name><operator>.</operator><name>st_dev</name></name>

<operator>&amp;&amp;</operator> <name><name>s1</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>s2</name><operator>.</operator><name>st_ino</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>same</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>created2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>created1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>same</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>makeswapname</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LSTAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stat_T</name></type> <name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_lstat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>Open</name><argument_list>(<argument><expr><operator>(</operator><name>UBYTE</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MODE_NEWFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>!=</operator> <operator>(</operator><name>BPTR</name><operator>)</operator><name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IoErr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_OBJECT_IN_USE</name>

<operator>&amp;&amp;</operator> <call><name>IoErr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_OBJECT_EXISTS</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_fname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fnamecmp</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>old_fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_sn</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mch_getperm</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_shortname</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>makeswapname</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>,

<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recoverymode</name> <operator>&amp;&amp;</operator> <name>buf_fname</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_help</name></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BF_DUMMY</name> <operator>|</operator> <name>BF_NO_SEA</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>block0</name></name></type> <name>b0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>differ</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_eintr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b0</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>b0</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>.</operator><name>b0_flags</name></name> <operator>&amp;</operator> <name>B0_SAME_DIR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>gettail</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_fname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>same_directory</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp_ino</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>,

<argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_ino</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>differ</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fnamecmp_ino</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>,

<argument><expr><call><name>char_to_long</name><argument_list>(<argument><expr><name><name>b0</name><operator>.</operator><name>b0_ino</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>differ</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>differ</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>differ</name> <operator>==</operator> <name>FALSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_flags</name></name> <operator>&amp;</operator> <name>BF_RECOVERED</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_shm</name></expr></argument>, <argument><expr><name>SHM_ATTENTION</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>choice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CREATE_DUMMY_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_use_dummy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dummyfd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dummyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dummyfd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>did_use_dummy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_STILL_RUNNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>process_still_running</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>swapfile_unchanged</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Found a swap file that is not useful, deleting it"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>swap_exists_action</name> <operator>!=</operator> <name>SEA_NONE</name>

<operator>&amp;&amp;</operator> <call><name>has_autocmd</name><argument_list>(<argument><expr><name>EVENT_SWAPEXISTS</name></expr></argument>, <argument><expr><name>buf_fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <call><name>do_swapexists</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_start</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>attention_message</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_TYPEAHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>swap_exists_action</name> <operator>!=</operator> <name>SEA_NONE</name> <operator>&amp;&amp;</operator> <name>choice</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap file \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\" already exists!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap file \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\" already exists!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>choice</name> <operator>=</operator> <call><name>do_dialog</name><argument_list>(<argument><expr><name>VIM_WARNING</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VIM - ATTENTION"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Swap file already exists!"</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_STILL_RUNNING</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>process_still_running</name></expr>

?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Open Read-Only\n&amp;Edit anyway\n&amp;Recover\n&amp;Quit\n&amp;Abort"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Open Read-Only\n&amp;Edit anyway\n&amp;Recover\n&amp;Delete it\n&amp;Quit\n&amp;Abort"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROCESS_STILL_RUNNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>process_still_running</name> <operator>&amp;&amp;</operator> <name>choice</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>choice</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>choice</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>choice</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ro</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_RECOVER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_QUIT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>swap_exists_action</name> <operator>=</operator> <name>SEA_QUIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>mch_getperm</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CREATE_DUMMY_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_use_dummy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dummyfd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf_fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E326: Too many swap files found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'z'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>fname</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CREATE_DUMMY_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dummyfd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>dummyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>buf_fname</name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf_fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>fname</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>b0_magic_wrong</name><parameter_list>(<parameter><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_long</name></name> <operator>!=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>B0_MAGIC_LONG</name>

<operator>||</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_int</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>B0_MAGIC_INT</name>

<operator>||</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_short</name></name> <operator>!=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>B0_MAGIC_SHORT</name>

<operator>||</operator> <name><name>b0p</name><operator>-&gt;</operator><name>b0_magic_char</name></name> <operator>!=</operator> <name>B0_MAGIC_CHAR</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_INODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>fnamecmp_ino</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_c</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname_s</name></decl></parameter>, 

<parameter><decl><type><name>long</name></type> <name>ino_block0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ino_t</name></type> <name>ino_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ino_t</name></type> <name>ino_s</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_c</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf_s</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retval_c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>retval_s</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ino_c</name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ino_s</name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ino_s</name> <operator>=</operator> <operator>(</operator><name>ino_t</name><operator>)</operator><name>ino_block0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ino_c</name> <operator>&amp;&amp;</operator> <name>ino_s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ino_c</name> <operator>!=</operator> <name>ino_s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>retval_c</name> <operator>=</operator> <call><name>vim_FullName</name><argument_list>(<argument><expr><name>fname_c</name></expr></argument>, <argument><expr><name>buf_c</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval_s</name> <operator>=</operator> <call><name>vim_FullName</name><argument_list>(<argument><expr><name>fname_s</name></expr></argument>, <argument><expr><name>buf_s</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval_c</name> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name>retval_s</name> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>buf_c</name></expr></argument>, <argument><expr><name>buf_s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ino_s</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ino_c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval_c</name> <operator>==</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>retval_s</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>fname_c</name></expr></argument>, <argument><expr><name>fname_s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>long_to_char</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>char_to_long</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_setflags</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ZERO_BL</name> <modifier>*</modifier></type><name>b0p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_used_last</name></name></expr>;</init> <condition><expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>hp</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>bh_prev</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hp</name><operator>-&gt;</operator><name>bh_bnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b0p</name> <operator>=</operator> <operator>(</operator><name>ZERO_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_dirty</name></name> <operator>=</operator> <ternary><condition><expr><name><name>buf</name><operator>-&gt;</operator><name>b_changed</name></name></expr> ?</condition><then> <expr><name>B0_DIRTY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>=</operator> <operator>(</operator><name><name>b0p</name><operator>-&gt;</operator><name>b0_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>B0_FF_MASK</name><operator>)</operator>

<operator>|</operator> <operator>(</operator><call><name>get_fileformat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_b0_fenc</name><argument_list>(<argument><expr><name>b0p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hp</name><operator>-&gt;</operator><name>bh_flags</name></name> <operator>|=</operator> <name>BH_DIRTY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_sync</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name></expr></argument>, <argument><expr><name>MFS_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>ml_encrypt_data</name><parameter_list>(

<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>off_T</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>head_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>!=</operator> <name>DATA_ID</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>ml_crypt_prepare</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_data</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>head_end</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>text_start</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>text_len</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_data</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>head_end</name> <operator>-</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_encode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>text_start</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>, <argument><expr><name>new_data</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head_end</name> <operator>&lt;</operator> <name>text_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>new_data</name> <operator>+</operator> <operator>(</operator><name>head_end</name> <operator>-</operator> <name>data</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text_start</name> <operator>-</operator> <name>head_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>new_data</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ml_decrypt_data</name><parameter_list>(

<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>off_T</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>head_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_id</name></name> <operator>==</operator> <name>DATA_ID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>head_end</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>text_start</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>text_len</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head_end</name> <operator>&gt;</operator> <name>text_start</name> <operator>||</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name> <operator>&gt;</operator> <name>size</name>

<operator>||</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>ml_crypt_prepare</name><argument_list>(<argument><expr><name>mfp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>crypt_decode_inplace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>text_start</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crypt_free_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cryptstate_T</name> <modifier>*</modifier></type>

<name>ml_crypt_prepare</name><parameter_list>(<parameter><decl><type><name>memfile_T</name> <modifier>*</modifier></type><name>mfp</name></decl></parameter>, <parameter><decl><type><name>off_T</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reading</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>mfp</name><operator>-&gt;</operator><name>mf_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>salt</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>method_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>seed</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reading</name> <operator>&amp;&amp;</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_old_key</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>method_nr</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_old_cm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_old_key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_old_seed</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>method_nr</name> <operator>=</operator> <call><name>crypt_get_method_nr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_key</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <name><name>mfp</name><operator>-&gt;</operator><name>mf_seed</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>method_nr</name> <operator>==</operator> <name>CRYPT_M_ZIP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%ld"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>crypt_create</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>crypt_create</name><argument_list>(<argument><expr><name>method_nr</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>MF_SEED_LEN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLCS_MAXL</name></cpp:macro> <cpp:value>800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLCS_MINL</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ml_updatechunk</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>updtype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>buf_T</name> <modifier>*</modifier></type><name>ml_upd_lastbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>ml_upd_lastline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>ml_upd_lastcurline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ml_upd_lastcurix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>curline</name> <init>= <expr><name>ml_upd_lastcurline</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curix</name> <init>= <expr><name>ml_upd_lastcurix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunksize_T</name> <modifier>*</modifier></type><name>curchnk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>chunksize_T</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_numchunks</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>updtype</name> <operator>==</operator> <name>ML_CHNK_UPDLINE</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_len</name></name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>ml_upd_lastbuf</name> <operator>||</operator> <name>line</name> <operator>!=</operator> <name>ml_upd_lastline</name> <operator>+</operator> <literal type="number">1</literal>

<operator>||</operator> <name>updtype</name> <operator>!=</operator> <name>ML_CHNK_ADDLINE</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>curline</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>curix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>curix</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>line</name> <operator>&gt;=</operator> <name>curline</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>;</condition>

<incr><expr><name>curix</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>curline</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>curix</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>line</name> <operator>&gt;=</operator> <name>curline</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curline</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curix</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curchnk</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>updtype</name> <operator>==</operator> <name>ML_CHNK_DELLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_totalsize</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>updtype</name> <operator>==</operator> <name>ML_CHNK_ADDLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_numchunks</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunksize_T</name> <modifier>*</modifier></type><name>t_chunksize</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_numchunks</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_numchunks</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>=</operator> <operator>(</operator><name>chunksize_T</name> <operator>*</operator><operator>)</operator>

<call><name>vim_realloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunksize_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_numchunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>t_chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>&gt;=</operator> <name>MLCS_MAXL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linecnt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <name>curix</name><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>chunksize_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>linecnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>curline</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name>linecnt</name> <operator>&lt;</operator> <name>MLCS_MINL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>curline</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>curline</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curline</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>count</name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linecnt</name> <operator>+</operator> <name>rest</name> <operator>&gt;</operator> <name>MLCS_MINL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <name>MLCS_MINL</name> <operator>-</operator> <name>linecnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>linecnt</name> <operator>=</operator> <name>MLCS_MINL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>linecnt</name> <operator>+=</operator> <name>rest</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>end_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text_end</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text_end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>text_end</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>end_idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>=</operator> <name>linecnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>-=</operator> <name>linecnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ml_upd_lastbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>&gt;=</operator> <name>MLCS_MINL</name>

<operator>&amp;&amp;</operator> <name>curix</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>line</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curchnk</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_totalsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name><name>dp</name><operator>-&gt;</operator><name>db_line_count</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator>

<operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_totalsize</name></name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curchnk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>-=</operator> <name>rest</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curchnk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>updtype</name> <operator>==</operator> <name>ML_CHNK_DELLINE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ml_upd_lastbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>curix</name> <operator>&lt;</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>+</operator> <name><name>curchnk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name><operator>)</operator>

<operator>&lt;=</operator> <name>MLCS_MINL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curix</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>curchnk</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>curix</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chunksize_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>curix</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>&gt;</operator> <literal type="number">10</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name> <operator>+</operator> <name><name>curchnk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name><operator>)</operator>

<operator>&gt;</operator> <name>MLCS_MINL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curchnk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name> <operator>+=</operator> <name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_numlines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curchnk</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name> <operator>+=</operator> <name><name>curchnk</name><operator>-&gt;</operator><name>mlcs_totalsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curix</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>+</operator> <name>curix</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <name>curix</name><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>chunksize_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ml_upd_lastbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ml_upd_lastline</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ml_upd_lastcurline</name> <operator>=</operator> <name>curline</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ml_upd_lastcurix</name> <operator>=</operator> <name>curix</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>ml_find_line_or_offset</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>offp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>curline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DATA_BL</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ffdos</name> <init>= <expr><operator>(</operator><call><name>get_fileformat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_DOS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>*</operator><name>offp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>curline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curix</name> <operator>=</operator> <name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>curix</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_usedchunks</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name>curline</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;</operator> <name>size</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name>

<operator>+</operator> <name>ffdos</name> <operator>*</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>curline</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_totalsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&amp;&amp;</operator> <name>ffdos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_chunksize</name><index>[<expr><name>curix</name></expr>]</index></name><operator>.</operator><name>mlcs_numlines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curix</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>(</operator><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curline</name> <operator>&lt;</operator> <name>lnum</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <name>offset</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curline</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>||</operator> <operator>(</operator><name>hp</name> <operator>=</operator> <call><name>ml_find_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>curline</name></expr></argument>, <argument><expr><name>ML_FIND</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>DATA_BL</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>bh_data</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <name>idx</name> <operator>=</operator> <name>curline</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_low</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>text_end</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text_end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curline</name> <operator>+</operator> <operator>(</operator><name>count</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>&gt;=</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>lnum</name> <operator>-</operator> <name>curline</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>textprop_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>textprop_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>dp</name><operator>-&gt;</operator><name>db_txt_end</name></name></expr>

</then><else>: <expr><operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textprop_size</name> <operator>=</operator> <operator>(</operator><name>l2</name> <operator>-</operator> <name>l1</name><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>offset</name> <operator>&gt;=</operator> <name>size</name>

<operator>+</operator> <name>text_end</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>textprop_total</name> <operator>+</operator> <name>textprop_size</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>+</operator> <name>ffdos</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ffdos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>textprop_total</name> <operator>+=</operator> <name>textprop_size</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_has_textprop</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>dp</name>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>text_end</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>+</operator> <name>ffdos</name> <operator>==</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>offp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name>start_idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>offp</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>size</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>offp</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>size</name> <operator>+</operator> <name>len</name>

<operator>-</operator> <operator>(</operator><name>text_end</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>db_index</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <name>DB_INDEX_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>curline</name> <operator>+=</operator> <name>idx</name> <operator>-</operator> <name>start_idx</name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curline</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><name>curline</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curline</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_locked_high</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ffdos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_fixeol</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_bin</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_eol</name></name>

<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>ffdos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>goto_byte</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>cnt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>boff</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ml_flush_line</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>boff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>boff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>ml_find_line_or_offset</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>boff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>coladvance</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>boff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
