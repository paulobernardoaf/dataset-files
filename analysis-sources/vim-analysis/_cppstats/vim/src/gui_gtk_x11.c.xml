<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_gtk_x11.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"auto/gui_gtk_gresources.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>N_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>N_</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>textdomain</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>textdomain</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bindtextdomain</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bindtextdomain</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>bind_textdomain_codeset</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bind_textdomain_codeset</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_NLS</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gnome.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>bonobo_dock_item_set_behavior</name><parameter_list>(<parameter><decl><type><name>BonoboDockItem</name> <modifier>*</modifier></type><name>dock_item</name></decl></parameter>, <parameter><decl><type><name>BonoboDockItemBehavior</name></type> <name>beh</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkAtom</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventExpose</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventFocus</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventVisibility</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventProperty</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkContainer</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkTargetEntry</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkType</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkWidget</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gint</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gpointer</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>guint</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventKey</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventSelection</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GtkSelectionData</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventMotion</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventButton</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkDragContext</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventConfigure</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GdkEventClient</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms-compat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtkx.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkkeysyms.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkwin32.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdkx.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_gtk_f.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_SUNKEYSYM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Sunkeysym.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_X_ATOM</name><parameter_list>(<parameter><type><name>atom</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gdk_x11_atom_to_xatom_for_display( gtk_widget_get_display(gui.mainwin), atom)</cpp:value></cpp:define>

<enum>enum

<block>{

<decl><name>TARGET_TYPE_NONE</name></decl>,

<decl><name>TARGET_UTF8_STRING</name></decl>,

<decl><name>TARGET_STRING</name></decl>,

<decl><name>TARGET_COMPOUND_TEXT</name></decl>,

<decl><name>TARGET_HTML</name></decl>,

<decl><name>TARGET_TEXT</name></decl>,

<decl><name>TARGET_TEXT_URI_LIST</name></decl>,

<decl><name>TARGET_TEXT_PLAIN</name></decl>,

<decl><name>TARGET_VIM</name></decl>,

<decl><name>TARGET_VIMENC</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GtkTargetEntry</name></type> <name><name>selection_targets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>VIMENC_ATOM_NAME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_VIMENC</name></expr>}</block></expr>,

<expr><block>{<expr><name>VIM_ATOM_NAME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_VIM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"text/html"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF8_STRING"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_UTF8_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"COMPOUND_TEXT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_COMPOUND_TEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"TEXT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_TEXT</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"STRING"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_STRING</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SELECTION_TARGETS</name></cpp:macro> <cpp:value>(sizeof(selection_targets) / sizeof(selection_targets[0]))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GtkTargetEntry</name></type> <name><name>dnd_targets</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"text/uri-list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_TEXT_URI_LIST</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"text/html"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_HTML</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF8_STRING"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_UTF8_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"STRING"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_STRING</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"text/plain"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>TARGET_TEXT_PLAIN</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_DND_TARGETS</name></cpp:macro> <cpp:value>(sizeof(dnd_targets) / sizeof(dnd_targets[0]))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FONT</name></cpp:macro> <cpp:value>"Monospace 10"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_GNOME_SESSION</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>wm_protocols_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>save_yourself_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>html_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>utf8_string_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>vim_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>GdkAtom</name></type> <name>vimenc_atom</name> <init>= <expr><name>GDK_NONE</name></expr></init></decl>;</decl_stmt> 

<struct><specifier>static</specifier> struct <name>special_key</name>

<block>{

<decl_stmt><decl><type><name>guint</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>code0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>code1</name></decl>;</decl_stmt>

}</block>

<decl>const <name><name>special_keys</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>GDK_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F16</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F17</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F18</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F19</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F20</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F21</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Pause</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>GDK_F22</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F23</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F24</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F25</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F26</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F27</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F28</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F29</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F30</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F31</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F32</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F33</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F34</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_F35</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SunXK_F36</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>SunXK_F36</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>SunXK_F37</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>GDK_Help</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Undo</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_BackSpace</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Insert</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Delete</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_3270_BackTab</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Clear</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Home</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_End</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Prior</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Next</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_Print</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Insert</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><name>KE_KINS</name></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Delete</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><name>KE_KDEL</name></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Home</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_End</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Prior</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>GDK_KP_Next</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>, 

<expr><block>{<expr><name>GDK_KP_Add</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Subtract</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Divide</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Multiply</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Enter</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_Decimal</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_0</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_1</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_2</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_3</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_4</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_5</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_6</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_7</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_8</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>GDK_KP_9</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_FONT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_GEOMETRY</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_REVERSE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_NOREVERSE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_BACKGROUND</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_FOREGROUND</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_ICONIC</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_ROLE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_NETBEANS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_XRM</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_MENUFONT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_INDEX_MASK</name></cpp:macro> <cpp:value>0x00ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_HAS_VALUE</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_NEEDS_GUI</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_FOR_GTK</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_COMPAT_LONG</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_KEEP</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type>

<name>cmdline_option_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cmdline_option_T</name></type> <name><name>cmdline_options</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"-fn"</literal></expr>, <expr><name>ARG_FONT</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-font"</literal></expr>, <expr><name>ARG_FONT</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-geom"</literal></expr>, <expr><name>ARG_GEOMETRY</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-geometry"</literal></expr>, <expr><name>ARG_GEOMETRY</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-rv"</literal></expr>, <expr><name>ARG_REVERSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-reverse"</literal></expr>, <expr><name>ARG_REVERSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"+rv"</literal></expr>, <expr><name>ARG_NOREVERSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"+reverse"</literal></expr>, <expr><name>ARG_NOREVERSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-bg"</literal></expr>, <expr><name>ARG_BACKGROUND</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-background"</literal></expr>, <expr><name>ARG_BACKGROUND</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-fg"</literal></expr>, <expr><name>ARG_FOREGROUND</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-foreground"</literal></expr>, <expr><name>ARG_FOREGROUND</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-iconic"</literal></expr>, <expr><name>ARG_ICONIC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--role"</literal></expr>, <expr><name>ARG_ROLE</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"-nb"</literal></expr>, <expr><name>ARG_NETBEANS</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"-xrm"</literal></expr>, <expr><name>ARG_XRM</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"-mf"</literal></expr>, <expr><name>ARG_MENUFONT</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"-menufont"</literal></expr>, <expr><name>ARG_MENUFONT</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"--g-fatal-warnings"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gdk-debug"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gdk-no-debug"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gtk-debug"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gtk-no-debug"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gtk-module"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--sync"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--display"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name><operator>|</operator><name>ARG_COMPAT_LONG</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--name"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name><operator>|</operator><name>ARG_COMPAT_LONG</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--class"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name><operator>|</operator><name>ARG_COMPAT_LONG</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--screen"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gxid-host"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--gxid-port"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"--load-modules"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--sm-client-id"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--sm-config-prefix"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--sm-disable"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--oaf-ior-fd"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--oaf-activate-iid"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--oaf-private"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--enable-sound"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--disable-sound"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--espeaker"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_HAS_VALUE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-?"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_NEEDS_GUI</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--help"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_NEEDS_GUI</name><operator>|</operator><name>ARG_KEEP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"--usage"</literal></expr>, <expr><name>ARG_FOR_GTK</name><operator>|</operator><name>ARG_NEEDS_GUI</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

{"--version", ARG_FOR_GTK|ARG_NEEDS_GUI},

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"--disable-crash-dialog"</literal></expr>, <expr><name>ARG_FOR_GTK</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gui_argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>role_argument</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>restart_command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>abs_restart_command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>found_iconic_arg</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>using_gnome</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>using_gnome</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cmdline_option_T</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>restart_command</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>G_DIR_SEPARATOR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_FullName</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>abs_restart_command</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>restart_command</name> <operator>=</operator> <name>abs_restart_command</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>gui_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gui_argv</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>*</operator><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name>gui_argv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>argc</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>option</name> <operator>=</operator> <operator>&amp;</operator><name><name>cmdline_options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>option</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_HAS_VALUE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":="</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_INDEX_MASK</name><operator>)</operator> <operator>==</operator> <name>ARG_NETBEANS</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_COMPAT_LONG</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_FOR_GTK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_HAS_VALUE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>*</operator><name>argc</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_INDEX_MASK</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ARG_REVERSE</name></expr>:</case>

<expr_stmt><expr><name>found_reverse_arg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_NOREVERSE</name></expr>:</case>

<expr_stmt><expr><name>found_reverse_arg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_FONT</name></expr>:</case>

<expr_stmt><expr><name>font_argument</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_GEOMETRY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>geom</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ARG_BACKGROUND</name></expr>:</case>

<expr_stmt><expr><name>background_argument</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_FOREGROUND</name></expr>:</case>

<expr_stmt><expr><name>foreground_argument</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_ICONIC</name></expr>:</case>

<expr_stmt><expr><name>found_iconic_arg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ARG_ROLE</name></expr>:</case>

<expr_stmt><expr><name>role_argument</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt> 

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ARG_NETBEANS</name></expr>:</case>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dofork</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>netbeansArg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_NEEDS_GUI</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>gui_mch_early_init_check</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>starting</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_KEEP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><operator>*</operator><name>argc</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n_strip</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_HAS_VALUE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>n_strip</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><operator>*</operator><name>argc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ARG_FOR_GTK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argc</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <name>n_strip</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>*</operator><name>argc</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_free_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>gui_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>abs_restart_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>visibility_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventVisibility</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_gc_set_exposures</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator> <name>GDK_VISIBILITY_UNOBSCURED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>is_key_pressed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>blink_mode</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>gboolean</name></type> <name>gui_gtk_is_blink_on</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_gtk3_redraw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_redraw_block</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GUI_MON_NOCLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_gtk3_update_cursor</name><parameter_list>(<parameter><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>cursor_row</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>by_signal</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>by_signal</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>gui_gtk3_should_draw_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cond</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cond</name> <operator>|=</operator> <call><name>gui_gtk_is_blink_on</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cond</name> <operator>|=</operator> <name>is_key_pressed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cond</name> <operator>|=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>==</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>cond</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>draw_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cairo_set_source_surface</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>by_signal</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_rectangle_list_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>cairo_copy_clip_rectangle_list</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>CAIRO_STATUS_CLIP_NOT_REPRESENTABLE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>num_rectangles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cairo_rectangle_t</name></type> <name>rect</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>rectangles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_mch_clear_block</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rect</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rect</name><operator>.</operator><name>height</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>num_rectangles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>cairo_rectangle_t</name></type> <name>rect</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>rectangles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_gtk3_redraw</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_gtk3_redraw</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cairo_rectangle_list_destroy</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>by_signal</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_gtk3_should_draw_cursor</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>blink_mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_gtk3_update_cursor</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>expose_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventExpose</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_clear_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_clear_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_clear_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>area</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_clear_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>gint</name></type>

<name>property_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventProperty</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GDK_PROPERTY_NOTIFY</name>

<operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>GDK_PROPERTY_NEW_VALUE</name>

<operator>&amp;&amp;</operator> <call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>commWindow</name>

<operator>&amp;&amp;</operator> <call><name>GET_X_ATOM</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>atom</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>commProperty</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XEvent</name></type> <name>xev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xproperty</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>PropertyNotify</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xproperty</name><operator>.</operator><name>atom</name></name> <operator>=</operator> <name>commProperty</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xproperty</name><operator>.</operator><name>window</name></name> <operator>=</operator> <name>commWindow</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xev</name><operator>.</operator><name>xproperty</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>PropertyNewValue</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>serverEventProc</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>xev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gtk_settings_xft_dpi_changed_cb</name><parameter_list>(<parameter><decl><type><name>GtkSettings</name> <modifier>*</modifier><name>gtk_settings</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GParamSpec</name> <modifier>*</modifier><name>pspec</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>=</operator> <call><name>gtk_widget_create_pango_context</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_context_set_base_dir</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>PANGO_DIRECTION_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_init_font</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>p_guifont</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>p_guifont</name></expr></else></ternary></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><name>gboolean</name></type> <name>timeout_cb_type</name>;</typedef>

<function><type><specifier>static</specifier> <name>guint</name></type>

<name>timeout_add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>time</name></decl></parameter>, <parameter><function_decl><type><name>timeout_cb_type</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>g_timeout_add</name><argument_list>(<argument><expr><operator>(</operator><name>guint</name><operator>)</operator><name>time</name></expr></argument>, <argument><expr><operator>(</operator><name>GSourceFunc</name><operator>)</operator><name>callback</name></expr></argument>, <argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>timeout_remove</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>timer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>g_source_remove</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_ON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>blink_state</name> <init>= <expr><name>BLINK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_waittime</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_ontime</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_offtime</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guint</name></type> <name>blink_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>gui_gtk_is_blink_on</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>==</operator> <name>BLINK_ON</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_is_blinking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_is_blink_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_blinking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>waittime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>waittime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>on</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>blink_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <literal type="number">700</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <literal type="number">250</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>blink_mode</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <name>waittime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <name>waittime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_stop_blink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>may_call_gui_update_cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>blink_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name> <operator>&amp;&amp;</operator> <name>may_call_gui_update_cursor</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>blink_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_ON</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_OFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><name>blink_offtime</name></expr></argument>, <argument><expr><name>blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><name>blink_ontime</name></expr></argument>, <argument><expr><name>blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_start_blink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>blink_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_waittime</name> <operator>&amp;&amp;</operator> <name>blink_ontime</name> <operator>&amp;&amp;</operator> <name>blink_offtime</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><name>blink_waittime</name></expr></argument>, <argument><expr><name>blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>enter_notify_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventCrossing</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>gtk_widget_has_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>leave_notify_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventCrossing</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>focus_in_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventFocus</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>widget</name> <operator>!=</operator> <name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>focus_out_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventFocus</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>keyval_to_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keyval</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint32</name></type> <name>uc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>gdk_keyval_to_unicode</name><argument_list>(<argument><expr><name>keyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_CONTROL_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;=</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&gt;=</operator> <literal type="char">'3'</literal> <operator>&amp;&amp;</operator> <name>uc</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc</name> <operator>^</operator> <literal type="number">0x28</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">'8'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>BS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DEL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>uc</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>keyval</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GDK_Tab</name></expr>:</case> <case>case <expr><name>GDK_KP_Tab</name></expr>:</case> <case>case <expr><name>GDK_ISO_Left_Tab</name></expr>:</case>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_Linefeed</name></expr>:</case>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_Return</name></expr>:</case> <case>case <expr><name>GDK_ISO_Enter</name></expr>:</case> <case>case <expr><name>GDK_3270_Enter</name></expr>:</case>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_Escape</name></expr>:</case>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>modifiers_gdk2vim</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_SHIFT_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_CONTROL_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_MOD1_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_SUPER_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_META</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_MOD4_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_META</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>modifiers</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>modifiers_gdk2mouse</name><parameter_list>(<parameter><decl><type><name>guint</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_SHIFT_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_CONTROL_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>GDK_MOD1_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>modifiers</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>key_press_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>string2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>is_key_pressed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>key_sym</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>keyval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>xim_queue_key_press_event</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SunXK_F36</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>SunXK_F36</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>SunXK_F37</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>keyval_to_string</name><argument_list>(<argument><expr><name>key_sym</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>convert_input</name><argument_list>(<argument><expr><name>string2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>string2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name> <operator>&amp;&amp;</operator> <name>d</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>string</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></sizeof></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>GDK_ISO_Left_Tab</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>key_sym</name> <operator>=</operator> <name>GDK_Tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>|=</operator> <name>GDK_SHIFT_MASK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_MOD1_MASK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>menu_is_active</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p_wak</name> <operator>==</operator> <literal type="char">'y'</literal>

<operator>||</operator> <operator>(</operator><operator>*</operator><name>p_wak</name> <operator>==</operator> <literal type="char">'m'</literal>

<operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>gui_is_menu_shortcut</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_MOD1_MASK</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_SUPER_MASK</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>key_sym</name> <operator>==</operator> <name>GDK_BackSpace</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_Delete</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>key_sym</name> <operator>==</operator> <name>GDK_Tab</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_SHIFT_MASK</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>enc_dbcs</name></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>&amp;=</operator> <operator>~</operator><name>GDK_MOD1_MASK</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name>key_sym</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_space</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_Tab</name>

<operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_Return</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_Linefeed</name>

<operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_Escape</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_KP_Tab</name>

<operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_ISO_Enter</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>GDK_3270_Enter</name>

<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_MOD1_MASK</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<operator>||</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>GDK_SUPER_MASK</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2vim</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>K_CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>intr_char</name> <operator>&amp;&amp;</operator> <name>intr_char</name> <operator>!=</operator> <name>Ctrl_C</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>key_release_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventKey</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>is_key_pressed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>xim_queue_key_press_event</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>TRUE</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_selection_clear_event</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>selection_clear_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventSelection</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>in_selection_clear_event</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>selection</name></name> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_lose_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_plus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clip_lose_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clip_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>in_selection_clear_event</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS_OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS_FAIL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>received_selection</name> <init>= <expr><name>RS_NONE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>selection_received_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GtkSelectionData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>guint</name> <name>time_</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guchar</name> <modifier>*</modifier></type><name>tmpbuf_utf8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_type</name> <init>= <expr><name>MAUTO</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_selection_data_get_selection</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_plus</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_star</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_selection_data_get_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gtk_selection_data_get_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>received_selection</name> <operator>=</operator> <name>RS_FAIL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_selection_data_get_data_type</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>vim_atom</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <operator>*</operator><name>text</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>gtk_selection_data_get_data_type</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>vimenc_atom</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <operator>*</operator><name>text</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>text</name> <operator>-</operator> <name>enc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf_utf8</name> <operator>=</operator> <call><name>gtk_selection_data_get_text</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf_utf8</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmpbuf_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>tmpbuf_utf8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>tmpbuf_utf8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xfe</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-16le"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>motion_type</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>received_selection</name> <operator>=</operator> <name>RS_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>tmpbuf_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>selection_get_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GtkSelectionData</name> <modifier>*</modifier></type><name>selection_data</name></decl></parameter>,

<parameter><decl><type><name>guint</name></type> <name>info</name></decl></parameter>,

<parameter><decl><type><name>guint</name> <name>time_</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>tmplen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>motion_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkAtom</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_selection_data_get_selection</name><argument_list>(<argument><expr><name>selection_data</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_plus</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cbd</name> <operator>=</operator> <operator>&amp;</operator><name>clip_star</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_STRING</name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>clip_html</name> <operator>||</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_HTML</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_UTF8_STRING</name>

<operator>&amp;&amp;</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_VIMENC</name>

<operator>&amp;&amp;</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_VIM</name>

<operator>&amp;&amp;</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_COMPOUND_TEXT</name>

<operator>&amp;&amp;</operator> <name>info</name> <operator>!=</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmplen</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>motion_type</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>tmplen</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><name>G_MAXINT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_VIM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>vim_atom</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_HTML</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>conv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-16le"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>selection_data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>selection_data</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selection_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_selection_data_set</name><argument_list>(<argument><expr><name>selection_data</name></expr></argument>, <argument><expr><name>html_atom</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_VIMENC</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tmpbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tmpbuf</name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>vimenc_atom</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>g_utf8_validate</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>gssize</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_selection_data_set_text</name><argument_list>(<argument><expr><name>selection_data</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>selection_data</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>selection_data</name><operator>-&gt;</operator><name>target</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selection_data</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_selection_data_set</name><argument_list>(<argument><expr><name>selection_data</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_early_init_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>give_message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"DISPLAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>give_message</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_opendisp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>res_registered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res_registered</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>res_registered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_gtk_register_resource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gdk_set_allowed_backends</name> <argument_list>(<argument><expr><literal type="string">"x11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>using_gnome</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>g_set_prgname</name><argument_list>(<argument><expr><literal type="string">"gvim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gtk_init_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gui_argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gui_argv</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_opendisp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>guint</name></type> <name>mouse_click_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouse_timed_out</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>mouse_click_timer_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>timed_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>guint</name></type> <name>motion_repeat_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>motion_repeat_offset</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>timeout_cb_type</name></type> <name>motion_repeat_timer_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>process_motion_notify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GdkModifierType</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkAllocation</name></type> <name>allocation</name></decl>;</decl_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>GDK_BUTTON1_MASK</name> <operator>|</operator> <name>GDK_BUTTON2_MASK</name> <operator>|</operator>

<name>GDK_BUTTON3_MASK</name> <operator>|</operator> <name>GDK_BUTTON4_MASK</name> <operator>|</operator>

<name>GDK_BUTTON5_MASK</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>MOUSE_DRAG</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>MOUSE_DRAG</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mouse_moved</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vim_modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2mouse</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_get_allocation</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name><name>allocation</name><operator>.</operator><name>width</name></name>

<operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name><name>allocation</name><operator>.</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offshoot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <name><name>allocation</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <ternary><condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>y</name></expr> </then><else>: <expr><name>y</name> <operator>-</operator> <name><name>allocation</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>offshoot</name> <operator>=</operator> <ternary><condition><expr><name>dx</name> <operator>&gt;</operator> <name>dy</name></expr> ?</condition><then> <expr><name>dx</name></expr> </then><else>: <expr><name>dy</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offshoot</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <operator>(</operator><literal type="number">130</literal> <operator>*</operator> <operator>(</operator><literal type="number">127</literal> <operator>-</operator> <name>offshoot</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">127</literal> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>motion_repeat_timer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>motion_repeat_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>motion_repeat_timer_cb</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>GdkDevice</name> <modifier>*</modifier></type>

<name>gui_gtk_get_pointer_device</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkDisplay</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dpy</name> <init>= <expr><call><name>gdk_window_get_display</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">20</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GdkSeat</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>seat</name> <init>= <expr><call><name>gdk_display_get_default_seat</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>gdk_seat_get_pointer</name><argument_list>(<argument><expr><name>seat</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkDeviceManager</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mngr</name> <init>= <expr><call><name>gdk_display_get_device_manager</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>gdk_device_manager_get_client_pointer</name><argument_list>(<argument><expr><name>mngr</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GdkWindow</name> <modifier>*</modifier></type>

<name>gui_gtk_get_pointer</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,

<parameter><decl><type><name>GdkModifierType</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkDevice</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dev</name> <init>= <expr><call><name>gui_gtk_get_pointer_device</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>gdk_window_get_device_position</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><name>dev</name></expr></argument> , <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>GdkWindow</name> <modifier>*</modifier></type>

<name>gui_gtk_window_at_position</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkDevice</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dev</name> <init>= <expr><call><name>gui_gtk_get_pointer_device</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>gdk_device_get_window_at_position</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gui_gtk_get_pointer</name><parameter_list>(<parameter><type><name>wid</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gdk_window_get_pointer((wid)-&gt;window, x, y, s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gui_gtk_window_at_position</name><parameter_list>(<parameter><type><name>wid</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gdk_window_at_pointer(x, y)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>motion_repeat_timer_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkModifierType</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_gtk_get_pointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>GDK_BUTTON1_MASK</name> <operator>|</operator> <name>GDK_BUTTON2_MASK</name> <operator>|</operator>

<name>GDK_BUTTON3_MASK</name> <operator>|</operator> <name>GDK_BUTTON4_MASK</name> <operator>|</operator>

<name>GDK_BUTTON5_MASK</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>motion_repeat_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_used_in_input_buf</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>motion_repeat_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>motion_repeat_offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>motion_repeat_offset</name> <operator>=</operator> <operator>!</operator><name>motion_repeat_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_motion_notify</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>motion_notify_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventMotion</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>is_hint</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkModifierType</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_gtk_get_pointer</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_motion_notify</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>process_motion_notify</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>GdkModifierType</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>button_press_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventButton</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeated_click</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_modifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gtk_widget_has_focus</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GDK_BUTTON_PRESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mouse_timed_out</name> <operator>&amp;&amp;</operator> <name>mouse_click_timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>mouse_click_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_click_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mouse_timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouse_click_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><name>p_mouset</name></expr></argument>, <argument><expr><name>mouse_click_timer_cb</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>mouse_timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>button</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_X1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_X2</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>im_is_preediting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xim_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vim_modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2mouse</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>scroll_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventScroll</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_modifiers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gtk_widget_has_focus</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_grab_focus</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>direction</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GDK_SCROLL_UP</name></expr>:</case>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_4</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_SCROLL_DOWN</name></expr>:</case>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_5</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_SCROLL_LEFT</name></expr>:</case>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_7</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GDK_SCROLL_RIGHT</name></expr>:</case>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_6</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>im_is_preediting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xim_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vim_modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2mouse</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>button_release_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventButton</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_modifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>motion_repeat_timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>motion_repeat_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>motion_repeat_timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vim_modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2mouse</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>MOUSE_RELEASE</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>count_and_decode_uri_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>out</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>raw</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>hexhex2nr</name><argument_list>(<argument><expr><name>raw</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>out</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>filter_uri_list</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>outlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>outlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"file:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"//localhost"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>outlist</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>j</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>parse_uri_list</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>count_and_decode_uri_list</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>array</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>filter_uri_list</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><name>array</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drag_handle_uri_list</name><parameter_list>(<parameter><decl><type><name>GdkDragContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>GtkSelectionData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>guint</name></type> <name>time_</name></decl></parameter>,

<parameter><decl><type><name>GdkModifierType</name></type> <name>state</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nfiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>parse_uri_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nfiles</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_selection_data_get_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>gtk_selection_data_get_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnames</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nfiles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int_u</name></type> <name>modifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_drag_finish</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>time_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <call><name>modifiers_gdk2mouse</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_handle_drop</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>nfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drag_handle_text</name><parameter_list>(<parameter><decl><type><name>GdkDragContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>GtkSelectionData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>guint</name></type> <name>time_</name></decl></parameter>,

<parameter><decl><type><name>GdkModifierType</name></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dropkey</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>CSI</name></expr>, <expr><name>KS_MODIFIER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>CSI</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><name>KE_DROP</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>gtk_selection_data_get_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>gtk_selection_data_get_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_selection_data_get_data_type</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>utf8_string_atom</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dnd_yank_drag_data</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_drag_finish</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>time_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dropkey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>modifiers_gdk2vim</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dropkey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>dropkey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dropkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>dropkey</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>dropkey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drag_data_received_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkDragContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>GtkSelectionData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>guint</name></type> <name>info</name></decl></parameter>,

<parameter><decl><type><name>guint</name></type> <name>time_</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>user_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkModifierType</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>guchar</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>data_data</name> <init>= <expr><call><name>gtk_selection_data_get_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>gint</name></type> <name>data_length</name> <init>= <expr><call><name>gtk_selection_data_get_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>gint</name></type> <name>data_format</name> <init>= <expr><call><name>gtk_selection_data_get_format</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data_data</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>data_length</name> <operator>&lt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <name>data_format</name> <operator>!=</operator> <literal type="number">8</literal>

<operator>||</operator> <name><name>data_data</name><index>[<expr><name>data_length</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_drag_finish</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>time_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_gtk_get_pointer</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <operator>(</operator><name>guint</name><operator>)</operator><name>TARGET_TEXT_URI_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drag_handle_uri_list</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>time_</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>drag_handle_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>time_</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>sm_client_check_changed_any</name><parameter_list>(<parameter><decl><type><name>GnomeClient</name> <modifier>*</modifier><name>client</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>key</name></decl></parameter>,

<parameter><decl><type><name>GnomeDialogType</name> <name>type</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cmdmod_T</name></type> <name>save_cmdmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>shutdown_cancelled</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cmdmod</name> <operator>=</operator> <name>cmdmod</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>confirm</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>shutdown_cancelled</name> <operator>=</operator> <call><name>check_changed_any</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exiting</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdmod</name> <operator>=</operator> <name>save_cmdmod</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_interaction_key_return</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>shutdown_cancelled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>sm_client_save_yourself</name><parameter_list>(<parameter><decl><type><name>GnomeClient</name> <modifier>*</modifier></type><name>client</name></decl></parameter>,

<parameter><decl><type><name>gint</name> <name>phase</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GnomeSaveStyle</name> <name>save_style</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gboolean</name> <name>shutdown</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GnomeInteractStyle</name></type> <name>interact_style</name></decl></parameter>,

<parameter><decl><type><name>gboolean</name> <name>fast</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>suffix</name><index>[]</index></name> <init>= <expr><literal type="string">"-session.vim"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>session_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gboolean</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interact_style</name> <operator>==</operator> <name>GNOME_INTERACT_ANY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnome_client_request_interaction</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>GNOME_DIALOG_NORMAL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sm_client_check_changed_any</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>session_file</name> <operator>=</operator> <call><name>gnome_config_get_real_path</name><argument_list>(

<argument><expr><call><name>gnome_client_get_config_prefix</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>session_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>session_file</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>G_DIR_SEPARATOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>session_file</name> <operator>=</operator> <call><name>g_renew</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>session_file</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>session_file</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>write_session_file</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>session_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"rm"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>session_file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_client_set_discard_command</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>restart_command</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"-f"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"-g"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"--role"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>gtk_window_get_role</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"-S"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>session_file</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_client_set_restart_command</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gnome_client_set_clone_command</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>session_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>success</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>sm_client_die</name><parameter_list>(<parameter><decl><type><name>GnomeClient</name> <modifier>*</modifier><name>client</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator>

<call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim: Received \"die\" request from session manager\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>setup_save_yourself</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GnomeClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>gnome_master_client</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save_yourself"</literal></expr></argument>,

<argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sm_client_save_yourself</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"die"</literal></expr></argument>,

<argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sm_client_die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>local_xsmp_handle_requests</name><parameter_list>(

<parameter><decl><type><name>GIOChannel</name> <modifier>*</modifier><name>source</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GIOCondition</name></type> <name>condition</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>condition</name> <operator>==</operator> <name>G_IO_IN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xsmp_handle_requests</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_io_channel_unref</name><argument_list>(<argument><expr><operator>(</operator><name>GIOChannel</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_io_channel_unref</name><argument_list>(<argument><expr><operator>(</operator><name>GIOChannel</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsmp_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>setup_save_yourself</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Atom</name> <modifier>*</modifier></type><name>existing_atoms</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xsmp_icefd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GIOChannel</name> <modifier>*</modifier></type><name>g_io</name> <init>= <expr><call><name>g_io_channel_unix_new</name><argument_list>(<argument><expr><name>xsmp_icefd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_io_add_watch</name><argument_list>(<argument><expr><name>g_io</name></expr></argument>, <argument><expr><name>G_IO_IN</name> <operator>|</operator> <name>G_IO_ERR</name> <operator>|</operator> <name>G_IO_HUP</name></expr></argument>,

<argument><expr><name>local_xsmp_handle_requests</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator><name>g_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_io_channel_unref</name><argument_list>(<argument><expr><name>g_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mainwin_win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetWMProtocols</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>existing_atoms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Atom</name> <modifier>*</modifier></type><name>new_atoms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atom</name></type> <name>save_yourself_xatom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_yourself_xatom</name> <operator>=</operator> <call><name>GET_X_ATOM</name><argument_list>(<argument><expr><name>save_yourself_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>existing_atoms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>save_yourself_xatom</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_atoms</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>Atom</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_atoms</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_atoms</name></expr></argument>, <argument><expr><name>existing_atoms</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Atom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_atoms</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>save_yourself_xatom</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>new_atoms</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_atoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>existing_atoms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GdkFilterReturn</name></type>

<name>global_event_filter</name><parameter_list>(<parameter><decl><type><name>GdkXEvent</name> <modifier>*</modifier></type><name>xev</name></decl></parameter>,

<parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>xevent</name> <init>= <expr><operator>(</operator><name>XEvent</name> <operator>*</operator><operator>)</operator><name>xev</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>xevent</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>xevent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ClientMessage</name>

<operator>&amp;&amp;</operator> <name><name>xevent</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>message_type</name></name> <operator>==</operator> <call><name>GET_X_ATOM</name><argument_list>(<argument><expr><name>wm_protocols_atom</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name>long_u</name><operator>)</operator><name><name>xevent</name><operator>-&gt;</operator><name>xclient</name><operator>.</operator><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>==</operator> <call><name>GET_X_ATOM</name><argument_list>(<argument><expr><name>save_yourself_atom</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>XSetCommand</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>GDK_FILTER_REMOVE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>GDK_FILTER_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mainwin_realize</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>magick</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>static</name></cpp:macro> <cpp:value>static const</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim32x32</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim32x32.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim16x16</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim16x16.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim48x48</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim48x48.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>static</name></cpp:undef>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>mainwin_win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>echo_wid_arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WID: %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_ICON</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>icons</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>icons</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>icons</name></expr></argument>, <argument><expr><call><name>gdk_pixbuf_new_from_xpm_data</name><argument_list>(<argument><expr><name>vim16x16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icons</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>icons</name></expr></argument>, <argument><expr><call><name>gdk_pixbuf_new_from_xpm_data</name><argument_list>(<argument><expr><name>vim32x32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icons</name> <operator>=</operator> <call><name>g_list_prepend</name><argument_list>(<argument><expr><name>icons</name></expr></argument>, <argument><expr><call><name>gdk_pixbuf_new_from_xpm_data</name><argument_list>(<argument><expr><name>vim48x48</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_set_icon_list</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_list_foreach</name><argument_list>(<argument><expr><name>icons</name></expr></argument>, <argument><expr><operator>(</operator><name>GFunc</name><operator>)</operator><operator>&amp;</operator><name>g_object_unref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>icons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gdk_window_add_filter</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>global_event_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setup_save_yourself</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>serverName</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>serverDelayedStartName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>commWindow</name> <operator>=</operator> <call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>serverRegisterName</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>serverDelayedStartName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>serverChangeRegisteredWindow</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><name>mainwin_win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gtk_widget_add_events</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>, <argument><expr><name>GDK_PROPERTY_CHANGE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"property-notify-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>property_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GdkCursor</name> <modifier>*</modifier></type>

<name>create_blank_pointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier></type><name>root_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>blank_mask</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkPixmap</name> <modifier>*</modifier></type><name>blank_mask</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GdkCursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GdkRGBA</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>blank_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">12</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkScreen</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>scrn</name> <init>= <expr><call><name>gdk_window_get_screen</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>root_window</name> <operator>=</operator> <call><name>gdk_screen_get_root_window</name><argument_list>(<argument><expr><name>scrn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>root_window</name> <operator>=</operator> <call><name>gtk_widget_get_root_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_surface_t</name> <modifier>*</modifier></type><name>surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>surf</name> <operator>=</operator> <call><name>cairo_image_surface_create</name><argument_list>(<argument><expr><name>CAIRO_FORMAT_A1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>color</name><operator>.</operator><name>red</name></name></expr></argument>,

<argument><expr><name><name>color</name><operator>.</operator><name>green</name></name></expr></argument>,

<argument><expr><name><name>color</name><operator>.</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>color</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blank_mask</name> <operator>=</operator> <call><name>gdk_pixbuf_get_from_surface</name><argument_list>(<argument><expr><name>surf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name>surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>gdk_cursor_new_from_pixbuf</name><argument_list>(<argument><expr><call><name>gdk_window_get_display</name><argument_list>(<argument><expr><name>root_window</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>blank_mask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>blank_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>blank_mask</name> <operator>=</operator> <call><name>gdk_bitmap_create_from_data</name><argument_list>(<argument><expr><name>root_window</name></expr></argument>, <argument><expr><name>blank_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>gdk_cursor_new_from_pixmap</name><argument_list>(<argument><expr><name>blank_mask</name></expr></argument>, <argument><expr><name>blank_mask</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_bitmap_unref</name><argument_list>(<argument><expr><name>blank_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>cursor</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mainwin_screen_changed_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkScreen</name> <modifier>*</modifier><name>previous_screen</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gtk_widget_has_screen</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_cursor_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>=</operator> <call><name>create_blank_pointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>=</operator> <call><name>gtk_widget_create_pango_context</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_context_set_base_dir</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>PANGO_DIRECTION_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_init_font</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drawarea_realize_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>sbar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkAllocation</name></type> <name>allocation</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_new_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>gdk_window_create_similar_surface</name><argument_list>(

<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CAIRO_CONTENT_COLOR_ALPHA</name></expr></argument>,

<argument><expr><call><name>gtk_widget_get_allocated_width</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>gtk_widget_get_allocated_height</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name> <operator>=</operator> <call><name>gdk_gc_new</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>=</operator> <call><name>create_blank_pointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sbar</name> <operator>=</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sbar</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>id</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sbar</name> <operator>=</operator> <name><name>firstwin</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_widget_get_allocation</name><argument_list>(<argument><expr><name>sbar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sbar</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_realized</name><argument_list>(<argument><expr><name>sbar</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>allocation</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>=</operator> <name><name>allocation</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sbar</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>bottom_sbar</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sbar</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_realized</name><argument_list>(<argument><expr><name>sbar</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>allocation</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <name><name>allocation</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drawarea_unrealize_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>im_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pango_glyph_string_free</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_cursor_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>drawarea_style_updated_cb</name><argument_list>(<argument><expr><name>GtkWidget</name> <operator>*</operator><name>widget</name> <name>UNUSED</name></expr></argument>,

<argument><expr><name>gpointer</name> <name>data</name> <name>UNUSED</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>void</name>

<name>drawarea_style_set_cb</name><argument_list>(<argument><expr><name>GtkWidget</name> <operator>*</operator><name>widget</name> <name>UNUSED</name></expr></argument>,

<argument><expr><name>GtkStyle</name> <operator>*</operator><name>previous_style</name> <name>UNUSED</name></expr></argument>,

<argument><expr><name>gpointer</name> <name>data</name> <name>UNUSED</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_new_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>drawarea_configure_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>,

<parameter><decl><type><name>GdkEventConfigure</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cur_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>event</name>

<operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>send_event</name></name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>cur_width</name> <operator>&amp;&amp;</operator> <name><name>event</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>cur_height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_width</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_height</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <call><name>gdk_window_create_similar_surface</name><argument_list>(

<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CAIRO_CONTENT_COLOR_ALPHA</name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_queue_draw</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>delete_event_cb</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventAny</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_item_dimensions</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>GtkOrientation</name></type> <name>orientation</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GtkOrientation</name></type> <name>item_orientation</name> <init>= <expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>using_gnome</name> <operator>&amp;&amp;</operator> <name>widget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BonoboDockItem</name> <modifier>*</modifier></type><name>dockitem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>gtk_widget_get_parent</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>G_TYPE_FROM_INSTANCE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BONOBO_TYPE_DOCK_ITEM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>widget</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dockitem</name> <operator>=</operator> <call><name>BONOBO_DOCK_ITEM</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dockitem</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dockitem</name><operator>-&gt;</operator><name>is_floating</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item_orientation</name> <operator>=</operator> <call><name>bonobo_dock_item_get_orientation</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>item_orientation</name></cpp:macro> <cpp:value>GTK_ORIENTATION_HORIZONTAL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>widget</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>item_orientation</name> <operator>==</operator> <name>orientation</name>

<operator>&amp;&amp;</operator> <call><name>gtk_widget_get_realized</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>gtk_widget_get_visible</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GtkAllocation</name></type> <name>allocation</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_widget_get_allocation</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>allocation</name><operator>.</operator><name>height</name></name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <name>GTK_ORIENTATION_HORIZONTAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>widget</name><operator>-&gt;</operator><name>allocation</name><operator>.</operator><name>height</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>widget</name><operator>-&gt;</operator><name>allocation</name><operator>.</operator><name>width</name></name></expr>;</return></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_menu_tool_width</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>width</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_menu_tool_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>get_item_dimensions</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>, <argument><expr><name>GTK_ORIENTATION_HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>height</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_window_hints_state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>update_window_manager_hints</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_min_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_min_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_char_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_char_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>force_width</name> <operator>&amp;&amp;</operator> <name>force_height</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>init_window_hints_state</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>init_window_hints_state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>gui_get_base_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>gui_get_base_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>tabline_height</name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force_width</name> <operator>&amp;&amp;</operator> <name>force_height</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>min_width</name> <operator>=</operator> <name>force_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_height</name> <operator>=</operator> <name>force_height</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>min_width</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>MIN_COLUMNS</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_height</name> <operator>=</operator> <name>height</name> <operator>+</operator> <name>MIN_LINES</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name>old_width</name>

<operator>||</operator> <name>height</name> <operator>!=</operator> <name>old_height</name>

<operator>||</operator> <name>min_width</name> <operator>!=</operator> <name>old_min_width</name>

<operator>||</operator> <name>min_height</name> <operator>!=</operator> <name>old_min_height</name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>!=</operator> <name>old_char_width</name>

<operator>||</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>!=</operator> <name>old_char_height</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkGeometry</name></type> <name>geometry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkWindowHints</name></type> <name>geometry_mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>width_inc</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>height_inc</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>base_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>base_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>min_width</name></name> <operator>=</operator> <name>min_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geometry</name><operator>.</operator><name>min_height</name></name> <operator>=</operator> <name>min_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>geometry_mask</name> <operator>=</operator> <name>GDK_HINT_BASE_SIZE</name><operator>|</operator><name>GDK_HINT_RESIZE_INC</name>

<operator>|</operator><name>GDK_HINT_MIN_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_set_geometry_hints</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>geometry</name></expr></argument>, <argument><expr><name>geometry_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_min_width</name> <operator>=</operator> <name>min_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_min_height</name> <operator>=</operator> <name>min_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_char_width</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_char_height</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DARKTHEME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_dark_theme</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GtkSettings</name> <modifier>*</modifier></type><name>gtk_settings</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gtk_settings</name> <operator>=</operator> <call><name>gtk_settings_get_for_screen</name><argument_list>(<argument><expr><call><name>gdk_screen_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_set</name><argument_list>(<argument><expr><name>gtk_settings</name></expr></argument>, <argument><expr><literal type="string">"gtk-application-prefer-dark-theme"</literal></expr></argument>, <argument><expr><operator>(</operator><name>gboolean</name><operator>)</operator><name>dark</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>icon_size_changed_foreach</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GTK_IS_IMAGE</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkImage</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><operator>(</operator><name>GtkImage</name> <operator>*</operator><operator>)</operator><name>widget</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gtk_image_get_storage_type</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GTK_IMAGE_ICON_NAME</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GtkIconSize</name></type> <name>icon_size</name> <init>= <expr><call><name>GPOINTER_TO_INT</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>gchar</name> <modifier>*</modifier></type><name>icon_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_image_get_icon_name</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_image_set_from_icon_name</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>icon_name</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>gtk_image_get_storage_type</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>GTK_IMAGE_ICON_SET</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkIconSet</name> <modifier>*</modifier></type><name>icon_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkIconSize</name></type> <name>icon_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_image_get_icon_set</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icon_size</name> <operator>=</operator> <operator>(</operator><name>GtkIconSize</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>user_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_set_ref</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_image_set_from_icon_set</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>icon_set</name></expr></argument>, <argument><expr><name>icon_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_icon_set_unref</name><argument_list>(<argument><expr><name>icon_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>GTK_IS_CONTAINER</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_container_foreach</name><argument_list>(<argument><expr><operator>(</operator><name>GtkContainer</name> <operator>*</operator><operator>)</operator><name>widget</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>icon_size_changed_foreach</name></expr></argument>,

<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_toolbar_style</name><parameter_list>(<parameter><decl><type><name>GtkToolbar</name> <modifier>*</modifier></type><name>toolbar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkToolbarStyle</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkIconSize</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkIconSize</name></type> <name>oldsize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name> <operator>|</operator> <name>TOOLBAR_HORIZ</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name> <operator>|</operator> <name>TOOLBAR_HORIZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>GTK_TOOLBAR_BOTH_HORIZ</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator><operator>)</operator>

<operator>==</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>GTK_TOOLBAR_BOTH</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>toolbar_flags</name> <operator>&amp;</operator> <name>TOOLBAR_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>GTK_TOOLBAR_TEXT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>style</name> <operator>=</operator> <name>GTK_TOOLBAR_ICONS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gtk_toolbar_set_style</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_toolbar_set_tooltips</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator> <name>TOOLBAR_TOOLTIPS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>tbis_flags</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>TBIS_TINY</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_MENU</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TBIS_SMALL</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_SMALL_TOOLBAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TBIS_MEDIUM</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_BUTTON</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TBIS_LARGE</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_LARGE_TOOLBAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TBIS_HUGE</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_DND</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TBIS_GIANT</name></expr>:</case> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_DIALOG</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>GTK_ICON_SIZE_INVALID</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>oldsize</name> <operator>=</operator> <call><name>gtk_toolbar_get_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>GTK_ICON_SIZE_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_toolbar_unset_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>gtk_toolbar_get_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>oldsize</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_container_foreach</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>icon_size_changed_foreach</name></expr></argument>,

<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_toolbar_set_icon_size</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ignore_tabline_evt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type><name>tabline_menu</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>GtkTooltips</name> <modifier>*</modifier></type><name>tabline_tooltip</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>clicked_page</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>tabline_menu_handler</name><parameter_list>(<parameter><decl><type><name>GtkMenuItem</name> <modifier>*</modifier><name>item</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name></type> <name>user_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><name>clicked_page</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_tabline_menu_item</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>utf_text</name></decl>;</decl_stmt>

<expr_stmt><expr><name>utf_text</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>gtk_menu_item_new_with_label</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>utf_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>utf_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>tabline_menu_handler</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GtkWidget</name> <modifier>*</modifier></type>

<name>create_tabline_menu</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gtk_menu_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_tabline_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Close tab"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TABLINE_MENU_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_tabline_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"New tab"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_tabline_menu_item</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Open Tab..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TABLINE_MENU_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>menu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>on_tabline_menu</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>GdkEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GDK_BUTTON_PRESS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkEventButton</name> <modifier>*</modifier></type><name>bevent</name> <init>= <expr><operator>(</operator><name>GdkEventButton</name> <operator>*</operator><operator>)</operator><name>event</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>bevent</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>bevent</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>tabwidget</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier></type><name>tabwin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_gui_events</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tabwin</name> <operator>=</operator> <call><name>gui_gtk_window_at_position</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_window_get_user_data</name><argument_list>(<argument><expr><name>tabwin</name></expr></argument>, <argument><expr><operator>(</operator><name>gpointer</name><operator>)</operator><operator>&amp;</operator><name>tabwidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clicked_page</name> <operator>=</operator> <call><name>GPOINTER_TO_INT</name><argument_list>(<argument><expr><call><name>g_object_get_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tabwidget</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"tab_num"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bevent</name><operator>-&gt;</operator><name>button</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_menu_popup_at_pointer</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_menu_popup</name><argument_list>(<argument><expr><call><name>GTK_MENU</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>bevent</name><operator>-&gt;</operator><name>button</name></name></expr></argument>, <argument><expr><name><name>bevent</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>bevent</name><operator>-&gt;</operator><name>button</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clicked_page</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>send_tabline_event</name><argument_list>(<argument><expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">50</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_select_tab</name><parameter_list>(

<parameter><decl><type><name>GtkNotebook</name> <modifier>*</modifier><name>notebook</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <modifier>*</modifier><name>page</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_tabline_evt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>send_tabline_event</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>on_tab_reordered</name><parameter_list>(

<parameter><decl><type><name>GtkNotebook</name> <modifier>*</modifier><name>notebook</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <modifier>*</modifier><name>page</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_tabline_evt</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>tabpage_index</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tabpage_move</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_show_tabline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><call><name>gtk_notebook_get_show_tabs</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_notebook_set_show_tabs</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>showit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_set_can_focus</name><argument_list>(<argument><expr><call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_showing_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>gtk_notebook_get_show_tabs</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>event_box</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tab_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curtabidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>labeltext</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ignore_tabline_evt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>nr</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curtabidx</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tab_num</name> <operator>=</operator> <name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>gtk_notebook_get_nth_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>page</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>gtk_vbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_box</name> <operator>=</operator> <call><name>gtk_event_box_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><literal type="string">"-Empty-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_misc_set_padding</name><argument_list>(<argument><expr><call><name>GTK_MISC</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_notebook_insert_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>page</name></expr></argument>,

<argument><expr><name>event_box</name></expr></argument>,

<argument><expr><name>nr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_notebook_set_tab_reorderable</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>page</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>event_box</name> <operator>=</operator> <call><name>gtk_notebook_get_tab_label</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_set_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tab_num"</literal></expr></argument>,

<argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><name>tab_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>gtk_bin_get_child</name><argument_list>(<argument><expr><call><name>GTK_BIN</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>labeltext</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_label_set_text</name><argument_list>(<argument><expr><call><name>GTK_LABEL</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>labeltext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>labeltext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>labeltext</name> <operator>=</operator> <call><name>CONVERT_TO_UTF8</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_widget_set_tooltip_text</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>labeltext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_tooltips_set_tip</name><argument_list>(<argument><expr><call><name>GTK_TOOLTIPS</name><argument_list>(<argument><expr><name>tabline_tooltip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>event_box</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>labeltext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CONVERT_TO_UTF8_FREE</name><argument_list>(<argument><expr><name>labeltext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><call><name>gtk_notebook_get_nth_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_notebook_remove_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>gtk_notebook_get_current_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>curtabidx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_notebook_set_current_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>curtabidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ignore_tabline_evt</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_curtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ignore_tabline_evt</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_notebook_get_current_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_notebook_set_current_page</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ignore_tabline_evt</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_gtk_set_selection_targets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_targets</name> <init>= <expr><name>N_SELECTION_TARGETS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkTargetEntry</name></type> <name><name>targets</name><index>[<expr><name>N_SELECTION_TARGETS</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>N_SELECTION_TARGETS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clip_html</name> <operator>&amp;&amp;</operator> <name><name>selection_targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>==</operator> <name>TARGET_HTML</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n_targets</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>targets</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>selection_targets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gtk_selection_clear_targets</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GdkAtom</name><operator>)</operator><name>GDK_SELECTION_PRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_selection_clear_targets</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GdkAtom</name><operator>)</operator><name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_selection_add_targets</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>GdkAtom</name><operator>)</operator><name>GDK_SELECTION_PRIMARY</name></expr></argument>,

<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>n_targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_selection_add_targets</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>GdkAtom</name><operator>)</operator><name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name></expr></argument>,

<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>n_targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_gtk_set_dnd_targets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_targets</name> <init>= <expr><name>N_DND_TARGETS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkTargetEntry</name></type> <name><name>targets</name><index>[<expr><name>N_DND_TARGETS</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>N_DND_TARGETS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clip_html</name> <operator>&amp;&amp;</operator> <name><name>dnd_targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>==</operator> <name>TARGET_HTML</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n_targets</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>targets</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>dnd_targets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gtk_drag_dest_unset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_drag_dest_set</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><name>GTK_DEST_DEFAULT_ALL</name></expr></argument>,

<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>n_targets</name></expr></argument>,

<argument><expr><name>GDK_ACTION_COPY</name> <operator>|</operator> <name>GDK_ACTION_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>vbox</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gnome_program_init</name><argument_list>(<argument><expr><name>VIMPACKAGE</name></expr></argument>, <argument><expr><name>VIM_VERSION_SHORT</name></expr></argument>,

<argument><expr><name>LIBGNOMEUI_MODULE</name></expr></argument>, <argument><expr><name>gui_argc</name></expr></argument>, <argument><expr><name>gui_argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>gui_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GLIB_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">1</literal><operator>,</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_set_application_name</name><argument_list>(<argument><expr><literal type="string">"Vim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"termencoding"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_gtk_register_stock_icons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

gtk_rc_parse("gtkrc");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>=</operator> <name>SB_DEFAULT_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <name>SB_DEFAULT_WIDTH</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>GdkRGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>GdkRGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>spcolor</name></name> <operator>=</operator> <call><name>g_new</name><argument_list>(<argument><expr><name>GdkRGBA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>GdkColor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>GdkColor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>spcolor</name></name> <operator>=</operator> <call><name>g_new0</name><argument_list>(<argument><expr><name>GdkColor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>html_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><literal type="string">"text/html"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>utf8_string_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><literal type="string">"UTF8_STRING"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>plug</name></decl>;</decl_stmt>

<expr_stmt><expr><name>plug</name> <operator>=</operator> <call><name>gtk_plug_new_for_display</name><argument_list>(<argument><expr><call><name>gdk_display_get_default</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><name>gtk_socket_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plug</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_plug_get_socket_window</name><argument_list>(<argument><expr><call><name>GTK_PLUG</name><argument_list>(<argument><expr><name>plug</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>=</operator> <name>plug</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>g_warning</name><argument_list>(<argument><expr><literal type="string">"Connection to GTK+ socket (ID %u) failed"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>gtk_socket_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gtk_socket_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>=</operator> <call><name>gnome_app_new</name><argument_list>(<argument><expr><literal type="string">"Vim"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xsmp_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>=</operator> <call><name>gtk_window_new</name><argument_list>(<argument><expr><name>GTK_WINDOW_TOPLEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>, <argument><expr><literal type="string">"vim-main-window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>=</operator> <call><name>gtk_widget_create_pango_context</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_context_set_base_dir</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>PANGO_DIRECTION_LTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_add_events</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>, <argument><expr><name>GDK_VISIBILITY_NOTIFY_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"delete-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delete_event_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"realize"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mainwin_realize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"screen-changed"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mainwin_screen_changed_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>accel_group</name></name> <operator>=</operator> <call><name>gtk_accel_group_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_add_accel_group</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>accel_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>vbox</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>vbox</name> <operator>=</operator> <call><name>gtk_vbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gnome_app_enable_layout_config</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gnome_app_set_contents</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name> <operator>=</operator> <call><name>gtk_menu_bar_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>, <argument><expr><literal type="string">"vim-menubar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkSettings</name> <modifier>*</modifier></type><name>gtk_settings</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gtk_settings</name> <operator>=</operator> <call><name>gtk_settings_get_for_screen</name><argument_list>(<argument><expr><call><name>gdk_screen_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_set</name><argument_list>(<argument><expr><name>gtk_settings</name></expr></argument>, <argument><expr><literal type="string">"gtk-menu-bar-accel"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>BonoboDockItem</name> <modifier>*</modifier></type><name>dockitem</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnome_app_set_menus</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GTK_MENU_BAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dockitem</name> <operator>=</operator> <call><name>gnome_app_get_dock_item_by_name</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GNOME_APP_MENUBAR_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bonobo_dock_item_set_behavior</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>,

<argument><expr><call><name>bonobo_dock_item_get_behavior</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>)</argument_list></call>

<operator>|</operator> <name>BONOBO_DOCK_ITEM_BEH_NEVER_FLOATING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menubar_h</name></name> <operator>=</operator> <call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menubar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_rc_parse_string</name><argument_list>(

<argument><expr><literal type="string">"style \"vim-toolbar-style\" {\n"</literal>

<literal type="string">" GtkToolbar::button_relief = GTK_RELIEF_NONE\n"</literal>

<literal type="string">"}\n"</literal>

<literal type="string">"widget \"*.vim-toolbar\" style \"vim-toolbar-style\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name> <operator>=</operator> <call><name>gtk_toolbar_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>, <argument><expr><literal type="string">"vim-toolbar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_toolbar_style</name><argument_list>(<argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>BonoboDockItem</name> <modifier>*</modifier></type><name>dockitem</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gnome_app_set_toolbar</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dockitem</name> <operator>=</operator> <call><name>gnome_app_get_dock_item_by_name</name><argument_list>(<argument><expr><call><name>GNOME_APP</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GNOME_APP_TOOLBAR_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_h</name></name> <operator>=</operator> <call><name>GTK_WIDGET</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bonobo_dock_item_set_behavior</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>,

<argument><expr><call><name>bonobo_dock_item_get_behavior</name><argument_list>(<argument><expr><name>dockitem</name></expr></argument>)</argument_list></call>

<operator>|</operator> <name>BONOBO_DOCK_ITEM_BEH_NEVER_FLOATING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name> <operator>=</operator> <call><name>gtk_notebook_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_notebook_set_show_border</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_notebook_set_show_tabs</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_notebook_set_scrollable</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_notebook_set_tab_border</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tabline_tooltip</name> <operator>=</operator> <call><name>gtk_tooltips_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_tooltips_enable</name><argument_list>(<argument><expr><call><name>GTK_TOOLTIPS</name><argument_list>(<argument><expr><name>tabline_tooltip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>page</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>label</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>event_box</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>gtk_box_new</name><argument_list>(<argument><expr><name>GTK_ORIENTATION_VERTICAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_set_homogeneous</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>gtk_vbox_new</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>gtk_label_new</name><argument_list>(<argument><expr><literal type="string">"-Empty-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>event_box</name> <operator>=</operator> <call><name>gtk_event_box_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_set_data</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tab_num"</literal></expr></argument>, <argument><expr><call><name>GINT_TO_POINTER</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">14</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_misc_set_padding</name><argument_list>(<argument><expr><call><name>GTK_MISC</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_container_add</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_notebook_set_tab_label</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>event_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_notebook_set_tab_reorderable</name><argument_list>(<argument><expr><call><name>GTK_NOTEBOOK</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch-page"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>on_select_tab</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">10</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"page-reordered"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>on_tab_reordered</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tabline_menu</name> <operator>=</operator> <call><name>create_tabline_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect_swapped</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"button-press-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>on_tabline_menu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>tabline_menu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name> <operator>=</operator> <call><name>gtk_form_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_container_set_border_width</name><argument_list>(<argument><expr><call><name>GTK_CONTAINER</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_widget_set_events</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>, <argument><expr><name>GDK_EXPOSURE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>=</operator> <call><name>gtk_drawing_area_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_widget_set_name</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><literal type="string">"vim-gui-drawarea"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>by_signal</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_widget_set_events</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><name>GDK_EXPOSURE_MASK</name> <operator>|</operator>

<name>GDK_ENTER_NOTIFY_MASK</name> <operator>|</operator>

<name>GDK_LEAVE_NOTIFY_MASK</name> <operator>|</operator>

<name>GDK_BUTTON_PRESS_MASK</name> <operator>|</operator>

<name>GDK_BUTTON_RELEASE_MASK</name> <operator>|</operator>

<name>GDK_SCROLL_MASK</name> <operator>|</operator>

<name>GDK_KEY_PRESS_MASK</name> <operator>|</operator>

<name>GDK_KEY_RELEASE_MASK</name> <operator>|</operator>

<name>GDK_POINTER_MOTION_MASK</name> <operator>|</operator>

<name>GDK_POINTER_MOTION_HINT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_form_put</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_box_pack_start</name><argument_list>(<argument><expr><call><name>GTK_BOX</name><argument_list>(<argument><expr><name>vbox</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"key-press-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>key_press_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"key-release-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_release_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"realize"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>drawarea_realize_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unrealize"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>drawarea_unrealize_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"configure-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>drawarea_configure_event_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_signal_connect_after</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"style-updated"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drawarea_style_updated_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>g_signal_connect_after</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"style-set"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drawarea_style_set_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>=</operator> <name>GDK_VISIBILITY_UNOBSCURED</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>wm_protocols_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><literal type="string">"WM_PROTOCOLS"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_yourself_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><literal type="string">"WM_SAVE_YOURSELF"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_set_can_focus</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vim_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>VIM_ATOM_NAME</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vimenc_atom</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name>VIMENC_ATOM_NAME</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip_star</name><operator>.</operator><name>gtk_sel_atom</name></name> <operator>=</operator> <name>GDK_SELECTION_PRIMARY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip_plus</name><operator>.</operator><name>gtk_sel_atom</name></name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><literal type="string">"CLIPBOARD"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"draw"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>draw_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"visibility_notify_event"</literal></expr></argument>,

<argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>visibility_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_signal_connect</name><argument_list>(<argument><expr><call><name>GTK_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"expose_event"</literal></expr></argument>,

<argument><expr><call><name>GTK_SIGNAL_FUNC</name><argument_list>(<argument><expr><name>expose_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_POINTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"leave-notify-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>leave_notify_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"enter-notify-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>enter_notify_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-out-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_out_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-in-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_in_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-out-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_out_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-in-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_in_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-out-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_out_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>tabline</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"focus-in-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>focus_in_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"motion-notify-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>motion_notify_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"button-press-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>button_press_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"button-release-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>button_release_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scroll-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scroll_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"selection-clear-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>selection_clear_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"selection-received"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>selection_received_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_gtk_set_selection_targets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"selection-get"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>selection_get_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkSettings</name> <modifier>*</modifier></type><name>gtk_settings</name> <init>=

<expr><call><name>gtk_settings_get_for_screen</name><argument_list>(<argument><expr><call><name>gdk_screen_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><name>gtk_settings</name></expr></argument>, <argument><expr><literal type="string">"notify::gtk-xft-dpi"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>gtk_settings_xft_dpi_changed_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GNOME_SESSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_forked</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GnomeClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>gnome_master_client</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gnome_client_set_process_id</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>GdkRGBA</name></type>

<name>color_to_rgba</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkRGBA</name></type> <name>rgba</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgba</name><operator>.</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><operator>.</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">255.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><operator>.</operator><name>alpha</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<return>return <expr><name>rgba</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_cairo_source_rgba_from_color</name><parameter_list>(<parameter><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GdkRGBA</name></type> <name>rgba</name> <init>= <expr><call><name>color_to_rgba</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_new_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>da_win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GtkStyleContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>context</name>

<init>= <expr><call><name>gtk_widget_get_style_context</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GtkCssProvider</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>provider</name> <init>= <expr><call><name>gtk_css_provider_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gchar</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>css</name> <init>= <expr><call><name>g_strdup_printf</name><argument_list>(

<argument><expr><literal type="string">"widget#vim-gui-drawarea {\n"</literal>

<literal type="string">" background-color: #%.2lx%.2lx%.2lx;\n"</literal>

<literal type="string">"}\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_css_provider_load_from_data</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>css</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_style_context_add_provider</name><argument_list>(<argument><expr><name>context</name></expr></argument>,

<argument><expr><call><name>GTK_STYLE_PROVIDER</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>G_MAXUINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif> 

<decl_stmt><decl><type><name>GdkRGBA</name></type> <name>rgba</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rgba</name> <operator>=</operator> <call><name>color_to_rgba</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_pattern_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pat</name> <init>= <expr><call><name>cairo_pattern_create_rgba</name><argument_list>(

<argument><expr><name><name>rgba</name><operator>.</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>blue</name></name></expr></argument>, <argument><expr><name><name>rgba</name><operator>.</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gdk_window_set_background_pattern</name><argument_list>(<argument><expr><name>da_win</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_pattern_destroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_set_background_rgba</name><argument_list>(<argument><expr><name>da_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_window_set_background</name><argument_list>(<argument><expr><name>da_win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>gint</name></type>

<name>form_configure_event</name><parameter_list>(<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier><name>widget</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>GdkEventConfigure</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>usable_height</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>window</name></name> <operator>!=</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>usable_height</name> <operator>-=</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>gtk_form_freeze</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>usable_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_form_thaw</name><argument_list>(<argument><expr><call><name>GTK_FORM</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mainwin_destroy_cb</name><parameter_list>(<parameter><decl><type><name>GObject</name> <modifier>*</modifier><name>object</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>full_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim: Main window unexpectedly destroyed\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_gtk_unregister_resource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>check_startup_plug_hints</name><parameter_list>(<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>init_window_hints_state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>init_window_hints_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>init_window_hints_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>fg_pixel</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>bg_pixel</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>pixel_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>pixel_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>role_argument</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_set_role</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>role_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>role</name></decl>;</decl_stmt>

<expr_stmt><expr><name>role</name> <operator>=</operator> <call><name>g_strdup_printf</name><argument_list>(<argument><expr><literal type="string">"vim-%u-%u-%u"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>mch_get_pid</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>g_random_int</name><argument_list>()</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_set_role</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_win_x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>gui_win_y</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_window_move</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gui_win_x</name></expr></argument>, <argument><expr><name>gui_win_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>geom</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>XParseGeometry</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>geom</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>WidthValue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HeightValue</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_width</name> <operator>=</operator> <operator>(</operator><name>guint</name><operator>)</operator><operator>(</operator><call><name>gui_get_base_width</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_height</name> <operator>=</operator> <operator>(</operator><name>guint</name><operator>)</operator><operator>(</operator><call><name>gui_get_base_height</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_width</name> <operator>+=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_height</name> <operator>+=</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>XValue</name> <operator>|</operator> <name>YValue</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ww</name></decl>, <decl><type ref="prev"/><name>hh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_mch_get_screen_dimensions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ww</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hh</name> <operator>+=</operator> <name>p_ghr</name> <operator>+</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ww</name> <operator>+=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>XNegative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>ww</name> <operator>-</operator> <name>pixel_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>YNegative</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>hh</name> <operator>-</operator> <name>pixel_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_window_move</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>geom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>WidthValue</name> <operator>||</operator> <name>mask</name> <operator>&amp;</operator> <name>HeightValue</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><name>pixel_width</name></expr></argument>, <argument><expr><name>pixel_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>init_window_hints_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timeout_add</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>check_startup_plug_hints</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixel_width</name> <operator>=</operator> <operator>(</operator><name>guint</name><operator>)</operator><operator>(</operator><call><name>gui_get_base_width</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_height</name> <operator>=</operator> <operator>(</operator><name>guint</name><operator>)</operator><operator>(</operator><call><name>gui_get_base_height</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_window_resize</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pixel_width</name></expr></argument>, <argument><expr><name>pixel_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>foreground_argument</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_pixel</name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>foreground_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fg_pixel</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fg_pixel</name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Black"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>background_argument</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bg_pixel</name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>background_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bg_pixel</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bg_pixel</name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"White"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_reverse_arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name>bg_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name>fg_pixel</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name>fg_pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name>bg_pixel</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_check_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"destroy"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>mainwin_destroy_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>formwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"configure-event"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>form_configure_event</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_gtk_set_dnd_targets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_signal_connect</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"drag-data-received"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><name>drag_data_received_cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>found_iconic_arg</name> <operator>&amp;&amp;</operator> <name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_iconify</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>menu_handler</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tool_handler</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>using_gnome</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_MENUS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu_handler</name> <operator>=</operator> <call><name>g_signal_connect_after</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar_h</name></name></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gtk_widget_hide</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>toolbar_flags</name> <operator>&amp;</operator> <operator>(</operator><name>TOOLBAR_TEXT</name> <operator>|</operator> <name>TOOLBAR_ICONS</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tool_handler</name> <operator>=</operator> <call><name>g_signal_connect_after</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_h</name></name></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument>,

<argument><expr><call><name>G_CALLBACK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gtk_widget_hide</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>menu_handler</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_signal_handler_disconnect</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>menubar_h</name></name></expr></argument>, <argument><expr><name>menu_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tool_handler</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_signal_handler_disconnect</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_h</name></name></expr></argument>, <argument><expr><name>tool_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name> <name>rc</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_get_position</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_move</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int resize_idle_installed = FALSE;

static gboolean

force_shell_resize_idle(gpointer data)

{

if (gui.mainwin != NULL

&amp;&amp; GTK_WIDGET_REALIZED(gui.mainwin)

&amp;&amp; GTK_WIDGET_VISIBLE(gui.mainwin))

{

int width;

int height;

gtk_window_get_size(GTK_WINDOW(gui.mainwin), &amp;width, &amp;height);

width -= get_menu_tool_width();

height -= get_menu_tool_height();

gui_resize_shell(width, height);

}

resize_idle_installed = FALSE;

return FALSE; 

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>gui_mch_maximized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>gdk_window_get_state</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;</operator> <name>GDK_WINDOW_STATE_MAXIMIZED</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_unmaximize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_window_unmaximize</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_newfont</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gtk_window_get_size</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>-=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>-=</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_shellsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>min_width</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>min_height</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>base_width</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>base_height</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>direction</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gtk_socket_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_window_resize</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!resize_idle_installed)

{

g_idle_add_full(GDK_PRIORITY_EVENTS + 10,

&amp;force_shell_resize_idle, NULL, NULL);

resize_idle_installed = TRUE;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_gtk_get_screen_geom_of_win</name><parameter_list>(

<parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>wid</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_x</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_y</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkRectangle</name></type> <name>geometry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GdkDisplay</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>gtk_widget_get_display</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkMonitor</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>gdk_display_get_monitor_at_window</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gdk_monitor_get_geometry</name><argument_list>(<argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkScreen</name><modifier>*</modifier></type> <name>screen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>monitor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wid</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_has_screen</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>gtk_widget_get_screen</name><argument_list>(<argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>screen</name> <operator>=</operator> <call><name>gdk_screen_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>monitor</name> <operator>=</operator> <call><name>gdk_screen_get_monitor_at_window</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_screen_get_monitor_geometry</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>geometry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>screen_x</name> <operator>=</operator> <name><name>geometry</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_y</name> <operator>=</operator> <name><name>geometry</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <name><name>geometry</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height</name> <operator>=</operator> <name><name>geometry</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_get_screen_dimensions</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_gtk_get_screen_geom_of_win</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>screen_w</name></expr></argument>, <argument><expr><name>screen_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>-=</operator> <name>p_ghr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_w</name> <operator>-=</operator> <call><name>get_menu_tool_width</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>-=</operator> <call><name>get_menu_tool_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_settitle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>icon</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_window_set_title</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>widget</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menubar_h</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>widget</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>menubar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><call><name>gtk_widget_get_visible</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>starting</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_show_toolbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>widget</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>using_gnome</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>widget</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>toolbar_h</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>widget</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_toolbar_style</name><argument_list>(<argument><expr><call><name>GTK_TOOLBAR</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showit</name> <operator>!=</operator> <operator>!</operator><call><name>gtk_widget_get_visible</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_cjk_font</name><parameter_list>(<parameter><decl><type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>font_desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cjk_langs</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="string">"zh_CN"</literal></expr>, <expr><literal type="string">"zh_TW"</literal></expr>, <expr><literal type="string">"zh_HK"</literal></expr>, <expr><literal type="string">"ja"</literal></expr>, <expr><literal type="string">"ko"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoFont</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_cjk</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>pango_context_load_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>is_cjk</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>G_N_ELEMENTS</name><argument_list>(<argument><expr><name>cjk_langs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoCoverage</name> <modifier>*</modifier></type><name>coverage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gunichar</name></type> <name>uc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>coverage</name> <operator>=</operator> <call><name>pango_font_get_coverage</name><argument_list>(

<argument><expr><name>font</name></expr></argument>, <argument><expr><call><name>pango_language_from_string</name><argument_list>(<argument><expr><name><name>cjk_langs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coverage</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cjk_langs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'k'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xAC00</literal></expr> </then><else>: <expr><literal type="number">0x4E00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>is_cjk</name> <operator>=</operator> <operator>(</operator><call><name>pango_coverage_get</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>, <argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PANGO_COVERAGE_EXACT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_coverage_unref</name><argument_list>(<argument><expr><name>coverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>is_cjk</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_adjust_charheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoFontMetrics</name> <modifier>*</modifier></type><name>metrics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ascent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>descent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>metrics</name> <operator>=</operator> <call><name>pango_context_get_metrics</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>,

<argument><expr><call><name>pango_context_get_language</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ascent</name> <operator>=</operator> <call><name>pango_font_metrics_get_ascent</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>descent</name> <operator>=</operator> <call><name>pango_font_metrics_get_descent</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_font_metrics_unref</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <operator>(</operator><name>ascent</name> <operator>+</operator> <name>descent</name> <operator>+</operator> <name>PANGO_SCALE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>PANGO_SCALE</name>

<operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <call><name>PANGO_PIXELS</name><argument_list>(<argument><expr><name>ascent</name> <operator>+</operator> <name>p_linespace</name> <operator>*</operator> <name>PANGO_SCALE</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>gboolean</name></type>

<name>font_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PangoFontFamily</name> <modifier>*</modifier></type><name>family</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>PangoFontFace</name> <modifier>*</modifier><name>face</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>pango_font_family_is_monospace</name><argument_list>(<argument><expr><operator>(</operator><name>PangoFontFamily</name> <operator>*</operator><operator>)</operator><name>family</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_font_dialog</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>response</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fontname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>oldname</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>gtk_font_chooser_dialog_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_font_chooser_set_filter_func</name><argument_list>(<argument><expr><call><name>GTK_FONT_CHOOSER</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>font_filter</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>gtk_font_selection_dialog_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gtk_window_set_transient_for</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_window_set_destroy_with_parent</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldval</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>oldval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldname</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>oldname</name> <operator>=</operator> <name>oldval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>oldname</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_strnsave</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldname</name> <operator>!=</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_font_chooser_set_font</name><argument_list>(

<argument><expr><call><name>GTK_FONT_CHOOSER</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>gchar</name> <operator>*</operator><operator>)</operator><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_font_selection_dialog_set_font_name</name><argument_list>(

<argument><expr><call><name>GTK_FONT_SELECTION_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>oldname</name> <operator>!=</operator> <name>oldval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>oldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gtk_font_chooser_set_font</name><argument_list>(

<argument><expr><call><name>GTK_FONT_CHOOSER</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gtk_font_selection_dialog_set_font_name</name><argument_list>(

<argument><expr><call><name>GTK_FONT_SELECTION_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>gtk_dialog_run</name><argument_list>(<argument><expr><call><name>GTK_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>response</name> <operator>==</operator> <name>GTK_RESPONSE_OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">2</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>gtk_font_chooser_get_font</name><argument_list>(<argument><expr><call><name>GTK_FONT_CHOOSER</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>gtk_font_selection_dialog_get_font_name</name><argument_list>(

<argument><expr><call><name>GTK_FONT_SELECTION_DIALOG</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fontname</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fontname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>response</name> <operator>!=</operator> <name>GTK_RESPONSE_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_destroy</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fontname</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_styled_font_variants</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>bold_font_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoFont</name> <modifier>*</modifier></type><name>plain_font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoFont</name> <modifier>*</modifier></type><name>bold_font</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>font_can_bold</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plain_font</name> <operator>=</operator> <call><name>pango_context_load_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>plain_font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bold_font_desc</name> <operator>=</operator> <call><name>pango_font_description_copy_static</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_font_description_set_weight</name><argument_list>(<argument><expr><name>bold_font_desc</name></expr></argument>, <argument><expr><name>PANGO_WEIGHT_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bold_font</name> <operator>=</operator> <call><name>pango_context_load_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>bold_font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bold_font</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>font_can_bold</name></name> <operator>=</operator> <operator>(</operator><name>bold_font</name> <operator>!=</operator> <name>plain_font</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>bold_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pango_font_description_free</name><argument_list>(<argument><expr><name>bold_font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>plain_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>PangoEngineShape</name> <modifier>*</modifier></type><name>default_shape_engine</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ascii_glyph_table_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>ascii_chars</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>item_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pango_glyph_string_free</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ascii_chars</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ascii_chars</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ascii_chars</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <call><name>pango_attr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item_list</name> <operator>=</operator> <call><name>pango_itemize</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ascii_chars</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ascii_chars</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item_list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>item_list</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>PangoItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>PangoItem</name> <operator>*</operator><operator>)</operator><name><name>item_list</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>default_shape_engine</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>shape_engine</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_object_ref</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>=</operator> <call><name>pango_glyph_string_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_shape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ascii_chars</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ascii_chars</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>analysis</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_return_if_fail</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ascii_chars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gui</name><operator>.</operator><name>ascii_glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoGlyphGeometry</name> <modifier>*</modifier></type><name>geom</name></decl>;</decl_stmt>

<expr_stmt><expr><name>geom</name> <operator>=</operator> <operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>ascii_glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>geometry</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geom</name><operator>-&gt;</operator><name>x_offset</name></name> <operator>+=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name><name>geom</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>geom</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_list_foreach</name><argument_list>(<argument><expr><name>item_list</name></expr></argument>, <argument><expr><operator>(</operator><name>GFunc</name><operator>)</operator><operator>&amp;</operator><name>pango_item_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_list_free</name><argument_list>(<argument><expr><name>item_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_attr_list_unref</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>fontset</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>font_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoLayout</name> <modifier>*</modifier></type><name>layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DEFAULT_FONT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font_desc</name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>font_desc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_context_set_font_description</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>font_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>pango_layout_new</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_layout_set_text</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="string">"MW"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_layout_get_size</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_cjk_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cjk_width</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pango_layout_set_text</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="string">"\344\270\200\344\272\214"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_layout_get_size</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cjk_width</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <name>cjk_width</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>PANGO_SCALE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_adjust_charheight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hl_set_font_name</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_styled_font_variants</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ascii_glyph_table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>pango_font_description_equal</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pango_font_description_free</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_mch_maximized</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_newfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GuiFont</name></type>

<name>gui_mch_get_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>report_error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoFontDescription</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>pango_font_description_from_string</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>pango_font_description_from_string</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoFont</name> <modifier>*</modifier></type><name>real_font</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pango_font_description_get_size</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pango_font_description_set_size</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>PANGO_SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>real_font</name> <operator>=</operator> <call><name>pango_context_load_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>real_font</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>pango_font_description_free</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>real_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>report_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_font</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_get_fontname</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>name</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pangoname</name> <init>= <expr><call><name>pango_font_description_to_string</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pangoname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>pangoname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>pangoname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_free_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pango_font_description_free</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>color</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>color</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>color</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_mch_get_rgb_color</name><argument_list>(

<argument><expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>,

<argument><expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>color</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkColor</name></type> <name>gcolor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gcolor</name><operator>.</operator><name>red</name></name> <operator>=</operator> <operator>(</operator><name>guint16</name><operator>)</operator><operator>(</operator><name>r</name> <operator>/</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">65535</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gcolor</name><operator>.</operator><name>green</name></name> <operator>=</operator> <operator>(</operator><name>guint16</name><operator>)</operator><operator>(</operator><name>g</name> <operator>/</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">65535</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gcolor</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <operator>(</operator><name>guint16</name><operator>)</operator><operator>(</operator><name>b</name> <operator>/</operator> <literal type="number">255.0</literal> <operator>*</operator> <literal type="number">65535</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gdk_colormap_alloc_color</name><argument_list>(<argument><expr><call><name>gtk_widget_get_colormap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gcolor</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><name><name>gcolor</name><operator>.</operator><name>pixel</name></name></expr> </then><else>: <expr><name>INVALCOLOR</name></expr></else></ternary></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_fg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name><name>gui</name><operator>.</operator><name>fgcolor</name></name> <operator>=</operator> <call><name>color_to_rgba</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>pixel</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>color</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_bg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name><name>gui</name><operator>.</operator><name>bgcolor</name></name> <operator>=</operator> <call><name>color_to_rgba</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>pixel</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>color</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_sp_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name><name>gui</name><operator>.</operator><name>spcolor</name></name> <operator>=</operator> <call><name>color_to_rgba</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>pixel</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>color</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_PANGO_ATTR</name><parameter_list>(<parameter><type><name>Attribute</name></type></parameter>, <parameter><type><name>AttrList</name></type></parameter>, <parameter><type><name>Start</name></type></parameter>, <parameter><type><name>End</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>G_STMT_START{ PangoAttribute *tmp_attr_; tmp_attr_ = (Attribute); tmp_attr_-&gt;start_index = (Start); tmp_attr_-&gt;end_index = (End); pango_attr_list_insert((AttrList), tmp_attr_); }G_STMT_END</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>apply_wide_font_attr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uc</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>utf_byte2len</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal> 

<operator>||</operator> <operator>(</operator><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>INSERT_PANGO_ATTR</name><argument_list>(<argument><expr><call><name>pango_attr_font_desc_new</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>start</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INSERT_PANGO_ATTR</name><argument_list>(<argument><expr><call><name>pango_attr_font_desc_new</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>start</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>count_cluster_cells</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PangoItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>PangoGlyphString</name><modifier>*</modifier></type> <name>glyphs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cluster_width</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>last_glyph_rbearing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>uc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cellcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><name><name>attr</name><operator>.</operator><name>is_cluster_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>log_clusters</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>next</name> <operator>&lt;</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>glyphs</name><operator>-&gt;</operator><name>log_clusters</name><index>[<expr><name>next</name></expr>]</index></name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>length</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>start</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>utf_byte2len</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>cellcount</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cellcount</name> <operator>+=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_glyph_rbearing</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>cellcount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoRectangle</name></type> <name>ink_rect</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pango_font_get_glyph_extents</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>font</name></name></expr></argument>,

<argument><expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>glyph</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ink_rect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PANGO_RBEARING</name><argument_list>(<argument><expr><name>ink_rect</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>last_glyph_rbearing</name> <operator>=</operator> <call><name>PANGO_RBEARING</name><argument_list>(<argument><expr><name>ink_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cellcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cluster_width</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cellcount</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>setup_zero_width_cluster</name><parameter_list>(<parameter><decl><type><name>PangoItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>PangoGlyphInfo</name> <modifier>*</modifier></type><name>glyph</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>last_cellcount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last_cluster_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>last_glyph_rbearing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoRectangle</name></type> <name>ink_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PangoRectangle</name></type> <name>logical_rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>last_cellcount</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>+</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>last_cluster_width</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_font_get_glyph_extents</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>font</name></name></expr></argument>,

<argument><expr><name><name>glyph</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ink_rect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logical_rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ink_rect</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>+=</operator> <name>last_glyph_rbearing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>y_offset</name></name> <operator>=</operator> <name><name>logical_rect</name><operator>.</operator><name>height</name></name>

<operator>-</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>p_linespace</name><operator>)</operator> <operator>*</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>+</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name><name>ink_rect</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>draw_glyph_string</name><argument_list>(<argument><expr><name>int</name> <name>row</name></expr></argument>, <argument><expr><name>int</name> <name>col</name></expr></argument>, <argument><expr><name>int</name> <name>num_cells</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>,

<argument><expr><name>PangoFont</name> <operator>*</operator><name>font</name></expr></argument>, <argument><expr><name>PangoGlyphString</name> <operator>*</operator><name>glyphs</name></expr></argument>,

<argument><expr><name>cairo_t</name> <operator>*</operator><name>cr</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>void</name>

<name>draw_glyph_string</name><argument_list>(<argument><expr><name>int</name> <name>row</name></expr></argument>, <argument><expr><name>int</name> <name>col</name></expr></argument>, <argument><expr><name>int</name> <name>num_cells</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>,

<argument><expr><name>PangoFont</name> <operator>*</operator><name>font</name></expr></argument>, <argument><expr><name>PangoGlyphString</name> <operator>*</operator><name>glyphs</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>num_cells</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>num_cells</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_move_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_cairo_show_glyph_string</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_glyphs</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>font</name></expr></argument>,

<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>font_can_bold</name></name></expr>)</condition>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_move_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pango_cairo_show_glyph_string</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_draw_glyphs</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>font</name></expr></argument>,

<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>

<name>draw_under</name><argument_list>(<argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>int</name> <name>row</name></expr></argument>, <argument><expr><name>int</name> <name>col</name></expr></argument>, <argument><expr><name>int</name> <name>cells</name></expr></argument>, <argument><expr><name>cairo_t</name> <operator>*</operator><name>cr</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

static <name>void</name>

<name>draw_under</name><argument_list>(<argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>int</name> <name>row</name></expr></argument>, <argument><expr><name>int</name> <name>col</name></expr></argument>, <argument><expr><name>int</name> <name>cells</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERC</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_line_width</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_line_cap</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>CAIRO_LINE_CAP_BUTT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_line_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>cairo_stroke</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_point</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_STRIKE</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_line_width</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_line_cap</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>CAIRO_LINE_CAP_BUTT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_move_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_line_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_stroke</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>spcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_line</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_linespace</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>p_linespace</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_line_width</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_line_cap</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>CAIRO_LINE_CAP_BUTT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_move_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_line_to</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_stroke</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_draw_line</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type>

<name>gui_gtk2_draw_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkRectangle</name></type> <name>area</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>PangoGlyphString</name> <modifier>*</modifier></type><name>glyphs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>column_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>conv_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_conv_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>convlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>text_context</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>convlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>conv_buf</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>convlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>g_return_val_if_fail</name><argument_list>(<argument><expr><name>conv_buf</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>s</name></expr><operator>,</operator> <expr><name>bp</name> <operator>=</operator> <name>conv_buf</name></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>bp</name> <operator>&lt;</operator> <name>conv_buf</name> <operator>+</operator> <name>convlen</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>new_conv_buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>convlen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_conv_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>+=</operator> <name>bp</name> <operator>-</operator> <name>conv_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_conv_buf</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_conv_buf</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>new_conv_buf</name> <operator>+</operator> <name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>conv_buf</name> <operator>+</operator> <name>plen</name></expr></argument>,

<argument><expr><name>convlen</name> <operator>-</operator> <name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>conv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>conv_buf</name> <operator>=</operator> <name>new_conv_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>convlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>conv_buf</name> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sp</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>plen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>conv_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>convlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>area</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>area</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_clip</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_clip_origin</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_clip_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>glyphs</name> <operator>=</operator> <call><name>pango_glyph_string_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_ITALIC</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>font_can_bold</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>ascii_glyphs</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_ascii</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pango_glyph_string_set_size</name><argument_list>(<argument><expr><name>glyphs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>ascii_glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyphs</name><operator>-&gt;</operator><name>log_clusters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>draw_glyph_string</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>draw_glyph_string</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>ascii_font</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>column_offset</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<label><name>not_ascii</name>:</label>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoAttrList</name> <modifier>*</modifier></type><name>attr_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>item_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cluster_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_glyph_rbearing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_valid_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>column_offset</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<goto>goto <name>skipitall</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cluster_width</name> <operator>=</operator> <name>PANGO_SCALE</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_glyph_rbearing</name> <operator>=</operator> <name>PANGO_SCALE</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_list</name> <operator>=</operator> <call><name>pango_attr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_wide_font_attr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>font_can_bold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INSERT_PANGO_ATTR</name><argument_list>(<argument><expr><call><name>pango_attr_weight_new</name><argument_list>(<argument><expr><name>PANGO_WEIGHT_BOLD</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_ITALIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INSERT_PANGO_ATTR</name><argument_list>(<argument><expr><call><name>pango_attr_style_new</name><argument_list>(<argument><expr><name>PANGO_STYLE_ITALIC</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item_list</name> <operator>=</operator> <call><name>pango_itemize</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_context</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>item_list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>item_cells</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>PangoItem</name> <operator>*</operator><operator>)</operator><name><name>item_list</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>item_list</name> <operator>=</operator> <call><name>g_list_delete_link</name><argument_list>(<argument><expr><name>item_list</name></expr></argument>, <argument><expr><name>item_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>level</name></name> <operator>=</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">1U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>shape_engine</name></name> <operator>=</operator> <name>default_shape_engine</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PANGO_SHAPE_FULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>pango_shape_full</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>analysis</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>pango_shape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>+</operator> <name><name>item</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>length</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>analysis</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>glyphs</name><operator>-&gt;</operator><name>num_glyphs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>PangoGlyphInfo</name> <modifier>*</modifier></type><name>glyph</name></decl>;</decl_stmt>

<expr_stmt><expr><name>glyph</name> <operator>=</operator> <operator>&amp;</operator><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>attr</name><operator>.</operator><name>is_cluster_start</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cellcount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cellcount</name> <operator>=</operator> <call><name>count_cluster_cells</name><argument_list>(

<argument><expr><name>s</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cluster_width</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>item_list</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>last_glyph_rbearing</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cellcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>cellcount</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>+=</operator>

<call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>cluster_width</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>setup_zero_width_cluster</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>glyph</name></expr></argument>, <argument><expr><name>cells</name></expr></argument>,

<argument><expr><name>cluster_width</name></expr></argument>,

<argument><expr><name>last_glyph_rbearing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>item_cells</name> <operator>+=</operator> <name>cellcount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <name>cellcount</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name> <operator>=</operator>

<name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyphs</name><operator>-&gt;</operator><name>glyphs</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>geometry</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>cells</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>PANGO_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>x_offset</name></name> <operator>+=</operator>

<call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>cluster_width</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>glyph</name><operator>-&gt;</operator><name>geometry</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>draw_glyph_string</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>column_offset</name></expr></argument>, <argument><expr><name>item_cells</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>,

<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>draw_glyph_string</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>column_offset</name></expr></argument>, <argument><expr><name>item_cells</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>analysis</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pango_item_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>column_offset</name> <operator>+=</operator> <name>item_cells</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pango_attr_list_unref</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></block_content></block></else></if_stmt>

<label><name>skipitall</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>draw_under</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>column_offset</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>draw_under</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>column_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>pango_glyph_string_free</name><argument_list>(<argument><expr><name>glyphs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>conv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_invalidate_rect</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>area</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_clip_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>column_offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_haskey</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code0</name>

<operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>code1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>gui_get_x11_windis</name><parameter_list>(<parameter><decl><type><name>Window</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier><modifier>*</modifier></type><name>dis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dis</name> <operator>=</operator> <call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dis</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Display</name> <modifier>*</modifier></type>

<name>gui_mch_get_display</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_beep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkDisplay</name> <modifier>*</modifier></type><name>display</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_realized</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>gtk_widget_get_display</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>gdk_display_get_default</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>display</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_display_beep</name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>msec</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkGCValues</name></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkGC</name> <modifier>*</modifier></type><name>invert_gc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>foreground</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>background</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GDK_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>invert_gc</name> <operator>=</operator> <call><name>gdk_gc_new_with_values</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>,

<argument><expr><name>GDK_GC_FOREGROUND</name> <operator>|</operator>

<name>GDK_GC_BACKGROUND</name> <operator>|</operator>

<name>GDK_GC_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_exposures</name><argument_list>(<argument><expr><name>invert_gc</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator> <name>GDK_VISIBILITY_UNOBSCURED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>invert_gc</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>msec</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>invert_gc</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_destroy</name><argument_list>(<argument><expr><name>invert_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_invert_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>GdkRectangle</name></type> <name>rect</name> <init>= <expr><block>{

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>, <expr><name>nc</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>, <expr><name>nr</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cr</name> <init>= <expr><call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_cairo_source_rgba_from_color</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CAIRO_VERSION</name> <operator>&gt;=</operator> <call><name>CAIRO_VERSION_ENCODE</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_operator</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>CAIRO_OPERATOR_DIFFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gdk_cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_queue_draw_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>rect</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rect</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkGCValues</name></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkGC</name> <modifier>*</modifier></type><name>invert_gc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>foreground</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>background</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GDK_XOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>invert_gc</name> <operator>=</operator> <call><name>gdk_gc_new_with_values</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>,

<argument><expr><name>GDK_GC_FOREGROUND</name> <operator>|</operator>

<name>GDK_GC_BACKGROUND</name> <operator>|</operator>

<name>GDK_GC_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_exposures</name><argument_list>(<argument><expr><name>invert_gc</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator>

<name>GDK_VISIBILITY_UNOBSCURED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>invert_gc</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>nc</name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>nr</name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_destroy</name><argument_list>(<argument><expr><name>invert_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_iconify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_iconify</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_window_present</name><argument_list>(<argument><expr><call><name>GTK_WINDOW</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_draw_hollow_cursor</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>mb_lefthalve</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>cairo_set_line_width</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_line_cap</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>CAIRO_LINE_CAP_BUTT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>,

<argument><expr><name>i</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_stroke</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>i</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_part_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>CURSOR_BAR_RIGHT</name></expr> ?</condition><then> <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>CURSOR_BAR_RIGHT</name></expr> ?</condition><then> <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>g_main_context_pending</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_is_input_buf_full</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_main_context_iteration</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>input_timer_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>timed_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>timeout_cb_type</name></type>

<name>channel_poll_cb</name><parameter_list>(<parameter><decl><type><name>gpointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>channel_handle_events</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return> 

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>guint</name></type> <name>timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timed_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>guint</name></type> <name>channel_timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><ternary><condition><expr><name>wtime</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><name>wtime</name></expr></else></ternary></expr></argument>,

<argument><expr><name>input_timer_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>channel_any_keep_open</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel_timer</name> <operator>=</operator> <call><name>timeout_add</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>channel_poll_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>!=</operator> <name>focus</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_add_timer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_add_timer</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_main_context_iteration</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>wtime</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>timed_out</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>timed_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>channel_timer</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timeout_remove</name><argument_list>(<argument><expr><name>channel_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>gtk_widget_get_realized</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gdk_display_flush</name><argument_list>(<argument><expr><call><name>gtk_widget_get_display</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_display_sync</name><argument_list>(<argument><expr><call><name>gtk_widget_get_display</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_block</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row1arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col1arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row2arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col2arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col1</name> <init>= <expr><call><name>check_col</name><argument_list>(<argument><expr><name>col1arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col2</name> <init>= <expr><call><name>check_col</name><argument_list>(<argument><expr><name>col2arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row1</name> <init>= <expr><call><name>check_row</name><argument_list>(<argument><expr><name>row1arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row2</name> <init>= <expr><call><name>check_row</name><argument_list>(<argument><expr><name>row2arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GdkRectangle</name></type> <name>rect</name> <init>= <expr><block>{

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>(</operator><name>col2</name> <operator>-</operator> <name>col1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>,

<expr><operator>(</operator><name>row2</name> <operator>-</operator> <name>row1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>win</name> <init>= <expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cr</name> <init>= <expr><call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_cairo_source_rgba_from_color</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>cairo_pattern_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pat</name> <init>= <expr><call><name>gdk_window_get_background_pattern</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cairo_set_source</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_cairo_source_rgba_from_color</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gdk_cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_invalidate_rect</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>col2</name> <operator>-</operator> <name>col1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name>

<operator>+</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>row2</name> <operator>-</operator> <name>row1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_gtk_window_clear</name><parameter_list>(<parameter><decl><type><name>GdkWindow</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>GdkRectangle</name></type> <name>rect</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><call><name>gdk_window_get_width</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>, <macro><name>gdk_window_get_height</name><argument_list>(<argument>win</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cr</name> <init>= <expr><call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">22</literal><operator>,</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>set_cairo_source_rgba_from_color</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>cairo_pattern_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pat</name> <init>= <expr><call><name>gdk_window_get_background_pattern</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cairo_set_source</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_cairo_source_rgba_from_color</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gdk_cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_fill</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_invalidate_rect</name><argument_list>(<argument><expr><name>win</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rect</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gui_gtk_window_clear</name><parameter_list>(<parameter><type><name>win</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gdk_window_clear(win)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_clear_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_gtk_window_clear</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_copy_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkEvent</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expose_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator> <name>GDK_VISIBILITY_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_dont_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>gdk_event_get_graphics_expose</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>expose</name><operator>.</operator><name>area</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>expose</name><operator>.</operator><name>area</name><operator>.</operator><name>y</name></name></expr></argument>,

<argument><expr><name><name>event</name><operator>-&gt;</operator><name>expose</name><operator>.</operator><name>area</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>expose</name><operator>.</operator><name>area</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expose_count</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>expose</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_event_free</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>expose_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do> 

<expr_stmt><expr><call><name>gui_can_update_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_gtk_surface_copy_rect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dest_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dest_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cr</name> <init>= <expr><call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cairo_rectangle</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>dest_x</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_clip</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_push_group</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_surface</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>, <argument><expr><name>dest_x</name> <operator>-</operator> <name>src_x</name></expr></argument>, <argument><expr><name>dest_y</name> <operator>-</operator> <name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_pop_group_to_source</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ncols</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nrows</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_nrows</name> <init>= <expr><name>nrows</name> <operator>-</operator> <name>num_lines</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_gtk_surface_copy_rect</name><argument_list>(

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>src_nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_gtk3_redraw</name><argument_list>(

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_queue_draw_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>==</operator> <name>GDK_VISIBILITY_FULLY_OBSCURED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_background</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_window_copy_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name>

<operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_copy_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ncols</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nrows</name> <init>= <expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>src_nrows</name> <init>= <expr><name>nrows</name> <operator>-</operator> <name>num_lines</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_gtk_surface_copy_rect</name><argument_list>(

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>src_nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_clear_block</name><argument_list>(

<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_gtk3_redraw</name><argument_list>(

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_queue_draw_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>ncols</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>==</operator> <name>GDK_VISIBILITY_FULLY_OBSCURED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>fgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_gc_set_background</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_window_copy_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name>

<operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_copy_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkAtom</name></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>start</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_SELECTION_TARGETS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clip_html</name> <operator>&amp;&amp;</operator> <name><name>selection_targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>==</operator> <name>TARGET_HTML</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>received_selection</name> <operator>=</operator> <name>RS_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>gdk_atom_intern</name><argument_list>(<argument><expr><name><name>selection_targets</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>target</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gtk_selection_convert</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>gtk_sel_atom</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>,

<argument><expr><operator>(</operator><name>guint32</name><operator>)</operator><name>GDK_CURRENT_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>received_selection</name> <operator>==</operator> <name>RS_NONE</name> <operator>&amp;&amp;</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_main_context_iteration</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while> 

<if_stmt><if>if <condition>(<expr><name>received_selection</name> <operator>!=</operator> <name>RS_FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yank_cut_buffer0</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>mainwin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_selection_clear_event</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_selection_owner_set</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>gtk_sel_atom</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>clip_mch_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>success</name></decl>;</decl_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>gtk_selection_owner_set</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>gtk_sel_atom</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>event_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>success</name><operator>)</operator></expr> ?</condition><then> <expr><name>OK</name></expr> </then><else>: <expr><name>FAIL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier><name>cbd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>clip_gtk_owner_exists</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gdk_selection_owner_get</name><argument_list>(<argument><expr><name><name>cbd</name><operator>-&gt;</operator><name>gtk_sel_atom</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_menu_grey</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>grey</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_menu_hidden</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gtk_widget_get_sensitive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>!</operator><name>grey</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_widget_set_sensitive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>!</operator><name>grey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_menu_hidden</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hidden</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_visible</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_widget_hide</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gtk_widget_get_visible</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gtk_widget_show</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_menubar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_enable_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gtk_widget_set_visible</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_window_manager_hints</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><operator>(</operator><name>long_u</name><operator>)</operator><name>pixel</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>GdkColor</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gdk_colormap_query_color</name><argument_list>(<argument><expr><call><name>gtk_widget_get_colormap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>pixel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><operator>(</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>color</name><operator>.</operator><name>red</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>color</name><operator>.</operator><name>green</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>color</name><operator>.</operator><name>blue</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_getmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_gtk_get_pointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(<argument><expr><call><name>GDK_WINDOW_XDISPLAY</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>Window</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GDK_WINDOW_XID</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_mousehide</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hide</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>!=</operator> <name>hide</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>=</operator> <name>hide</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hide</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_set_mouse_shape</name><argument_list>(<argument><expr><name>last_shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mshape_ids</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>GDK_LEFT_PTR</name></expr>, 

<expr><name>GDK_CURSOR_IS_PIXMAP</name></expr>, 

<expr><name>GDK_XTERM</name></expr>, 

<expr><name>GDK_SB_V_DOUBLE_ARROW</name></expr>, 

<expr><name>GDK_SIZING</name></expr>, 

<expr><name>GDK_SB_H_DOUBLE_ARROW</name></expr>, 

<expr><name>GDK_SIZING</name></expr>, 

<expr><name>GDK_WATCH</name></expr>, 

<expr><name>GDK_X_CURSOR</name></expr>, 

<expr><name>GDK_CROSSHAIR</name></expr>, 

<expr><name>GDK_HAND1</name></expr>, 

<expr><name>GDK_HAND2</name></expr>, 

<expr><name>GDK_PENCIL</name></expr>, 

<expr><name>GDK_QUESTION_ARROW</name></expr>, 

<expr><name>GDK_RIGHT_PTR</name></expr>, 

<expr><name>GDK_CENTER_PTR</name></expr>, 

<expr><name>GDK_LEFT_PTR</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>mch_set_mouse_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkCursor</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>MSHAPE_HIDE</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>&gt;=</operator> <name>MSHAPE_NUMBERED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>shape</name> <operator>-</operator> <name>MSHAPE_NUMBERED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>GDK_LAST_CURSOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>GDK_LEFT_PTR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>shape</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>mshape_ids</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mshape_ids</name><index>[<expr><name>shape</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>gdk_cursor_new_for_display</name><argument_list>(

<argument><expr><call><name>gtk_widget_get_display</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>GdkCursorType</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_window_set_cursor</name><argument_list>(<argument><expr><call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><call><name>G_OBJECT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gdk_cursor_destroy</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>!=</operator> <name>MSHAPE_HIDE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_shape</name> <operator>=</operator> <name>shape</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_WIDTH</name></cpp:macro> <cpp:value>(2 * gui.char_width)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_HEIGHT</name></cpp:macro> <cpp:value>(gui.char_height)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_ASPECT</name></cpp:macro> <cpp:value>((double)SIGN_HEIGHT / (double)SIGN_WIDTH)</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>gui_mch_drawsign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typenr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><name>GdkPixbuf</name> <operator>*</operator><operator>)</operator><call><name>sign_get_image</name><argument_list>(<argument><expr><name>typenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>drawarea</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>gtk_widget_get_window</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_scale</name></decl>;</decl_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>gdk_pixbuf_get_width</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>gdk_pixbuf_get_height</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>need_scale</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>&gt;</operator> <name>SIGN_WIDTH</name> <operator>+</operator> <literal type="number">2</literal>

<operator>||</operator> <name>height</name> <operator>!=</operator> <name>SIGN_HEIGHT</name>

<operator>||</operator> <operator>(</operator><name>width</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>SIGN_WIDTH</name> <operator>/</operator> <literal type="number">4</literal>

<operator>&amp;&amp;</operator> <name>height</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>SIGN_HEIGHT</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_scale</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>aspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>aspect</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>height</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>SIGN_WIDTH</name> <operator>*</operator> <name>SIGN_ASPECT</name> <operator>/</operator> <name>aspect</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>SIGN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>MAX</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>MIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.15</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>SIGN_HEIGHT</name> <operator>*</operator> <name>SIGN_ASPECT</name> <operator>/</operator> <name>aspect</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>width</name> <operator>*</operator> <name>aspect</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <name>height</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_scale</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>gdk_pixbuf_scale_simple</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>GDK_INTERP_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>xoffset</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>SIGN_WIDTH</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yoffset</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>SIGN_HEIGHT</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GTK_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">0</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_surface_t</name> <modifier>*</modifier></type><name>bg_surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>bg_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_surface_t</name> <modifier>*</modifier></type><name>sign_surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>sign_cr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_surf</name> <operator>=</operator> <call><name>cairo_surface_create_similar</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>,

<argument><expr><call><name>cairo_surface_get_content</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SIGN_WIDTH</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bg_cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name>bg_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_rgba</name><argument_list>(<argument><expr><name>bg_cr</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>red</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>green</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>blue</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name><operator>-&gt;</operator><name>alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>bg_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_surf</name> <operator>=</operator> <call><name>cairo_surface_create_similar</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>,

<argument><expr><call><name>cairo_surface_get_content</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>surface</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SIGN_WIDTH</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_cr</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name>sign_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_cairo_set_source_pixbuf</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><operator>-</operator><name>xoffset</name></expr></argument>, <argument><expr><operator>-</operator><name>yoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_operator</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>, <argument><expr><name>CAIRO_OPERATOR_DEST_OVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_surface</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>, <argument><expr><name>bg_surf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_set_source_surface</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>sign_surf</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>sign_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name>sign_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>bg_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name>bg_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>by_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gtk_widget_queue_draw_area</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>gdk_gc_set_foreground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>bgcolor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_draw_rectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>SIGN_WIDTH</name></expr></argument>,

<argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gdk_pixbuf_render_to_drawable_alpha</name><argument_list>(<argument><expr><name>sign</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>drawarea</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xoffset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>yoffset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xoffset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>MIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>yoffset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>SIGN_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>SIGN_HEIGHT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>GDK_PIXBUF_ALPHA_BILEVEL</name></expr></argument>,

<argument><expr><literal type="number">127</literal></expr></argument>,

<argument><expr><name>GDK_RGB_DITHER_NORMAL</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>need_scale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>gui_mch_register_sign</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>signfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>signfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>signfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GdkPixbuf</name> <modifier>*</modifier></type><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>gdk_pixbuf_new_from_file</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>signfile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sign</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><literal type="string">"E255: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_sign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
