<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\evalfunc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USING_FLOAT_STUFF</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_abs</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_acos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_and</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_asin</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_atan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_atan2</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_balloon_gettext</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_balloon_show</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_balloon_split</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_byte2line</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>byteidx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_byteidx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_byteidxcomp</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_call</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_ceil</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_changenr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_char2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_col</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_confirm</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_copy</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_cos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_cosh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_cursor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argsvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_debugbreak</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_deepcopy</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_did_filetype</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_echoraw</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_empty</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_environ</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_escape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_eval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_eventhandler</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_execute</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_exists</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_exp</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_expand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_expandcmd</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_feedkeys</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_float2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_floor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_fmod</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_fnameescape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_foreground</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_funcref</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_function</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_garbagecollect</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_get</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getchangelist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getcharsearch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getenv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getfontname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getjumplist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getpid</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getcurpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getreg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_getregtype</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_gettagstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_haslocaldir</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_hasmapto</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_hlID</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_hlexists</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_hostname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_iconv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_index</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_input</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_inputdialog</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_inputlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_inputrestore</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_inputsave</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_inputsecret</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_interrupt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_invert</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_islocked</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_isinf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_isnan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_last_buffer_nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_len</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_libcall</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_libcallnr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_line</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_line2byte</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_log</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_log10</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_luaeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_maparg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_mapcheck</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_match</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_matchend</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_matchlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_matchstr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_matchstrpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_max</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_min</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_mzeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_nextnonblank</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_nr2char</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_or</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_perleval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_pow</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_prevnonblank</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_printf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_pum_getpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_pumvisible</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_py3eval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_pyeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_pyxeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_test_srand_seed</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_rand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_range</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_reg_executing</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_reg_recording</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_expr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_foreground</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_peek</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_read</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_send</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_remote_startserver</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_rename</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_repeat</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_round</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_rubyeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screenattr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screenchar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screenchars</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screencol</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screenrow</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_screenstring</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_search</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_searchdecl</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_searchpair</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_searchpairpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_searchpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_server2client</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_serverlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_setcharsearch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_setenv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_setfperm</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_setpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_setreg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_settagstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_sha256</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_shellescape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_shiftwidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_sin</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_sinh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_soundfold</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_spellbadword</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_spellsuggest</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_split</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_sqrt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_srand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_str2float</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_str2list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_str2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strchars</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strgetchar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_stridx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strlen</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strcharpart</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strpart</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strridx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strtrans</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strdisplaywidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_strwidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_submatch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_substitute</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_swapinfo</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_swapname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_synID</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_synIDattr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_synIDtrans</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_synstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_synconcealed</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tabpagebuflist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_taglist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tagfiles</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tanh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tolower</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_toupper</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_tr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_trim</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_trunc</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_type</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_virtcol</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_visualmode</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_wildmenumode</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_windowsversion</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_wordcount</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>f_xor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_void</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_void</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_number</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_number</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_float</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_float</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_string</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_string</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_list_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_list_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_list_number</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_list_number</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_list_string</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_list_string</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_list_dict_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_list_dict_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_dict_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_dict_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_dict_number</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_dict_number</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_dict_string</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_dict_string</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_blob</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_blob</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_func_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_func_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_partial_any</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_partial_any</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_channel</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_channel</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_job</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argcount</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>t_job</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type><name>ret_f_function</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>argtypes</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>f_min_argc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>f_max_argc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>f_argtype</name></decl>;</decl_stmt> 

<function_decl><type><name>type_T</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>f_retfunc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>argtypes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f_func</name>)<parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rvar</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>funcentry_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEARG_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEARG_2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEARG_3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEARG_4</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEARG_LAST</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATH_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATH_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMER_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOB_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOB_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROP_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROP_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUND_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUND_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>funcentry_T</name></type> <name><name>global_functions</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"abs"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_abs</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"acos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_acos</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"add"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_add</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"and"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_and</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"append"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_LAST</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_append</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"appendbufline"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_LAST</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_appendbufline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"argc"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_argc</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"argidx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_argidx</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"arglistid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_arglistid</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"argv"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_argv</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"asin"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_asin</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_beeps"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_beeps</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_equal"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_equal</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_equalfile"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_equalfile</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_exception"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_exception</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_fails"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_fails</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_false"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_false</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_inrange"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_inrange</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_match"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_match</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_notequal"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_notequal</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_notmatch"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_notmatch</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_report"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_report</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"assert_true"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_assert_true</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"atan"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_atan</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"atan2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_atan2</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_gettext"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_balloon_gettext</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_show"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_balloon_show</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_split"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>f_balloon_split</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"browse"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_browse</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"browsedir"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_browsedir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufadd"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufadd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufexists"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufexists</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"buffer_exists"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufexists</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"buffer_name"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_bufname</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"buffer_number"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufnr</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"buflisted"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_buflisted</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufload"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_bufload</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufloaded"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufloaded</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufname"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_bufname</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufnr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufwinid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufwinid</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bufwinnr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_bufwinnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"byte2line"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_byte2line</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"byteidx"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_byteidx</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"byteidxcomp"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_byteidxcomp</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"call"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_call</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ceil"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_ceil</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_canread"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_canread</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_close"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_close</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_close_in"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_close_in</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_evalexpr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_evalexpr</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_evalraw"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_evalraw</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_getbufnr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_getbufnr</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_getjob"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_job</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_getjob</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_info"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_info</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_log"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_log</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_logfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_logfile</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_open"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_channel</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_open</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_read"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_read</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_readblob"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_blob</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_readblob</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_readraw"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_readraw</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_sendexpr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_sendexpr</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_sendraw"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_sendraw</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_setoptions"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_setoptions</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"ch_status"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_ch_status</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"changenr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_changenr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"char2nr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_char2nr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"chdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_chdir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cindent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_cindent</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"clearmatches"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_clearmatches</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"col"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_col</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"complete"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_complete</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"complete_add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_complete_add</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"complete_check"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_complete_check</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"complete_info"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_complete_info</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"confirm"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_confirm</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"copy"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_copy</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_cos</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"cosh"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_cosh</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"count"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_count</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cscope_connection"</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_cscope_connection</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_cursor</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"debugbreak"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_debugbreak</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"deepcopy"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_deepcopy</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"delete"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_delete</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"deletebufline"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_deletebufline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"did_filetype"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_did_filetype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"diff_filler"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_diff_filler</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"diff_hlID"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_diff_hlID</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"echoraw"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_echoraw</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"empty"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_empty</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"environ"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_string</name></expr>, <expr><name>f_environ</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"escape"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_escape</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_eval</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"eventhandler"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_eventhandler</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"executable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_executable</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"execute"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_execute</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"exepath"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_exepath</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"exists"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_exists</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"exp"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_exp</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"expand"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_expand</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"expandcmd"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_expandcmd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"extend"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_extend</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"feedkeys"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_feedkeys</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"file_readable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_filereadable</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"filereadable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_filereadable</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"filewritable"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_filewritable</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"filter"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_filter</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"finddir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_finddir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"findfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_findfile</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"float2nr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_float2nr</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"floor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_floor</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"fmod"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_fmod</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnameescape"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_fnameescape</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fnamemodify"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_fnamemodify</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldclosed"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_foldclosed</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldclosedend"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_foldclosedend</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldlevel"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_foldlevel</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldtext"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_foldtext</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foldtextresult"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_foldtextresult</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"foreground"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_foreground</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"funcref"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_partial_any</name></expr>, <expr><name>f_funcref</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"function"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_f_function</name></expr>, <expr><name>f_function</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"garbagecollect"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_garbagecollect</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"get"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_get</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getbufinfo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_getbufinfo</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getbufline"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_getbufline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getbufvar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_getbufvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getchangelist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_getchangelist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getchar"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getchar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcharmod"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getcharmod</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcharsearch"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_getcharsearch</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcmdline"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getcmdline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcmdpos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getcmdpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcmdtype"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getcmdtype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcmdwintype"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getcmdwintype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcompletion"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_getcompletion</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcurpos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_getcurpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getcwd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getcwd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getenv"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getenv</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getfontname"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getfontname</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getfperm"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getfperm</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getfsize"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getfsize</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getftime"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getftime</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getftype"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getftype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getimstatus"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getimstatus</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getjumplist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_getjumplist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getline"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_f_getline</name></expr>, <expr><name>f_getline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getloclist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_getloclist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getmatches"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_getmatches</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getmousepos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_number</name></expr>, <expr><name>f_getmousepos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getpid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getpid</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getpos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_getpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getqflist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_getqflist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getreg"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getreg</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getregtype"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_getregtype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gettabinfo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_gettabinfo</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gettabvar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_gettabvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gettabwinvar"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_gettabwinvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"gettagstack"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_gettagstack</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getwininfo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_getwininfo</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getwinpos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_getwinpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getwinposx"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getwinposx</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getwinposy"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_getwinposy</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"getwinvar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_getwinvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"glob"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_glob</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"glob2regpat"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_glob2regpat</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"globpath"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_globpath</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"has"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_has</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"has_key"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_has_key</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"haslocaldir"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_haslocaldir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hasmapto"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_hasmapto</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"highlightID"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_hlID</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"highlight_exists"</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_hlexists</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"histadd"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_histadd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"histdel"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_histdel</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"histget"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_histget</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"histnr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_histnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hlID"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_hlID</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hlexists"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_hlexists</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hostname"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_hostname</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iconv"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_iconv</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"indent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_indent</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"index"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_index</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"input"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_input</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inputdialog"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_inputdialog</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inputlist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_inputlist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inputrestore"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_inputrestore</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inputsave"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_inputsave</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"inputsecret"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_inputsecret</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"insert"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_insert</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"interrupt"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_interrupt</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"invert"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_invert</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isdirectory"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_isdirectory</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isinf"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>MATH_FUNC</name><argument_list>(<argument>f_isinf</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"islocked"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_islocked</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"isnan"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>MATH_FUNC</name><argument_list>(<argument>f_isnan</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"items"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_items</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_getchannel"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_channel</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_getchannel</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_info"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_info</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_setoptions"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_setoptions</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_start"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_job</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_start</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_status"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_status</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"job_stop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_job_stop</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"join"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_join</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"js_decode"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_js_decode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"js_encode"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_js_encode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"json_decode"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_json_decode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"json_encode"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_json_encode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"keys"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_keys</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"last_buffer_nr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_last_buffer_nr</name></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"len"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_len</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"libcall"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_libcall</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"libcallnr"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_libcallnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"line"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_line</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"line2byte"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_line2byte</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lispindent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_lispindent</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"list2str"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_list2str</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"listener_add"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_listener_add</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"listener_flush"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_listener_flush</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"listener_remove"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_listener_remove</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"localtime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_localtime</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"log"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_log</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"log10"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_log10</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"luaeval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_luaeval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"map"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_map</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"maparg"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_maparg</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mapcheck"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_mapcheck</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_match</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchadd"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_matchadd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchaddpos"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_matchaddpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matcharg"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_matcharg</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchdelete"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_matchdelete</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchend"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_matchend</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchlist"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_matchlist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchstr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_matchstr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"matchstrpos"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_matchstrpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"max"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_max</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"menu_info"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_menu_info</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"min"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_min</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mkdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_mkdir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_mode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mzeval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_mzeval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"nextnonblank"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_nextnonblank</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"nr2char"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_nr2char</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"or"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_or</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pathshorten"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_pathshorten</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"perleval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_perleval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_atcursor"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_atcursor</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_beval"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_beval</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_clear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_clear</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_close"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_close</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_create"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_create</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_dialog"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_dialog</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_filter_menu"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_filter_menu</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_filter_yesno"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_filter_yesno</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_findinfo"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_findinfo</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_findpreview"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_findpreview</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_getoptions"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_getoptions</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_getpos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_getpos</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_hide"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_hide</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_locate"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_locate</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_menu"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_menu</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_move"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_move</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_notification"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_notification</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_setoptions"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_setoptions</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_settext"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_settext</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"popup_show"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_popup_show</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"pow"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_pow</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prevnonblank"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_prevnonblank</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"printf"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_printf</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"prompt_setcallback"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_prompt_setcallback</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prompt_setinterrupt"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>,<expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_prompt_setinterrupt</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prompt_setprompt"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_prompt_setprompt</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_add"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_add</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_clear"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_clear</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_find"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_find</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_list"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_list</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_remove"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_remove</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_type_add"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_type_add</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_type_change"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_type_change</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_type_delete"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_type_delete</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_type_get"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_type_get</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"prop_type_list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <macro><name>PROP_FUNC</name><argument_list>(<argument>f_prop_type_list</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"pum_getpos"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_number</name></expr>, <expr><name>f_pum_getpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"pumvisible"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_pumvisible</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"py3eval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_py3eval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"pyeval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_pyeval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"pyxeval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>f_pyxeval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"rand"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_rand</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"range"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_range</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"readdir"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_readdir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"readfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_readfile</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reg_executing"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_reg_executing</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reg_recording"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_reg_recording</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reltime"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_reltime</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reltimefloat"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_reltimefloat</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"reltimestr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_reltimestr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_expr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_remote_expr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_foreground"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_remote_foreground</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_peek"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_remote_peek</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_read"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_remote_read</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_send"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_remote_send</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remote_startserver"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_remote_startserver</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"remove"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_remove</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"rename"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_rename</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"repeat"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_repeat</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"resolve"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_resolve</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"reverse"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_reverse</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"round"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_round</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"rubyeval"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_rubyeval</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"screenattr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_screenattr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screenchar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_screenchar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screenchars"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_screenchars</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screencol"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_screencol</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screenpos"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_number</name></expr>, <expr><name>f_screenpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screenrow"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_screenrow</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"screenstring"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_screenstring</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"search"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_search</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"searchdecl"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_searchdecl</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"searchpair"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_searchpair</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"searchpairpos"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_searchpairpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"searchpos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_searchpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"server2client"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_server2client</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"serverlist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_serverlist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setbufline"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setbufline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setbufvar"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_setbufvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setcharsearch"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_setcharsearch</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setcmdpos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setcmdpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setenv"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_setenv</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setfperm"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setfperm</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setline"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setloclist"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setloclist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setmatches"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setmatches</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setpos"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setqflist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setqflist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setreg"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_setreg</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"settabvar"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_settabvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"settabwinvar"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_4</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_settabwinvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"settagstack"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_settagstack</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"setwinvar"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_3</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_setwinvar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sha256"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_sha256</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"shellescape"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_shellescape</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"shiftwidth"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_shiftwidth</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_define"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_any</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_define</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_getdefined"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_getdefined</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_getplaced"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_getplaced</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_jump"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_jump</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_place"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_place</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_placelist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_placelist</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_undefine"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_undefine</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_unplace"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_unplace</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sign_unplacelist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <macro><name>SIGN_FUNC</name><argument_list>(<argument>f_sign_unplacelist</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"simplify"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_simplify</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sin"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_sin</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sinh"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_sinh</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sort"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_sort</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sound_clear"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <macro><name>SOUND_FUNC</name><argument_list>(<argument>f_sound_clear</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sound_playevent"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SOUND_FUNC</name><argument_list>(<argument>f_sound_playevent</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sound_playfile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>SOUND_FUNC</name><argument_list>(<argument>f_sound_playfile</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"sound_stop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>SOUND_FUNC</name><argument_list>(<argument>f_sound_stop</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"soundfold"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_soundfold</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spellbadword"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_spellbadword</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"spellsuggest"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_spellsuggest</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"split"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_split</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sqrt"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_sqrt</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"srand"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_srand</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"state"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_state</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"str2float"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_str2float</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"str2list"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_str2list</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"str2nr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_str2nr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strcharpart"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_strcharpart</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strchars"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strchars</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strdisplaywidth"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strdisplaywidth</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strftime"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRFTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_strftime</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"strgetchar"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strgetchar</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"stridx"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_stridx</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"string"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_string</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strlen"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strlen</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strpart"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_strpart</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strptime"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRPTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_strptime</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"strridx"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strridx</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strtrans"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_strtrans</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"strwidth"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_strwidth</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"submatch"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_submatch</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"substitute"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_substitute</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapinfo"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_swapinfo</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"swapname"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_swapname</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synID"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_synID</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synIDattr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_synIDattr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synIDtrans"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_synIDtrans</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synconcealed"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_synconcealed</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"synstack"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_synstack</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"system"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_system</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"systemlist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_systemlist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabpagebuflist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_tabpagebuflist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabpagenr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_tabpagenr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tabpagewinnr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_tabpagewinnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tagfiles"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_string</name></expr>, <expr><name>f_tagfiles</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"taglist"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <expr><name>f_taglist</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tan"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_tan</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"tanh"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_tanh</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"tempname"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_tempname</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_dumpdiff"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_dumpdiff</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_dumpload"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_dumpload</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_dumpwrite"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_dumpwrite</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getaltscreen"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getaltscreen</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getansicolors"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_string</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr><name>f_term_getansicolors</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getattr"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getattr</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getcursor"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getcursor</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getjob"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_job</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getjob</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getline"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getline</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getscrolled"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getscrolled</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getsize"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getsize</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_getstatus"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_getstatus</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_gettitle"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_gettitle</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_gettty"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_gettty</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_list</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_scrape"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_scrape</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_sendkeys"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_sendkeys</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_setansicolors"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr><name>f_term_setansicolors</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"term_setapi"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_setapi</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_setkill"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_setkill</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_setrestore"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_setrestore</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_setsize"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_setsize</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_start"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_start</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"term_wait"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TERM_FUNC</name><argument_list>(<argument>f_term_wait</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_alloc_fail"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_alloc_fail</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_autochdir"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_autochdir</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_feedinput"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_feedinput</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_garbagecollect_now"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_garbagecollect_now</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_garbagecollect_soon"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_garbagecollect_soon</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_getvalue"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_test_getvalue</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_ignore_error"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_ignore_error</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_blob"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_blob</name></expr>, <expr><name>f_test_null_blob</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_channel</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_test_null_channel</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_dict"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_test_null_dict</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_function"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_func_any</name></expr>, <expr><name>f_test_null_function</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_job"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_job</name></expr>, <macro><name>JOB_FUNC</name><argument_list>(<argument>f_test_null_job</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_list"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_test_null_list</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_partial"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_partial_any</name></expr>, <expr><name>f_test_null_partial</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_null_string"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_test_null_string</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_option_not_set"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>,<expr><name>ret_void</name></expr>, <expr><name>f_test_option_not_set</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_override"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_override</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_refcount"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_test_refcount</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_scrollbar"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_void</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>f_test_scrollbar</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"test_setmouse"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_setmouse</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_settime"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_settime</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_srand_seed"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_test_srand_seed</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_unknown"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_test_unknown</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"test_void"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_any</name></expr>, <expr><name>f_test_void</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"timer_info"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_dict_any</name></expr>, <macro><name>TIMER_FUNC</name><argument_list>(<argument>f_timer_info</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"timer_pause"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TIMER_FUNC</name><argument_list>(<argument>f_timer_pause</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"timer_start"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <macro><name>TIMER_FUNC</name><argument_list>(<argument>f_timer_start</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"timer_stop"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <macro><name>TIMER_FUNC</name><argument_list>(<argument>f_timer_stop</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"timer_stopall"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_void</name></expr>, <macro><name>TIMER_FUNC</name><argument_list>(<argument>f_timer_stopall</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"tolower"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_tolower</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"toupper"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_toupper</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"tr"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_tr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"trim"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_trim</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"trunc"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_float</name></expr>, <macro><name>FLOAT_FUNC</name><argument_list>(<argument>f_trunc</argument>)</argument_list></macro>}</block></expr>,

<expr><block>{<expr><literal type="string">"type"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_type</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undofile"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_undofile</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"undotree"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_undotree</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"uniq"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_uniq</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"values"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_values</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"virtcol"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_virtcol</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"visualmode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_visualmode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wildmenumode"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_wildmenumode</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_execute"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_2</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_win_execute</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_findbuf"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_win_findbuf</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_getid"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_win_getid</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_gettype"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_win_gettype</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_gotoid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_win_gotoid</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_id2tabwin"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_win_id2tabwin</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_id2win"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_win_id2win</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_screenpos"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_number</name></expr>, <expr><name>f_win_screenpos</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"win_splitmove"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_win_splitmove</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winbufnr"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_winbufnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wincol"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_wincol</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"windowsversion"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_windowsversion</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winheight"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_winheight</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winlayout"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_list_any</name></expr>, <expr><name>f_winlayout</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winline"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_winline</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winnr"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_winnr</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winrestcmd"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_string</name></expr>, <expr><name>f_winrestcmd</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winrestview"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_void</name></expr>, <expr><name>f_winrestview</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winsaveview"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_any</name></expr>, <expr><name>f_winsaveview</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winwidth"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_winwidth</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wordcount"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>ret_dict_number</name></expr>, <expr><name>f_wordcount</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"writefile"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_writefile</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"xor"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>FEARG_1</name></expr>, <expr><name>ret_number</name></expr>, <expr><name>f_xor</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_function_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>intidx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>intidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>intidx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_user_func_name</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>intidx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>global_functions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>funcentry_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name><name>global_functions</name><index>[<expr><name>intidx</name></expr>]</index></name><operator>.</operator><name>f_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>intidx</name></expr>]</index></name><operator>.</operator><name>f_max_argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>IObuff</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>get_expr_name</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>intidx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>intidx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>intidx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_function_name</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_user_var_name</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><operator>++</operator><name>intidx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>find_internal_func_opt</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>implemented</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>global_functions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>funcentry_T</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>first</name> <operator>&lt;=</operator> <name>last</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>first</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>global_functions</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>f_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>implemented</name> <operator>&amp;&amp;</operator> <name><name>global_functions</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>f_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>x</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>find_internal_func</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_internal_func_opt</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>has_internal_func</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_internal_func_opt</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>has_internal_func_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>find_internal_func_opt</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>internal_func_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>global_functions</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>f_name</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>type_T</name> <modifier>*</modifier></type>

<name>internal_func_ret_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>argtypes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>global_functions</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>f_retfunc</name><argument_list>(<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argtypes</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>check_internal_func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&lt;</operator> <name><name>global_functions</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>f_min_argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>FCERR_TOOFEW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>argcount</name> <operator>&gt;</operator> <name><name>global_functions</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>f_max_argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>FCERR_TOOMANY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>internal_func_name</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>FCERR_TOOMANY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toomanyarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toofewarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>call_internal_func</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>find_internal_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&lt;</operator> <name><name>global_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_min_argc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_TOOFEW</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>&gt;</operator> <name><name>global_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_max_argc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_TOOMANY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><name>argcount</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>f_func</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FCERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>call_internal_func_by_idx</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>global_functions</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>f_func</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>call_internal_method</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>basetv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><name>MAX_FUNC_ARGS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>find_internal_func</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_argtype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_NOTMETHOD</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_min_argc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_TOOFEW</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_max_argc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FCERR_TOOMANY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_argtype</name> <operator>==</operator> <name>FEARG_LAST</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argcount</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>basetv</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_argtype</name> <operator>==</operator> <name>FEARG_2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>basetv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_argtype</name> <operator>==</operator> <name>FEARG_3</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>basetv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><name>f_argtype</name> <operator>==</operator> <name>FEARG_4</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>basetv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>basetv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argcount</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>global_functions</name><index>[<expr><name>fi</name></expr>]</index></name><operator>.</operator><call><name>f_func</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FCERR_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>non_zero_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_BOOL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_TRUE</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type>

<name>tv_get_lnum</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>lnum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type>

<name>tv_get_lnum_buf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal>

<operator>&amp;&amp;</operator> <name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_float_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>float_T</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <operator>(</operator><name>float_T</name><operator>)</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E808: Number or Float required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_abs</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_acos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>acos</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_and</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>&amp;</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_asin</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>asin</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_atan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>atan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_atan2</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>fx</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fy</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>get_float_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fy</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>atan2</name><argument_list>(<argument><expr><name>fx</name></expr></argument>, <argument><expr><name>fy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_balloon_gettext</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>balloonEval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>balloonEval</name><operator>-&gt;</operator><name>msg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>balloonEval</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_balloon_show</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>balloonEval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>post_balloon</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>l</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>l</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mesg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>post_balloon</name><argument_list>(<argument><expr><name>balloonEval</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>mesg</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>mesg</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_balloon_split</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pumitem_T</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>split_message</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><operator>--</operator><name>size</name></expr>]</index></name><operator>.</operator><name>pum_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>buf_T</name> <modifier>*</modifier></type>

<name>tv_get_buf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curtab_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>buflist_findnr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>curbuf</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>lastbuf</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_find_by_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>curtab_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>find_buffer</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>buf_T</name> <modifier>*</modifier></type>

<name>get_buf_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E158: Invalid buffer name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_byte2line</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>long</name></type> <name>boff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>boff</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>boff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>ml_find_line_or_offset</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>boff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>byteidx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>comp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>idx</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>comp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>t</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_byteidx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>byteidx</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_byteidxcomp</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>byteidx</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_call</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>selfdict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>partial</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>func</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>selfdict</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>func_call</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>selfdict</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_ceil</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_changenr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_u_seq_cur</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_char2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>utf8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2char</name>)<argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type>

<name>get_optional_window</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>win</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invalwindow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>win</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_col</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>virtual_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>fp</name> <operator>==</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>chartabsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>,

<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_confirm</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>def</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>VIM_GENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>typestr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buttons</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>def</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>typestr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typestr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>typestr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VIM_ERROR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VIM_QUESTION</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VIM_INFO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VIM_WARNING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VIM_GENERIC</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buttons</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>buttons</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buttons</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>do_dialog</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttons</name></expr></argument>,

<argument><expr><name>def</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_copy</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>item_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_cos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_cosh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>cosh</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_cursor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>coladd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_curswant</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>curswant</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list2fpos</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curswant</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>coladd</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>coladd</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curswant</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>curswant</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>set_curswant</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coladd</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>coladd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <name>coladd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mb_adjust_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>set_curswant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_debugbreak</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProcess</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_ALL_ACCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hProcess</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DebugBreakProcess</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_deepcopy</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>noref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copyID</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>noref</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>noref</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>noref</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>copyID</name> <operator>=</operator> <call><name>get_copyID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>item_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>noref</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>copyID</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_did_filetype</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>did_filetype</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_echoraw</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_empty</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_STRING</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>*</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>==</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>==</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_BOOL</name></expr>:</case>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>!=</operator> <name>VVAL_TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_BLOB</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name><operator>-&gt;</operator><name>bv_ga</name><operator>.</operator><name>ga_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_JOB</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_job</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_job</name><operator>-&gt;</operator><name>jv_status</name></name> <operator>!=</operator> <name>JOB_STARTED</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_channel</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>!</operator><call><name>channel_is_open</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_VOID</name></expr>:</case>

<expr_stmt><expr><call><name>internal_error_no_abort</name><argument_list>(<argument><expr><literal type="string">"f_empty(UNKNOWN)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_environ</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>_wenviron</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>environ</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_wenviron</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>environ</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>short_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>short_u</name> <operator>*</operator><operator>)</operator><name><name>_wenviron</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>utf16_to_enc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_escape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_eval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>eval1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>aborting</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invexpr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_clr_eos</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_eventhandler</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>vgetc_busy</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>redir_execute_ga</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>execute_redir_str</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_execute_ga</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>redir_execute_ga</name><operator>.</operator><name>ga_data</name></name>

<operator>+</operator> <name><name>redir_execute_ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>redir_execute_ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>get_list_line</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>c</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>indent</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>do_concat</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>listitem_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>cookie</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>execute_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_silent</name> <init>= <expr><name>msg_silent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_emsg_silent</name> <init>= <expr><name>emsg_silent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_emsg_noredir</name> <init>= <expr><name>emsg_noredir</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_redir_execute</name> <init>= <expr><name>redir_execute</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_redir_off</name> <init>= <expr><name>redir_off</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>save_ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>echo_output</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>arg_off</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>arg_off</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><name>arg_off</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_JOB</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><name>arg_off</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_CHANNEL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_inval_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>arg_off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>arg_off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><name>arg_off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>echo_output</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"silent"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"silent!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_noredir</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>msg_silent</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_execute</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>save_ga</name> <operator>=</operator> <name>redir_execute_ga</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_execute_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_execute</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>echo_output</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>get_list_line</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>item</name></expr></argument>,

<argument><expr><name>DOCMD_NOWAIT</name><operator>|</operator><name>DOCMD_VERBOSE</name><operator>|</operator><name>DOCMD_REPEAT</name><operator>|</operator><name>DOCMD_KEYTYPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_execute_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>redir_execute_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>redir_execute_ga</name><operator>.</operator><name>ga_len</name></name></expr>]</index> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>redir_execute_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redir_execute_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>msg_silent</name> <operator>=</operator> <name>save_msg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_silent</name> <operator>=</operator> <name>save_emsg_silent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emsg_noredir</name> <operator>=</operator> <name>save_emsg_noredir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>redir_execute</name> <operator>=</operator> <name>save_redir_execute</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redir_execute</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redir_execute_ga</name> <operator>=</operator> <name>save_ga</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>redir_off</name> <operator>=</operator> <name>save_redir_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>echo_output</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>save_msg_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_execute</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>execute_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_exists</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>expand_env_save</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><call><name>get_option_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>function_exists</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>has_internal_func_name</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>cmd_exists</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>autocmd_supported</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>au_exists</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>var_exists</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_exp</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_expand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errormsg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>WILD_SILENT</name><operator>|</operator><name>WILD_USE_NL</name><operator>|</operator><name>WILD_LIST_NOTFOUND</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>expand_T</name></type> <name>xpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rettv_list_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'%'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>eval_vars</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>WILD_KEEP_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ExpandInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpc</name><operator>.</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_FILES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_wic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>+=</operator> <name>WILD_ICASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>WILD_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExpandOne</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>WILD_ALL_KEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xpc</name><operator>.</operator><name>xp_numfiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name><name>xpc</name><operator>.</operator><name>xp_files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ExpandCleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_expandcmd</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>exarg_T</name></type> <name>eap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errormsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cmdstr</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmdstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>cmdstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>argt</name></name> <operator>|=</operator> <name>EX_NOSPC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>usefilter</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>nextcmd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>.</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_USER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>expand_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errormsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>errormsg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>cmdstr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_feedkeys</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>remap</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insert</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>typed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>execute</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dangerous</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowlevel</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys_esc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>flags</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>flags</name></expr></incr>)</control>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>flags</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>remap</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>remap</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>typed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>insert</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>execute</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>dangerous</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>lowlevel</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keys</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>execute</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keys_esc</name> <operator>=</operator> <call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keys_esc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lowlevel</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INPUT_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>keys</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name> <operator>&amp;&amp;</operator> <name>typed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>keys</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E980: lowlevel input not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>keys_esc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>remap</name></expr> ?</condition><then> <expr><name>REMAP_YES</name></expr> </then><else>: <expr><name>REMAP_NONE</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>insert</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>!</operator><name>typed</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>timer_busy</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>keys_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>execute</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dangerous</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>ex_normal_busy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exec_normal</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>lowlevel</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dangerous</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>ex_normal_busy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg_scroll</name> <operator>|=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_float2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;=</operator> <operator>-</operator><name>VARNUM_MAX</name> <operator>+</operator> <name>DBL_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><name>VARNUM_MAX</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>f</name> <operator>&gt;=</operator> <name>VARNUM_MAX</name> <operator>-</operator> <name>DBL_EPSILON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>VARNUM_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>f</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_floor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_fmod</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>fx</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fy</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>get_float_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fy</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>fx</name></expr></argument>, <argument><expr><name>fy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_fnameescape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave_fnameescape</name><argument_list>(

<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_foreground</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_foreground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>win32_set_foreground</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>common_function</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_funcref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_string</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>arg_pt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>trans_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_pt</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>arg_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>use_string</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>use_string</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AUTOLOAD_CHAR</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>is_funcref</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>trans_name</name> <operator>=</operator> <call><name>trans_function_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>TFN_INT</name> <operator>|</operator> <name>TFN_QUIET</name> <operator>|</operator> <name>TFN_NO_AUTOLOAD</name> <operator>|</operator> <name>TFN_NO_DEREF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>use_string</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>is_funcref</name> <operator>&amp;&amp;</operator> <name>trans_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>use_string</name></expr> ?</condition><then> <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>trans_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>is_funcref</name></expr>

?</condition><then> <expr><call><name>find_func</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>

</then><else>: <expr><operator>!</operator><call><name>translated_function_exists</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E700: Unknown function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dict_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"s:"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;SID&gt;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>sid_buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'s'</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sid_buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;SNR&gt;%ld_"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>current_sctx</name><operator>.</operator><name>sc_sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>sid_buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sid_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E922: expected a dict"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dict_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><name>arg_idx</name></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E923: Second argument of function() must be a list or a dict"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>arg_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <name>MAX_FUNC_ARGS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg_funcname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>e_toomanyarg</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>is_funcref</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>ALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>partial_T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg_idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lv_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg_len</name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lv_len</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name> <operator>=</operator> <name>arg_len</name> <operator>+</operator> <name>lv_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>typval_T</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arg_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg_pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>lv_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>list</argument>, <argument>li</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dict_idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><name>dict_idx</name></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>arg_pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_auto</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_auto</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_pt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <name><name>arg_pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>is_funcref</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name> <operator>=</operator> <call><name>find_func</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ptr_ref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_PARTIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FUNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>trans_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_funcref</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>common_function</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>type_T</name> <modifier>*</modifier></type>

<name>ret_f_function</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>type_T</name> <modifier>*</modifier><modifier>*</modifier><name>argtypes</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>argtypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>tt_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name>t_func_any</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name>t_partial_void</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_function</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>common_function</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_garbagecollect</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>want_garbage_collect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>garbage_collect_at_exit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_get</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what_is_dict</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>blob_len</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <call><name>blob_len</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>blob_get</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <name>rettv</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>partial_T</name></type> <name>fref_pt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_partial</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fref_pt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fref_pt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fref_pt</name><operator>.</operator><name>pt_name</name></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>&amp;</operator><name>fref_pt</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"func"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'f'</literal></expr> ?</condition><then> <expr><name>VAR_FUNC</name></expr> </then><else>: <expr><name>VAR_STRING</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>func_ref</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"dict"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>what_is_dict</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rettv_dict_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>pt_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>pt_argc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_tv</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>pt_argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>what_is_dict</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listdictblobarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getchangelist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_list</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>buf</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name><operator>)</operator></expr>

?</condition><then> <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_changelistidx</name></name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"coladd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coladd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getcharsearch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><call><name>last_csearch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"forward"</literal></expr></argument>, <argument><expr><call><name>last_csearch_forward</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><literal type="string">"until"</literal></expr></argument>, <argument><expr><call><name>last_csearch_until</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getenv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mustfree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>vim_getenv</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>mustfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>VVAL_NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mustfree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getfontname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>hl_get_font_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>gui_mch_get_fontname</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getjumplist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_tabwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cleanup_jumplist</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_list</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_jumplistidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>dict_alloc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_dict</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"lnum"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"coladd"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>coladd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dict_add_number</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"bufnr"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dict_add_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getpid</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>mch_get_pid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>getpos_both</name><parameter_list>(

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>,

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>getcurpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getcurpos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>fp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name></expr>

</then><else>: <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>fp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr> ?</condition><then> <expr><name>MAXCOL</name></expr> </then><else>: <expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>fp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>fp</name><operator>-&gt;</operator><name>coladd</name></name></expr> </then><else>:

<expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>getcurpos</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>save_set_curswant</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>save_curswant</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>save_virtcol</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>update_curswant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr> ?</condition><then>

<expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>MAXCOL</name></expr> </then><else>: <expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>save_set_curswant</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>save_set_curswant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>save_curswant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>=</operator> <name>save_virtcol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getcurpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>getpos_both</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>getpos_both</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getreg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strregname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg2</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>return_list</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>strregname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>strregname</name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arg2</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>return_list</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>strregname</name> <operator>=</operator> <call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>strregname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>strregname</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>return_list</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>(</operator><name>list_T</name> <operator>*</operator><operator>)</operator><call><name>get_reg_contents</name><argument_list>(<argument><expr><name>regname</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>arg2</name></expr> ?</condition><then> <expr><name>GREG_EXPR_SRC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>GREG_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_refcount</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>get_reg_contents</name><argument_list>(<argument><expr><name>regname</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>arg2</name></expr> ?</condition><then> <expr><name>GREG_EXPR_SRC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_getregtype</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strregname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>reglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>strregname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strregname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>strregname</name> <operator>=</operator> <call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>strregname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><operator>*</operator><name>strregname</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_reg_type</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reglen</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MLINE</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MCHAR</name></expr>:</case> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>MBLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>reglen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_gettagstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_tagstack</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>

<name>f_has</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>present</name></decl>;</decl_stmt>

}</block></struct></type> <name>has_item_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>has_item_T</name></type> <name><name>has_list</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"amiga"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"arp"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"beos"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BEOS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"haiku"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"bsd"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"hpux"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"linux"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mac"</literal></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"osx"</literal></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"macunix"</literal></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"osxdarwin"</literal></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X_DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"qnx"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"sun"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUN_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"unix"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"vms"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"win32"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"win32unix"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"win64"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"ebcdic"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"fname_case"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CASE_INSENSITIVE_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"acl"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ACL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"arabic"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"autocmd"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"autochdir"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"autoservername"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOSERVERNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_eval"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_multiline"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"balloon_eval_term"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"builtin_terms"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOME_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"all_builtin_terms"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALL_BUILTIN_TCAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"browsefilter"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FILE_CHOOSER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"byte_offset"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"channel"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cindent"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"clientserver"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"clipboard"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cmdline_compl"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cmdline_hist"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"comments"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"conceal"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cryptv"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"crypt-blowfish"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"crypt-blowfish2"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cscope"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CSCOPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorbind"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cursorshape"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"debug"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"dialog_con"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CON_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"dialog_gui"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"diff"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"digraphs"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"directx"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIRECTX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"dnd"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"emacs_tags"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EMACS_TAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"ex_extra"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"extra_search"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"file_in_path"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCHPATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"filterpipe"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FILTERPIPE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"find_in_path"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FIND_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"float"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"folding"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"footer"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOOTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"fork"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gettext"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GETTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_neXtaw"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_athena"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_gtk"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_gtk2"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_gtk3"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_gnome"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GNOME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_haiku"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_mac"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_motif"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_photon"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"gui_win32"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"iconv"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"insert_expand"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"job"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"jumplist"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"keymap"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_KEYMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"lambda"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"langmap"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"libcall"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"linebreak"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"lispindent"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LISP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"listcmds"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"localmap"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"lua"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"menu"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mksession"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"modify_fname"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mouseshape"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_dec"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_gpm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_jsbterm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_JSB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_netterm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_NET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_pterm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_PTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_sgr"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_sysmouse"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYSMOUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_urxvt"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_URXVT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mouse_xterm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_XTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"multi_byte"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"multi_byte_ime"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MBYTE_IME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"multi_lang"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MULTI_LANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"mzscheme"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"num64"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ole"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_OLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"packages"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"path_extra"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PATH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"perl"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"persistent_undo"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERSISTENT_UNDO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python_compiled"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python_dynamic"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"pythonx"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python3_compiled"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python3_dynamic"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"python3"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"popupwin"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"postscript"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_POSTSCRIPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"printer"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"profile"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"reltime"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"quickfix"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"rightleft"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"ruby"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"scrollbind"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"showcmd"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"cmdline_info"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDL_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"signs"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"smartindent"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"startuptime"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STARTUPTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"statusline"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"netbeans_intg"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"sound"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SOUND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"spell"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"syntax"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"system"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSTEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"tag_binary"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TAG_BINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"tcl"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TCL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"termguicolors"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"terminal"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"terminfo"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TERMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"termresponse"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"textobjects"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TEXTOBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"textprop"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"tgetent"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TGETENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"timers"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"title"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"toolbar"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"unnamedplus"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"user-commands"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="string">"user_commands"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vartabs"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"vertsplit"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"viminfo"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"vimscript-1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vimscript-2"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vimscript-3"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vimscript-4"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"virtualedit"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"visual"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"visualextra"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vreplace"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"vtp"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"wildignore"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"wildmenu"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"windows"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"winaltkeys"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"writebackup"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WRITEBACKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xim"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xfontset"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xpm"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xpm_w32"</literal></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XPM_W32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xsmp"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xsmp_interact"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP_INTERACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xterm_clipboard"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"xterm_save"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XTERM_SAVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><literal type="string">"X11"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="number">1</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>has_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>has_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>has_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>present</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"balloon_multiline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>multiline_balloon_available</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"filterpipe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"iconv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>iconv_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lua"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>lua_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mzscheme"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mzscheme_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"perl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>perl_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"python"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"python3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python3_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"pythonx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python3_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>python_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python3_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>python3_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ruby"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ruby_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_TCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tcl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tcl_enabled</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"terminal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>terminal_enabled</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"patch"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal>

<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">11</literal>

<operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minor</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>&lt;</operator> <name>VIM_VERSION_MAJOR</name>

<operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <name>VIM_VERSION_MAJOR</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>minor</name> <operator>&lt;</operator> <name>VIM_VERSION_MINOR</name>

<operator>||</operator> <operator>(</operator><name>minor</name> <operator>==</operator> <name>VIM_VERSION_MINOR</name>

<operator>&amp;&amp;</operator> <call><name>has_patch</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>has_patch</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"vim_starting"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>starting</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ttyin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mch_input_isatty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"ttyout"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>stdout_isatty</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"multi_byte_encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>has_mbyte</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"gui_running"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>starting</name></name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"browse"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"syntax_items"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"vcon"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>is_term_win32</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>has_vtp_working</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"netbeans_enabled"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"mouse_gpm_enabled"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_GPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gpm_enabled</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"conpty"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>use_conpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"clipboard_working"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>clip_star</name><operator>.</operator><name>available</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_haslocaldir</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_tabwin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_localdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_localdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_hasmapto</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abbr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"nvo"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbr</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>map_to_exists</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_hlID</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_hlexists</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>highlight_exists</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_hostname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>hostname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_get_host_name</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_iconv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vimconv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><call><name>enc_skip</name><argument_list>(<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>enc_canonize</name><argument_list>(<argument><expr><call><name>enc_skip</name><argument_list>(<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_index</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>blob_len</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name>blob_len</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>blob_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listblobreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_idx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ic</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>li_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>tv_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>inputsecret_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_input</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_user_input</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>inputsecret_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_inputdialog</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TEXTDIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_CONDIALOG</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>defstr</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>defstr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>defstr</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>defstr</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>do_dialog</name><argument_list>(<argument><expr><name>VIM_QUESTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>message</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;OK\n&amp;Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>defstr</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>get_user_input</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>inputsecret_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_inputlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>selected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mouse_used</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_CONSOLE_INPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>no_console_input</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_not_a_term</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_LIST</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"inputlist()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_LIST_ITEMS</name><argument_list>(<argument>argvars[<literal type="number">0</literal>].vval.v_list</argument>, <argument>li</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name>prompt_for_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mouse_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mouse_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selected</name> <operator>-=</operator> <name>lines_left</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>selected</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>ga_userinput</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tasave_T</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_inputrestore</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ga_userinput</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>ga_userinput</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_typeahead</name><argument_list>(<argument><expr><operator>(</operator><name>tasave_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga_userinput</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>

<operator>+</operator> <name><name>ga_userinput</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verb_msg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"called inputrestore() more often than inputsave()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_inputsave</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga_userinput</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>save_typeahead</name><argument_list>(<argument><expr><operator>(</operator><name>tasave_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga_userinput</name><operator>.</operator><name>ga_data</name></name><operator>)</operator>

<operator>+</operator> <name><name>ga_userinput</name><operator>.</operator><name>ga_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ga_userinput</name><operator>.</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_inputsecret</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>cmdline_star</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>inputsecret_flag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f_input</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>cmdline_star</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>inputsecret_flag</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_interrupt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_invert</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>~</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>tv_islocked</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_lock</name></name> <operator>&amp;</operator> <name>VAR_LOCKED</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name>

<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_lock</name></name> <operator>&amp;</operator> <name>VAR_LOCKED</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name>

<operator>&amp;&amp;</operator> <name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_lock</name></name> <operator>&amp;</operator> <name>VAR_LOCKED</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_islocked</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>lval_T</name></type> <name>lv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>get_lval</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>GLV_NO_AUTOLOAD</name> <operator>|</operator> <name>GLV_READ_ONLY</name></expr></argument>, <argument><expr><name>FNE_CHECK_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lv</name><operator>.</operator><name>ll_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_tv</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>find_var</name><argument_list>(<argument><expr><name><name>lv</name><operator>.</operator><name>ll_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>&amp;</operator> <name>DI_FLAGS_LOCK</name><operator>)</operator>

<operator>||</operator> <call><name>tv_islocked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_range</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E786: Range not allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_newkey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lv</name><operator>.</operator><name>ll_newkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lv</name><operator>.</operator><name>ll_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_islocked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lv</name><operator>.</operator><name>ll_li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_islocked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lv</name><operator>.</operator><name>ll_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_lval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_isinf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FLOAT</name> <operator>&amp;&amp;</operator> <call><name>isinf</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_isnan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FLOAT</name>

<operator>&amp;&amp;</operator> <call><name>isnan</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_last_buffer_nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_len</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_STRING</name></expr>:</case>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(

<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_BLOB</name></expr>:</case>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>blob_len</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_LIST</name></expr>:</case>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>list_len</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>dict_len</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_VOID</name></expr>:</case>

<case>case <expr><name>VAR_BOOL</name></expr>:</case>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<case>case <expr><name>VAR_JOB</name></expr>:</case>

<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E701: Invalid type for len()"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>libcall_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>string_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_result</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>string_in</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>string_in</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>string_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>string_result</name> <operator>=</operator> <operator>&amp;</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_libcall</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>,

<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>,

<argument><expr><name>string_in</name></expr></argument>,

<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>,

<argument><expr><name>string_result</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>nr_result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>nr_result</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_libcall</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libcall_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>VAR_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_libcallnr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>libcall_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_line</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>save_curwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>save_curtab</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>win_id2wp_tp</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>switch_win_noblock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_curtab</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>

<operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>restore_win_noblock</name><argument_list>(<argument><expr><name>save_curwin</name></expr></argument>, <argument><expr><name>save_curtab</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_line2byte</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BYTEOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>ml_find_line_or_offset</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_log</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_log10</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>log10</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LUA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_luaeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_luaeval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>argvars</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_maparg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_maparg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_mapcheck</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_maparg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>MATCH_END</name></decl>, 

<decl><name>MATCH_MATCH</name></decl>, 

<decl><name>MATCH_STR</name></decl>, 

<decl><name>MATCH_LIST</name></decl>, 

<decl><name>MATCH_POS</name></decl> 

}</block></enum></type> <name>matchtype_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>find_some_match</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>matchtype_T</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>patbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>strbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>nth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>startcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_LIST</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>MATCH_POS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_POS</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_STR</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_idx</name></name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>p_ic</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>str</name> <operator>=</operator> <call><name>echo_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>startcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>nth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>startcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>+</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcol</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>len</name>

<operator>||</operator> <name>str</name> <operator>+</operator> <name>startcol</name> <operator>&lt;=</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_POS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li1</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li2</name> <init>= <expr><name><name>li1</name><operator>-&gt;</operator><name>li_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li3</name> <init>= <expr><name><name>li2</name><operator>-&gt;</operator><name>li_next</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li4</name> <init>= <expr><name><name>li3</name><operator>-&gt;</operator><name>li_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>li1</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li1</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li3</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>expr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li4</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>expr</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>li2</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_LIST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call>

<operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_STR</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>MATCH_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator>

<operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>+=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>expr</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>MATCH_POS</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>listitem_remove</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_first</name><operator>-&gt;</operator><name>li_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_match</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>find_some_match</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>MATCH_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_matchend</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>find_some_match</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>MATCH_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_matchlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>find_some_match</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>MATCH_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_matchstr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>find_some_match</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>MATCH_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_matchstrpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>find_some_match</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>MATCH_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>max_min</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>domax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>==</operator> <operator>&amp;</operator><name>range_list_item</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_stride</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>^</operator> <name>domax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_start</name></name> <operator>+</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>*</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_stride</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>domax</name></expr> ?</condition><then> <expr><name>i</name> <operator>&gt;</operator> <name>n</name></expr> </then><else>: <expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>dv_hashtab</name><operator>.</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>di_tv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>domax</name></expr> ?</condition><then> <expr><name>i</name> <operator>&gt;</operator> <name>n</name></expr> </then><else>: <expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_listdictarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>domax</name></expr> ?</condition><then> <expr><literal type="string">"max()"</literal></expr> </then><else>: <expr><literal type="string">"min()"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_max</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>max_min</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_min</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>max_min</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MZSCHEME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_mzeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_mzeval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>mzscheme_call_vim</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_tv</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>f_call</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_nextnonblank</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_nr2char</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>utf8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_or</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>|</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PERL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_perleval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_perleval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_pow</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>fx</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fy</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name>

<operator>&amp;&amp;</operator> <call><name>get_float_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fy</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>fx</name></expr></argument>, <argument><expr><name>fy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_prevnonblank</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_printf</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vim_vsnprintf_typval</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>argvars</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_emsg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_vsnprintf_typval</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>argvars</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_pum_getpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pum_set_event_info</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_pumvisible</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_py3eval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_py3eval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_pyeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_pyx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_pyeval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_pyxeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>init_pyxversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pyx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>f_pyeval</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>f_py3eval</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>f_pyeval</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PYTHON3</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><call><name>f_py3eval</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT32_T</name></type> <name>srand_seed_for_testing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>srand_seed_for_testing_is_used</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_test_srand_seed</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>srand_seed_for_testing_is_used</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>srand_seed_for_testing</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srand_seed_for_testing_is_used</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_srand</name><parameter_list>(<parameter><decl><type><name>UINT32_T</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dev_urandom_state</name> <init>= <expr><name>NOTDONE</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>srand_seed_for_testing_is_used</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>srand_seed_for_testing</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dev_urandom_state</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<union>union <block>{

<decl_stmt><decl><type><name>UINT32_T</name></type> <name>number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>bytes</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>UINT32_T</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>contents</name></decl>;</union>

}</block> <decl><name>buf</name></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dev_urandom_state</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>.</operator><name>contents</name><operator>.</operator><name>number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>contents</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UINT32_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>

<operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UINT32_T</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dev_urandom_state</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dev_urandom_state</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>contents</name><operator>.</operator><name>number</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dev_urandom_state</name> <operator>!=</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <call><name>vim_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &lt;&lt; k) | (x &gt;&gt; (32 - k)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLITMIX32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( z = (x += 0x9e3779b9), z = (z ^ (z &gt;&gt; 16)) * 0x85ebca6b, z = (z ^ (z &gt;&gt; 13)) * 0xc2b2ae35, z ^ (z &gt;&gt; 16) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUFFLE_XOSHIRO128STARSTAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>result = ROTL(y * 5, 7) * 9; t = y &lt;&lt; 9; z ^= x; w ^= y; y ^= z, x ^= w; z ^= t; w = ROTL(w, 11);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_rand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>UINT32_T</name></type> <name>gx</name></decl>, <decl><type ref="prev"/><name>gy</name></decl>, <decl><type ref="prev"/><name>gz</name></decl>, <decl><type ref="prev"/><name>gw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>lx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ly</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lz</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT32_T</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>initialized</name> <operator>==</operator> <name>FALSE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_srand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gy</name> <operator>=</operator> <call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gz</name> <operator>=</operator> <call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gw</name> <operator>=</operator> <call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SHUFFLE_XOSHIRO128STARSTAR</name><argument_list>(<argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>gz</name></expr></argument>, <argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>list_len</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lz</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lw</name> <operator>=</operator> <call><name>list_find</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ly</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lz</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lw</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><name><name>lx</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><name><name>ly</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><name><name>lz</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><name><name>lw</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SHUFFLE_XOSHIRO128STARSTAR</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lx</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ly</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lz</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>z</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lw</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>w</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>result</name></expr>;</expr_stmt>

<return>return;</return>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_srand</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UINT32_T</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_srand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>UINT32_T</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><call><name>SPLITMIX32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROTL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPLITMIX32</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SHUFFLE_XOSHIRO128STARSTAR</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_range</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>stride</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>stride</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E726: Stride is zero"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>stride</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>start</name></expr> </then><else>: <expr><name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>start</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E727: Start past end"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>=</operator> <operator>&amp;</operator><name>range_list_item</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_stride</name></name> <operator>=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>range_list_materialize</name><parameter_list>(<parameter><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>==</operator> <operator>&amp;</operator><name>range_list_item</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>start</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>end</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_end</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>nonmat</name><operator>.</operator><name>lv_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>lv_u</name><operator>.</operator><name>mat</name><operator>.</operator><name>lv_idx_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><ternary><condition><expr><name>stride</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr> </then><else>: <expr><name>i</name> <operator>&gt;=</operator> <name>end</name></expr></else></ternary></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_number</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>return_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>regname</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>regname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_reg_executing</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>return_register</name><argument_list>(<argument><expr><name>reg_executing</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_reg_recording</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>return_register</name><argument_list>(<argument><expr><name>reg_recording</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>make_connection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>X_DISPLAY</name> <operator>==</operator> <name>NULL</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x_force_connect</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_term_clip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_force_connect</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_connection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>make_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>X_DISPLAY</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E240: No connection to the X server"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>remote_common</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>server_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HWND</name></type> <name>w</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Window</name></type> <name>w</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>check_connection</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>server_name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>server_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>serverSendToVim</name><argument_list>(<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>serverSendToVim</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E241: Unable to send to %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dictitem_T</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>str</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>idvar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idvar</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idvar</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>idvar</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>PRINTF_HEX_LONG_U</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>idvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_expr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>remote_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_foreground</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>server_name</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>server_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>serverForeground</name><argument_list>(<argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"foreground()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remote_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_peek</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dictitem_T</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long_u</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>serverid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>serverid</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>serverid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>serverid</name></expr></argument>, <argument><expr><name>SCANF_HEX_LONG_U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>serverGetReply</name><argument_list>(<argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>check_connection</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>serverPeekReply</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>,

<argument><expr><call><name>serverStrToWin</name><argument_list>(<argument><expr><name>serverid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retvar</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retvar</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retvar</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name>retvar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>.</operator><name>di_tv</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_read</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>serverid</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>serverid</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>long_u</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>serverid</name></expr></argument>, <argument><expr><name>SCANF_HEX_LONG_U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>serverGetReply</name><argument_list>(<argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>check_connection</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>serverReadReply</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><call><name>serverStrToWin</name><argument_list>(<argument><expr><name>serverid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E277: Unable to read a server reply"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_send</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>remote_common</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_remote_startserver</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>serverName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E941: already started a server"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>check_connection</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>serverRegisterName</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>serverSetName</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E942: +clientserver feature not available"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_rename</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>vim_rename</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_repeat</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_extend</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>slen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>r</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_NOMOVE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_REPEAT</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_RETCOUNT</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_SETPCMARK</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_START</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_SUBPAT</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_END</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP_COLUMN</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_search_arg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>varp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>FORWARD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>varp</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><name>varp</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><operator>*</operator><name>flags</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>flags</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> <expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flagsp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>flags</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_START</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_END</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_RETCOUNT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_NOMOVE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_SUBPAT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_REPEAT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_SETPCMARK</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>SP_COLUMN</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flagsp</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>flags</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dir</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>search_cmn</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>match_pos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ws</name> <init>= <expr><name>p_ws</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>lnum_stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>time_limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>SEARCH_KEEP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subpatnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>searchit_arg_T</name></type> <name>sia</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>get_search_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flagsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>*</operator><name>flagsp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>SEARCH_START</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_END</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>SEARCH_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_COLUMN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>SEARCH_COL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum_stop</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_stop</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>time_limit</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time_limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>time_limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SP_REPEAT</name> <operator>|</operator> <name>SP_RETCOUNT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_NOMOVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_SETPCMARK</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sia</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_stop_lnum</name></name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name>lnum_stop</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_tm</name></name> <operator>=</operator> <operator>&amp;</operator><name>tm</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>subpatnum</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpatnum</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_SUBPAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>subpatnum</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_SETPCMARK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>match_pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_NOMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_p_ws</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>float_T</name></type>

<name>vim_round</name><parameter_list>(<parameter><decl><type><name>float_T</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>f</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>f</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_round</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>vim_round</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RUBY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_rubyeval</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_rubyeval</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screenattr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name>

<operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenAttrs</name><index>[<expr><name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screenchar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screenchars</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screencol</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>screen_screencol</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screenrow</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>screen_screenrow</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_screenstring</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>screen_Rows</name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>screen_Columns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>LineOffset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLinesUC</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ScreenLines</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>+=</operator> <call><name>mb_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Screen_mco</name> <operator>&amp;&amp;</operator> <name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>buflen</name> <operator>+=</operator> <call><name>mb_char2bytes</name><argument_list>(<argument><expr><name><name>ScreenLinesC</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_search</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>search_cmn</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_searchdecl</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>locally</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thisblock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>locally</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>thisblock</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>find_decl</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>locally</name></expr></argument>, <argument><expr><name>thisblock</name></expr></argument>, <argument><expr><name>SEARCH_KEEP</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>searchpair_cmn</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>match_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>spat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mpat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>epat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_p_ws</name> <init>= <expr><name>p_ws</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>nbuf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>lnum_stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>time_limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>spat</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mpat</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nbuf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>epat</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mpat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>epat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>get_search_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SP_END</name> <operator>|</operator> <name>SP_SUBPAT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_NOMOVE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_SETPCMARK</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_REPEAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name>

<operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>skip</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_FUNC</name> <operator>&amp;&amp;</operator> <name><name>skip</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_PARTIAL</name>

<operator>&amp;&amp;</operator> <name><name>skip</name><operator>-&gt;</operator><name>v_type</name></name> <operator>!=</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum_stop</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum_stop</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>time_limit</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>time_limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>do_searchpair</name><argument_list>(<argument><expr><name>spat</name></expr></argument>, <argument><expr><name>mpat</name></expr></argument>, <argument><expr><name>epat</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>match_pos</name></expr></argument>, <argument><expr><name>lnum_stop</name></expr></argument>, <argument><expr><name>time_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>p_ws</name> <operator>=</operator> <name>save_p_ws</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_searchpair</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>searchpair_cmn</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_searchpairpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>match_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>searchpair_cmn</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_pos</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>match_pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>match_pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>do_searchpair</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>spat</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mpat</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>epat</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, 

<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>skip</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 

<parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>match_pos</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum_stop</name></decl></parameter>, 

<parameter><decl><type><name>long</name> <name>time_limit</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pat3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>firstpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>foundpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>save_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nest</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_skip</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>options</name> <init>= <expr><name>SEARCH_KEEP</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>proftime_T</name></type> <name>tm</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>empty_option</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>time_limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pat2</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>spat</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>epat</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pat3</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>spat</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>mpat</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>epat</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pat3</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat2</name></expr></argument>, <argument><expr><literal type="string">"\\m\\(%s\\m\\)\\|\\(%s\\m\\)"</literal></expr></argument>, <argument><expr><name>spat</name></expr></argument>, <argument><expr><name>epat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mpat</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>pat3</name></expr></argument>, <argument><expr><name>pat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pat3</name></expr></argument>, <argument><expr><literal type="string">"\\m\\(%s\\m\\)\\|\\(%s\\m\\)\\|\\(%s\\m\\)"</literal></expr></argument>,

<argument><expr><name>spat</name></expr></argument>, <argument><expr><name>epat</name></expr></argument>, <argument><expr><name>mpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_START</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>SEARCH_START</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>skip</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name> <operator>||</operator> <name><name>skip</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_skip</name> <operator>=</operator> <name><name>skip</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>skip</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR_POS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>firstpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR_POS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>foundpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>pat3</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>searchit_arg_T</name></type> <name>sia</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sia</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_stop_lnum</name></name> <operator>=</operator> <name>lnum_stop</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RELTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sia</name><operator>.</operator><name>sa_tm</name></name> <operator>=</operator> <operator>&amp;</operator><name>tm</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>searchit</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>FAIL</name> <operator>||</operator> <operator>(</operator><name><name>firstpos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>firstpos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>firstpos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>firstpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>foundpos</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>incl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>foundpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>&amp;=</operator> <operator>~</operator><name>SEARCH_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_skip</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>save_pos</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>eval_expr_to_bool</name><argument_list>(<argument><expr><name>skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>nest</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>pat2</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>nest</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <name>pat3</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nest</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_RETCOUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>retval</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_SETPCMARK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_REPEAT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>match_pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>match_pos</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SP_NOMOVE</name><operator>)</operator> <operator>||</operator> <name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pat3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_cpo</name> <operator>==</operator> <name>empty_option</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name>save_cpo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_searchpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>match_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>search_cmn</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>match_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>match_pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>match_pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SP_SUBPAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_server2client</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reply</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_restricted</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>check_connection</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>serverSendReply</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E258: Unable to send to client"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_serverlist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>serverGetVimNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>make_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>X_DISPLAY</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>serverGetVimNames</name><argument_list>(<argument><expr><name>X_DISPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_setcharsearch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>di</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>csearch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>csearch</name> <operator>=</operator> <call><name>dict_get_string</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"char"</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>csearch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>csearch</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_last_csearch</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>csearch</name></expr></argument>, <argument><expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>csearch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_last_csearch</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>csearch</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>csearch</name></expr></argument>, <argument><expr><call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>csearch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"forward"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_csearch_direction</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>FORWARD</name></expr> </then><else>: <expr><name>BACKWARD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>dict_find</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"until"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_csearch_until</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_setenv</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>namebuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>valbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_SPECIAL</name>

<operator>&amp;&amp;</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_unsetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>valbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_setfperm</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>modebuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mode_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode_str</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>modebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mode_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>mch_setperm</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_setpos</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>curswant</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curswant</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curswant</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>=</operator> <name>curswant</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>setmark_pos</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>fnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_setreg</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strregname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stropt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>append</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>yank_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>block_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <name>MAUTO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>append</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>strregname</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>strregname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>regname</name> <operator>=</operator> <operator>*</operator><name>strregname</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regname</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>regname</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regname</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>stropt</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stropt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>stropt</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>stropt</name></expr></incr>)</control><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>stropt</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><name>append</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> 

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><name>Ctrl_V</name></expr>:</case> 

<expr_stmt><expr><name>yank_type</name> <operator>=</operator> <name>MBLOCK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>stropt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>stropt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stropt</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>stropt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>lstval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>allocval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>curval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>curallocval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>ll</name> <init>= <expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>ll</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ll</name><operator>-&gt;</operator><name>lv_len</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>lstval</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lstval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>curval</name> <operator>=</operator> <name>lstval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocval</name> <operator>=</operator> <name>lstval</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>curallocval</name> <operator>=</operator> <name>allocval</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>range_list_materialize</name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>li</name> <operator>=</operator> <name><name>ll</name><operator>-&gt;</operator><name>lv_first</name></name></expr>;</init> <condition><expr><name>li</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>li</name> <operator>=</operator> <name><name>li</name><operator>-&gt;</operator><name>li_next</name></name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>strval</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>li</name><operator>-&gt;</operator><name>li_tv</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_lstval</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strval</name> <operator>==</operator> <name>buf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>strval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_lstval</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curallocval</name><operator>++</operator> <operator>=</operator> <name>strval</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curval</name><operator>++</operator> <operator>=</operator> <name>strval</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>curval</name><operator>++</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_reg_contents_lst</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>lstval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>append</name></expr></argument>, <argument><expr><name>yank_type</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_lstval</name>:</label>

<while>while <condition>(<expr><name>curallocval</name> <operator>&gt;</operator> <name>allocval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><operator>--</operator><name>curallocval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>lstval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>strval</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_reg_contents_ex</name><argument_list>(<argument><expr><name>regname</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>append</name></expr></argument>, <argument><expr><name>yank_type</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_settagstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>e_invact2</name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E962: Invalid action: '%s'"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>action</name> <init>= <expr><literal type="char">'r'</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>find_win_by_nr_or_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_DICT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_dictreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_dict</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>actstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>actstr</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>actstr</name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <operator>*</operator><name>actstr</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <operator>*</operator><name>actstr</name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>actstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>*</operator><name>actstr</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invact2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>actstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_stringreq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_tagstack</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_sha256</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><call><name>sha256_bytes</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_shellescape</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_special</name> <init>= <expr><call><name>non_zero_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave_shellescape</name><argument_list>(

<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>do_special</name></expr></argument>, <argument><expr><name>do_special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_shiftwidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>get_sw_value_col</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>get_sw_value</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_sin</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_sinh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>sinh</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_soundfold</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>eval_soundfold</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_spellbadword</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hlf_T</name></type> <name>attr</name> <init>= <expr><name>HLF_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_move_to</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <call><name>ml_get_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_set_curswant</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_p_spl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>capcol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>capcol</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <name>HLF_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>word</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>capcol</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator>

<ternary><condition><expr><name>attr</name> <operator>==</operator> <name>HLF_SPB</name></expr> ?</condition><then> <expr><literal type="string">"bad"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>attr</name> <operator>==</operator> <name>HLF_SPR</name></expr> ?</condition><then> <expr><literal type="string">"rare"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>attr</name> <operator>==</operator> <name>HLF_SPL</name></expr> ?</condition><then> <expr><literal type="string">"local"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>attr</name> <operator>==</operator> <name>HLF_SPC</name></expr> ?</condition><then> <expr><literal type="string">"caps"</literal></expr> </then><else>:

<expr><literal type="string">""</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_spellsuggest</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>typeerr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_capital</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_spell</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxcount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_capital</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>typeerr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>spell_suggest_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>maxcount</name></expr></argument>, <argument><expr><name>need_capital</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>listitem_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>li</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>v_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>li</name><operator>-&gt;</operator><name>li_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_split</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>patbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keepempty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>typeerr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_cpo</name> <operator>=</operator> <name>p_cpo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>typeerr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>keepempty</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pat</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"[\\x01- ]\\+"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>typeerr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>RE_MAGIC</name> <operator>+</operator> <name>RE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>regmatch</name><operator>.</operator><name>rm_ic</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>keepempty</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>vim_regexec_nl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keepempty</name> <operator>||</operator> <name>end</name> <operator>&gt;</operator> <name>str</name> <operator>||</operator> <operator>(</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name><operator>-&gt;</operator><name>lv_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>match</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&lt;</operator> <name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>save_cpo</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_sqrt</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_str2float</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isneg</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>string2float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isneg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_str2list</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>utf8</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>utf8</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>||</operator> <name>utf8</name></expr>)</condition>

<block>{<block_content>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ptr2len</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ptr2char</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name>utf8</name> <operator>||</operator> <name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptr2len</name> <operator>=</operator> <name>utf_ptr2len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2char</name> <operator>=</operator> <name>utf_ptr2char</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ptr2len</name> <operator>=</operator> <name>mb_ptr2len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2char</name> <operator>=</operator> <name>mb_ptr2char</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>ptr2char</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_str2nr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isneg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>!=</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>base</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name> <operator>&amp;&amp;</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>what</name> <operator>|=</operator> <name>STR2NR_QUOTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isneg</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>base</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>what</name> <operator>|=</operator> <name>STR2NR_BIN</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>what</name> <operator>|=</operator> <name>STR2NR_OCT</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>what</name> <operator>|=</operator> <name>STR2NR_HEX</name> <operator>+</operator> <name>STR2NR_FORCE</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vim_str2nr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isneg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strgetchar</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byteidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>charidx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>charidx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>byteidx</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>charidx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>mb_ptr2char</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>byteidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>charidx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>byteidx</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>byteidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_stridx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>needle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>haystack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_haystack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>needle</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_haystack</name> <operator>=</operator> <name>haystack</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>haystack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start_idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>||</operator> <name>start_idx</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>haystack</name> <operator>+=</operator> <name>start_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>haystack</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>needle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>-</operator> <name>save_haystack</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_string</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>tv2string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>,

<argument><expr><call><name>get_copyID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strlen</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(

<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strchars</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipcc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>varnumber_T</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func_mb_ptr2char_adv</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skipcc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>skipcc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>skipcc</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>func_mb_ptr2char_adv</name> <operator>=</operator> <ternary><condition><expr><name>skipcc</name></expr> ?</condition><then> <expr><name>mb_ptr2char_adv</name></expr> </then><else>: <expr><name>mb_cptr2char_adv</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>func_mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strdisplaywidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><call><name>linetabsize_col</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>col</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strwidth</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><call><name>mb_string2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strcharpart</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nbyte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nchar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nchar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>nchar</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nbyte</name> <operator>&lt;</operator> <name>slen</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nbyte</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>nbyte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>nchar</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nbyte</name> <operator>=</operator> <name>nchar</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>charlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>charlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nbyte</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <name>slen</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>nbyte</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>charlen</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name> <operator>-</operator> <name>nbyte</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbyte</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>nbyte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbyte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>nbyte</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nbyte</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>nbyte</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name> <operator>-</operator> <name>nbyte</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>nbyte</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strpart</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>n</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>slen</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strridx</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>needle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>haystack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lastmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>haystack_len</name></decl>, <decl><type ref="prev"/><name>end_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>needle</name> <operator>=</operator> <call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>haystack</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>haystack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>haystack_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>end_idx</name> <operator>=</operator> <name>haystack_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>needle</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lastmatch</name> <operator>=</operator> <name>haystack</name> <operator>+</operator> <name>end_idx</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>rest</name> <operator>=</operator> <name>haystack</name></expr>;</init> <condition><expr><operator>*</operator><name>rest</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>rest</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>rest</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rest</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>needle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rest</name> <operator>&gt;</operator> <name>haystack</name> <operator>+</operator> <name>end_idx</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lastmatch</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastmatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><operator>(</operator><name>lastmatch</name> <operator>-</operator> <name>haystack</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_strtrans</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>transstr</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_submatch</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>no</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E935: invalid submatch number: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retList</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retList</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>reg_submatch</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>reg_submatch_list</name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_substitute</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>patbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>subbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>flagsbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>tv_get_string_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>patbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>flg</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flagsbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_FUNC</name> <operator>||</operator> <name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expr</name> <operator>=</operator> <operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>sub</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expr</name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <name>flg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>do_string_sub</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>flg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_swapinfo</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_b0_dict</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_swapname</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tv_get_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name><operator>-&gt;</operator><name>mf_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_synID</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trans</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transerr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>trans</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transerr</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_id</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col</name></expr></argument>, <argument><expr><name>trans</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_synIDattr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>what</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>modebuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>tv_get_string_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>modebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modec</name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name>modec</name> <operator>!=</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name>modec</name> <operator>!=</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>USE_24BIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modec</name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name>t_colors</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modec</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>modec</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_color</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_BOLD</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_color</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_INVERSE</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_ITALIC</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_highlight_name_ext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_INVERSE</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_color</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator>

<call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_STRIKETHROUGH</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_STANDOUT</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">5</literal> <operator>||</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>what</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_UNDERLINE</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>highlight_has_attr</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>HL_UNDERCURL</name></expr></argument>, <argument><expr><name>modec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_synIDtrans</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_final_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_synconcealed</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>syntax_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matchid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>str</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rettv_list_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_get_id</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <call><name>get_syntax_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matchid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>syntax_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cchar</name> <operator>=</operator> <call><name>syn_get_sub_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cchar</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cchar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>lcs_conceal</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>lcs_conceal</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cchar</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>mb_char2bytes</name>)<argument_list>(<argument><expr><name>cchar</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cchar</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>syntax_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>matchid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_synstack</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rettv_list_set</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>syn_get_id</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syn_get_stack_item</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tabpagebuflist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>find_tabpage</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tp</name> <operator>==</operator> <name>curtab</name><operator>)</operator></expr> ?</condition><then> <expr><name>firstwin</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>list_append_number</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>,

<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tagfiles</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tagname_T</name></type> <name>tn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>first</name> <operator>=</operator> <name>TRUE</name></expr>;</init> <condition>;</condition> <incr><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_tagfname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tn</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <call><name>list_append_string</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tagname_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_taglist</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tag_pattern</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag_pattern</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tag_pattern</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>!=</operator> <name>VAR_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rettv_list_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>get_tags</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>tag_pattern</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tan</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>tan</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tanh</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <call><name>tanh</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tolower</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>strlow_save</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_toupper</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>strup_save</name><argument_list>(<argument><expr><call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_tr</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>in_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fromstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tostr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fromlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tolen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cplen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_str</name> <operator>=</operator> <call><name>tv_get_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fromstr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tostr</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromstr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tostr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fromstr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tostr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fromstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>in_str</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>inlen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>in_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpstr</name> <operator>=</operator> <name>in_str</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cplen</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>fromstr</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>fromlen</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromlen</name> <operator>==</operator> <name>inlen</name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>in_str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tostr</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>tolen</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>tolen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cplen</name> <operator>=</operator> <name>tolen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cpstr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <name>cpstr</name> <operator>==</operator> <name>in_str</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tostr</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>tolen</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>tolen</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>ga</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><name>cpstr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>cplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ga</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <name>cplen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_str</name> <operator>+=</operator> <name>inlen</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>fromstr</name></expr></argument>, <argument><expr><operator>*</operator><name>in_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name><name>tostr</name><index>[<expr><name>p</name> <operator>-</operator> <name>fromstr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>*</operator><name>in_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>in_str</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name><name>ga</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_trim</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf1</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf2</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mask</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>head</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>!=</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mask</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>tail</name> <operator>=</operator> <name>head</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>tail</name> <operator>&gt;</operator> <name>head</name></expr>;</condition> <incr><expr><name>tail</name> <operator>=</operator> <name>prev</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>!=</operator> <literal type="number">0xa0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>mask</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tail</name> <operator>-</operator> <name>head</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_trunc</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float_T</name></type> <name>f</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_float_arg</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <ternary><condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_type</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_NUMBER</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_STRING</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_STRING</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_FUNC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_LIST</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_LIST</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_DICT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_FLOAT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_BOOL</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_BOOL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_NONE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_JOB</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_JOB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_CHANNEL</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_CHANNEL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_BLOB</name></expr>:</case> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>VAR_TYPE_BLOB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_VOID</name></expr>:</case>

<expr_stmt><expr><call><name>internal_error_no_abort</name><argument_list>(<argument><expr><literal type="string">"f_type(UNKNOWN)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_virtcol</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name> <init>= <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>var2fpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <name>fnum</name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_visualmode</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual_mode_eval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>non_zero_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual_mode_eval</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_wildmenumode</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_windowsversion</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>windowsVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_wordcount</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rettv_dict_alloc</name><argument_list>(<argument><expr><name>rettv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cursor_pos_info</name><argument_list>(<argument><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>f_xor</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argvars</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>rettv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>

<operator>^</operator> <call><name>tv_get_number_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
