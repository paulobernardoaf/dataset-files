<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_x11.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Shell.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XM_XPMP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/XpmP.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xpm.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/xpm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlocale.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_SUNKEYSYM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Sunkeysym.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XMU_EDITRES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/Editres.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_NAME</name></cpp:macro> <cpp:value>"vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIM_CLASS</name></cpp:macro> <cpp:value>"Vim"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_FONT</name></cpp:macro> <cpp:value>"7x13"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_FONT</name></cpp:macro> <cpp:value>XtDefaultFontSet</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_FONT</name></cpp:macro> <cpp:value>XtDefaultFont</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_TOOLTIP_FONT</name></cpp:macro> <cpp:value>XtDefaultFontSet</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_BG_COLOR</name></cpp:macro> <cpp:value>"gray77"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_FG_COLOR</name></cpp:macro> <cpp:value>"black"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_SCROLL_BG_COLOR</name></cpp:macro> <cpp:value>"gray60"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_SCROLL_FG_COLOR</name></cpp:macro> <cpp:value>"gray77"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_TOOLTIP_BG_COLOR</name></cpp:macro> <cpp:value>"#ffff91"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_TOOLTIP_FG_COLOR</name></cpp:macro> <cpp:value>"#000000"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_BG_COLOR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_MENU_FG_COLOR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_SCROLL_BG_COLOR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_SCROLL_FG_COLOR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_TOOLTIP_BG_COLOR</name></cpp:macro> <cpp:value>"#ffff91"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_TOOLTIP_FG_COLOR</name></cpp:macro> <cpp:value>"#000000"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Widget</name></type> <name>vimShell</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name><name>wm_atoms</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELETE_WINDOW_IDX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_YOURSELF_IDX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XFontSet</name></type> <name>current_fontset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDrawString</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>win</name></type></parameter>, <parameter><type><name>gc</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current_fontset != NULL) XmbDrawString(dpy, win, current_fontset, gc, x, y, str, n); else XDrawString(dpy, win, gc, x, y, str, n); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDrawString16</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>win</name></type></parameter>, <parameter><type><name>gc</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current_fontset != NULL) XwcDrawString(dpy, win, current_fontset, gc, x, y, (wchar_t *)str, n); else XDrawString16(dpy, win, gc, x, y, (XChar2b *)str, n); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDrawImageString16</name><parameter_list>(<parameter><type><name>dpy</name></type></parameter>, <parameter><type><name>win</name></type></parameter>, <parameter><type><name>gc</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (current_fontset != NULL) XwcDrawImageString(dpy, win, current_fontset, gc, x, y, (wchar_t *)str, n); else XDrawImageString16(dpy, win, gc, x, y, (XChar2b *)str, n); } while (0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_fontset_sanity</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fontset_width</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fontset_ascent</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>prev_fg_color</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>prev_bg_color</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>guicolor_T</name></type> <name>prev_sp_color</name> <init>= <expr><name>INVALCOLOR</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>XButtonPressedEvent</name></type> <name>last_mouse_event</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_x11_check_copy_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_x11_send_event_handler</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_x11_wm_protocol_handler</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Cursor</name></type> <name>gui_x11_create_blank_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct><specifier>static</specifier> struct <name>specialkey</name>

<block>{

<decl_stmt><decl><type><name>KeySym</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code1</name></decl>;</decl_stmt>

}</block> <decl><name><name>special_keys</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>XK_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F16</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F17</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F18</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F19</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F20</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F21</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F22</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F23</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F24</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F25</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F26</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F27</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F28</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F29</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F30</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F31</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F32</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F33</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F34</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'O'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_F35</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>, 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SunXK_F36</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>SunXK_F36</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>SunXK_F37</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>XK_Help</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Undo</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_BackSpace</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Insert</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Delete</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Home</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_End</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Prior</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Next</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_Print</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XK_KP_Left</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>XK_KP_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Insert</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><name>KE_KINS</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Delete</name></expr>, <expr><name>KS_EXTRA</name></expr>, <expr><operator>(</operator><name>char_u</name><operator>)</operator><name>KE_KDEL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Home</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_End</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Prior</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Next</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Add</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Subtract</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Divide</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Multiply</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Enter</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'A'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_Decimal</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_0</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'C'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_1</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_2</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_3</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_4</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'G'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_5</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'H'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_6</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_7</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'J'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_8</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XK_KP_9</name></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNboldFont</name></cpp:macro> <cpp:value>"boldFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCBoldFont</name></cpp:macro> <cpp:value>"BoldFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNitalicFont</name></cpp:macro> <cpp:value>"italicFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCItalicFont</name></cpp:macro> <cpp:value>"ItalicFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNboldItalicFont</name></cpp:macro> <cpp:value>"boldItalicFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCBoldItalicFont</name></cpp:macro> <cpp:value>"BoldItalicFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNscrollbarWidth</name></cpp:macro> <cpp:value>"scrollbarWidth"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCScrollbarWidth</name></cpp:macro> <cpp:value>"ScrollbarWidth"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNmenuHeight</name></cpp:macro> <cpp:value>"menuHeight"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCMenuHeight</name></cpp:macro> <cpp:value>"MenuHeight"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNmenuFont</name></cpp:macro> <cpp:value>"menuFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCMenuFont</name></cpp:macro> <cpp:value>"MenuFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNmenuFontSet</name></cpp:macro> <cpp:value>"menuFontSet"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCMenuFontSet</name></cpp:macro> <cpp:value>"MenuFontSet"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNmenuBackground</name></cpp:macro> <cpp:value>"menuBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCMenuBackground</name></cpp:macro> <cpp:value>"MenuBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNmenuForeground</name></cpp:macro> <cpp:value>"menuForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCMenuForeground</name></cpp:macro> <cpp:value>"MenuForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNscrollBackground</name></cpp:macro> <cpp:value>"scrollBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCScrollBackground</name></cpp:macro> <cpp:value>"ScrollBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNscrollForeground</name></cpp:macro> <cpp:value>"scrollForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCScrollForeground</name></cpp:macro> <cpp:value>"ScrollForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNtooltipBackground</name></cpp:macro> <cpp:value>"tooltipBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCTooltipBackground</name></cpp:macro> <cpp:value>"TooltipBackground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNtooltipForeground</name></cpp:macro> <cpp:value>"tooltipForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCTooltipForeground</name></cpp:macro> <cpp:value>"TooltipForeground"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtNtooltipFont</name></cpp:macro> <cpp:value>"tooltipFont"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XtCTooltipFont</name></cpp:macro> <cpp:value>"TooltipFont"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtResource</name></type> <name><name>vim_resources</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{

<expr><name>XtNforeground</name></expr>,

<expr><name>XtCForeground</name></expr>,

<expr><name>XtRPixel</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixel</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>def_norm_pixel</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>XtDefaultForeground</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNbackground</name></expr>,

<expr><name>XtCBackground</name></expr>,

<expr><name>XtRPixel</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixel</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>def_back_pixel</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>XtDefaultBackground</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNfont</name></expr>,

<expr><name>XtCFont</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><name>XtDefaultFont</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNboldFont</name></expr>,

<expr><name>XtCBoldFont</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_bold_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><literal type="string">""</literal></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNitalicFont</name></expr>,

<expr><name>XtCItalicFont</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_ital_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><literal type="string">""</literal></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNboldItalicFont</name></expr>,

<expr><name>XtCBoldItalicFont</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_boldital_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><literal type="string">""</literal></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNgeometry</name></expr>,

<expr><name>XtCGeometry</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>geom</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><literal type="string">""</literal></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNreverseVideo</name></expr>,

<expr><name>XtCReverseVideo</name></expr>,

<expr><name>XtRBool</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bool</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_rev_video</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>False</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNborderWidth</name></expr>,

<expr><name>XtCBorderWidth</name></expr>,

<expr><name>XtRInt</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>border_width</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">2</literal></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNscrollbarWidth</name></expr>,

<expr><name>XtCScrollbarWidth</name></expr>,

<expr><name>XtRInt</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>scrollbar_width</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>SB_DEFAULT_WIDTH</name></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{

<expr><name>XtNmenuHeight</name></expr>,

<expr><name>XtCMenuHeight</name></expr>,

<expr><name>XtRInt</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>menu_height</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>MENU_DEFAULT_HEIGHT</name></expr> 

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>XtNmenuFontSet</name></expr>,

<expr><name>XtCMenuFontSet</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><name>XtNmenuFont</name></expr>,

<expr><name>XtCMenuFont</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_menu_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_MENU_FONT</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{

<expr><name>XtNmenuForeground</name></expr>,

<expr><name>XtCMenuForeground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_menu_fg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_MENU_FG_COLOR</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNmenuBackground</name></expr>,

<expr><name>XtCMenuBackground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_menu_bg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_MENU_BG_COLOR</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNscrollForeground</name></expr>,

<expr><name>XtCScrollForeground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_scroll_fg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_SCROLL_FG_COLOR</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNscrollBackground</name></expr>,

<expr><name>XtCScrollBackground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_scroll_bg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_SCROLL_BG_COLOR</name></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{

<expr><name>XtNtooltipForeground</name></expr>,

<expr><name>XtCTooltipForeground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_tooltip_fg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_TOOLTIP_FG_COLOR</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNtooltipBackground</name></expr>,

<expr><name>XtCTooltipBackground</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_tooltip_bg_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_TOOLTIP_BG_COLOR</name></expr>

}</block></expr>,

<expr><block>{

<expr><name>XtNtooltipFont</name></expr>,

<expr><name>XtCTooltipFont</name></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_tooltip_font_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>DFLT_TOOLTIP_FONT</name></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"balloonEvalFontSet"</literal></expr>,

<expr><name>XtCFontSet</name></expr>,

<expr><name>XtRFontSet</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>XFontSet</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>tooltip_fontset</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRImmediate</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NOFONTSET</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{

<expr><literal type="string">"preeditType"</literal></expr>,

<expr><literal type="string">"PreeditType"</literal></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_preedit_type_name</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="string">"OverTheSpot,OffTheSpot,Root"</literal></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"inputMethod"</literal></expr>,

<expr><literal type="string">"InputMethod"</literal></expr>,

<expr><name>XtRString</name></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>gui_T</name></expr></argument>, <argument><expr><name>rsrc_input_method</name></expr></argument>)</argument_list></call></expr>,

<expr><name>XtRString</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XrmOptionDescRec</name></type> <name><name>cmdline_options</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"-bg"</literal></expr>, <expr><literal type="string">".background"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-background"</literal></expr>, <expr><literal type="string">".background"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-fg"</literal></expr>, <expr><literal type="string">".foreground"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-foreground"</literal></expr>, <expr><literal type="string">".foreground"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-fn"</literal></expr>, <expr><literal type="string">".font"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-font"</literal></expr>, <expr><literal type="string">".font"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-boldfont"</literal></expr>, <expr><literal type="string">".boldFont"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-italicfont"</literal></expr>, <expr><literal type="string">".italicFont"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-geom"</literal></expr>, <expr><literal type="string">".geometry"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-geometry"</literal></expr>, <expr><literal type="string">".geometry"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-reverse"</literal></expr>, <expr><literal type="string">"*reverseVideo"</literal></expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-rv"</literal></expr>, <expr><literal type="string">"*reverseVideo"</literal></expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"+reverse"</literal></expr>, <expr><literal type="string">"*reverseVideo"</literal></expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr><literal type="string">"False"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"+rv"</literal></expr>, <expr><literal type="string">"*reverseVideo"</literal></expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr><literal type="string">"False"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-display"</literal></expr>, <expr><literal type="string">".display"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-iconic"</literal></expr>, <expr><literal type="string">".iconic"</literal></expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr><literal type="string">"True"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-name"</literal></expr>, <expr><literal type="string">".name"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-bw"</literal></expr>, <expr><literal type="string">".borderWidth"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-borderwidth"</literal></expr>, <expr><literal type="string">".borderWidth"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-sw"</literal></expr>, <expr><literal type="string">".scrollbarWidth"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-scrollbarwidth"</literal></expr>, <expr><literal type="string">".scrollbarWidth"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-mh"</literal></expr>, <expr><literal type="string">".menuHeight"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-menuheight"</literal></expr>, <expr><literal type="string">".menuHeight"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"-mf"</literal></expr>, <expr><literal type="string">".menuFontSet"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-menufont"</literal></expr>, <expr><literal type="string">".menuFontSet"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-menufontset"</literal></expr>, <expr><literal type="string">".menuFontSet"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{<expr><literal type="string">"-mf"</literal></expr>, <expr><literal type="string">".menuFont"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"-menufont"</literal></expr>, <expr><literal type="string">".menuFont"</literal></expr>, <expr><name>XrmoptionSepArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"-xrm"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>XrmoptionResArg</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gui_argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>gui_argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_timer_cb</name><parameter_list>(

<parameter><decl><type><name>XtPointer</name></type> <name>timed_out</name></decl></parameter>,

<parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>interval_id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>timed_out</name><operator>)</operator> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>channel_poll_cb</name><parameter_list>(

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>interval_id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XtIntervalId</name> <modifier>*</modifier></type><name>channel_timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>channel_handle_events</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>channel_timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><literal type="number">20</literal></expr></argument>,

<argument><expr><name>channel_poll_cb</name></expr></argument>, <argument><expr><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_visibility_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dud</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>VisibilityNotify</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xvisibility</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetGraphicsExposures</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator> <name>VisibilityUnobscured</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_expose_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dud</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XExposeEvent</name> <modifier>*</modifier></type><name>gevent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>Expose</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>gevent</name> <operator>=</operator> <operator>(</operator><name>XExposeEvent</name> <operator>*</operator><operator>)</operator><name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_x</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name>new_x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>shellRectangle</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>shell</name></decl></parameter>, <parameter><decl><type><name>XRectangle</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Window</name></type> <name>rootw</name></decl>, <decl><type ref="prev"/><name>shellw</name></decl>, <decl><type ref="prev"/><name>child</name></decl>, <decl><type ref="prev"/><name>parentw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>absx</name></decl>, <decl><type ref="prev"/><name>absy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>childrenCount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shellw</name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shellw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>XQueryTree</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shellw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>childrenCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parentw</name> <operator>==</operator> <name>rootw</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shellw</name> <operator>=</operator> <name>parentw</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shellw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XTranslateCoordinates</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>shellw</name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>absx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>absy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>absx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>absy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>XmNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_resize_window_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dud</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lastWidth</name></decl>, <decl><type ref="prev"/><name>lastHeight</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ConfigureNotify</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>lastWidth</name>

<operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>lastHeight</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lastWidth</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lastHeight</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>xconfigure</name><operator>.</operator><name>height</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>xim_get_status_area_height</name><argument_list>()</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>netbeans_active</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRectangle</name></type> <name>rec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>shellRectangle</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>netbeans_frame_moved</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_set_preedit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_focus_change_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FocusIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_enter_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_leave_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X_HAVE_UTF8_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X_HAVE_UTF8_STRING</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_UTF8LOOKUP</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_x11_key_hit_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dud</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XKeyPressedEvent</name> <modifier>*</modifier></type><name>ev_press</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>string2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string_shortbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>string_shortbuf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>string_alloced</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Status</name></type> <name>status</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>string</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>string2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>KeySym</name></type> <name>key_sym</name></decl>, <decl><type ref="prev"/><name>key_sym2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ev_press</name> <operator>=</operator> <operator>(</operator><name>XKeyPressedEvent</name> <operator>*</operator><operator>)</operator><name>event</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>xic</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTF8LOOKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Xutf8LookupString</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string_shortbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XmbLookupString</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string_shortbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XBufferOverflow</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>string</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string_alloced</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTF8LOOKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>Xutf8LookupString</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XmbLookupString</name><argument_list>(<argument><expr><name>xic</name></expr></argument>, <argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>,

<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XLookupNone</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>XLookupChars</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_sym</name> <operator>=</operator> <name>XK_VoidSymbol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTF8LOOKUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><name>enc_utf8</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string_alloced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>string_alloced</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>convert_input</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>string_alloced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>string_alloced</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XLookupString</name><argument_list>(<argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SunXK_F36</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>SunXK_F36</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>SunXK_F37</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>XK_space</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>XK_minus</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>ControlMask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl__</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XK_ISO_Left_Tab</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>key_sym</name> <operator>==</operator> <name>XK_ISO_Left_Tab</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>key_sym</name> <operator>=</operator> <name>XK_Tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>Mod1Mask</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>key_sym</name> <operator>==</operator> <name>XK_BackSpace</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Delete</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><name>enc_dbcs</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_is_active</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal>

<operator>||</operator> <operator>(</operator><name><name>p_wak</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <call><name>gui_is_menu_shortcut</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;=</operator> <operator>~</operator><name>Mod1Mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>XLookupString</name><argument_list>(<argument><expr><name>ev_press</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string2</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>key_sym2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key_sym2</name> <operator>==</operator> <name>XK_space</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>( <expr><name>len2</name> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>string2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>key_sym</name> <operator>==</operator> <name>XK_Tab</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>ShiftMask</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>Mod1Mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name>key_sym</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_space</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Tab</name>

<operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Return</name> <operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Linefeed</name>

<operator>||</operator> <name>key_sym</name> <operator>==</operator> <name>XK_Escape</name>

<operator>||</operator> <operator>(</operator><name>enc_dbcs</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>Mod1Mask</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>ShiftMask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>ControlMask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>Mod1Mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ev_press</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>Mod4Mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_META</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>K_CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name>intr_char</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>intr_char</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>trash_input_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TIP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>be</name> <operator>=</operator> <call><name>gui_mch_currently_showing_beval</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_unpost_balloon</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>

<block>{<block_content/>}</block> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>string_alloced</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_mouse_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dud</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timed_out</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>repeated_click</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>x_modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_modifiers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MotionNotify</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_modifiers</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x_modifiers</name> <operator>&amp;</operator> <operator>(</operator><name>Button1Mask</name> <operator>|</operator> <name>Button2Mask</name> <operator>|</operator> <name>Button3Mask</name><operator>)</operator><operator>)</operator></expr>

?</condition><then> <expr><name>MOUSE_DRAG</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>button</name> <operator>!=</operator> <name>MOUSE_DRAG</name></expr>)</condition> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dud</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mouse_moved</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ButtonPress</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timed_out</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>repeated_click</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><name>p_mouset</name></expr></argument>,

<argument><expr><name>gui_x11_timer_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>Button1</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>Button2</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_MIDDLE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>Button3</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>Button4</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_4</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>Button5</name></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_5</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_7</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_6</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_X1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_X2</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<return>return;</return> 

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ButtonRelease</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name>MOUSE_RELEASE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>x_modifiers</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>last_mouse_event</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vim_modifiers</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x_modifiers</name> <operator>&amp;</operator> <name>ShiftMask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_modifiers</name> <operator>&amp;</operator> <name>ControlMask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x_modifiers</name> <operator>&amp;</operator> <name>Mod1Mask</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vim_modifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>repeated_click</name></expr></argument>, <argument><expr><name>vim_modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gui_argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gui_argv</name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><operator>*</operator><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>arg</name> <operator>&lt;</operator> <operator>*</operator><name>argc</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>XtNumber</name><argument_list>(<argument><expr><name>cmdline_options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cmdline_options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>option</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>XtNumber</name><argument_list>(<argument><expr><name>cmdline_options</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-rv"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-reverse"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_reverse_arg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-fn"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-font"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>*</operator><name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_argument</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><operator>*</operator><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argc</name> <operator>-</operator> <name>arg</name><operator>)</operator>

<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmdline_options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argKind</name> <operator>!=</operator> <name>XrmoptionNoArg</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui_argv</name><index>[<expr><name>gui_argc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><operator>*</operator><name>argc</name> <operator>&gt;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>argc</name> <operator>-</operator> <name>arg</name><operator>)</operator>

<operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-nb"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dofork</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>netbeansArg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><operator>--</operator><operator>*</operator><name>argc</name> <operator>-</operator> <name>arg</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><operator>*</operator><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XtSpecificationRelease</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARDINAL</name></cpp:macro> <cpp:value>(Cardinal *)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>XtSpecificationRelease</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARDINAL</name></cpp:macro> <cpp:value>(Cardinal *)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARDINAL</name></cpp:macro> <cpp:value>(int *)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetLanguageProc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>open_app_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>app_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name> <operator>=</operator> <call><name>XtOpenDisplay</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>VIM_NAME</name></expr></argument>, <argument><expr><name>VIM_CLASS</name></expr></argument>,

<argument><expr><name>cmdline_options</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>cmdline_options</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>CARDINAL</name> <operator>&amp;</operator><name>gui_argc</name></expr></argument>, <argument><expr><name>gui_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>app_context</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>dpy</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dying</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_opendisp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XtInputId</name></type> <name>_xsmp_xtinputid</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>local_xsmp_handle_requests</name><parameter_list>(

<parameter><decl><type><name>XtPointer</name> <name>c</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier><name>s</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtInputId</name> <modifier>*</modifier><name>i</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>xsmp_handle_requests</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtRemoveInput</name><argument_list>(<argument><expr><name>_xsmp_xtinputid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>gc_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>gc_vals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

XSynchronize(gui.dpy, True);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vimShell</name> <operator>=</operator> <call><name>XtVaAppCreateShell</name><argument_list>(<argument><expr><name>VIM_NAME</name></expr></argument>, <argument><expr><name>VIM_CLASS</name></expr></argument>,

<argument><expr><name>applicationShellWidgetClass</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetApplicationResources</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>gui</name></expr></argument>,

<argument><expr><name>vim_resources</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>vim_resources</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_scroll_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_scroll_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>!=</operator> <name>MENU_DEFAULT_HEIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height_fixed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>rsrc_rev_video</name></name> <operator>&amp;&amp;</operator> <call><name>gui_get_lightness</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call>

<operator>&gt;</operator> <call><name>gui_get_lightness</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_check_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gc_mask</name> <operator>=</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_gc</name></name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gc_mask</name> <operator>|=</operator> <name>GCFunction</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GXxor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>=</operator> <name>VisibilityUnobscured</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>x11_setup_atoms</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_win_x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>gui_win_y</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_winpos</name><argument_list>(<argument><expr><name>gui_win_x</name></expr></argument>, <argument><expr><name>gui_win_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>geom</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>gui</name><operator>.</operator><name>geom</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>XParseGeometry</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>geom</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>WidthValue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HeightValue</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>option_was_set</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"window"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>XValue</name><operator>|</operator><name>YValue</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtNgeometry</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>geom</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_x11_create_widgets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_ICON</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_XPM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim_icon.xbm"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim_mask.xbm"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconPixmap</name></expr></argument>,

<argument><expr><call><name>XCreateBitmapFromData</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>,

<argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>vim_icon_bits</name></expr></argument>,

<argument><expr><name>vim_icon_width</name></expr></argument>,

<argument><expr><name>vim_icon_height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconMask</name></expr></argument>,

<argument><expr><call><name>XCreateBitmapFromData</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>,

<argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>vim_mask_icon_bits</name></expr></argument>,

<argument><expr><name>vim_mask_icon_width</name></expr></argument>,

<argument><expr><name>vim_mask_icon_height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>Cardinal</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>magick</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim32x32</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim32x32.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim16x16</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim16x16.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>magick</name></cpp:macro> <cpp:value>vim48x48</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../runtime/vim48x48.xpm"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>magick</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Pixmap</name></type> <name>icon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Pixmap</name></type> <name>icon_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>magick</name> <init>= <expr><name>vim32x32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XIconSize</name> <modifier>*</modifier></type><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number_sizes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Screen</name> <modifier>*</modifier></type><name>scr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XpmAttributes</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Colormap</name></type> <name>cmap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>root_window</name> <operator>=</operator> <call><name>XRootWindowOfScreen</name><argument_list>(<argument><expr><call><name>XtScreen</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetIconSizes</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>root_window</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number_sizes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>number_sizes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>size</name><operator>-&gt;</operator><name>max_height</name></name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <name><name>size</name><operator>-&gt;</operator><name>max_width</name></name> <operator>&gt;=</operator> <literal type="number">48</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>magick</name> <operator>=</operator> <name>vim48x48</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>size</name><operator>-&gt;</operator><name>max_height</name></name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>size</name><operator>-&gt;</operator><name>max_width</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>magick</name> <operator>=</operator> <name>vim32x32</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>size</name><operator>-&gt;</operator><name>max_height</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name><name>size</name><operator>-&gt;</operator><name>max_width</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>magick</name> <operator>=</operator> <name>vim16x16</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dsp</name> <operator>=</operator> <call><name>XtDisplay</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scr</name> <operator>=</operator> <call><name>XtScreen</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cmap</name> <operator>=</operator> <call><name>DefaultColormap</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtNcolormap</name></expr></argument>, <argument><expr><name>cmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmCloseness</name> <operator>|</operator> <name>XpmReturnPixels</name> <operator>|</operator> <name>XpmColormap</name> <operator>|</operator> <name>XpmDepth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>closeness</name></name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>colormap</name></name> <operator>=</operator> <name>cmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attr</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <call><name>DefaultDepthOfScreen</name><argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>icon</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>root_window</name></expr></argument>, <argument><expr><name>magick</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>icon</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>icon_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtNiconPixmap</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><name>XtNiconMask</name></expr></argument>, <argument><expr><name>icon_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XmNiconPixmap</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><name>XmNiconMask</name></expr></argument>, <argument><expr><name>icon_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>color_approx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim E458: Cannot allocate colormap entry, some colors may be incorrect"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_init_tooltip_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_init_menu_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name>xsmp_icefd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>_xsmp_xtinputid</name> <operator>=</operator> <call><name>XtAppAddInput</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>xsmp_icefd</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>XtInputReadMask</name></expr></argument>, <argument><expr><name>local_xsmp_handle_requests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_uninit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_x11_destroy_widgets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCloseDisplay</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vimShell</name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>gui_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long_u</name></type> <name>gc_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>gc_vals</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gc_mask</name> <operator>=</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XChangeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>back_gc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XChangeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_gc</name></name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gc_mask</name> <operator>|=</operator> <name>GCFunction</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>^</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_vals</name><operator>.</operator><name>function</name></name> <operator>=</operator> <name>GXxor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XChangeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name></expr></argument>, <argument><expr><name>gc_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_x11_set_back_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtRealizeWidget</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><call><name>XtNameToWidget</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><literal type="string">"*vimForm"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>wid</name></name> <operator>=</operator> <call><name>gui_x11_get_wid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name> <operator>=</operator> <call><name>gui_x11_create_blank_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wm_atoms</name><index>[<expr><name>SAVE_YOURSELF_IDX</name></expr>]</index></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><literal type="string">"WM_SAVE_YOURSELF"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wm_atoms</name><index>[<expr><name>DELETE_WINDOW_IDX</name></expr>]</index></name> <operator>=</operator>

<call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wm_atoms</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>gui_x11_wm_protocol_handler</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XMU_EDITRES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><operator>(</operator><name>EventMask</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>_XEditResCheckMessages</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>serverName</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>serverDelayedStartName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>commWindow</name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>serverRegisterName</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>serverDelayedStartName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>serverChangeRegisteredWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>PropertyChangeMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>gui_x11_send_event_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>gui_position_menu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_set_toolbar_pos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_width</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>xim_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_init_tooltip_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XrmValue</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_font_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XFontSet</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtConvertAndStore</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtRString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>XtRFontSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>False</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_init_menu_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XrmValue</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>from</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_font_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GuiFontset</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtConvertAndStore</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtRString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>XtRFontSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>False</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_font_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>menu_font</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GuiFont</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtConvertAndStore</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>XtRString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>XtRFontStruct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>False</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name> <name>rc</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

XtCloseDisplay(gui.dpy);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>gui_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>xpos</name></decl>, <decl><type ref="prev"/><name>ypos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpos</name></expr></argument>,

<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ypos</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>xpos</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>ypos</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_shellsize</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>base_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>base_height</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>direction</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>height</name> <operator>+=</operator> <call><name>xim_get_status_area_height</name><argument_list>()</argument_list></call></expr><operator>,</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNwidthInc</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>,

<argument><expr><name>XtNheightInc</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XtSpecificationRelease</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>XtSpecificationRelease</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>

<argument><expr><name>XtNbaseWidth</name></expr></argument>, <argument><expr><name>base_width</name></expr></argument>,

<argument><expr><name>XtNbaseHeight</name></expr></argument>, <argument><expr><name>base_height</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>XtNminWidth</name></expr></argument>, <argument><expr><name>min_width</name></expr></argument>,

<argument><expr><name>XtNminHeight</name></expr></argument>, <argument><expr><name>min_height</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_get_screen_dimensions</name><parameter_list>(

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_w</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>screen_w</name> <operator>=</operator> <call><name>DisplayWidth</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>=</operator> <call><name>DisplayHeight</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>p_ghr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init_font</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>do_fontset</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XFontSet</name></type> <name>fontset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <call><name>gui_xm_select_font</name><argument_list>(<argument><expr><call><name>hl_get_font_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>do_fontset</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fontset</name> <operator>=</operator> <operator>(</operator><name>XFontSet</name><operator>)</operator><call><name>gui_mch_get_fontset</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fontset</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>rsrc_font_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_name</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>DFLT_FONT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_mch_free_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_free_fontset</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fontset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <operator>(</operator><name>GuiFontset</name><operator>)</operator><name>fontset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <call><name>fontset_width</name><argument_list>(<argument><expr><name>fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <call><name>fontset_height</name><argument_list>(<argument><expr><name>fontset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <call><name>fontset_ascent</name><argument_list>(<argument><expr><name>fontset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <operator>(</operator><name>GuiFont</name><operator>)</operator><name>font</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>=</operator> <name>NOFONTSET</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>ascent</name></name> <operator>+</operator> <name><name>font</name><operator>-&gt;</operator><name>descent</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>ascent</name></name> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>hl_set_font_name</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>rsrc_font_name</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>==</operator> <name>NOFONT</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>rsrc_bold_font_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>gui</name><operator>.</operator><name>rsrc_bold_font_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>rsrc_bold_font_name</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>==</operator> <name>NOFONT</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>rsrc_ital_font_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>gui</name><operator>.</operator><name>rsrc_ital_font_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>rsrc_ital_font_name</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>==</operator> <name>NOFONT</name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>rsrc_boldital_font_name</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>gui</name><operator>.</operator><name>rsrc_boldital_font_name</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>=</operator> <call><name>gui_mch_get_font</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>rsrc_boldital_font_name</name></name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>bold_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>bold_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>ital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>ital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>boldital_font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>boldital_font</name></name> <operator>=</operator> <name>NOFONT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_motif_synch_fonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GuiFont</name></type>

<name>gui_mch_get_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>giveErrorIfMissing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NOFONT</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>giveErrorIfMissing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_font</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NOFONT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Font Information for '%s':\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" w = %d, h = %d, ascent = %d, descent = %d\n"</literal></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>-&gt;</operator><name>ascent</name></name> <operator>+</operator> <name><name>font</name><operator>-&gt;</operator><name>descent</name></name></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>ascent</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>-&gt;</operator><name>descent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" max ascent = %d, max descent = %d, max h = %d\n"</literal></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>ascent</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>descent</name></name></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>descent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" min lbearing = %d, min rbearing = %d\n"</literal></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>min_bounds</name><operator>.</operator><name>lbearing</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>-&gt;</operator><name>min_bounds</name><operator>.</operator><name>rbearing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" max lbearing = %d, max rbearing = %d\n"</literal></expr></argument>,

<argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>lbearing</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>rbearing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" leftink = %d, rightink = %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>font</name><operator>-&gt;</operator><name>min_bounds</name><operator>.</operator><name>lbearing</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>rbearing</name></name> <operator>&gt;</operator> <name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>width</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>font</name><operator>-&gt;</operator><name>min_bounds</name><operator>.</operator><name>width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_fontwidth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NOFONT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GuiFont</name><operator>)</operator><name>font</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_get_fontname</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>font</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetFontProperty</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>XA_FONT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xa_font_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xa_font_name</name> <operator>=</operator> <call><name>XGetAtomName</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xa_font_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>xa_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>xa_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_adjust_charheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <call><name>fontset_height</name><argument_list>(<argument><expr><operator>(</operator><name>XFontSet</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <call><name>fontset_ascent</name><argument_list>(<argument><expr><operator>(</operator><name>XFontSet</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>fontset</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>norm_font</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>ascent</name></name> <operator>+</operator> <name><name>font</name><operator>-&gt;</operator><name>descent</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>ascent</name></name> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>Font</name></type> <name>prev_font</name> <init>= <expr><operator>(</operator><name>Font</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>fid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name>font</name><operator>)</operator><operator>-&gt;</operator><name>fid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>!=</operator> <name>prev_font</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XSetFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_gc</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_font</name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name>font</name><operator>)</operator><operator>-&gt;</operator><name>ascent</name> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>current_fontset</name> <operator>=</operator> <operator>(</operator><name>XFontSet</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_fontset</name><parameter_list>(<parameter><decl><type><name>GuiFontset</name></type> <name>fontset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>current_fontset</name> <operator>=</operator> <operator>(</operator><name>XFontSet</name><operator>)</operator><name>fontset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <call><name>fontset_ascent</name><argument_list>(<argument><expr><name>current_fontset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_free_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_free_fontset</name><parameter_list>(<parameter><decl><type><name>GuiFontset</name></type> <name>fontset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fontset</name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFreeFontSet</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XFontSet</name><operator>)</operator><name>fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>GuiFontset</name></type>

<name>gui_mch_get_fontset</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>giveErrorIfMissing</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fixed_width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontSet</name></type> <name>fontset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>missing</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>def_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_missing</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOFONTSET</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fontset</name> <operator>=</operator> <call><name>XCreateFontSet</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>missing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_missing</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>def_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_missing</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>giveErrorIfMissing</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E250: Fonts for the following charsets are missing in fontset %s:"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_missing</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>missing</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFreeStringList</name><argument_list>(<argument><expr><name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fontset</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>giveErrorIfMissing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_fontset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NOFONTSET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fixed_width</name> <operator>&amp;&amp;</operator> <call><name>check_fontset_sanity</name><argument_list>(<argument><expr><name>fontset</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFontSet</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>fontset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NOFONTSET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>GuiFontset</name><operator>)</operator><name>fontset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_fontset_sanity</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier><modifier>*</modifier></type><name>xfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>font_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_font_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>base_name</name> <operator>=</operator> <call><name>XBaseFontNameListOfFontSet</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>XFontsOfFontSet</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>min_bounds</name><operator>.</operator><name>width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E252: Fontset name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font '%s' is not fixed-width"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>font_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>min_width</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name><operator>&lt;</operator><name>min_width</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>min_width</name> <operator>=</operator> <name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_font_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>*</operator> <name>min_width</name>

<operator>&amp;&amp;</operator> <name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name>min_width</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E253: Fontset name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font0: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>font_name</name><index>[<expr><name>min_font_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font%d: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>font_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font%d width is not twice that of font0"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font0 width: %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>xfs</name><index>[<expr><name>min_font_idx</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font%d width: %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>xfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>max_bounds</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fontset_width</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>XmbTextEscapement</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="string">"Vim"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>fontset_height</name><parameter_list>(

<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontSetExtents</name> <modifier>*</modifier></type><name>extents</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extents</name> <operator>=</operator> <call><name>XExtentsOfFontSet</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>extents</name><operator>-&gt;</operator><name>max_logical_extent</name><operator>.</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_ATHENA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>fontset_height2</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontSetExtents</name> <modifier>*</modifier></type><name>extents</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extents</name> <operator>=</operator> <call><name>XExtentsOfFontSet</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>extents</name><operator>-&gt;</operator><name>max_ink_extent</name><operator>.</operator><name>height</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int

fontset_descent(XFontSet fs)

{

XFontSetExtents *extents;

extents = XExtentsOfFontSet (fs);

return extents-&gt;max_logical_extent.height + extents-&gt;max_logical_extent.y;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fontset_ascent</name><parameter_list>(<parameter><decl><type><name>XFontSet</name></type> <name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XFontSetExtents</name> <modifier>*</modifier></type><name>extents</name></decl>;</decl_stmt>

<expr_stmt><expr><name>extents</name> <operator>=</operator> <call><name>XExtentsOfFontSet</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><name><name>extents</name><operator>-&gt;</operator><name>max_logical_extent</name><operator>.</operator><name>y</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>guicolor_T</name></type> <name>requested</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>requested</name> <operator>=</operator> <call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>requested</name> <operator>==</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INVALCOLOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>gui_mch_get_rgb_color</name><argument_list>(

<argument><expr><operator>(</operator><name>requested</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>,

<argument><expr><operator>(</operator><name>requested</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>requested</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XColor</name></type> <name>available</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Colormap</name></type> <name>colormap</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

char spec[8]; 

vim_snprintf(spec, sizeof(spec), "#%.2x%.2x%.2x", r, g, b);

if (XParseColor(gui.dpy, colormap, (char *)spec, &amp;available) != 0

&amp;&amp; XAllocColor(gui.dpy, colormap, &amp;available) != 0)

return (guicolor_T)available.pixel;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>colormap</name> <operator>=</operator> <call><name>DefaultColormap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>available</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XColor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>available</name><operator>.</operator><name>red</name></name> <operator>=</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>available</name><operator>.</operator><name>green</name></name> <operator>=</operator> <name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>available</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XAllocColor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>colormap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>available</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><name><name>available</name><operator>.</operator><name>pixel</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>INVALCOLOR</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_fg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <name>prev_fg_color</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_fg_color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_bg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <name>prev_bg_color</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XSetBackground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_bg_color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_sp_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>prev_sp_color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Cursor</name></type>

<name>gui_x11_create_blank_mouse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>blank_pixmap</name> <init>= <expr><call><name>XCreatePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>gc</name> <init>= <expr><call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>blank_pixmap</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>XGCValues</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XDrawPoint</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>blank_pixmap</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>XCreatePixmapCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>blank_pixmap</name></expr></argument>, <argument><expr><name>blank_pixmap</name></expr></argument>,

<argument><expr><operator>(</operator><name>XColor</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XColor</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>draw_curl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cells</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_sp_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawPoint</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_string</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>XtMalloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XChar2b</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr>

?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XChar2b</name></expr></argument>)</argument_list></sizeof></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>current_fontset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SMALL_WCHAR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><name>wlen</name></expr>]</index> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>XChar2b</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><name>wlen</name></expr>]</index><operator>.</operator><name>byte1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>XChar2b</name> <operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><index>[<expr><name>wlen</name></expr>]</index><operator>.</operator><name>byte2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>wlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cells</name> <operator>+=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>cells</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>current_fontset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XRectangle</name></type> <name>clip</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clip</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>cells</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetClipRectangles</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>clip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Unsorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString16</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>p_linespace</name> <operator>!=</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>current_fontset</name> <operator>!=</operator> <name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <name>cells</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString16</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawImageString16</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawImageString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString16</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDrawString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_curl</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_linespace</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>p_linespace</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_STRIKE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_sp_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>prev_fg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>current_fontset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_haskey</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name> <operator>&amp;&amp;</operator>

<name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_get_x11_windis</name><parameter_list>(<parameter><decl><type><name>Window</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>Display</name> <modifier>*</modifier><modifier>*</modifier></type><name>dis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>win</name> <operator>=</operator> <call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dis</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>dpy</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_beep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XBell</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>msec</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>Rows</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_invert_rectangle</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>invert_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>nc</name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>nr</name><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_iconify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XIconifyWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XMapRaised</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_draw_hollow_cursor</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_lefthalve</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_part_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>CURSOR_BAR_RIGHT</name></expr> ?</condition><then> <expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XtInputMask</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>desired</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALT_X_INPUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>suppress_alternate_input</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>desired</name> <operator>=</operator> <operator>(</operator><name>XtIMXEvent</name> <operator>|</operator> <name>XtIMTimer</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>desired</name> <operator>=</operator> <operator>(</operator><name>XtIMAll</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>mask</name> <operator>=</operator> <call><name>XtAppPending</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>desired</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_is_input_buf_full</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtAppProcessEvent</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wtime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>focus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timed_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtIntervalId</name></type> <name>timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtInputMask</name></type> <name>desired</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XtIntervalId</name></type> <name>channel_timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>timed_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>,

<argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>wtime</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1L</literal></expr> </then><else>: <expr><name>wtime</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name>gui_x11_timer_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>channel_any_keep_open</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel_timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name><operator>)</operator><literal type="number">20</literal></expr></argument>,

<argument><expr><name>channel_poll_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>channel_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>desired</name> <operator>=</operator> <operator>(</operator><name>XtIMAll</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>timed_out</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>!=</operator> <name>focus</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_start_blink</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_stop_blink</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>focus</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MESSAGE_QUEUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>did_add_timer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>parse_queued_messages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>did_add_timer</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtAppProcessEvent</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>timer</name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>timed_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>channel_timer</name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>channel_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_block</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_gc</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>col2</name> <operator>-</operator> <name>col1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>row2</name> <operator>-</operator> <name>row1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>==</operator> <name>VisibilityFullyObscured</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_x11_check_copy_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>==</operator> <name>VisibilityFullyObscured</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_x11_check_copy_area</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_check_copy_area</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGraphicsExposeEvent</name> <modifier>*</modifier></type><name>gevent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>visibility</name></name> <operator>!=</operator> <name>VisibilityPartiallyObscured</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XCheckTypedEvent</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>NoExpose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>XCheckTypedEvent</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>GraphicsExpose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gevent</name> <operator>=</operator> <operator>(</operator><name>XGraphicsExposeEvent</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>gevent</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gevent</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XSync</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_x11_lose_selection</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>clip_mch_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>clip_x11_own_selection</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_x11_request_selection</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_set_selection</name><parameter_list>(

<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>clip_x11_set_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_menu_grey</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_menu_hidden</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>grey</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>!</operator><name><name>menu</name><operator>-&gt;</operator><name>sensitive</name></name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetSensitive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetSensitive</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_menu_hidden</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hidden</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_menubar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_menu_cb</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_wm_protocol_handler</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ClientMessage</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Atom</name><operator>)</operator><operator>(</operator><operator>(</operator><name>XClientMessageEvent</name> <operator>*</operator><operator>)</operator><name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator>

<name><name>wm_atoms</name><index>[<expr><name>SAVE_YOURSELF_IDX</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>XSetCommand</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Atom</name><operator>)</operator><operator>(</operator><operator>(</operator><name>XClientMessageEvent</name> <operator>*</operator><operator>)</operator><name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator>

<name><name>wm_atoms</name><index>[<expr><name>DELETE_WINDOW_IDX</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_send_event_handler</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XPropertyEvent</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>XPropertyEvent</name> <operator>*</operator><operator>)</operator> <name>event</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PropertyNotify</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>window</name></name> <operator>==</operator> <name>commWindow</name>

<operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>atom</name></name> <operator>==</operator> <name>commProperty</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>PropertyNewValue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>serverEventProc</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_OFF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLINK_ON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>blink_state</name> <init>= <expr><name>BLINK_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_waittime</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_ontime</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long_u</name></type> <name>blink_offtime</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>blink_timer</name> <init>= <expr><operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>gui_mch_is_blinking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>!=</operator> <name>BLINK_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_is_blink_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_blinking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>waittime</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>blink_waittime</name> <operator>=</operator> <name>waittime</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_ontime</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_offtime</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_stop_blink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>may_call_gui_update_cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_timer</name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>blink_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_OFF</name> <operator>&amp;&amp;</operator> <name>may_call_gui_update_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_x11_blink_cb</name><parameter_list>(

<parameter><decl><type><name>XtPointer</name> <name>timed_out</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>interval_id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_state</name> <operator>==</operator> <name>BLINK_ON</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_undraw_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_OFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>blink_offtime</name></expr></argument>,

<argument><expr><name>gui_x11_blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>blink_ontime</name></expr></argument>,

<argument><expr><name>gui_x11_blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_start_blink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blink_timer</name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>blink_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blink_waittime</name> <operator>&amp;&amp;</operator> <name>blink_ontime</name> <operator>&amp;&amp;</operator> <name>blink_offtime</name> <operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>in_focus</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>blink_timer</name> <operator>=</operator> <call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><name>app_context</name></expr></argument>, <argument><expr><name>blink_waittime</name></expr></argument>,

<argument><expr><name>gui_x11_blink_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blink_state</name> <operator>=</operator> <name>BLINK_ON</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XColor</name></type> <name>xc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Colormap</name></type> <name>colormap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>colormap</name> <operator>=</operator> <call><name>DefaultColormap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XDefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xc</name><operator>.</operator><name>pixel</name></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XQueryColor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>colormap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>xc</name><operator>.</operator><name>red</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>xc</name><operator>.</operator><name>green</name></name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>xc</name><operator>.</operator><name>blue</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_callbacks</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>textArea</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>vimForm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>VisibilityChangeMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>gui_x11_visibility_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>ExposureMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_expose_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>StructureNotifyMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>gui_x11_resize_window_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>FocusChangeMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_focus_change_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_POINTER</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>LeaveWindowMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_leave_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>LeaveWindowMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_leave_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>EnterWindowMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_enter_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><name>EnterWindowMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_enter_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_key_hit_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_key_hit_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>, <argument><expr><name>PointerMotionMask</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_mouse_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>ButtonPressMask</name> <operator>|</operator> <name>ButtonReleaseMask</name> <operator>|</operator>

<name>ButtonMotionMask</name> <operator>|</operator> <name>PointerMotionMask</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>gui_x11_mouse_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_getmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rootx</name></decl>, <decl><type ref="prev"/><name>rooty</name></decl>, <decl><type ref="prev"/><name>winx</name></decl>, <decl><type ref="prev"/><name>winy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wid</name></name> <operator>&amp;&amp;</operator> <call><name>XQueryPointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rootx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rooty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>winx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>winy</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Window</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MOTIF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>XButtonPressedEvent</name> <modifier>*</modifier></type>

<name>gui_x11_get_last_mouse_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>last_mouse_event</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_WIDTH</name></cpp:macro> <cpp:value>(gui.char_width * 2)</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>gui_mch_drawsign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>typenr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XImage</name> <modifier>*</modifier></type><name>sign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sign</name> <operator>=</operator> <operator>(</operator><name>XImage</name> <operator>*</operator><operator>)</operator><call><name>sign_get_image</name><argument_list>(<argument><expr><name>typenr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>sign</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>SIGN_WIDTH</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XPutImage</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>text_gc</name></name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>SIGN_WIDTH</name> <operator>-</operator> <name><name>sign</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>sign</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>sign</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sign</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>

<name>gui_mch_register_sign</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>signfile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XpmAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XImage</name> <modifier>*</modifier></type><name>sign</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>signfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>signfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XpmColorSymbol</name></type> <name><name>color</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iconColor1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bottomShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"topShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"selectColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>colorsymbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>colorsymbols</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pixel</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmReadFileToImage</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>signfile</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_signdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sign</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_sign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XDestroyImage</name><argument_list>(<argument><expr><operator>(</operator><name>XImage</name><operator>*</operator><operator>)</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_mousehide</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>hide</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>!=</operator> <name>hide</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name> <operator>=</operator> <name>hide</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hide</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>mch_set_mouse_shape</name><argument_list>(<argument><expr><name>last_shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>XUndefineCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>mshape_ids</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>XC_left_ptr</name></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><name>XC_xterm</name></expr>, 

<expr><name>XC_sb_v_double_arrow</name></expr>, 

<expr><name>XC_sizing</name></expr>, 

<expr><name>XC_sb_h_double_arrow</name></expr>, 

<expr><name>XC_sizing</name></expr>, 

<expr><name>XC_watch</name></expr>, 

<expr><name>XC_X_cursor</name></expr>, 

<expr><name>XC_crosshair</name></expr>, 

<expr><name>XC_hand1</name></expr>, 

<expr><name>XC_hand2</name></expr>, 

<expr><name>XC_pencil</name></expr>, 

<expr><name>XC_question_arrow</name></expr>, 

<expr><name>XC_right_ptr</name></expr>, 

<expr><name>XC_center_ptr</name></expr>, 

<expr><name>XC_left_ptr</name></expr> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>mch_set_mouse_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shape</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name>MSHAPE_HIDE</name> <operator>||</operator> <name><name>gui</name><operator>.</operator><name>pointer_hidden</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>blank_pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>&gt;=</operator> <name>MSHAPE_NUMBERED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>shape</name> <operator>-</operator> <name>MSHAPE_NUMBERED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>XC_num_glyphs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>XC_left_ptr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>mshape_ids</name><index>[<expr><name>shape</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>wid</name></name></expr></argument>, <argument><expr><call><name>XCreateFontCursor</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shape</name> <operator>!=</operator> <name>MSHAPE_HIDE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last_shape</name> <operator>=</operator> <name>shape</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_menu_set_tip</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_beval_area</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>=</operator> <call><name>gui_mch_create_beval_area</name><argument_list>(

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>strings</name><index>[<expr><name>MENU_INDEX_TIP</name></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
