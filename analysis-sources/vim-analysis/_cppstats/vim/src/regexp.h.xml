<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\regexp.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUBEXP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_MAX_BRACES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_MAX_STATES</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_TOO_EXPENSIVE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOMATIC_ENGINE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKTRACKING_ENGINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_ENGINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>regengine</name></name></type> <name>regengine_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>regprog</name>

<block>{

<decl_stmt><decl><type><name>regengine_T</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>regflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_engine</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>re_in_use</name></decl>;</decl_stmt> 

}</block></struct></type> <name>regprog_T</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>regengine_T</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>regflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>re_in_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>reganch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>regmust</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>regmlen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name>reghasz</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>program</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>bt_regprog_T</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>nfa_state</name></name></type> <name>nfa_state_T</name>;</typedef>

<struct>struct <name>nfa_state</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>out1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lastlist</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>regengine_T</name> <modifier>*</modifier></type><name>engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>regflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_engine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>re_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>re_in_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>reganch</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>regstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>match_text</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_zend</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_backref</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>reghasz</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsubexp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nstate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfa_state_T</name></type> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>nfa_regprog_T</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>regprog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>startp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>endp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rm_ic</name></decl>;</decl_stmt>

}</block></struct></type> <name>regmatch_T</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>regprog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name><name>startpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lpos_T</name></type> <name><name>endpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rmm_ic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>rmm_maxcol</name></decl>;</decl_stmt> 

}</block></struct></type> <name>regmmatch_T</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>short</name></type> <name>refcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>matches</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>reg_extmatch_T</name>;</typedef>

<struct>struct <name>regengine</name>

<block>{

<function_decl><type><name>regprog_T</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>regcomp</name>)<parameter_list>(<parameter><decl><type><name>char_u</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>regfree</name>)<parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>regexec_nl</name>)<parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> (<modifier>*</modifier><name>regexec_multi</name>)<parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type></decl></parameter>, <parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

}</block>;</struct>

</unit>
