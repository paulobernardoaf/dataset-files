<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_xmdlg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Form.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/PushBG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Text.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/TextF.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Label.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Frame.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/LabelG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/ToggleBG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/SeparatoG.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/DialogS.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/List.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/RowColumn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/AtomMgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Xm/Protocols.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/keysym.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Widget</name></type> <name>vimShell</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apply_fontlist</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gui_motif_menu_fontlist(w)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>apply_fontlist</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>wild</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_cancel_action</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>shell</name></decl></parameter>, <parameter><decl><type><name>XtCallbackProc</name></type> <name>close_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>wmp_atom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>dw_atom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>display</name> <init>= <expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XmNdeleteResponse</name></expr></argument>, <argument><expr><name>XmDO_NOTHING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dw_atom</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>wmp_atom</name> <operator>=</operator> <call><name>XmInternAtom</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="string">"WM_PROTOCOLS"</literal></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dw_atom</name> <operator>=</operator> <call><name>XmInternAtom</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XmAddProtocolCallback</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>wmp_atom</name></expr></argument>, <argument><expr><name>dw_atom</name></expr></argument>, <argument><expr><name>close_callback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FONTS</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FONT_NAME_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ENTRIES_IN_LIST</name></cpp:macro> <cpp:value>5000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DISPLAY_SIZE</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMP_BUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<enum>enum <name>ListSpecifier</name>

<block>{

<decl><name>ENCODING</name></decl>,

<decl><name>NAME</name></decl>,

<decl><name>STYLE</name></decl>,

<decl><name>SIZE</name></decl>,

<decl><name>NONE</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>_SharedFontSelData</name>

<block>{

<decl_stmt><decl><type><name>Widget</name></type> <name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>cancel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>encoding_pulldown</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>encoding_menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name><name>list</name><index>[<expr><name>NONE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>String</name></type> <name><name>sel</name><index>[<expr><name>NONE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Boolean</name></type> <name>in_pixels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>XmFontList</name></type> <name>old_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Boolean</name></type> <name>exit</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SharedFontSelData</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>

<name>fn</name><parameter_list>(<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>data</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_part</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>name_part</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf3</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf3</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>style_part</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf3</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf3</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s oblique"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s italic"</literal></expr></argument>, <argument><expr><name>buf3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>size_part</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inPixels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inPixels</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%3d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>size</name> <operator>/</operator> <literal type="number">10.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%3d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%4.1f"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encoding_part</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TEMP_BUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s-%s"</literal></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>add_to_list</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>count</name> <operator>==</operator> <name>MAX_ENTRIES_IN_LIST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>count</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>count</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>match</name><parameter_list>(<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ListSpecifier</name></name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>l</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>l</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ENCODING</name></expr>:</case>

<expr_stmt><expr><call><name>encoding_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NAME</name></expr>:</case>

<expr_stmt><expr><call><name>name_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STYLE</name></expr>:</case>

<expr_stmt><expr><call><name>style_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>size_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<empty_stmt>;</empty_stmt>

</block_content>}</block></switch>

<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>proportional</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>encoding_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>dummy</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fill_lists</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ListSpecifier</name></name></type> <name>fix</name></decl></parameter>, <parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>list</name><index>[<expr><name>NONE</name></expr>]</index><index>[<expr><name>MAX_ENTRIES_IN_LIST</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>count</name><index>[<expr><name>NONE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name><name>items</name><index>[<expr><name>MAX_ENTRIES_IN_LIST</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ENCODING</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NONE</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>ENCODING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>NAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>STYLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>MAX_ENTRIES_IN_LIST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>proportional</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>ENCODING</name>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>encoding_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>NAME</name>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>name_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>STYLE</name>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>style_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>SIZE</name>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>size_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_list</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>count</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>!=</operator> <name>ENCODING</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>n_items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>selected_button</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_pulldown</name></name></expr></argument>,

<argument><expr><name>XmNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XmNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_items</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>button</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>ENCODING</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n_items</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>button</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"button"</literal></expr></argument>,

<argument><expr><name>xmPushButtonGadgetClass</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_pulldown</name></name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>button</name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator> <name>encoding_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>button</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>ENCODING</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>selected_button</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>ENCODING</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>count</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n_items</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>selected_button</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_menu</name></name></expr></argument>,

<argument><expr><name>XmNmenuHistory</name></expr></argument>, <argument><expr><name>selected_button</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NAME</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NONE</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fix</name> <operator>==</operator> <operator>(</operator>enum <name>ListSpecifier</name><operator>)</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator>enum <name>ListSpecifier</name><operator>)</operator><name>idx</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>NAME</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STYLE</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XmListDeleteAllItems</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmListAddItems</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name><name>count</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmListSelectItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmListSetBottomItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>stoggle_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmToggleButtonCallbackStruct</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>do_sel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>newSize</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>call_data</name><operator>-&gt;</operator><name>reason</name></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>XmCR_VALUE_CHANGED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>do_sel</name> <operator>=</operator> <operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>do_sel</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>size_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newSize</name></expr></argument>, <argument><expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name> <operator>=</operator> <operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_lists</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_sel</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmListSelectItem</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmListSetBottomItem</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>display_sample</name><parameter_list>(<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmFontList</name></type> <name>font_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type> <name>display</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>display</name> <operator>=</operator> <call><name>XtDisplay</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font_list</name> <operator>=</operator> <call><name>gui_motif_create_fontlist</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><literal type="string">"AaBbZzYy 0123456789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name>font_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sample</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>old_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>old_list</name></name> <operator>=</operator> <name>font_list</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>do_choice</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmListCallbackStruct</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ListSpecifier</name></name></type> <name>which</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XmStringGetLtoR</name><argument_list>(<argument><expr><name><name>call_data</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>XmSTRING_DEFAULT_CHARSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name></expr></argument>, <argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XmListDeselectItem</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>call_data</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>which</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_lists</name><argument_list>(<argument><expr><name>which</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>wild</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>match</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XmTextSetString</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_sample</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_dialog</name><argument_list>(<argument><expr><name>VIM_ERROR</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid font specification"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Dismiss"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>True</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nomatch_msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no specific match"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><name>nomatch_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sample</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmTextSetString</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>nomatch_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>False</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encoding_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>dummy</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmListCallbackStruct</name></type> <name>fake_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fake_data</name><operator>.</operator><name>item</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_choice</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fake_data</name></expr></argument>, <argument><expr><name>ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>name_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmListCallbackStruct</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_choice</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>call_data</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>style_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmListCallbackStruct</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_choice</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>call_data</name></expr></argument>, <argument><expr><name>STYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>size_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmListCallbackStruct</name> <modifier>*</modifier></type><name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_choice</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>call_data</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>cancel_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmListCallbackStruct</name> <modifier>*</modifier><name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeFontNames</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>exit</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ok_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>XmPushButtonCallbackStruct</name> <modifier>*</modifier><name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>XmTextGetString</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>XListFonts</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>do_dialog</name><argument_list>(<argument><expr><name>VIM_ERROR</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid font specification"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"&amp;Dismiss"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeFontNames</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFreeFontNames</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeFontNames</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>exit</name></name> <operator>=</operator> <name>True</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_xm_select_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>SharedFontSelData</name></type> <name>_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>separator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>sub_form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>size_toggle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>disp_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XmString</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>big_font</name><index>[<expr><name>MAX_FONT_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SharedFontSelData</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>vimShell</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>XListFonts</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-*-*-*-*-*-*-*-*-*-*-*-*-*-*"</literal></expr></argument>,

<argument><expr><name>MAX_FONTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>get_part</name><argument_list>(<argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <name>max</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>&lt;</operator> <name>MAX_DISPLAY_SIZE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>big_font</name></expr></argument>, <argument><expr><call><name>fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name> <operator>=</operator> <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>big_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>old_list</name></name> <operator>=</operator> <call><name>gui_motif_create_fontlist</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name> <operator>=</operator> <call><name>XmCreateDialogShell</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="string">"fontSelector"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim - Font Selector"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"form"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>,

<argument><expr><name>XmNdialogTitle</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNautoUnmanage</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNdialogStyle</name></expr></argument>, <argument><expr><name>XmDIALOG_FULL_APPLICATION_MODAL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_form</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"subForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>xmPushButtonGadgetClass</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>cancel</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cancel"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>xmPushButtonGadgetClass</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNtopWidget</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ok</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNshowAsDefault</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>separator</name> <operator>=</operator> <call><name>XmCreateSeparatorGadget</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="string">"separator"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"fontName"</literal></expr></argument>,

<argument><expr><name>xmTextWidgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNeditable</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNeditMode</name></expr></argument>, <argument><expr><name>XmSINGLE_LINE_EDIT</name></expr></argument>,

<argument><expr><name>XmNmaxLength</name></expr></argument>, <argument><expr><name>MAX_FONT_NAME_LEN</name></expr></argument>,

<argument><expr><name>XmNcolumns</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Name:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"fontNameLabel"</literal></expr></argument>,

<argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_OPPOSITE_WIDGET</name></expr></argument>,

<argument><expr><name>XmNleftWidget</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>disp_frame</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"sampleFrame"</literal></expr></argument>,

<argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNshadowType</name></expr></argument>, <argument><expr><name>XmSHADOW_ETCHED_IN</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sample</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"sampleLabel"</literal></expr></argument>,

<argument><expr><name>xmLabelWidgetClass</name></expr></argument>, <argument><expr><name>disp_frame</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNalignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNrecomputeSize</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>XmNfontList</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>old_list</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Show size in Points"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_toggle</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"sizeToggle"</literal></expr></argument>,

<argument><expr><name>xmToggleButtonGadgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>disp_frame</name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name>size_toggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>size_toggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_pulldown</name></name> <operator>=</operator> <call><name>XmCreatePulldownMenu</name><argument_list>(<argument><expr><name>form</name></expr></argument>,

<argument><expr><literal type="string">"encodingPulldown"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Encoding:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNsubMenuId</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_pulldown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name>size_toggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_menu</name></name> <operator>=</operator> <call><name>XmCreateOptionMenu</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><literal type="string">"encodingMenu"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_form</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"subForm"</literal></expr></argument>,

<argument><expr><name>xmFormWidgetClass</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNbottomWidget</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_menu</name></name></expr></argument>,

<argument><expr><name>XmNbottomOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_WIDGET</name></expr></argument>,

<argument><expr><name>XmNrightWidget</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>,

<argument><expr><name>XmNrightOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNtopOffset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>XmNorientation</name></expr></argument>, <argument><expr><name>XmVERTICAL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"frame"</literal></expr></argument>, <argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_POSITION</name></expr></argument>,

<argument><expr><name>XmNrightPosition</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Font:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"nameListLabel"</literal></expr></argument>, <argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>XmNchildType</name></expr></argument>, <argument><expr><name>XmFRAME_TITLE_CHILD</name></expr></argument>,

<argument><expr><name>XmNchildVerticalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_CENTER</name></expr></argument>,

<argument><expr><name>XmNchildHorizontalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisibleItemCount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlistSizePolicy</name></expr></argument>, <argument><expr><name>XmCONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisualPolicy</name></expr></argument>, <argument><expr><name>XmVARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNscrollBarDisplayPolicy</name></expr></argument>, <argument><expr><name>XmSTATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name> <operator>=</operator> <call><name>XmCreateScrolledList</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"fontList"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"frame"</literal></expr></argument>, <argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_POSITION</name></expr></argument>,

<argument><expr><name>XmNleftPosition</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_POSITION</name></expr></argument>,

<argument><expr><name>XmNrightPosition</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Style:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"styleListLabel"</literal></expr></argument>, <argument><expr><name>xmLabelWidgetClass</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>XmNchildType</name></expr></argument>, <argument><expr><name>XmFRAME_TITLE_CHILD</name></expr></argument>,

<argument><expr><name>XmNchildVerticalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_CENTER</name></expr></argument>,

<argument><expr><name>XmNchildHorizontalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisibleItemCount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlistSizePolicy</name></expr></argument>, <argument><expr><name>XmCONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisualPolicy</name></expr></argument>, <argument><expr><name>XmVARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNscrollBarDisplayPolicy</name></expr></argument>, <argument><expr><name>XmSTATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name> <operator>=</operator> <call><name>XmCreateScrolledList</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"styleList"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"frame"</literal></expr></argument>, <argument><expr><name>xmFrameWidgetClass</name></expr></argument>, <argument><expr><name>sub_form</name></expr></argument>,

<argument><expr><name>XmNshadowThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XmNtopAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNbottomAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>XmNleftAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_POSITION</name></expr></argument>,

<argument><expr><name>XmNleftPosition</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>,

<argument><expr><name>XmNleftOffset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>XmNrightAttachment</name></expr></argument>, <argument><expr><name>XmATTACH_FORM</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>XmStringCreateLocalized</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Size:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"sizeListLabel"</literal></expr></argument>, <argument><expr><name>xmLabelGadgetClass</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>,

<argument><expr><name>XmNchildType</name></expr></argument>, <argument><expr><name>XmFRAME_TITLE_CHILD</name></expr></argument>,

<argument><expr><name>XmNchildVerticalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_CENTER</name></expr></argument>,

<argument><expr><name>XmNchildHorizontalAlignment</name></expr></argument>, <argument><expr><name>XmALIGNMENT_BEGINNING</name></expr></argument>,

<argument><expr><name>XmNlabelString</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmStringFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_fontlist</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisibleItemCount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNlistSizePolicy</name></expr></argument>, <argument><expr><name>XmCONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNvisualPolicy</name></expr></argument>, <argument><expr><name>XmVARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LESSTIF_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNscrollBarDisplayPolicy</name></expr></argument>, <argument><expr><name>XmSTATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <call><name>XmCreateScrolledList</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"sizeList"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>XmNuserData</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><name>XmNcancelButton</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>size_toggle</name></expr></argument>, <argument><expr><name>XmNvalueChangedCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>stoggle_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbrowseSelectionCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>name_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbrowseSelectionCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>style_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmNbrowseSelectionCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>size_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ok</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>ok_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>, <argument><expr><name>XmNactivateCallback</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>cancel_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmProcessTraversal</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>, <argument><expr><name>XmTRAVERSE_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name>size_toggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmAddTabGroup</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_cancel_action</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>, <argument><expr><operator>(</operator><name>XtCallbackProc</name><operator>)</operator><name>cancel_callback</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>exit</name></name> <operator>=</operator> <name>False</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name><operator>=</operator> <name>True</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&amp;&amp;</operator> <name><name>current</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>XListFonts</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>current</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>stylebuf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sizebuf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>encodingbuf</name><index>[<expr><name>TEMP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>name_part</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>style_part</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>stylebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>size_part</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>sizebuf</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>in_pixels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encoding_part</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>encodingbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namebuf</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>stylebuf</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>sizebuf</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name>encodingbuf</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>NAME</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>STYLE</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>stylebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>SIZE</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>sizebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sel</name><index>[<expr><name>ENCODING</name></expr>]</index></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name>encodingbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <call><name>XtNewString</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_sample</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmTextSetString</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>font_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFreeFontNames</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_lists</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>NAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>STYLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>list</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>encoding_menu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>manage_centered</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>exit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtAppProcessEvent</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>XtInputMask</name><operator>)</operator><name>XtIMAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XmFontListFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>old_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_motif_synch_fonts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>font_name</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
