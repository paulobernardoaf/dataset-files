


















EXTERN long Rows 
#ifdef DO_INIT
#if defined(MSWIN)
= 25L
#else
= 24L
#endif
#endif
;
EXTERN long Columns INIT(= 80); 












EXTERN schar_T *ScreenLines INIT(= NULL);
EXTERN sattr_T *ScreenAttrs INIT(= NULL);
EXTERN unsigned *LineOffset INIT(= NULL);
EXTERN char_u *LineWraps INIT(= NULL); 









EXTERN u8char_T *ScreenLinesUC INIT(= NULL); 
EXTERN u8char_T *ScreenLinesC[MAX_MCO]; 
EXTERN int Screen_mco INIT(= 0); 




EXTERN schar_T *ScreenLines2 INIT(= NULL);




EXTERN schar_T *current_ScreenLine INIT(= NULL);






EXTERN int screen_cur_row INIT(= 0);
EXTERN int screen_cur_col INIT(= 0);

#ifdef FEAT_SEARCH_EXTRA
EXTERN match_T screen_search_hl; 
#endif

#ifdef FEAT_FOLDING
EXTERN foldinfo_T win_foldinfo; 
#endif



EXTERN int redrawing_for_callback INIT(= 0);








EXTERN short *TabPageIdxs INIT(= NULL);

#ifdef FEAT_PROP_POPUP

EXTERN short *popup_mask INIT(= NULL);
EXTERN short *popup_mask_next INIT(= NULL);

EXTERN char *popup_transparent INIT(= NULL);


EXTERN int popup_mask_refresh INIT(= TRUE);


EXTERN tabpage_T *popup_mask_tab INIT(= NULL);



EXTERN int screen_zindex INIT(= 0);
#endif

EXTERN int screen_Rows INIT(= 0); 
EXTERN int screen_Columns INIT(= 0); 





EXTERN int mod_mask INIT(= 0x0); 










EXTERN int cmdline_row;

EXTERN int redraw_cmdline INIT(= FALSE); 
EXTERN int redraw_mode INIT(= FALSE); 
EXTERN int clear_cmdline INIT(= FALSE); 
EXTERN int mode_displayed INIT(= FALSE); 
EXTERN int no_win_do_lines_ins INIT(= FALSE); 
#if defined(FEAT_CRYPT) || defined(FEAT_EVAL)
EXTERN int cmdline_star INIT(= FALSE); 
#endif

EXTERN int exec_from_reg INIT(= FALSE); 

EXTERN int screen_cleared INIT(= FALSE); 







EXTERN colnr_T dollar_vcol INIT(= -1);







EXTERN int compl_length INIT(= 0);


EXTERN int compl_cont_status INIT(= 0);
#define CONT_ADDING 1 
#define CONT_INTRPT (2 + 4) 

#define CONT_N_ADDS 4 
#define CONT_S_IPOS 8 

#define CONT_SOL 16 

#define CONT_LOCAL 32 


EXTERN char_u *edit_submode INIT(= NULL); 
EXTERN char_u *edit_submode_pre INIT(= NULL); 
EXTERN char_u *edit_submode_extra INIT(= NULL);
EXTERN hlf_T edit_submode_highl; 





#ifdef FEAT_RIGHTLEFT
EXTERN int cmdmsg_rl INIT(= FALSE); 
#endif
EXTERN int msg_col;
EXTERN int msg_row;
EXTERN int msg_scrolled; 

EXTERN int msg_scrolled_ign INIT(= FALSE);




EXTERN char_u *keep_msg INIT(= NULL); 
EXTERN int keep_msg_attr INIT(= 0); 
EXTERN int keep_msg_more INIT(= FALSE); 
EXTERN int need_fileinfo INIT(= FALSE);
EXTERN int msg_scroll INIT(= FALSE); 
EXTERN int msg_didout INIT(= FALSE); 
EXTERN int msg_didany INIT(= FALSE); 
EXTERN int msg_nowait INIT(= FALSE); 
EXTERN int emsg_off INIT(= 0); 

EXTERN int info_message INIT(= FALSE); 
EXTERN int msg_hist_off INIT(= FALSE); 
#ifdef FEAT_EVAL
EXTERN int need_clr_eos INIT(= FALSE); 

EXTERN int emsg_skip INIT(= 0); 

EXTERN int emsg_severe INIT(= FALSE); 

EXTERN int did_endif INIT(= FALSE); 
#endif
EXTERN int did_emsg; 

#ifdef FEAT_EVAL
EXTERN int called_vim_beep; 
EXTERN int did_uncaught_emsg; 

#endif
EXTERN int did_emsg_syntax; 

EXTERN int called_emsg; 
EXTERN int ex_exitval INIT(= 0); 
EXTERN int emsg_on_display INIT(= FALSE); 
EXTERN int rc_did_emsg INIT(= FALSE); 

EXTERN int no_wait_return INIT(= 0); 
EXTERN int need_wait_return INIT(= 0); 
EXTERN int did_wait_return INIT(= FALSE); 

#ifdef FEAT_TITLE
EXTERN int need_maketitle INIT(= TRUE); 
#endif

EXTERN int quit_more INIT(= FALSE); 
#if defined(UNIX) || defined(VMS) || defined(MACOS_X)
EXTERN int newline_on_exit INIT(= FALSE); 
EXTERN int intr_char INIT(= 0); 
#endif
#if (defined(UNIX) || defined(VMS)) && defined(FEAT_X11)
EXTERN int x_no_connect INIT(= FALSE); 
#if defined(FEAT_CLIENTSERVER)
EXTERN int x_force_connect INIT(= FALSE); 


#endif
#endif
EXTERN int ex_keep_indent INIT(= FALSE); 
EXTERN int vgetc_busy INIT(= 0); 

EXTERN int didset_vim INIT(= FALSE); 
EXTERN int didset_vimruntime INIT(= FALSE); 





EXTERN int lines_left INIT(= -1); 
EXTERN int msg_no_more INIT(= FALSE); 






EXTERN garray_T exestack INIT5(0, 0, sizeof(estack_T), 50, NULL);

#define SOURCING_NAME (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_name)

#define SOURCING_LNUM (((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_lnum)

#ifdef FEAT_EVAL
EXTERN int ex_nesting_level INIT(= 0); 
EXTERN int debug_break_level INIT(= -1); 
EXTERN int debug_did_msg INIT(= FALSE); 
EXTERN int debug_tick INIT(= 0); 
EXTERN int debug_backtrace_level INIT(= 0); 
#ifdef FEAT_PROFILE
EXTERN int do_profiling INIT(= PROF_NONE); 
#endif
EXTERN garray_T script_items INIT5(0, 0, sizeof(scriptitem_T *), 20, NULL);
#define SCRIPT_ITEM(id) (((scriptitem_T **)script_items.ga_data)[(id) - 1])
#define SCRIPT_SV(id) (SCRIPT_ITEM(id)->sn_vars)
#define SCRIPT_VARS(id) (SCRIPT_SV(id)->sv_dict.dv_hashtab)

#define FUNCLINE(fp, j) ((char_u **)(fp->uf_lines.ga_data))[j]






EXTERN except_T *current_exception;





EXTERN int did_throw INIT(= FALSE);





EXTERN int need_rethrow INIT(= FALSE);






EXTERN int check_cstack INIT(= FALSE);





EXTERN int trylevel INIT(= 0);









EXTERN int force_abort INIT(= FALSE);











EXTERN struct msglist **msg_list INIT(= NULL);







EXTERN int suppress_errthrow INIT(= FALSE);







EXTERN except_T *caught_stack INIT(= NULL);









EXTERN int may_garbage_collect INIT(= FALSE);
EXTERN int want_garbage_collect INIT(= FALSE);
EXTERN int garbage_collect_at_exit INIT(= FALSE);


EXTERN sctx_T current_sctx INIT4(0, 0, 0, 0);



EXTERN type_T t_any INIT4(VAR_UNKNOWN, 0, NULL, NULL);
EXTERN type_T t_void INIT4(VAR_VOID, 0, NULL, NULL);
EXTERN type_T t_bool INIT4(VAR_BOOL, 0, NULL, NULL);
EXTERN type_T t_special INIT4(VAR_SPECIAL, 0, NULL, NULL);
EXTERN type_T t_number INIT4(VAR_NUMBER, 0, NULL, NULL);
EXTERN type_T t_float INIT4(VAR_FLOAT, 0, NULL, NULL);
EXTERN type_T t_string INIT4(VAR_STRING, 0, NULL, NULL);
EXTERN type_T t_blob INIT4(VAR_BLOB, 0, NULL, NULL);
EXTERN type_T t_job INIT4(VAR_JOB, 0, NULL, NULL);
EXTERN type_T t_channel INIT4(VAR_CHANNEL, 0, NULL, NULL);

EXTERN type_T t_func_void INIT4(VAR_FUNC, -1, &t_void, NULL);
EXTERN type_T t_func_any INIT4(VAR_FUNC, -1, &t_any, NULL);

EXTERN type_T t_partial_void INIT4(VAR_PARTIAL, -1, &t_void, NULL);
EXTERN type_T t_partial_any INIT4(VAR_PARTIAL, -1, &t_any, NULL);

EXTERN type_T t_list_any INIT4(VAR_LIST, 0, &t_any, NULL);
EXTERN type_T t_dict_any INIT4(VAR_DICT, 0, &t_any, NULL);
EXTERN type_T t_list_empty INIT4(VAR_LIST, 0, &t_void, NULL);
EXTERN type_T t_dict_empty INIT4(VAR_DICT, 0, &t_void, NULL);

EXTERN type_T t_list_bool INIT4(VAR_LIST, 0, &t_bool, NULL);
EXTERN type_T t_list_number INIT4(VAR_LIST, 0, &t_number, NULL);
EXTERN type_T t_list_string INIT4(VAR_LIST, 0, &t_string, NULL);
EXTERN type_T t_list_dict_any INIT4(VAR_LIST, 0, &t_dict_any, NULL);

EXTERN type_T t_dict_bool INIT4(VAR_DICT, 0, &t_bool, NULL);
EXTERN type_T t_dict_number INIT4(VAR_DICT, 0, &t_number, NULL);
EXTERN type_T t_dict_string INIT4(VAR_DICT, 0, &t_string, NULL);


#endif

EXTERN int did_source_packages INIT(= FALSE);



EXTERN char_u hash_removed;


EXTERN int scroll_region INIT(= FALSE); 
EXTERN int t_colors INIT(= 0); 


EXTERN int include_none INIT(= 0); 
EXTERN int include_default INIT(= 0); 
EXTERN int include_link INIT(= 0); 







EXTERN int highlight_match INIT(= FALSE); 
EXTERN linenr_T search_match_lines; 
EXTERN colnr_T search_match_endcol; 
#ifdef FEAT_SEARCH_EXTRA
EXTERN linenr_T search_first_line INIT(= 0); 
EXTERN linenr_T search_last_line INIT(= MAXLNUM); 
#endif

EXTERN int no_smartcase INIT(= FALSE); 

EXTERN int need_check_timestamps INIT(= FALSE); 

EXTERN int did_check_timestamps INIT(= FALSE); 

EXTERN int no_check_timestamps INIT(= 0); 

EXTERN int highlight_attr[HLF_COUNT]; 
#ifdef FEAT_STL_OPT
#define USER_HIGHLIGHT
#endif
#ifdef USER_HIGHLIGHT
EXTERN int highlight_user[9]; 
#ifdef FEAT_STL_OPT
EXTERN int highlight_stlnc[9]; 
#ifdef FEAT_TERMINAL
EXTERN int highlight_stlterm[9]; 
EXTERN int highlight_stltermnc[9]; 
#endif
#endif
#endif
#ifdef FEAT_TERMINAL


EXTERN int skip_term_loop INIT(= FALSE);
#endif
#ifdef FEAT_GUI
EXTERN char_u *use_gvimrc INIT(= NULL); 
#endif
EXTERN int cterm_normal_fg_color INIT(= 0);
EXTERN int cterm_normal_fg_bold INIT(= 0);
EXTERN int cterm_normal_bg_color INIT(= 0);
#ifdef FEAT_TERMGUICOLORS
EXTERN guicolor_T cterm_normal_fg_gui_color INIT(= INVALCOLOR);
EXTERN guicolor_T cterm_normal_bg_gui_color INIT(= INVALCOLOR);
#endif
#ifdef FEAT_TERMRESPONSE
EXTERN int is_mac_terminal INIT(= FALSE); 
#endif

EXTERN int autocmd_busy INIT(= FALSE); 
EXTERN int autocmd_no_enter INIT(= FALSE); 
EXTERN int autocmd_no_leave INIT(= FALSE); 

EXTERN int modified_was_set; 
EXTERN int did_filetype INIT(= FALSE); 
EXTERN int keep_filetype INIT(= FALSE); 









EXTERN int au_did_filetype INIT(= FALSE);



EXTERN bufref_T au_new_curbuf INIT3(NULL, 0, 0);





EXTERN buf_T *au_pending_free_buf INIT(= NULL);
EXTERN win_T *au_pending_free_win INIT(= NULL);




EXTERN int mouse_row;
EXTERN int mouse_col;
EXTERN int mouse_past_bottom INIT(= FALSE);
EXTERN int mouse_past_eol INIT(= FALSE); 
EXTERN int mouse_dragging INIT(= 0); 

#if defined(FEAT_MOUSE_DEC)




EXTERN int WantQueryMouse INIT(= FALSE);
#endif

#ifdef FEAT_GUI



EXTERN int need_mouse_correct INIT(= FALSE);


EXTERN linenr_T gui_prev_topline INIT(= 0);
#ifdef FEAT_DIFF
EXTERN int gui_prev_topfill INIT(= 0);
#endif
#endif

#ifdef FEAT_MOUSESHAPE
EXTERN int drag_status_line INIT(= FALSE); 
EXTERN int postponed_mouseshape INIT(= FALSE); 

EXTERN int drag_sep_line INIT(= FALSE); 
#endif


#ifdef FEAT_DIFF

EXTERN int diff_context INIT(= 6); 
EXTERN int diff_foldcolumn INIT(= 2); 
EXTERN int diff_need_scrollbind INIT(= FALSE);
#endif



EXTERN int updating_screen INIT(= FALSE);

#ifdef FEAT_MENU

EXTERN vimmenu_T *root_menu INIT(= NULL);




EXTERN int sys_menu INIT(= FALSE);
#endif

#ifdef FEAT_GUI
#ifdef FEAT_MENU

EXTERN vimmenu_T *current_menu;


EXTERN int force_menu_update INIT(= FALSE);
#endif
#ifdef FEAT_GUI_TABLINE

EXTERN int current_tab;


EXTERN int current_tabmenu;
#define TABLINE_MENU_CLOSE 1
#define TABLINE_MENU_NEW 2
#define TABLINE_MENU_OPEN 3
#endif


EXTERN int current_scrollbar;
EXTERN long_u scrollbar_value;


EXTERN int found_reverse_arg INIT(= FALSE);


EXTERN char *font_argument INIT(= NULL);

#ifdef FEAT_GUI_GTK

EXTERN char *background_argument INIT(= NULL);


EXTERN char *foreground_argument INIT(= NULL);
#endif







EXTERN volatile sig_atomic_t hold_gui_events INIT(= 0);





EXTERN int new_pixel_width INIT(= 0);
EXTERN int new_pixel_height INIT(= 0);


EXTERN int gui_win_x INIT(= -1);
EXTERN int gui_win_y INIT(= -1);
#endif

#ifdef FEAT_CLIPBOARD
EXTERN Clipboard_T clip_star; 
#ifdef FEAT_X11
EXTERN Clipboard_T clip_plus; 
#else
#define clip_plus clip_star 
#define ONE_CLIPBOARD
#endif

#define CLIP_UNNAMED 1
#define CLIP_UNNAMED_PLUS 2
EXTERN int clip_unnamed INIT(= 0); 

EXTERN int clip_autoselect_star INIT(= FALSE);
EXTERN int clip_autoselect_plus INIT(= FALSE);
EXTERN int clip_autoselectml INIT(= FALSE);
EXTERN int clip_html INIT(= FALSE);
EXTERN regprog_T *clip_exclude_prog INIT(= NULL);
EXTERN int clip_unnamed_saved INIT(= 0);
#endif







EXTERN win_T *firstwin; 
EXTERN win_T *lastwin; 
EXTERN win_T *prevwin INIT(= NULL); 
#define ONE_WINDOW (firstwin == lastwin)
#define W_NEXT(wp) ((wp)->w_next)
#define FOR_ALL_WINDOWS(wp) for (wp = firstwin; wp != NULL; wp = wp->w_next)
#define FOR_ALL_FRAMES(frp, first_frame) for (frp = first_frame; frp != NULL; frp = frp->fr_next)

#define FOR_ALL_TABPAGES(tp) for (tp = first_tabpage; tp != NULL; tp = tp->tp_next)
#define FOR_ALL_WINDOWS_IN_TAB(tp, wp) for ((wp) = ((tp) == NULL || (tp) == curtab) ? firstwin : (tp)->tp_firstwin; (wp); (wp) = (wp)->w_next)






#define FOR_ALL_TAB_WINDOWS(tp, wp) for ((tp) = first_tabpage; (tp) != NULL; (tp) = (tp)->tp_next) for ((wp) = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; (wp); (wp) = (wp)->w_next)




#define FOR_ALL_POPUPWINS(wp) for ((wp) = first_popupwin; (wp) != NULL; (wp) = (wp)->w_next)

#define FOR_ALL_POPUPWINS_IN_TAB(tp, wp) for ((wp) = (tp)->tp_first_popupwin; (wp) != NULL; (wp) = (wp)->w_next)



EXTERN win_T *curwin; 

EXTERN win_T *aucmd_win; 
EXTERN int aucmd_win_used INIT(= FALSE); 

#ifdef FEAT_PROP_POPUP
EXTERN win_T *first_popupwin; 
EXTERN win_T *popup_dragwin INIT(= NULL); 


EXTERN int popup_visible INIT(= FALSE);

EXTERN int text_prop_frozen INIT(= 0);
#endif





EXTERN frame_T *topframe; 





EXTERN tabpage_T *first_tabpage;
EXTERN tabpage_T *curtab;
EXTERN int redraw_tabline INIT(= FALSE); 





EXTERN buf_T *firstbuf INIT(= NULL); 
EXTERN buf_T *lastbuf INIT(= NULL); 
EXTERN buf_T *curbuf INIT(= NULL); 

#define FOR_ALL_BUFFERS(buf) for (buf = firstbuf; buf != NULL; buf = buf->b_next)

#define FOR_ALL_BUF_WININFO(buf, wip) for ((wip) = (buf)->b_wininfo; (wip) != NULL; (wip) = (wip)->wi_next)



#define FOR_ALL_SIGNS_IN_BUF(buf, sign) for (sign = buf->b_signlist; sign != NULL; sign = sign->se_next)




EXTERN int mf_dont_release INIT(= FALSE); 





EXTERN alist_T global_alist; 
EXTERN int max_alist_id INIT(= 0); 
EXTERN int arg_had_last INIT(= FALSE); 


EXTERN int ru_col; 
#ifdef FEAT_STL_OPT
EXTERN int ru_wid; 
#endif
EXTERN int sc_col; 

#ifdef TEMPDIRNAMES
EXTERN char_u *vim_tempdir INIT(= NULL); 

#endif





EXTERN int starting INIT(= NO_SCREEN);


EXTERN int exiting INIT(= FALSE);



EXTERN int really_exiting INIT(= FALSE);


EXTERN int v_dying INIT(= 0); 
EXTERN int stdout_isatty INIT(= TRUE); 

#if defined(FEAT_AUTOCHDIR)
EXTERN int test_autochdir INIT(= FALSE);
#endif
#if defined(EXITFREE)
EXTERN int entered_free_all_mem INIT(= FALSE);

#endif

EXTERN volatile sig_atomic_t full_screen INIT(= FALSE);



EXTERN int restricted INIT(= FALSE);

EXTERN int secure INIT(= FALSE);




EXTERN int textlock INIT(= 0);



EXTERN int curbuf_lock INIT(= 0);


EXTERN int allbuf_lock INIT(= 0);




#ifdef HAVE_SANDBOX
EXTERN int sandbox INIT(= 0);



#endif

EXTERN int silent_mode INIT(= FALSE);



EXTERN pos_T VIsual; 
EXTERN int VIsual_active INIT(= FALSE);

EXTERN int VIsual_select INIT(= FALSE);

EXTERN int VIsual_reselect;



EXTERN int VIsual_mode INIT(= 'v');


EXTERN int redo_VIsual_busy INIT(= FALSE);





EXTERN int resel_VIsual_mode INIT(= NUL); 
EXTERN linenr_T resel_VIsual_line_count; 
EXTERN colnr_T resel_VIsual_vcol; 





EXTERN pos_T where_paste_started;







EXTERN int did_ai INIT(= FALSE);





EXTERN colnr_T ai_col INIT(= 0);







EXTERN int end_comment_pending INIT(= NUL);







EXTERN int did_syncbind INIT(= FALSE);

#ifdef FEAT_SMARTINDENT




EXTERN int did_si INIT(= FALSE);





EXTERN int can_si INIT(= FALSE);





EXTERN int can_si_back INIT(= FALSE);
#endif

EXTERN int old_indent INIT(= 0); 

EXTERN pos_T saved_cursor 
#ifdef DO_INIT
= {0, 0, 0}
#endif
;




EXTERN pos_T Insstart; 





EXTERN pos_T Insstart_orig;




EXTERN int orig_line_count INIT(= 0); 
EXTERN int vr_lines_changed INIT(= 0); 

#if defined(FEAT_X11) && defined(FEAT_XCLIPBOARD)

EXTERN JMP_BUF x_jump_env;
#endif






#define DBCS_JPN 932 
#define DBCS_JPNU 9932 
#define DBCS_KOR 949 
#define DBCS_KORU 9949 
#define DBCS_CHS 936 
#define DBCS_CHSU 9936 
#define DBCS_CHT 950 
#define DBCS_CHTU 9950 
#define DBCS_2BYTE 1 
#define DBCS_DEBUG -1

EXTERN int enc_dbcs INIT(= 0); 

EXTERN int enc_unicode INIT(= 0); 
EXTERN int enc_utf8 INIT(= FALSE); 
EXTERN int enc_latin1like INIT(= TRUE); 
#if defined(MSWIN) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)


EXTERN int enc_codepage INIT(= -1);
EXTERN int enc_latin9 INIT(= FALSE); 
#endif
EXTERN int has_mbyte INIT(= 0); 





EXTERN char mb_bytelen_tab[256];



EXTERN vimconv_T input_conv; 
EXTERN vimconv_T output_conv; 








EXTERN int (*mb_ptr2len)(char_u *p) INIT(= latin_ptr2len);

EXTERN int (*mb_ptr2len_len)(char_u *p, int size) INIT(= latin_ptr2len_len);

EXTERN int (*mb_char2len)(int c) INIT(= latin_char2len);

EXTERN int (*mb_char2bytes)(int c, char_u *buf) INIT(= latin_char2bytes);
EXTERN int (*mb_ptr2cells)(char_u *p) INIT(= latin_ptr2cells);
EXTERN int (*mb_ptr2cells_len)(char_u *p, int size) INIT(= latin_ptr2cells_len);
EXTERN int (*mb_char2cells)(int c) INIT(= latin_char2cells);
EXTERN int (*mb_off2cells)(unsigned off, unsigned max_off) INIT(= latin_off2cells);
EXTERN int (*mb_ptr2char)(char_u *p) INIT(= latin_ptr2char);
EXTERN int (*mb_head_off)(char_u *base, char_u *p) INIT(= latin_head_off);

#if defined(USE_ICONV) && defined(DYNAMIC_ICONV)

EXTERN size_t (*iconv) (iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
EXTERN iconv_t (*iconv_open) (const char *tocode, const char *fromcode);
EXTERN int (*iconv_close) (iconv_t cd);
EXTERN int (*iconvctl) (iconv_t cd, int request, void *argument);
EXTERN int* (*iconv_errno) (void);
#endif


#ifdef FEAT_XIM
#ifdef FEAT_GUI_GTK
EXTERN GtkIMContext *xic INIT(= NULL);







EXTERN colnr_T preedit_start_col INIT(= MAXCOL);
EXTERN colnr_T preedit_end_col INIT(= MAXCOL);



EXTERN int xim_changed_while_preediting INIT(= FALSE);
#else
EXTERN XIC xic INIT(= NULL);
#endif
#ifdef FEAT_GUI
EXTERN guicolor_T xim_fg_color INIT(= INVALCOLOR);
EXTERN guicolor_T xim_bg_color INIT(= INVALCOLOR);
#endif
#endif










EXTERN int State INIT(= NORMAL); 

#ifdef FEAT_EVAL
EXTERN int debug_mode INIT(= FALSE);
#endif

EXTERN int finish_op INIT(= FALSE);
EXTERN long opcount INIT(= 0); 
EXTERN int motion_force INIT(= 0); 




EXTERN int exmode_active INIT(= 0); 


EXTERN int pending_exmode_active INIT(= FALSE);

EXTERN int ex_no_reprint INIT(= FALSE); 

EXTERN int reg_recording INIT(= 0); 
EXTERN int reg_executing INIT(= 0); 



EXTERN int seenModifyOtherKeys INIT(= FALSE);

EXTERN int no_mapping INIT(= FALSE); 
EXTERN int no_zero_mapping INIT(= 0); 
EXTERN int allow_keys INIT(= FALSE); 

EXTERN int no_reduce_keys INIT(= FALSE); 

EXTERN int no_u_sync INIT(= 0); 
#ifdef FEAT_EVAL
EXTERN int u_sync_once INIT(= 0); 

#endif

EXTERN int restart_edit INIT(= 0); 
EXTERN int arrow_used; 



EXTERN int ins_at_eol INIT(= FALSE); 


EXTERN int no_abbr INIT(= TRUE); 

#ifdef USE_EXE_NAME
EXTERN char_u *exe_name; 
#endif

#ifdef USE_ON_FLY_SCROLL
EXTERN int dont_scroll INIT(= FALSE);
#endif
EXTERN int mapped_ctrl_c INIT(= FALSE); 
EXTERN int ctrl_c_interrupts INIT(= TRUE); 

EXTERN cmdmod_T cmdmod; 

EXTERN int is_export INIT(= FALSE); 

EXTERN int msg_silent INIT(= 0); 
EXTERN int emsg_silent INIT(= 0); 
EXTERN int emsg_noredir INIT(= 0); 
EXTERN int cmd_silent INIT(= FALSE); 

EXTERN int swap_exists_action INIT(= SEA_NONE);


EXTERN int swap_exists_did_quit INIT(= FALSE);


EXTERN char_u *IObuff; 

EXTERN char_u *NameBuff; 

EXTERN char msg_buf[MSG_BUF_LEN]; 


EXTERN int RedrawingDisabled INIT(= 0);

EXTERN int readonlymode INIT(= FALSE); 
EXTERN int recoverymode INIT(= FALSE); 

EXTERN typebuf_T typebuf 
#ifdef DO_INIT
= {NULL, NULL, 0, 0, 0, 0, 0, 0, 0}
#endif
;
EXTERN int ex_normal_busy INIT(= 0); 
EXTERN int ex_normal_lock INIT(= 0); 
#ifdef FEAT_EVAL
EXTERN int ignore_script INIT(= FALSE); 
#endif
EXTERN int stop_insert_mode; 

EXTERN int KeyTyped; 
EXTERN int KeyStuffed; 
#ifdef HAVE_INPUT_METHOD
EXTERN int vgetc_im_active; 

#endif
EXTERN int maptick INIT(= 0); 

EXTERN int must_redraw INIT(= 0); 
EXTERN int skip_redraw INIT(= FALSE); 
EXTERN int do_redraw INIT(= FALSE); 
#ifdef FEAT_DIFF
EXTERN int need_diff_redraw INIT(= 0); 
#endif

EXTERN int need_highlight_changed INIT(= TRUE);

#define NSCRIPT 15
EXTERN FILE *scriptin[NSCRIPT]; 
EXTERN int curscript INIT(= 0); 
EXTERN FILE *scriptout INIT(= NULL); 
EXTERN int read_cmd_fd INIT(= 0); 


EXTERN volatile sig_atomic_t got_int INIT(= FALSE); 

#ifdef USE_TERM_CONSOLE
EXTERN int term_console INIT(= FALSE); 
#endif
EXTERN int termcap_active INIT(= FALSE); 
EXTERN int cur_tmode INIT(= TMODE_COOK); 
EXTERN int bangredo INIT(= FALSE); 
EXTERN int searchcmdlen; 
#ifdef FEAT_SYN_HL
EXTERN int reg_do_extmatch INIT(= 0); 


EXTERN reg_extmatch_T *re_extmatch_in INIT(= NULL); 

EXTERN reg_extmatch_T *re_extmatch_out INIT(= NULL); 

#endif

EXTERN int did_outofmem_msg INIT(= FALSE);

EXTERN int did_swapwrite_msg INIT(= FALSE);

EXTERN int undo_off INIT(= FALSE); 
EXTERN int global_busy INIT(= 0); 
EXTERN int listcmd_busy INIT(= FALSE); 

EXTERN int need_start_insertmode INIT(= FALSE);

EXTERN char_u *last_cmdline INIT(= NULL); 
EXTERN char_u *repeat_cmdline INIT(= NULL); 
EXTERN char_u *new_last_cmdline INIT(= NULL); 
EXTERN char_u *autocmd_fname INIT(= NULL); 
EXTERN int autocmd_fname_full; 
EXTERN int autocmd_bufnr INIT(= 0); 
EXTERN char_u *autocmd_match INIT(= NULL); 
EXTERN int did_cursorhold INIT(= FALSE); 
EXTERN pos_T last_cursormoved 
#ifdef DO_INIT
= {0, 0, 0}
#endif
;

EXTERN int postponed_split INIT(= 0); 
EXTERN int postponed_split_flags INIT(= 0); 
EXTERN int postponed_split_tab INIT(= 0); 
#ifdef FEAT_QUICKFIX
EXTERN int g_do_tagpreview INIT(= 0); 

#endif
EXTERN int g_tag_at_cursor INIT(= FALSE); 



EXTERN int replace_offset INIT(= 0); 

EXTERN char_u *escape_chars INIT(= (char_u *)" \t\\\"|");


EXTERN int keep_help_flag INIT(= FALSE); 






EXTERN char_u *empty_option INIT(= (char_u *)"");

EXTERN int redir_off INIT(= FALSE); 
EXTERN FILE *redir_fd INIT(= NULL); 
#ifdef FEAT_EVAL
EXTERN int redir_reg INIT(= 0); 
EXTERN int redir_vname INIT(= 0); 
EXTERN int redir_execute INIT(= 0); 
#endif

#ifdef FEAT_LANGMAP
EXTERN char_u langmap_mapchar[256]; 
#endif

#ifdef FEAT_WILDMENU
EXTERN int save_p_ls INIT(= -1); 
EXTERN int save_p_wmh INIT(= -1); 
EXTERN int wild_menu_showing INIT(= 0);
#define WM_SHOWN 1 
#define WM_SCROLLED 2 
#endif

#ifdef MSWIN
EXTERN char_u toupper_tab[256]; 
EXTERN char_u tolower_tab[256]; 
#endif

#ifdef FEAT_LINEBREAK
EXTERN char breakat_flags[256]; 
#endif


extern char *Version;
#if defined(HAVE_DATE_TIME) && defined(VMS) && defined(VAXC)
extern char longVersion[];
#else
EXTERN char *longVersion;
#endif





#ifdef HAVE_PATHDEF
extern char_u *default_vim_dir;
extern char_u *default_vimruntime_dir;
extern char_u *all_cflags;
extern char_u *all_lflags;
#ifdef VMS
extern char_u *compiler_version;
extern char_u *compiled_arch;
#endif
extern char_u *compiled_user;
extern char_u *compiled_sys;
#endif

EXTERN char_u *homedir INIT(= NULL);




EXTERN char_u *globaldir INIT(= NULL);


EXTERN int lcs_eol INIT(= '$');
EXTERN int lcs_ext INIT(= NUL);
EXTERN int lcs_prec INIT(= NUL);
EXTERN int lcs_nbsp INIT(= NUL);
EXTERN int lcs_space INIT(= NUL);
EXTERN int lcs_tab1 INIT(= NUL);
EXTERN int lcs_tab2 INIT(= NUL);
EXTERN int lcs_tab3 INIT(= NUL);
EXTERN int lcs_trail INIT(= NUL);
#ifdef FEAT_CONCEAL
EXTERN int lcs_conceal INIT(= ' ');
#endif


EXTERN int fill_stl INIT(= ' ');
EXTERN int fill_stlnc INIT(= ' ');
EXTERN int fill_vert INIT(= ' ');
EXTERN int fill_fold INIT(= '-');
EXTERN int fill_diff INIT(= '-');

#ifdef FEAT_FOLDING
EXTERN int disable_fold_update INIT(= 0);
#endif


EXTERN int km_stopsel INIT(= FALSE);
EXTERN int km_startsel INIT(= FALSE);

#ifdef FEAT_CMDWIN
EXTERN int cmdwin_type INIT(= 0); 
EXTERN int cmdwin_result INIT(= 0); 
#endif

EXTERN char_u no_lines_msg[] INIT(= N_("--No lines in buffer--"));






EXTERN long sub_nsubs; 
EXTERN linenr_T sub_nlines; 


EXTERN char_u wim_flags[4];

#if defined(FEAT_TITLE) && defined(FEAT_STL_OPT)

#define STL_IN_ICON 1
#define STL_IN_TITLE 2
EXTERN int stl_syntax INIT(= 0);
#endif

#ifdef FEAT_SEARCH_EXTRA

EXTERN int no_hlsearch INIT(= FALSE);
#endif

#if defined(FEAT_BEVAL) && !defined(NO_X11_INCLUDES)
EXTERN BalloonEval *balloonEval INIT(= NULL);
EXTERN int balloonEvalForTerm INIT(= FALSE);
#if defined(FEAT_NETBEANS_INTG)
EXTERN int bevalServers INIT(= 0);
#define BEVAL_NETBEANS 0x01
#endif
#endif

#ifdef CURSOR_SHAPE

extern cursorentry_T shape_table[SHAPE_IDX_COUNT];
#endif

#ifdef FEAT_PRINTER



#define OPT_PRINT_TOP 0
#define OPT_PRINT_BOT 1
#define OPT_PRINT_LEFT 2
#define OPT_PRINT_RIGHT 3
#define OPT_PRINT_HEADERHEIGHT 4
#define OPT_PRINT_SYNTAX 5
#define OPT_PRINT_NUMBER 6
#define OPT_PRINT_WRAP 7
#define OPT_PRINT_DUPLEX 8
#define OPT_PRINT_PORTRAIT 9
#define OPT_PRINT_PAPER 10
#define OPT_PRINT_COLLATE 11
#define OPT_PRINT_JOBSPLIT 12
#define OPT_PRINT_FORMFEED 13

#define OPT_PRINT_NUM_OPTIONS 14

EXTERN option_table_T printer_opts[OPT_PRINT_NUM_OPTIONS]
#ifdef DO_INIT
=
{
{"top", TRUE, 0, NULL, 0, FALSE},
{"bottom", TRUE, 0, NULL, 0, FALSE},
{"left", TRUE, 0, NULL, 0, FALSE},
{"right", TRUE, 0, NULL, 0, FALSE},
{"header", TRUE, 0, NULL, 0, FALSE},
{"syntax", FALSE, 0, NULL, 0, FALSE},
{"number", FALSE, 0, NULL, 0, FALSE},
{"wrap", FALSE, 0, NULL, 0, FALSE},
{"duplex", FALSE, 0, NULL, 0, FALSE},
{"portrait", FALSE, 0, NULL, 0, FALSE},
{"paper", FALSE, 0, NULL, 0, FALSE},
{"collate", FALSE, 0, NULL, 0, FALSE},
{"jobsplit", FALSE, 0, NULL, 0, FALSE},
{"formfeed", FALSE, 0, NULL, 0, FALSE},
}
#endif
;


#define PRT_UNIT_NONE -1
#define PRT_UNIT_PERC 0
#define PRT_UNIT_INCH 1
#define PRT_UNIT_MM 2
#define PRT_UNIT_POINT 3
#define PRT_UNIT_NAMES {"pc", "in", "mm", "pt"}
#endif

#if (defined(FEAT_PRINTER) && defined(FEAT_STL_OPT)) || defined(FEAT_GUI_TABLINE)


EXTERN linenr_T printer_page_num;
#endif

#ifdef FEAT_XCLIPBOARD

EXTERN char *xterm_display INIT(= NULL);


EXTERN int xterm_display_allocated INIT(= FALSE);


EXTERN Display *xterm_dpy INIT(= NULL);
#endif
#if defined(FEAT_XCLIPBOARD) || defined(FEAT_GUI_X11)
EXTERN XtAppContext app_context INIT(= (XtAppContext)NULL);
#endif

#ifdef FEAT_GUI_GTK
EXTERN guint32 gtk_socket_id INIT(= 0);
EXTERN int echo_wid_arg INIT(= FALSE); 
#endif

#ifdef FEAT_GUI_MSWIN




EXTERN long_u win_socket_id INIT(= 0);
#endif

#if defined(FEAT_CLIENTSERVER) || defined(FEAT_EVAL)
EXTERN int typebuf_was_filled INIT(= FALSE); 

#endif

#ifdef FEAT_CLIENTSERVER
EXTERN char_u *serverName INIT(= NULL); 
#ifdef FEAT_X11
EXTERN Window commWindow INIT(= None);
EXTERN Window clientWindow INIT(= None);
EXTERN Atom commProperty INIT(= None);
EXTERN char_u *serverDelayedStartName INIT(= NULL);
#else
#ifdef PROTO
typedef int HWND;
#endif
EXTERN HWND clientWindow INIT(= 0);
#endif
#endif

#if defined(UNIX) || defined(VMS)
EXTERN int term_is_xterm INIT(= FALSE); 
#endif

#ifdef BACKSLASH_IN_FILENAME
EXTERN char psepc INIT(= '\\'); 
EXTERN char psepcN INIT(= '/'); 

EXTERN char pseps[2] INIT2('\\', 0);
#endif



EXTERN int virtual_op INIT(= MAYBE);

#ifdef FEAT_SYN_HL

EXTERN disptick_T display_tick INIT(= 0);
#endif

#ifdef FEAT_SPELL


EXTERN linenr_T spell_redraw_lnum INIT(= 0);

#define FOR_ALL_SPELL_LANGS(slang) for ((slang) = first_lang; (slang) != NULL; (slang) = slang->sl_next)

#endif

#ifdef FEAT_CONCEAL

EXTERN int need_cursor_line_redraw INIT(= FALSE);
#endif

#ifdef USE_MCH_ERRMSG

EXTERN garray_T error_ga
#ifdef DO_INIT
= {0, 0, 0, 0, NULL}
#endif
;
#endif

#ifdef FEAT_NETBEANS_INTG
EXTERN char *netbeansArg INIT(= NULL); 
EXTERN int netbeansFireChanges INIT(= 1); 
EXTERN int netbeansForcedQuit INIT(= 0);
EXTERN int netbeansReadFile INIT(= 1); 
EXTERN int netbeansSuppressNoLines INIT(= 0); 
#endif





EXTERN char e_abort[] INIT(= N_("E470: Command aborted"));
EXTERN char e_argreq[] INIT(= N_("E471: Argument required"));
EXTERN char e_backslash[] INIT(= N_("E10: \\ should be followed by /, ? or &"));
#ifdef FEAT_CMDWIN
EXTERN char e_cmdwin[] INIT(= N_("E11: Invalid in command-line window; <CR> executes, CTRL-C quits"));
#endif
EXTERN char e_curdir[] INIT(= N_("E12: Command not allowed from exrc/vimrc in current dir or tag search"));
#ifdef FEAT_EVAL
EXTERN char e_endif[] INIT(= N_("E171: Missing :endif"));
EXTERN char e_catch[] INIT(= N_("E603: :catch without :try"));
EXTERN char e_finally[] INIT(= N_("E606: :finally without :try"));
EXTERN char e_finally_dup[] INIT(= N_("E607: multiple :finally"));
EXTERN char e_endtry[] INIT(= N_("E600: Missing :endtry"));
EXTERN char e_no_endtry[] INIT(= N_("E602: :endtry without :try"));
EXTERN char e_endwhile[] INIT(= N_("E170: Missing :endwhile"));
EXTERN char e_endfor[] INIT(= N_("E170: Missing :endfor"));
EXTERN char e_while[] INIT(= N_("E588: :endwhile without :while"));
EXTERN char e_for[] INIT(= N_("E588: :endfor without :for"));
#endif
EXTERN char e_exists[] INIT(= N_("E13: File exists (add ! to override)"));
EXTERN char e_failed[] INIT(= N_("E472: Command failed"));
#if defined(FEAT_GUI) && defined(FEAT_XFONTSET)
EXTERN char e_fontset[] INIT(= N_("E234: Unknown fontset: %s"));
#endif
#if defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MAC) || defined(FEAT_GUI_PHOTON) || defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_HAIKU)

EXTERN char e_font[] INIT(= N_("E235: Unknown font: %s"));
#endif
#if defined(FEAT_GUI_X11) && !defined(FEAT_GUI_GTK)
EXTERN char e_fontwidth[] INIT(= N_("E236: Font \"%s\" is not fixed-width"));
#endif
EXTERN char e_internal[] INIT(= N_("E473: Internal error"));
EXTERN char e_intern2[] INIT(= N_("E685: Internal error: %s"));
EXTERN char e_interr[] INIT(= N_("Interrupted"));
EXTERN char e_invarg[] INIT(= N_("E474: Invalid argument"));
EXTERN char e_invarg2[] INIT(= N_("E475: Invalid argument: %s"));
EXTERN char e_duparg2[] INIT(= N_("E983: Duplicate argument: %s"));
EXTERN char e_invargval[] INIT(= N_("E475: Invalid value for argument %s"));
EXTERN char e_invargNval[] INIT(= N_("E475: Invalid value for argument %s: %s"));
#ifdef FEAT_EVAL
EXTERN char e_invexpr2[] INIT(= N_("E15: Invalid expression: %s"));
#endif
EXTERN char e_invrange[] INIT(= N_("E16: Invalid range"));
EXTERN char e_invcmd[] INIT(= N_("E476: Invalid command"));
#if defined(UNIX) || defined(FEAT_SYN_HL) || defined(FEAT_SPELL)
EXTERN char e_isadir2[] INIT(= N_("E17: \"%s\" is a directory"));
#endif
#ifdef FEAT_LIBCALL
EXTERN char e_libcall[] INIT(= N_("E364: Library call failed for \"%s()\""));
#endif
#ifdef HAVE_FSYNC
EXTERN char e_fsync[] INIT(= N_("E667: Fsync failed"));
#endif
#if defined(DYNAMIC_PERL) || defined(DYNAMIC_PYTHON) || defined(DYNAMIC_PYTHON3) || defined(DYNAMIC_RUBY) || defined(DYNAMIC_TCL) || defined(DYNAMIC_ICONV) || defined(DYNAMIC_GETTEXT) || defined(DYNAMIC_MZSCHEME) || defined(DYNAMIC_LUA) || defined(FEAT_TERMINAL)








EXTERN char e_loadlib[] INIT(= N_("E370: Could not load library %s"));
EXTERN char e_loadfunc[] INIT(= N_("E448: Could not load library function %s"));
#endif
EXTERN char e_markinval[] INIT(= N_("E19: Mark has invalid line number"));
EXTERN char e_marknotset[] INIT(= N_("E20: Mark not set"));
EXTERN char e_modifiable[] INIT(= N_("E21: Cannot make changes, 'modifiable' is off"));
EXTERN char e_nesting[] INIT(= N_("E22: Scripts nested too deep"));
EXTERN char e_noalt[] INIT(= N_("E23: No alternate file"));
EXTERN char e_noabbr[] INIT(= N_("E24: No such abbreviation"));
EXTERN char e_nobang[] INIT(= N_("E477: No ! allowed"));
#if !defined(FEAT_GUI) || defined(VIMDLL)
EXTERN char e_nogvim[] INIT(= N_("E25: GUI cannot be used: Not enabled at compile time"));
#endif
#ifndef FEAT_RIGHTLEFT
EXTERN char e_nohebrew[] INIT(= N_("E26: Hebrew cannot be used: Not enabled at compile time\n"));
#endif
EXTERN char e_nofarsi[] INIT(= N_("E27: Farsi support has been removed\n"));
#ifndef FEAT_ARABIC
EXTERN char e_noarabic[] INIT(= N_("E800: Arabic cannot be used: Not enabled at compile time\n"));
#endif
#if defined(FEAT_SEARCH_EXTRA) || defined(FEAT_SYN_HL)
EXTERN char e_nogroup[] INIT(= N_("E28: No such highlight group name: %s"));
#endif
EXTERN char e_noinstext[] INIT(= N_("E29: No inserted text yet"));
EXTERN char e_nolastcmd[] INIT(= N_("E30: No previous command line"));
EXTERN char e_nomap[] INIT(= N_("E31: No such mapping"));
EXTERN char e_nomatch[] INIT(= N_("E479: No match"));
EXTERN char e_nomatch2[] INIT(= N_("E480: No match: %s"));
EXTERN char e_noname[] INIT(= N_("E32: No file name"));
EXTERN char e_nopresub[] INIT(= N_("E33: No previous substitute regular expression"));
EXTERN char e_noprev[] INIT(= N_("E34: No previous command"));
EXTERN char e_noprevre[] INIT(= N_("E35: No previous regular expression"));
EXTERN char e_norange[] INIT(= N_("E481: No range allowed"));
EXTERN char e_noroom[] INIT(= N_("E36: Not enough room"));
#ifdef FEAT_CLIENTSERVER
EXTERN char e_noserver[] INIT(= N_("E247: no registered server named \"%s\""));
#endif
EXTERN char e_notcreate[] INIT(= N_("E482: Can't create file %s"));
EXTERN char e_notmp[] INIT(= N_("E483: Can't get temp file name"));
EXTERN char e_notopen[] INIT(= N_("E484: Can't open file %s"));
EXTERN char e_notread[] INIT(= N_("E485: Can't read file %s"));
EXTERN char e_null[] INIT(= N_("E38: Null argument"));
#if defined(FEAT_DIGRAPHS) || defined(FEAT_TIMERS) || defined(FEAT_EVAL)
EXTERN char e_number_exp[] INIT(= N_("E39: Number expected"));
#endif
#ifdef FEAT_QUICKFIX
EXTERN char e_openerrf[] INIT(= N_("E40: Can't open errorfile %s"));
#endif
#if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_X11)
EXTERN char e_opendisp[] INIT(= N_("E233: cannot open display"));
#endif
EXTERN char e_outofmem[] INIT(= N_("E41: Out of memory!"));
EXTERN char e_patnotf[] INIT(= N_("Pattern not found"));
EXTERN char e_patnotf2[] INIT(= N_("E486: Pattern not found: %s"));
EXTERN char e_positive[] INIT(= N_("E487: Argument must be positive"));
#if defined(UNIX) || defined(FEAT_SESSION)
EXTERN char e_prev_dir[] INIT(= N_("E459: Cannot go back to previous directory"));
#endif

#ifdef FEAT_QUICKFIX
EXTERN char e_quickfix[] INIT(= N_("E42: No Errors"));
EXTERN char e_loclist[] INIT(= N_("E776: No location list"));
#endif
EXTERN char e_re_damg[] INIT(= N_("E43: Damaged match string"));
EXTERN char e_re_corr[] INIT(= N_("E44: Corrupted regexp program"));
EXTERN char e_readonly[] INIT(= N_("E45: 'readonly' option is set (add ! to override)"));
#ifdef FEAT_EVAL
EXTERN char e_undefvar[] INIT(= N_("E121: Undefined variable: %s"));
EXTERN char e_letwrong[] INIT(= N_("E734: Wrong variable type for %s="));
EXTERN char e_illvar[] INIT(= N_("E461: Illegal variable name: %s"));
EXTERN char e_cannot_mod[] INIT(= N_("E995: Cannot modify existing variable"));
EXTERN char e_readonlyvar[] INIT(= N_("E46: Cannot change read-only variable \"%s\""));
EXTERN char e_readonlysbx[] INIT(= N_("E794: Cannot set variable in the sandbox: \"%s\""));
EXTERN char e_stringreq[] INIT(= N_("E928: String required"));
EXTERN char e_emptykey[] INIT(= N_("E713: Cannot use empty key for Dictionary"));
EXTERN char e_dictreq[] INIT(= N_("E715: Dictionary required"));
EXTERN char e_listidx[] INIT(= N_("E684: list index out of range: %ld"));
EXTERN char e_blobidx[] INIT(= N_("E979: Blob index out of range: %ld"));
EXTERN char e_invalblob[] INIT(= N_("E978: Invalid operation for Blob"));
EXTERN char e_toomanyarg[] INIT(= N_("E118: Too many arguments for function: %s"));
EXTERN char e_toofewarg[] INIT(= N_("E119: Not enough arguments for function: %s"));
EXTERN char e_func_deleted[] INIT(= N_("E933: Function was deleted: %s"));
EXTERN char e_dictkey[] INIT(= N_("E716: Key not present in Dictionary: %s"));
EXTERN char e_listreq[] INIT(= N_("E714: List required"));
EXTERN char e_listblobreq[] INIT(= N_("E897: List or Blob required"));
EXTERN char e_list_end[] INIT(= N_("E697: Missing end of List ']': %s"));
EXTERN char e_listdictarg[] INIT(= N_("E712: Argument of %s must be a List or Dictionary"));
EXTERN char e_listdictblobarg[] INIT(= N_("E896: Argument of %s must be a List, Dictionary or Blob"));
EXTERN char e_modulus[] INIT(= N_("E804: Cannot use '%' with Float"));
EXTERN char e_inval_string[] INIT(= N_("E908: using an invalid value as a String"));
EXTERN char e_const_option[] INIT(= N_("E996: Cannot lock an option"));
EXTERN char e_unknown_option[] INIT(= N_("E113: Unknown option: %s"));
EXTERN char e_letunexp[] INIT(= N_("E18: Unexpected characters in :let"));
#endif
#ifdef FEAT_QUICKFIX
EXTERN char e_readerrf[] INIT(= N_("E47: Error while reading errorfile"));
#endif
#ifdef HAVE_SANDBOX
EXTERN char e_sandbox[] INIT(= N_("E48: Not allowed in sandbox"));
#endif
EXTERN char e_secure[] INIT(= N_("E523: Not allowed here"));
#if defined(AMIGA) || defined(MACOS_X) || defined(MSWIN) || defined(UNIX) || defined(VMS)

EXTERN char e_screenmode[] INIT(= N_("E359: Screen mode setting not supported"));
#endif
EXTERN char e_scroll[] INIT(= N_("E49: Invalid scroll size"));
EXTERN char e_shellempty[] INIT(= N_("E91: 'shell' option is empty"));
#if defined(FEAT_SIGN_ICONS) && !defined(FEAT_GUI_GTK)
EXTERN char e_signdata[] INIT(= N_("E255: Couldn't read in sign data!"));
#endif
EXTERN char e_swapclose[] INIT(= N_("E72: Close error on swap file"));
EXTERN char e_tagstack[] INIT(= N_("E73: tag stack empty"));
EXTERN char e_toocompl[] INIT(= N_("E74: Command too complex"));
EXTERN char e_longname[] INIT(= N_("E75: Name too long"));
EXTERN char e_toomsbra[] INIT(= N_("E76: Too many ["));
EXTERN char e_toomany[] INIT(= N_("E77: Too many file names"));
EXTERN char e_trailing[] INIT(= N_("E488: Trailing characters"));
EXTERN char e_umark[] INIT(= N_("E78: Unknown mark"));
EXTERN char e_wildexpand[] INIT(= N_("E79: Cannot expand wildcards"));
EXTERN char e_winheight[] INIT(= N_("E591: 'winheight' cannot be smaller than 'winminheight'"));
EXTERN char e_winwidth[] INIT(= N_("E592: 'winwidth' cannot be smaller than 'winminwidth'"));
EXTERN char e_write[] INIT(= N_("E80: Error while writing"));
EXTERN char e_zerocount[] INIT(= N_("E939: Positive count required"));
#ifdef FEAT_EVAL
EXTERN char e_usingsid[] INIT(= N_("E81: Using <SID> not in a script context"));
EXTERN char e_missing_paren[] INIT(= N_("E107: Missing parentheses: %s"));
EXTERN char e_missing_close[] INIT(= N_("E110: Missing ')'"));
EXTERN char e_missing_dict_colon[] INIT(= N_("E720: Missing colon in Dictionary: %s"));
EXTERN char e_duplicate_key[] INIT(= N_("E721: Duplicate key in Dictionary: \"%s\""));
EXTERN char e_missing_dict_comma[] INIT(= N_("E722: Missing comma in Dictionary: %s"));
EXTERN char e_missing_dict_end[] INIT(= N_("E723: Missing end of Dictionary '}': %s"));
#endif
#ifdef FEAT_CLIENTSERVER
EXTERN char e_invexprmsg[] INIT(= N_("E449: Invalid expression received"));
#endif
#ifdef FEAT_NETBEANS_INTG
EXTERN char e_guarded[] INIT(= N_("E463: Region is guarded, cannot modify"));
EXTERN char e_nbreadonly[] INIT(= N_("E744: NetBeans does not allow changes in read-only files"));
#endif
EXTERN char e_maxmempat[] INIT(= N_("E363: pattern uses more memory than 'maxmempattern'"));
EXTERN char e_emptybuf[] INIT(= N_("E749: empty buffer"));
EXTERN char e_nobufnr[] INIT(= N_("E86: Buffer %ld does not exist"));

EXTERN char e_invalpat[] INIT(= N_("E682: Invalid search pattern or delimiter"));
EXTERN char e_bufloaded[] INIT(= N_("E139: File is loaded in another buffer"));
#if defined(FEAT_SYN_HL) || defined(FEAT_COMPL_FUNC)
EXTERN char e_notset[] INIT(= N_("E764: Option '%s' is not set"));
#endif
#ifndef FEAT_CLIPBOARD
EXTERN char e_invalidreg[] INIT(= N_("E850: Invalid register name"));
#endif
EXTERN char e_dirnotf[] INIT(= N_("E919: Directory not found in '%s': \"%s\""));
EXTERN char e_au_recursive[] INIT(= N_("E952: Autocommand caused recursive behavior"));
#ifdef FEAT_MENU
EXTERN char e_menuothermode[] INIT(= N_("E328: Menu only exists in another mode"));
#endif
EXTERN char e_invalwindow[] INIT(= N_("E957: Invalid window number"));
EXTERN char e_listarg[] INIT(= N_("E686: Argument of %s must be a List"));
#ifdef FEAT_EVAL
EXTERN char e_missing_colon[] INIT(= N_("E109: Missing ':' after '?'"));
EXTERN char e_missing_in[] INIT(= N_("E690: Missing \"in\" after :for"));
EXTERN char e_unknownfunc[] INIT(= N_("E117: Unknown function: %s"));
EXTERN char e_missbrac[] INIT(= N_("E111: Missing ']'"));
EXTERN char e_else_without_if[] INIT(= N_("E581: :else without :if"));
EXTERN char e_elseif_without_if[] INIT(= N_("E582: :elseif without :if"));
EXTERN char e_endif_without_if[] INIT(= N_("E580: :endif without :if"));
EXTERN char e_continue[] INIT(= N_("E586: :continue without :while or :for"));
EXTERN char e_break[] INIT(= N_("E587: :break without :while or :for"));
EXTERN char e_nowhitespace[] INIT(= N_("E274: No white space allowed before parenthesis"));
#endif

#ifdef FEAT_GUI_MAC
EXTERN short disallow_gui INIT(= FALSE);
#endif

EXTERN char top_bot_msg[] INIT(= N_("search hit TOP, continuing at BOTTOM"));
EXTERN char bot_top_msg[] INIT(= N_("search hit BOTTOM, continuing at TOP"));

EXTERN char line_msg[] INIT(= N_(" line "));

#ifdef FEAT_CRYPT
EXTERN char need_key_msg[] INIT(= N_("Need encryption key for \"%s\""));
#endif




#ifdef USE_XSMP
EXTERN int xsmp_icefd INIT(= -1); 
#endif


EXTERN time_T starttime;

#ifdef STARTUPTIME
EXTERN FILE *time_fd INIT(= NULL); 
#endif






EXTERN int vim_ignored;
EXTERN char *vim_ignoredp;

#ifdef FEAT_EVAL

EXTERN alloc_id_T alloc_fail_id INIT(= aid_none);

EXTERN int alloc_fail_countdown INIT(= -1);

EXTERN int alloc_fail_repeat INIT(= 0);


EXTERN int disable_char_avail_for_testing INIT(= FALSE);
EXTERN int disable_redraw_for_testing INIT(= FALSE);
EXTERN int ignore_redraw_flag_for_testing INIT(= FALSE);
EXTERN int nfa_fail_for_testing INIT(= FALSE);
EXTERN int no_query_mouse_for_testing INIT(= FALSE);

EXTERN int in_free_unref_items INIT(= FALSE);
#endif

#ifdef FEAT_TIMERS
EXTERN int did_add_timer INIT(= FALSE);
EXTERN int timer_busy INIT(= 0); 
#endif

#ifdef FEAT_BEVAL_TERM
EXTERN int bevalexpr_due_set INIT(= FALSE);
EXTERN proftime_T bevalexpr_due;
#endif

#ifdef FEAT_EVAL
EXTERN time_T time_for_testing INIT(= 0);


EXTERN int did_echo_string_emsg INIT(= FALSE);


EXTERN int *eval_lavars_used INIT(= NULL);


EXTERN char windowsVersion[20] INIT(= {0});


EXTERN listitem_T range_list_item;
#endif

#ifdef MSWIN
#ifdef PROTO
typedef int HINSTANCE;
#endif
EXTERN int ctrl_break_was_pressed INIT(= FALSE);
EXTERN HINSTANCE g_hinst INIT(= NULL);
#endif

#if defined(FEAT_JOB_CHANNEL)
EXTERN int did_repeated_msg INIT(= 0);
#define REPEATED_MSG_LOOKING 1
#define REPEATED_MSG_SAFESTATE 2
#endif

#define FOR_ALL_LIST_ITEMS(l, li) for ((li) = (l)->lv_first; (li) != NULL; (li) = (li)->li_next)

