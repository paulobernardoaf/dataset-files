<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\globals.h"><decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>Rows</name> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<init>= <expr><literal type="number">25L</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>=</operator> <literal type="number">24L</literal></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name> <name>Columns</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">80</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>schar_T</name> <modifier>*</modifier><name>ScreenLines</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>sattr_T</name> <modifier>*</modifier><name>ScreenAttrs</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>unsigned</name> <modifier>*</modifier><name>LineOffset</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>LineWraps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>u8char_T</name> <modifier>*</modifier><name>ScreenLinesUC</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>u8char_T</name> <modifier>*</modifier></type><name><name>ScreenLinesC</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>Screen_mco</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>schar_T</name> <modifier>*</modifier><name>ScreenLines2</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>schar_T</name> <modifier>*</modifier><name>current_ScreenLine</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_cur_row</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_cur_col</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>match_T</name></type> <name>screen_search_hl</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>foldinfo_T</name></type> <name>win_foldinfo</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redrawing_for_callback</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>short</name> <modifier>*</modifier><name>TabPageIdxs</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>short</name> <modifier>*</modifier><name>popup_mask</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>short</name> <modifier>*</modifier><name>popup_mask_next</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>popup_transparent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>popup_mask_refresh</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier><name>popup_mask_tab</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_zindex</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_Rows</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_Columns</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mod_mask</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0x0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>cmdline_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redraw_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redraw_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clear_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mode_displayed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_win_do_lines_ins</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdline_star</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>exec_from_reg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>screen_cleared</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>dollar_vcol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_length</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>compl_cont_status</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_ADDING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_INTRPT</name></cpp:macro> <cpp:value>(2 + 4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_N_ADDS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_S_IPOS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_SOL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_LOCAL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode_pre</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>edit_submode_extra</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>hlf_T</name></type> <name>edit_submode_highl</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdmsg_rl</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>msg_scrolled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_scrolled_ign</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>keep_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_msg_attr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_msg_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_fileinfo</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_scroll</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_didout</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_didany</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_nowait</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>info_message</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_hist_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_clr_eos</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_skip</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_severe</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_endif</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>did_emsg</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>called_vim_beep</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>did_uncaught_emsg</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>did_emsg_syntax</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>called_emsg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_exitval</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_on_display</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>rc_did_emsg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_wait_return</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_maketitle</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>quit_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>newline_on_exit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>intr_char</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>x_no_connect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>x_force_connect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_keep_indent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>vgetc_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>didset_vim</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>didset_vimruntime</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lines_left</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_no_more</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>garray_T</name> <name>exestack</name></type> <name>INIT5</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>estack_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOURCING_NAME</name></cpp:macro> <cpp:value>(((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOURCING_LNUM</name></cpp:macro> <cpp:value>(((estack_T *)exestack.ga_data)[exestack.ga_len - 1].es_lnum)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_nesting_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_break_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_did_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_tick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_backtrace_level</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>do_profiling</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>PROF_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>garray_T</name> <name>script_items</name></type> <name>INIT5</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scriptitem_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_ITEM</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((scriptitem_T **)script_items.ga_data)[(id) - 1])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_SV</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SCRIPT_ITEM(id)-&gt;sn_vars)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_VARS</name><parameter_list>(<parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SCRIPT_SV(id)-&gt;sv_dict.dv_hashtab)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCLINE</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char_u **)(fp-&gt;uf_lines.ga_data))[j]</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>except_T</name> <modifier>*</modifier></type><name>current_exception</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_throw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_rethrow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>check_cstack</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>trylevel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>force_abort</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name><name>struct</name> <name>msglist</name></name> <modifier>*</modifier><modifier>*</modifier><name>msg_list</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>suppress_errthrow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>except_T</name> <modifier>*</modifier><name>caught_stack</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>may_garbage_collect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>want_garbage_collect</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>garbage_collect_at_exit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>sctx_T</name> <name>current_sctx</name></type> <name>INIT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_void</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_VOID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_bool</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_BOOL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_special</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_SPECIAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_number</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_NUMBER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_float</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_string</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_blob</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_BLOB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_job</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_JOB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_channel</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_CHANNEL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_func_void</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_FUNC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_void</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_func_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_FUNC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_any</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_partial_void</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_PARTIAL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_void</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_partial_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_PARTIAL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_any</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_any</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_dict_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_any</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_empty</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_void</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_dict_empty</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_void</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_bool</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_bool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_number</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_string</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_list_dict_any</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_dict_any</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_dict_bool</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_bool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_dict_number</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>type_T</name> <name>t_dict_string</name></type> <name>INIT4</name><argument_list>(<argument><expr><name>VAR_DICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_source_packages</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name>hash_removed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>scroll_region</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>t_colors</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>include_none</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>include_default</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>include_link</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>highlight_match</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>search_match_lines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name></type> <name>search_match_endcol</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>search_first_line</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>search_last_line</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>MAXLNUM</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_smartcase</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_check_timestamps</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_attr</name><index>[<expr><name>HLF_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_HIGHLIGHT</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USER_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_user</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_stlnc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_stlterm</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name><name>highlight_stltermnc</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>skip_term_loop</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>use_gvimrc</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cterm_normal_fg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cterm_normal_fg_bold</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cterm_normal_bg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMGUICOLORS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>guicolor_T</name> <name>cterm_normal_fg_gui_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>INVALCOLOR</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>guicolor_T</name> <name>cterm_normal_bg_gui_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>INVALCOLOR</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMRESPONSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>is_mac_terminal</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_no_enter</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_no_leave</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>modified_was_set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_filetype</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_filetype</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>au_did_filetype</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>bufref_T</name> <name>au_new_curbuf</name></type> <name>INIT3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>au_pending_free_buf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier><name>au_pending_free_win</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>mouse_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>mouse_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mouse_past_bottom</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mouse_past_eol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mouse_dragging</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSE_DEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>WantQueryMouse</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_mouse_correct</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>gui_prev_topline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>gui_prev_topfill</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MOUSESHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>drag_status_line</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_mouseshape</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>drag_sep_line</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>diff_context</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>diff_foldcolumn</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>diff_need_scrollbind</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>updating_screen</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>vimmenu_T</name> <modifier>*</modifier><name>root_menu</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>sys_menu</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>vimmenu_T</name> <modifier>*</modifier></type><name>current_menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>force_menu_update</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>current_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>current_tabmenu</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLINE_MENU_CLOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLINE_MENU_NEW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLINE_MENU_OPEN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>current_scrollbar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>long_u</name></type> <name>scrollbar_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>found_reverse_arg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>font_argument</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>background_argument</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>foreground_argument</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>volatile</specifier> <name>sig_atomic_t</name> <name>hold_gui_events</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>new_pixel_width</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>new_pixel_height</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>gui_win_x</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>gui_win_y</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>Clipboard_T</name></type> <name>clip_star</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>Clipboard_T</name></type> <name>clip_plus</name></decl>;</decl_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clip_plus</name></cpp:macro> <cpp:value>clip_star</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_CLIPBOARD</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_UNNAMED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_UNNAMED_PLUS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_unnamed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_autoselect_star</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_autoselect_plus</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_autoselectml</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_html</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>regprog_T</name> <modifier>*</modifier><name>clip_exclude_prog</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>clip_unnamed_saved</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>firstwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>lastwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier><name>prevwin</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_WINDOW</name></cpp:macro> <cpp:value>(firstwin == lastwin)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_NEXT</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((wp)-&gt;w_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_WINDOWS</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (wp = firstwin; wp != NULL; wp = wp-&gt;w_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_FRAMES</name><parameter_list>(<parameter><type><name>frp</name></type></parameter>, <parameter><type><name>first_frame</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (frp = first_frame; frp != NULL; frp = frp-&gt;fr_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_TABPAGES</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (tp = first_tabpage; tp != NULL; tp = tp-&gt;tp_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_WINDOWS_IN_TAB</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((wp) = ((tp) == NULL || (tp) == curtab) ? firstwin : (tp)-&gt;tp_firstwin; (wp); (wp) = (wp)-&gt;w_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_TAB_WINDOWS</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((tp) = first_tabpage; (tp) != NULL; (tp) = (tp)-&gt;tp_next) for ((wp) = ((tp) == curtab) ? firstwin : (tp)-&gt;tp_firstwin; (wp); (wp) = (wp)-&gt;w_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_POPUPWINS</name><parameter_list>(<parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((wp) = first_popupwin; (wp) != NULL; (wp) = (wp)-&gt;w_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_POPUPWINS_IN_TAB</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>wp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((wp) = (tp)-&gt;tp_first_popupwin; (wp) != NULL; (wp) = (wp)-&gt;w_next)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>curwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>aucmd_win</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>aucmd_win_used</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier></type><name>first_popupwin</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>win_T</name> <modifier>*</modifier><name>popup_dragwin</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>popup_visible</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>text_prop_frozen</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>frame_T</name> <modifier>*</modifier></type><name>topframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier></type><name>first_tabpage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>tabpage_T</name> <modifier>*</modifier></type><name>curtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redraw_tabline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>firstbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>lastbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>buf_T</name> <modifier>*</modifier><name>curbuf</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_BUFFERS</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (buf = firstbuf; buf != NULL; buf = buf-&gt;b_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_BUF_WININFO</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>wip</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((wip) = (buf)-&gt;b_wininfo; (wip) != NULL; (wip) = (wip)-&gt;wi_next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_SIGNS_IN_BUF</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>sign</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (sign = buf-&gt;b_signlist; sign != NULL; sign = sign-&gt;se_next)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mf_dont_release</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>alist_T</name></type> <name>global_alist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>max_alist_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>arg_had_last</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>ru_col</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>ru_wid</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>sc_col</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPDIRNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>vim_tempdir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>starting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NO_SCREEN</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>exiting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>really_exiting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>v_dying</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>stdout_isatty</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_AUTOCHDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>test_autochdir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>entered_free_all_mem</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>volatile</specifier> <name>sig_atomic_t</name> <name>full_screen</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>restricted</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>secure</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>textlock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>curbuf_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>allbuf_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>sandbox</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>silent_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>VIsual</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_select</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>VIsual_reselect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>VIsual_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'v'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redo_VIsual_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>resel_VIsual_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>resel_VIsual_line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name></type> <name>resel_VIsual_vcol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>where_paste_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_ai</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>ai_col</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>end_comment_pending</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_syncbind</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SMARTINDENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_si</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>can_si</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>can_si_back</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>old_indent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>saved_cursor</name> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>Insstart</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>Insstart_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>orig_line_count</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>vr_lines_changed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>JMP_BUF</name></type> <name>x_jump_env</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_JPN</name></cpp:macro> <cpp:value>932</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_JPNU</name></cpp:macro> <cpp:value>9932</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_KOR</name></cpp:macro> <cpp:value>949</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_KORU</name></cpp:macro> <cpp:value>9949</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHS</name></cpp:macro> <cpp:value>936</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHSU</name></cpp:macro> <cpp:value>9936</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHT</name></cpp:macro> <cpp:value>950</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_CHTU</name></cpp:macro> <cpp:value>9950</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_2BYTE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBCS_DEBUG</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_dbcs</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_unicode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_utf8</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_latin1like</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CYGWIN_WIN32_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_codepage</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>enc_latin9</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>has_mbyte</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name></type> <name><name>mb_bytelen_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>vimconv_T</name></type> <name>input_conv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>vimconv_T</name></type> <name>output_conv</name></decl>;</decl_stmt> 

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_ptr2len</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_ptr2len</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_ptr2len_len</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_ptr2len_len</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_char2len</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_char2len</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_char2bytes</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_char2bytes</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_ptr2cells</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_ptr2cells</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_ptr2cells_len</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_ptr2cells_len</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_char2cells</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_char2cells</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_off2cells</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>max_off</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_off2cells</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_ptr2char</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_ptr2char</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>mb_head_off</name>)<parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> INIT<parameter_list>(</parameter_list>= latin_head_off</function_decl>)<empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ICONV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>EXTERN</name> <name>size_t</name></type> (<modifier>*</modifier><name>iconv</name>) <parameter_list>(<parameter><decl><type><name>iconv_t</name></type> <name>cd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>inbytesleft</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outbytesleft</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXTERN</name> <name>iconv_t</name></type> (<modifier>*</modifier><name>iconv_open</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tocode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fromcode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>iconv_close</name>) <parameter_list>(<parameter><decl><type><name>iconv_t</name></type> <name>cd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXTERN</name> <name>int</name></type> (<modifier>*</modifier><name>iconvctl</name>) <parameter_list>(<parameter><decl><type><name>iconv_t</name></type> <name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>argument</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>EXTERN</name> <name>int</name><modifier>*</modifier></type> (<modifier>*</modifier><name>iconv_errno</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>GtkIMContext</name> <modifier>*</modifier><name>xic</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>preedit_start_col</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>MAXCOL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>colnr_T</name> <name>preedit_end_col</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>MAXCOL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>xim_changed_while_preediting</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>EXTERN</name> <name>XIC</name> <name>xic</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>guicolor_T</name> <name>xim_fg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>INVALCOLOR</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>guicolor_T</name> <name>xim_bg_color</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>INVALCOLOR</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>State</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NORMAL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>debug_mode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>finish_op</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name> <name>opcount</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>motion_force</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>exmode_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>pending_exmode_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_no_reprint</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_recording</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_executing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>seenModifyOtherKeys</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_mapping</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_zero_mapping</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>allow_keys</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_reduce_keys</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_u_sync</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>u_sync_once</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>restart_edit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>arrow_used</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ins_at_eol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_abbr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXE_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>exe_name</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ON_FLY_SCROLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>dont_scroll</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>mapped_ctrl_c</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ctrl_c_interrupts</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>cmdmod_T</name></type> <name>cmdmod</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>is_export</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>msg_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>emsg_noredir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmd_silent</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>swap_exists_action</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>SEA_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>swap_exists_did_quit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>IObuff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier></type><name>NameBuff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name></type> <name><name>msg_buf</name><index>[<expr><name>MSG_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>RedrawingDisabled</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>readonlymode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>recoverymode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>typebuf_T</name></type> <name>typebuf</name> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_normal_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ex_normal_lock</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ignore_script</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>stop_insert_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>KeyTyped</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>KeyStuffed</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INPUT_METHOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>vgetc_im_active</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>maptick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>must_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>skip_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>do_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_diff_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_highlight_changed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TRUE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSCRIPT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier></type><name><name>scriptin</name><index>[<expr><name>NSCRIPT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>curscript</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>scriptout</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>read_cmd_fd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <specifier>volatile</specifier> <name>sig_atomic_t</name> <name>got_int</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TERM_CONSOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>term_console</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>termcap_active</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cur_tmode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>TMODE_COOK</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>bangredo</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>searchcmdlen</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>reg_do_extmatch</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>reg_extmatch_T</name> <modifier>*</modifier><name>re_extmatch_in</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>reg_extmatch_T</name> <modifier>*</modifier><name>re_extmatch_out</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_outofmem_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_swapwrite_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>undo_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>global_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>listcmd_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_start_insertmode</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>last_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>repeat_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>new_last_cmdline</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>autocmd_fname</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>autocmd_fname_full</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>autocmd_bufnr</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>autocmd_match</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_cursorhold</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>pos_T</name></type> <name>last_cursormoved</name> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split_flags</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>postponed_split_tab</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>g_do_tagpreview</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>g_tag_at_cursor</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>replace_offset</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>escape_chars</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" \t\\\"|"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>keep_help_flag</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>empty_option</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_off</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>redir_fd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_reg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_vname</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>redir_execute</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LANGMAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>langmap_mapchar</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_WILDMENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>save_p_ls</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>save_p_wmh</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>wild_menu_showing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SHOWN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_SCROLLED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>toupper_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>tolower_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LINEBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name></type> <name><name>breakat_flags</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>Version</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DATE_TIME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAXC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>longVersion</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier></type><name>longVersion</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PATHDEF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>default_vim_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>default_vimruntime_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>all_cflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>all_lflags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiler_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiled_arch</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiled_user</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char_u</name> <modifier>*</modifier></type><name>compiled_sys</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>homedir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>globaldir</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_eol</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'$'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_ext</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_prec</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_nbsp</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_space</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_tab1</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_tab2</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_tab3</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_trail</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NUL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>lcs_conceal</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>fill_stl</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>fill_stlnc</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>fill_vert</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>fill_fold</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'-'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>fill_diff</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'-'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>disable_fold_update</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>km_stopsel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>km_startsel</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdwin_type</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>cmdwin_result</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <name><name>no_lines_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"--No lines in buffer--"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>long</name></type> <name>sub_nsubs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>sub_nlines</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name></type> <name><name>wim_flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_IN_ICON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STL_IN_TITLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>stl_syntax</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_hlsearch</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_X11_INCLUDES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>BalloonEval</name> <modifier>*</modifier><name>balloonEval</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>balloonEvalForTerm</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>bevalServers</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEVAL_NETBEANS</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CURSOR_SHAPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>cursorentry_T</name></type> <name><name>shape_table</name><index>[<expr><name>SHAPE_IDX_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_TOP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_BOT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_LEFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_RIGHT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_HEADERHEIGHT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_SYNTAX</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_NUMBER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_WRAP</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_DUPLEX</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_PORTRAIT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_PAPER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_COLLATE</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_JOBSPLIT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_FORMFEED</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_PRINT_NUM_OPTIONS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<decl_stmt><decl><type><name>EXTERN</name> <name>option_table_T</name></type> <name><name>printer_opts</name><index>[<expr><name>OPT_PRINT_NUM_OPTIONS</name></expr>]</index></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"top"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bottom"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"left"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"right"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"header"</literal></expr>, <expr><name>TRUE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"syntax"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"number"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"wrap"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"duplex"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"portrait"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"paper"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"collate"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jobsplit"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"formfeed"</literal></expr>, <expr><name>FALSE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>FALSE</name></expr>}</block></expr>,

}</block></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_NONE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_PERC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_INCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_MM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_POINT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRT_UNIT_NAMES</name></cpp:macro> <cpp:value>{"pc", "in", "mm", "pt"}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PRINTER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_STL_OPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name></type> <name>printer_page_num</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>xterm_display</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>xterm_display_allocated</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>Display</name> <modifier>*</modifier><name>xterm_dpy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XCLIPBOARD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>XtAppContext</name> <name>app_context</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>(</operator><name>XtAppContext</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>guint32</name> <name>gtk_socket_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>echo_wid_arg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>long_u</name> <name>win_socket_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>typebuf_was_filled</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>serverName</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>Window</name> <name>commWindow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>None</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>Window</name> <name>clientWindow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>None</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>Atom</name> <name>commProperty</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>None</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char_u</name> <modifier>*</modifier><name>serverDelayedStartName</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>HWND</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>HWND</name> <name>clientWindow</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>term_is_xterm</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name>psepc</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'\\'</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name>psepcN</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>pseps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></type> <name>INIT2</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>virtual_op</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>MAYBE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>disptick_T</name> <name>display_tick</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>linenr_T</name> <name>spell_redraw_lnum</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_SPELL_LANGS</name><parameter_list>(<parameter><type><name>slang</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((slang) = first_lang; (slang) != NULL; (slang) = slang-&gt;sl_next)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CONCEAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>need_cursor_line_redraw</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MCH_ERRMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>garray_T</name></type> <name>error_ga</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DO_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier><name>netbeansArg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>netbeansFireChanges</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>netbeansForcedQuit</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>netbeansReadFile</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>netbeansSuppressNoLines</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_abort</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E470: Command aborted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_argreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E471: Argument required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_backslash</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E10: \\ should be followed by /, ? or &amp;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CMDWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_cmdwin</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E11: Invalid in command-line window; &lt;CR&gt; executes, CTRL-C quits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_curdir</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E12: Command not allowed from exrc/vimrc in current dir or tag search"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_endif</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E171: Missing :endif"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_catch</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E603: :catch without :try"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_finally</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E606: :finally without :try"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_finally_dup</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E607: multiple :finally"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_endtry</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E600: Missing :endtry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_no_endtry</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E602: :endtry without :try"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_endwhile</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E170: Missing :endwhile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_endfor</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E170: Missing :endfor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_while</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E588: :endwhile without :while"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_for</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E588: :endfor without :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_exists</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E13: File exists (add ! to override)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_failed</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E472: Command failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_fontset</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E234: Unknown fontset: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_PHOTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_HAIKU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_font</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E235: Unknown font: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_fontwidth</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E236: Font \"%s\" is not fixed-width"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_internal</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E473: Internal error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_intern2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E685: Internal error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_interr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Interrupted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E474: Invalid argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invarg2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E475: Invalid argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_duparg2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E983: Duplicate argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invargval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E475: Invalid value for argument %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invargNval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E475: Invalid value for argument %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invexpr2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E15: Invalid expression: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invrange</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E16: Invalid range"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invcmd</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E476: Invalid command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SPELL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_isadir2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E17: \"%s\" is a directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_LIBCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_libcall</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E364: Library call failed for \"%s()\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_fsync</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E667: Fsync failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PERL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_PYTHON3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_RUBY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_TCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_ICONV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_GETTEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MZSCHEME</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_LUA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_loadlib</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E370: Could not load library %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_loadfunc</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E448: Could not load library function %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_markinval</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E19: Mark has invalid line number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_marknotset</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E20: Mark not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_modifiable</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E21: Cannot make changes, 'modifiable' is off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nesting</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E22: Scripts nested too deep"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noalt</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E23: No alternate file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noabbr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E24: No such abbreviation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nobang</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E477: No ! allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VIMDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nogvim</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E25: GUI cannot be used: Not enabled at compile time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nohebrew</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E26: Hebrew cannot be used: Not enabled at compile time\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nofarsi</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E27: Farsi support has been removed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_ARABIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noarabic</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E800: Arabic cannot be used: Not enabled at compile time\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nogroup</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E28: No such highlight group name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noinstext</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E29: No inserted text yet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nolastcmd</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E30: No previous command line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nomap</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E31: No such mapping"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nomatch</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E479: No match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nomatch2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E480: No match: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noname</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E32: No file name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nopresub</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E33: No previous substitute regular expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noprev</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E34: No previous command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noprevre</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E35: No previous regular expression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_norange</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E481: No range allowed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noroom</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E36: Not enough room"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_noserver</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E247: no registered server named \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_notcreate</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E482: Can't create file %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_notmp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E483: Can't get temp file name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_notopen</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E484: Can't open file %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_notread</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E485: Can't read file %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_null</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E38: Null argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIGRAPHS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_number_exp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E39: Number expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_openerrf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E40: Can't open errorfile %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_X11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_opendisp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E233: cannot open display"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_outofmem</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E41: Out of memory!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_patnotf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Pattern not found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_patnotf2</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E486: Pattern not found: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_positive</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E487: Argument must be positive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_prev_dir</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E459: Cannot go back to previous directory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_quickfix</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E42: No Errors"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_loclist</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E776: No location list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_re_damg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E43: Damaged match string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_re_corr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E44: Corrupted regexp program"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_readonly</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E45: 'readonly' option is set (add ! to override)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_undefvar</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E121: Undefined variable: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_letwrong</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E734: Wrong variable type for %s="</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_illvar</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E461: Illegal variable name: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_cannot_mod</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E995: Cannot modify existing variable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_readonlyvar</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E46: Cannot change read-only variable \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_readonlysbx</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E794: Cannot set variable in the sandbox: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_stringreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E928: String required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_emptykey</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E713: Cannot use empty key for Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_dictreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E715: Dictionary required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listidx</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E684: list index out of range: %ld"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_blobidx</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E979: Blob index out of range: %ld"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invalblob</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E978: Invalid operation for Blob"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_toomanyarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E118: Too many arguments for function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_toofewarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E119: Not enough arguments for function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_func_deleted</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E933: Function was deleted: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_dictkey</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E716: Key not present in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E714: List required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listblobreq</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E897: List or Blob required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_list_end</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E697: Missing end of List ']': %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listdictarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E712: Argument of %s must be a List or Dictionary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listdictblobarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E896: Argument of %s must be a List, Dictionary or Blob"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_modulus</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E804: Cannot use '%' with Float"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_inval_string</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E908: using an invalid value as a String"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_const_option</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E996: Cannot lock an option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_unknown_option</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E113: Unknown option: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_letunexp</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E18: Unexpected characters in :let"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_readerrf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E47: Error while reading errorfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SANDBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_sandbox</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E48: Not allowed in sandbox"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_secure</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E523: Not allowed here"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MACOS_X</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_screenmode</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E359: Screen mode setting not supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_scroll</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E49: Invalid scroll size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_shellempty</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E91: 'shell' option is empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SIGN_ICONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_signdata</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E255: Couldn't read in sign data!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_swapclose</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E72: Close error on swap file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_tagstack</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E73: tag stack empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_toocompl</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E74: Command too complex"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_longname</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E75: Name too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_toomsbra</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E76: Too many ["</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_toomany</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E77: Too many file names"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_trailing</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E488: Trailing characters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_umark</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E78: Unknown mark"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_wildexpand</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E79: Cannot expand wildcards"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_winheight</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E591: 'winheight' cannot be smaller than 'winminheight'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_winwidth</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E592: 'winwidth' cannot be smaller than 'winminwidth'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_write</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E80: Error while writing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_zerocount</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E939: Positive count required"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_usingsid</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E81: Using &lt;SID&gt; not in a script context"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_paren</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E107: Missing parentheses: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_close</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E110: Missing ')'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_dict_colon</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E720: Missing colon in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_duplicate_key</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E721: Duplicate key in Dictionary: \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_dict_comma</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E722: Missing comma in Dictionary: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_dict_end</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E723: Missing end of Dictionary '}': %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIENTSERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invexprmsg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E449: Invalid expression received"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_guarded</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E463: Region is guarded, cannot modify"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nbreadonly</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E744: NetBeans does not allow changes in read-only files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_maxmempat</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E363: pattern uses more memory than 'maxmempattern'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_emptybuf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E749: empty buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nobufnr</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E86: Buffer %ld does not exist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invalpat</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E682: Invalid search pattern or delimiter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_bufloaded</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E139: File is loaded in another buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SYN_HL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_COMPL_FUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_notset</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E764: Option '%s' is not set"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invalidreg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E850: Invalid register name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_dirnotf</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E919: Directory not found in '%s': \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_au_recursive</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E952: Autocommand caused recursive behavior"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_menuothermode</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E328: Menu only exists in another mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_invalwindow</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E957: Invalid window number"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_listarg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E686: Argument of %s must be a List"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_colon</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E109: Missing ':' after '?'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missing_in</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E690: Missing \"in\" after :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_unknownfunc</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E117: Unknown function: %s"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_missbrac</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E111: Missing ']'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_else_without_if</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E581: :else without :if"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_elseif_without_if</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E582: :elseif without :if"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_endif_without_if</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E580: :endif without :if"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_continue</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E586: :continue without :while or :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_break</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E587: :break without :while or :for"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>e_nowhitespace</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E274: No white space allowed before parenthesis"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>short</name> <name>disallow_gui</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>top_bot_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"search hit TOP, continuing at BOTTOM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>bot_top_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"search hit BOTTOM, continuing at TOP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>line_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" line "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>need_key_msg</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Need encryption key for \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_XSMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>xsmp_icefd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>time_T</name></type> <name>starttime</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STARTUPTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>FILE</name> <modifier>*</modifier><name>time_fd</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name></type> <name>vim_ignored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <modifier>*</modifier></type><name>vim_ignoredp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>alloc_id_T</name> <name>alloc_fail_id</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>aid_none</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>alloc_fail_countdown</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>alloc_fail_repeat</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>disable_char_avail_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>disable_redraw_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ignore_redraw_flag_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>nfa_fail_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>no_query_mouse_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>in_free_unref_items</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TIMERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_add_timer</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>timer_busy</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>bevalexpr_due_set</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>proftime_T</name></type> <name>bevalexpr_due</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EXTERN</name> <name>time_T</name> <name>time_for_testing</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_echo_string_emsg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <modifier>*</modifier><name>eval_lavars_used</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>char</name> <name><name>windowsVersion</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>listitem_T</name></type> <name>range_list_item</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>HINSTANCE</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>ctrl_break_was_pressed</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>FALSE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTERN</name> <name>HINSTANCE</name> <name>g_hinst</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>EXTERN</name> <name>int</name> <name>did_repeated_msg</name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEATED_MSG_LOOKING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEATED_MSG_SAFESTATE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_LIST_ITEMS</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>li</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((li) = (l)-&gt;lv_first; (li) != NULL; (li) = (li)-&gt;li_next)</cpp:value></cpp:define>

</unit>
