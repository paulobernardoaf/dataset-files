<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\memfile_test.c"><cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_VIM_MAIN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memfile.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>index_to_key</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) ^ 15167)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COUNT</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>test_mf_hash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mf_hashtab_T</name></type> <name>ht</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>blocknr_T</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>num_buckets</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mf_hash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>.</operator><name>mht_count</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_buckets</name> <operator>=</operator> <name><name>ht</name><operator>.</operator><name>mht_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_buckets</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>num_buckets</name> <operator>&amp;</operator> <operator>(</operator><name>num_buckets</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>.</operator><name>mht_count</name></name> <operator>&lt;=</operator> <operator>(</operator><name>num_buckets</name> <operator>&lt;&lt;</operator> <name>MHT_LOG_LOAD_FACTOR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>MHT_INIT_SIZE</name> <operator>&lt;&lt;</operator> <name>MHT_LOG_LOAD_FACTOR</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_buckets</name> <operator>==</operator> <name>MHT_INIT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>.</operator><name>mht_buckets</name></name> <operator>==</operator> <name><name>ht</name><operator>.</operator><name>mht_small_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_buckets</name> <operator>&gt;</operator> <name>MHT_INIT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>.</operator><name>mht_buckets</name></name> <operator>!=</operator> <name><name>ht</name><operator>.</operator><name>mht_small_buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>index_to_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>LALLOC_CLEAR_ONE</name><argument_list>(<argument><expr><name>mf_hashitem_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>.</operator><name>mht_mask</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>num_buckets</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>.</operator><name>mht_mask</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>num_buckets</name> <operator>*</operator> <name>MHT_GROWTH_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>num_buckets</name> <operator>&lt;&lt;</operator> <name>MHT_LOG_LOAD_FACTOR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>index_to_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">100</literal> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>index_to_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_rem_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mf_hash_rem_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>index_to_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>mf_hash_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">100</literal> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>mhi_key</name></name> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mf_hash_free_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>test_mf_hash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
