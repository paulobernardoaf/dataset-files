<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\beval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_PROP_POPUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>find_word_under_cursor</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>mouserow</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mousecol</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>getword</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>winp</name></decl></parameter>, 

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnump</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>textp</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>startcolp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouserow</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mousecol</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>textp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>mouse_find_win</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><name>FAIL_POPUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mouse_comp_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;=</operator> <call><name>win_linetabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>getword</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>spos</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>epos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>LT_POS</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>spos</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>

<expr_stmt><expr><name>epos</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>spos</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>epos</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>vcol2col</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name>

<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>lnum</name> <operator>==</operator> <name><name>spos</name><operator>-&gt;</operator><name>lnum</name></name></expr>

?</condition><then> <expr><name>col</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>spos</name><operator>-&gt;</operator><name>col</name></name></expr>

</then><else>: <expr><name>lnum</name> <operator>&gt;</operator> <name><name>spos</name><operator>-&gt;</operator><name>lnum</name></name></expr></else></ternary><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>lnum</name> <operator>==</operator> <name><name>epos</name><operator>-&gt;</operator><name>lnum</name></name></expr>

?</condition><then> <expr><name>col</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>epos</name><operator>-&gt;</operator><name>col</name></name></expr>

</then><else>: <expr><name>lnum</name> <operator>&lt;</operator> <name><name>epos</name><operator>-&gt;</operator><name>lnum</name></name></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>spos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <name><name>epos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>||</operator> <name><name>spos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name><name>epos</name><operator>-&gt;</operator><name>col</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>epos</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <name><name>spos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>lbuf</name> <operator>+</operator> <name><name>epos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>lbuf</name> <operator>+</operator> <name><name>spos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>spos</name><operator>-&gt;</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>spos</name><operator>-&gt;</operator><name>col</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>emsg_off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>find_ident_at_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>col</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>lbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>emsg_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lbuf</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>winp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>winp</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnump</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>lnump</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>textp</name> <operator>=</operator> <name>lbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startcolp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>startcolp</name> <operator>=</operator> <name>scol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>get_beval_info</name><parameter_list>(

<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>getword</name></decl></parameter>,

<parameter><decl><type><name>win_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>winp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnump</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>textp</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>mouse_row</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>mouse_col</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>Y_2_ROW</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>X_2_COL</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>find_word_under_cursor</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>getword</name></expr></argument>,

<argument><expr><name>FIND_IDENT</name> <operator>+</operator> <name>FIND_STRING</name> <operator>+</operator> <name>FIND_EVAL</name></expr></argument>,

<argument><expr><name>winp</name></expr></argument>, <argument><expr><name>lnump</name></expr></argument>, <argument><expr><name>textp</name></expr></argument>, <argument><expr><name>colp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VARTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>beval</name><operator>-&gt;</operator><name>vts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>vts</name></name> <operator>=</operator> <call><name>tabstop_copy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>winp</name><operator>)</operator><operator>-&gt;</operator><name><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>winp</name><operator>)</operator><operator>-&gt;</operator><name><name>w_buffer</name><operator>-&gt;</operator><name>b_p_vts_array</name></name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>beval</name><operator>-&gt;</operator><name>vts</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>getword</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><operator>*</operator><name>textp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>beval</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>winp</name><operator>)</operator><operator>-&gt;</operator><name><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>post_balloon</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier><name>beval</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mesg</name></decl></parameter>, <parameter><decl><type><name>list_T</name> <modifier>*</modifier><name>list</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ui_post_balloon</name><argument_list>(<argument><expr><name>mesg</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_post_balloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>can_use_beval</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name>p_beval</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_TERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>p_bevalterm</name><operator>)</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator> <operator>&amp;&amp;</operator> <name>msg_scrolled</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>general_beval_cb</name><parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type><name>beval</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>state</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>winnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bexpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>save_curbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>cw</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_use_beval</name><argument_list>()</argument_list></call> <operator>||</operator> <name>beval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>get_beval_info</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>bexpr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_bexpr</name></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><name>p_bexpr</name></expr>

</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_bexpr</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bexpr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cw</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>cw</name> <operator>!=</operator> <name>wp</name></expr>;</condition> <incr><expr><name>cw</name> <operator>=</operator> <name><name>cw</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>winnr</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_BEVAL_BUFNR</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_BEVAL_WINNR</name></expr></argument>, <argument><expr><name>winnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_BEVAL_WINID</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_BEVAL_LNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_nr</name><argument_list>(<argument><expr><name>VV_BEVAL_COL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>col</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_BEVAL_TEXT</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_curbuf</name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"balloonexpr"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bexpr</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>OPT_LOCAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>save_curbuf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>bexpr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_sandbox</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>sandbox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_BEVAL_TEXT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>post_balloon</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>redraw_after_callback</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_NETBEANS_INTG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>bevalServers</name> <operator>&amp;</operator> <name>BEVAL_NETBEANS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>netbeans_beval_cb</name><argument_list>(<argument><expr><name>beval</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
