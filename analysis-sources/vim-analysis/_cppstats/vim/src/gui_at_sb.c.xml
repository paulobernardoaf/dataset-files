<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_at_sb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/IntrinsicP.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/XawInit.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_at_sb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/Drawing.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>defaultTranslations</name><index>[]</index></name> <init>=

<expr><literal type="string">"&lt;Btn1Down&gt;: NotifyScroll()\n\

&lt;Btn2Down&gt;: MoveThumb() NotifyThumb()\n\

&lt;Btn3Down&gt;: NotifyScroll()\n\

&lt;Btn4Down&gt;: ScrollOneLineUp()\n\

Shift&lt;Btn4Down&gt;: ScrollPageUp()\n\

&lt;Btn5Down&gt;: ScrollOneLineDown()\n\

Shift&lt;Btn5Down&gt;: ScrollPageDown()\n\

&lt;Btn1Motion&gt;: HandleThumb()\n\

&lt;Btn3Motion&gt;: HandleThumb()\n\

&lt;Btn2Motion&gt;: MoveThumb() NotifyThumb()\n\

&lt;BtnUp&gt;: EndScroll()"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>floatZero</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Offset</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XtOffsetOf(ScrollbarRec, field)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtResource</name></type> <name><name>resources</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>XtNlength</name></expr>, <expr><name>XtCLength</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XtNthickness</name></expr>, <expr><name>XtCThickness</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>thickness</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <literal type="number">14</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XtNorientation</name></expr>, <expr><name>XtCOrientation</name></expr>, <expr><name>XtROrientation</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XtOrientation</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>XtorientVertical</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNscrollProc</name></expr>, <expr><name>XtCCallback</name></expr>, <expr><name>XtRCallback</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XtPointer</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>scrollProc</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRCallback</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNthumbProc</name></expr>, <expr><name>XtCCallback</name></expr>, <expr><name>XtRCallback</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XtPointer</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>thumbProc</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRCallback</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNjumpProc</name></expr>, <expr><name>XtCCallback</name></expr>, <expr><name>XtRCallback</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>XtPointer</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>jumpProc</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRCallback</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNthumb</name></expr>, <expr><name>XtCThumb</name></expr>, <expr><name>XtRBitmap</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixmap</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>thumb</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <name>XtUnspecifiedPixmap</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNforeground</name></expr>, <expr><name>XtCForeground</name></expr>, <expr><name>XtRPixel</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixel</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>foreground</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRString</name></expr>, <expr><name>XtDefaultForeground</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNshown</name></expr>, <expr><name>XtCShown</name></expr>, <expr><name>XtRFloat</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>shown</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRFloat</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>floatZero</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNtopOfThumb</name></expr>, <expr><name>XtCTopOfThumb</name></expr>, <expr><name>XtRFloat</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRFloat</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>floatZero</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNmaxOfThumb</name></expr>, <expr><name>XtCMaxOfThumb</name></expr>, <expr><name>XtRFloat</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRFloat</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>floatZero</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNminimumThumb</name></expr>, <expr><name>XtCMinimumThumb</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>min_thumb</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <literal type="number">7</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XtNshadowWidth</name></expr>, <expr><name>XtCShadowWidth</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator> <literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><name>XtNtopShadowPixel</name></expr>, <expr><name>XtCTopShadowPixel</name></expr>, <expr><name>XtRPixel</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixel</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>top_shadow_pixel</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRString</name></expr>, <expr><name>XtDefaultBackground</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNbottomShadowPixel</name></expr>, <expr><name>XtCBottomShadowPixel</name></expr>, <expr><name>XtRPixel</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pixel</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>bot_shadow_pixel</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRString</name></expr>, <expr><name>XtDefaultForeground</name></expr>}</block></expr>,

<expr><block>{<expr><name>XtNlimitThumb</name></expr>, <expr><name>XtCLimitThumb</name></expr>, <expr><name>XtRBool</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bool</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><call><name>Offset</name><argument_list>(<argument><expr><name><name>scrollbar</name><operator>.</operator><name>limit_thumb</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRImmediate</name></expr>, <expr><operator>(</operator><name>XtPointer</name><operator>)</operator><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Offset</name></cpp:undef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ClassInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>ArgList</name></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Realize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>Mask</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>XSetWindowAttributes</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Resize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Redisplay</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Region</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>SetValues</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>ArgList</name></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>HandleThumb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MoveThumb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NotifyThumb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NotifyScroll</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EndScroll</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollOneLineUp</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollOneLineDown</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollPageUp</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollPageDown</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ScrollSome</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>call_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_Xaw3dDrawShadows</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Region</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AllocTopShadowGC</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AllocBotShadowGC</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtActionsRec</name></type> <name><name>actions</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"HandleThumb"</literal></expr>, <expr><name>HandleThumb</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MoveThumb"</literal></expr>, <expr><name>MoveThumb</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"NotifyThumb"</literal></expr>, <expr><name>NotifyThumb</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"NotifyScroll"</literal></expr>, <expr><name>NotifyScroll</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EndScroll"</literal></expr>, <expr><name>EndScroll</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ScrollOneLineUp"</literal></expr>, <expr><name>ScrollOneLineUp</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ScrollOneLineDown"</literal></expr>, <expr><name>ScrollOneLineDown</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ScrollPageUp"</literal></expr>, <expr><name>ScrollPageUp</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ScrollPageDown"</literal></expr>, <expr><name>ScrollPageDown</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbarClassRec</name></type> <name>vim_scrollbarClassRec</name> <init>=

<expr><block>{

<expr><block>{ 

<expr><operator>(</operator><name>WidgetClass</name><operator>)</operator> <operator>&amp;</operator><name>simpleClassRec</name></expr>,

<expr><literal type="string">"Scrollbar"</literal></expr>,

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScrollbarRec</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><name>ClassInitialize</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>FALSE</name></expr>,

<expr><name>Initialize</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>Realize</name></expr>,

<expr><name>actions</name></expr>,

<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actions</name></expr></argument>)</argument_list></call></expr>,

<expr><name>resources</name></expr>,

<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NULLQUARK</name></expr>,

<expr><name>TRUE</name></expr>,

<expr><name>TRUE</name></expr>,

<expr><name>TRUE</name></expr>,

<expr><name>FALSE</name></expr>,

<expr><name>Destroy</name></expr>,

<expr><name>Resize</name></expr>,

<expr><name>Redisplay</name></expr>,

<expr><name>SetValues</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>XtInheritSetValuesAlmost</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>XtVersion</name></expr>,

<expr><name>NULL</name></expr>,

<expr><name>defaultTranslations</name></expr>,

<expr><name>XtInheritQueryGeometry</name></expr>,

<expr><name>XtInheritDisplayAccelerator</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr>,

<expr><block>{ 

<expr><name>XtInheritChangeSensitive</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OLDXAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>NULL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>,

<expr><block>{ 

<expr><literal type="number">0</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WidgetClass</name></type> <name>vim_scrollbarWidgetClass</name> <init>= <expr><operator>(</operator><name>WidgetClass</name><operator>)</operator><operator>&amp;</operator><name>vim_scrollbarClassRec</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NoButton</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICKLENGTH</name><parameter_list>(<parameter><type><name>widget</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((widget-&gt;scrollbar.orientation == XtorientHorizontal) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_DELAY</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_DELAY</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_REPEAT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_REPEAT</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ClassInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XawInitializeWidgetSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddConverter</name><argument_list>( <argument><expr><name>XtRString</name></expr></argument>, <argument><expr><name>XtROrientation</name></expr></argument>, <argument><expr><name>XmuCvtStringToOrientation</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtConvertArgList</name><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>Cardinal</name><operator>)</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARGIN</name><parameter_list>(<parameter><type><name>sbw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sbw)-&gt;scrollbar.thickness + (sbw)-&gt;scrollbar.shadow_width</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>FillArea</name><parameter_list>(

<parameter><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name></decl></parameter>,

<parameter><decl><type><name>Position</name></type> <name>top</name></decl></parameter>,

<parameter><decl><type><name>Position</name></type> <name>bottom</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>draw_shadow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tlen</name> <init>= <expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sw</name></decl>, <decl><type ref="prev"/><name>margin</name></decl>, <decl><type ref="prev"/><name>floor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>, <decl><type ref="prev"/><name>lw</name></decl>, <decl><type ref="prev"/><name>lh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>bottom</name> <operator>&lt;=</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sw</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>margin</name> <operator>=</operator> <call><name>MARGIN</name> <argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>floor</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>margin</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>top</name> <operator>&lt;</operator> <name>margin</name><operator>)</operator></expr> ?</condition><then> <expr><name>margin</name></expr> </then><else>: <expr><name>top</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lw</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>top</name> <operator>+</operator> <name>tlen</name><operator>)</operator> <operator>&gt;</operator> <name>floor</name><operator>)</operator></expr> ?</condition><then> <expr><name>floor</name> <operator>-</operator> <name>top</name></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lh</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>sw</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>top</name> <operator>&lt;</operator> <name>margin</name><operator>)</operator></expr> ?</condition><then> <expr><name>margin</name></expr> </then><else>: <expr><name>top</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lw</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>sw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lh</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>top</name> <operator>+</operator> <name>tlen</name><operator>)</operator> <operator>&gt;</operator> <name>floor</name><operator>)</operator></expr> ?</condition><then> <expr><name>floor</name> <operator>-</operator> <name>top</name></expr> </then><else>: <expr><name>tlen</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lh</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>lw</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_shadow</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>lw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>lh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lx</name> <operator>+</operator> <name>lw</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ly</name> <operator>+</operator> <name>lh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>ly</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>lw</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>lh</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>PaintThumb</name><parameter_list>(<parameter><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Position</name></type> <name>oldtop</name></decl>, <decl><type ref="prev"/><name>oldbot</name></decl>, <decl><type ref="prev"/><name>newtop</name></decl>, <decl><type ref="prev"/><name>newbot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>margin</name></decl>, <decl><type ref="prev"/><name>tzl</name></decl>;</decl_stmt>

<expr_stmt><expr><name>margin</name> <operator>=</operator> <call><name>MARGIN</name> <argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tzl</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newtop</name> <operator>=</operator> <name>margin</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tzl</name> <operator>*</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newbot</name> <operator>=</operator> <name>newtop</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tzl</name> <operator>*</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newbot</name> <operator>&lt;</operator> <name>newtop</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>min_thumb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newbot</name> <operator>=</operator> <name>newtop</name> <operator>+</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>min_thumb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldtop</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldbot</name> <operator>=</operator> <name>oldtop</name> <operator>+</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>=</operator> <name>newtop</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name> <operator>=</operator> <name>newbot</name> <operator>-</operator> <name>newtop</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsRealized</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>newtop</name> <operator>&lt;</operator> <name>oldtop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillArea</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>newtop</name></expr></argument>, <argument><expr><call><name>AT_MIN</name><argument_list>(<argument><expr><name>newbot</name></expr></argument>, <argument><expr><name>oldtop</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newtop</name> <operator>&gt;</operator> <name>oldtop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillArea</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>oldtop</name></expr></argument>, <argument><expr><call><name>AT_MIN</name><argument_list>(<argument><expr><name>newtop</name></expr></argument>, <argument><expr><name>oldbot</name></expr></argument> )</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newbot</name> <operator>&lt;</operator> <name>oldbot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillArea</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><call><name>AT_MAX</name><argument_list>(<argument><expr><name>newbot</name></expr></argument>, <argument><expr><name>oldtop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oldbot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newbot</name> <operator>&gt;</operator> <name>oldbot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillArea</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><call><name>AT_MAX</name><argument_list>(<argument><expr><name>newtop</name></expr></argument>, <argument><expr><name>oldbot</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>newbot</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FillArea</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>newtop</name></expr></argument>, <argument><expr><name>newbot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>PaintArrows</name><parameter_list>(<parameter><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XPoint</name></type> <name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>thickness</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>thickness</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>thickness</name> <operator>-</operator> <name>size</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>thickness</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>thickness</name> <operator>-</operator> <name>off</name> <operator>-</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>thickness</name> <operator>-</operator> <name>off</name> <operator>-</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>thickness</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swap</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>swap</name> <operator>=</operator> <name><name>point</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>point</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XFillPolygon</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name></expr></argument>,

<argument><expr><name>point</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name>Convex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLines</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name>point</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillPolygon</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name></expr></argument>,

<argument><expr><name>point</name><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name>Convex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XDrawLine</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>XtWindow</name> <argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator> <name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,

<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Destroy</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name> <operator>!=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name> <argument_list>(<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>CreateGC</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>gcValues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name> <operator>==</operator> <name>XtUnspecifiedPixmap</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name> <operator>=</operator> <call><name>XmuCreateStippledPixmap</name> <argument_list>(<argument><expr><call><name>XtScreen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>Pixel</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name> <operator>!=</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>, <decl><type ref="prev"/><name>bw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XGetGeometry</name> <argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scrollbar Widget: Could not get geometry of thumb pixmap."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>foreground</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>background</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name> <operator>!=</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gcValues</name><operator>.</operator><name>fill_style</name></name> <operator>=</operator> <name>FillSolid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>GCFillStyle</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name> <operator>=</operator> <call><name>XtGetGC</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gcValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>SetDimensions</name><parameter_list>(<parameter><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientVertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Initialize</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>request</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>Widget</name></type> <name>new</name></decl></parameter>, 

<parameter><decl><type><name>ArgList</name> <name>args</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_args</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>new</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CreateGC</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AllocTopShadowGC</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AllocBotShadowGC</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientVertical</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name></expr> </then><else>: <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name></expr> </then><else>: <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetDimensions</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name> <operator>=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>min_thumb</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Realize</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>Mask</name> <modifier>*</modifier></type><name>valueMask</name></decl></parameter>,

<parameter><decl><type><name>XSetWindowAttributes</name> <modifier>*</modifier></type><name>attributes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name><name>vim_scrollbarWidgetClass</name><operator>-&gt;</operator><name>core_class</name><operator>.</operator><name>superclass</name><operator>-&gt;</operator><name>core_class</name><operator>.</operator><name>realize</name></name>)

<argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>valueMask</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>SetValues</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>current</name></decl></parameter>, 

<parameter><decl><type><name>Widget</name> <name>request</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>Widget</name></type> <name>desired</name></decl></parameter>, 

<parameter><decl><type><name>ArgList</name> <name>args</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_args</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>current</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>dsbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>desired</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>redraw</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>&lt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>&lt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>foreground</name></name> <operator>!=</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>foreground</name></name> <operator>||</operator>

<name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name> <operator>!=</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>background_pixel</name></name> <operator>||</operator>

<name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name> <operator>!=</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thumb</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtReleaseGC</name><argument_list>(<argument><expr><name>desired</name></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>gc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateGC</name> <argument_list>(<argument><expr><name>desired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>!=</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>||</operator>

<name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>!=</operator> <name><name>dsbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>redraw</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Resize</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SetDimensions</name> <argument_list>(<argument><expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Redisplay</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>XEvent</name><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>Region</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Redisplay</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>Region</name></type> <name>region</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_Xaw3dDrawShadows</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>orientation</name></name> <operator>==</operator> <name>XtorientHorizontal</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>region</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<call><name>XRectInRegion</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RectangleOut</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PaintThumb</name> <argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PaintArrows</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>CompareEvents</name><parameter_list>(<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>oldEvent</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>newEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check</name><parameter_list>(<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (newEvent-&gt;field != oldEvent-&gt;field) return False; } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xany</name><operator>.</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xany</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xany</name><operator>.</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>newEvent</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MotionNotify</name></expr>:</case>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xmotion</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ButtonPress</name></expr>:</case>

<case>case <expr><name>ButtonRelease</name></expr>:</case>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xbutton</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xbutton</name><operator>.</operator><name>button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>KeyPress</name></expr>:</case>

<case>case <expr><name>KeyRelease</name></expr>:</case>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xkey</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xkey</name><operator>.</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EnterNotify</name></expr>:</case>

<case>case <expr><name>LeaveNotify</name></expr>:</case>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xcrossing</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xcrossing</name><operator>.</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><name><name>xcrossing</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check</name></cpp:undef>

<return>return <expr><name>True</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>EventData</name>

<block>{

<decl_stmt><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>oldEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>Bool</name></type>

<name>PeekNotifyEvent</name><parameter_list>(<parameter><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>EventData</name></name> <modifier>*</modifier></type><name>eventData</name> <init>= <expr><operator>(</operator>struct <name>EventData</name><operator>*</operator><operator>)</operator><name>args</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><operator>++</operator><name><name>eventData</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <call><name>QLength</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call><operator>)</operator> 

<operator>||</operator> <call><name>CompareEvents</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>eventData</name><operator>-&gt;</operator><name>oldEvent</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>LookAhead</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XEvent</name></type> <name>newEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>EventData</name></name></type> <name>eventData</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QLength</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>False</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>eventData</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventData</name><operator>.</operator><name>oldEvent</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XPeekIfEvent</name> <argument_list>(<argument><expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEvent</name></expr></argument>, <argument><expr><name>PeekNotifyEvent</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>eventData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CompareEvents</name> <argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEvent</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ExtractPosition</name><parameter_list>(

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Position</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, 

<parameter><decl><type><name>Position</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MotionNotify</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ButtonPress</name></expr>:</case>

<case>case <expr><name>ButtonRelease</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>KeyPress</name></expr>:</case>

<case>case <expr><name>KeyRelease</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xkey</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>EnterNotify</name></expr>:</case>

<case>case <expr><name>LeaveNotify</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>xcrossing</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>HandleThumb</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type><name>num_params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Position</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExtractPosition</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>PICKLENGTH</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>==</operator> <name>SMODE_CONT</name> <operator>||</operator>

<operator>(</operator><name>loc</name> <operator>&gt;=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>&amp;&amp;</operator>

<name>loc</name> <operator>&lt;=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtCallActionProc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"MoveThumb"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>*</operator><name>num_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCallActionProc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"NotifyThumb"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>*</operator><name>num_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>RepeatNotify</name><parameter_list>(<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>idp</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>client_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>call_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>mode</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SMODE_NONE</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>SMODE_CONT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name> <operator>=</operator> <operator>(</operator><name>XtIntervalId</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SMODE_LINE_DOWN</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>SMODE_LINE_UP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <name>ONE_LINE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep</name> <operator>=</operator> <name>LINE_REPEAT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <name>ONE_PAGE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rep</name> <operator>=</operator> <name>PAGE_REPEAT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>SMODE_PAGE_UP</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>SMODE_LINE_UP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <operator>-</operator><name>call_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtCallCallbacks</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>sbw</name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name> <operator>=</operator>

<call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><operator>(</operator><name>Widget</name><operator>)</operator><name>sbw</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>rep</name></expr></argument>,

<argument><expr><name>RepeatNotify</name></expr></argument>,

<argument><expr><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>

<name>FloatInRange</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>small</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>big</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <name>small</name><operator>)</operator></expr> ?</condition><then> <expr><name>small</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <name>big</name><operator>)</operator></expr> ?</condition><then> <expr><name>big</name></expr> </then><else>: <expr><name>num</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ScrollOneLineUp</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ScrollSome</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>-</operator><name>ONE_LINE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ScrollOneLineDown</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ScrollSome</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>ONE_LINE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ScrollPageDown</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ScrollSome</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>ONE_PAGE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ScrollPageUp</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ScrollSome</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><operator>-</operator><name>ONE_PAGE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ScrollSome</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>==</operator> <name>SMODE_CONT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LookAhead</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_LINE_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCallCallbacks</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>NotifyScroll</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>loc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>arrow_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>call_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>==</operator> <name>SMODE_CONT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LookAhead</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ExtractPosition</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>PICKLENGTH</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arrow_size</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arrow_size</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>thickness</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>ControlMask</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&gt;</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>+</operator> <operator>(</operator><name>Position</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <name>END_PAGE_DATA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <operator>-</operator><name>END_PAGE_DATA</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <operator>(</operator><name>Position</name><operator>)</operator><name>arrow_size</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <operator>-</operator><name>ONE_LINE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_LINE_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>LINE_DELAY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>loc</name> <operator>&gt;</operator> <operator>(</operator><name>Position</name><operator>)</operator><operator>(</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>arrow_size</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <name>ONE_LINE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_LINE_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>LINE_DELAY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>loc</name> <operator>&lt;</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <operator>-</operator><name>ONE_PAGE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_PAGE_UP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>PAGE_DELAY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>loc</name> <operator>&gt;</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>topLoc</name></name> <operator>+</operator> <operator>(</operator><name>Position</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shownLength</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>call_data</name> <operator>=</operator> <name>ONE_PAGE_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_PAGE_DOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <name>PAGE_DELAY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>call_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtCallCallbacks</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>call_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delay</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>timer_id</name></name> <operator>=</operator>

<call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>RepeatNotify</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>EndScroll</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type>

<name>FractionLoc</name><parameter_list>(<parameter><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>margin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>width</name></decl>;</decl_stmt>

<expr_stmt><expr><name>margin</name> <operator>=</operator> <call><name>MARGIN</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>margin</name></expr>;</expr_stmt>

<return>return <expr><call><name>PICKLENGTH</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name> <operator>/</operator> <name>width</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>MoveThumb</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>old_mode</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>=</operator> <name>SMODE_CONT</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>LookAhead</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>same_screen</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ExtractPosition</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>FractionLoc</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_mode</name> <operator>!=</operator> <name>SMODE_CONT</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xbutton</name><operator>.</operator><name>button</name></name> <operator>==</operator> <name>Button2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_off</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>/</operator> <literal type="number">2.</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_off</name></name> <operator>=</operator> <name>top</name> <operator>-</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>-=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>limit_thumb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>FloatInRange</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>,

<argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name> <operator>-</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>+</operator> <literal type="number">0.000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>FloatInRange</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PaintThumb</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>NotifyThumb</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier><name>params</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier><name>num_params</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>XtPointer</name></type> <name>xtp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xtf</name></decl>;</decl_stmt>

}</block> <decl><name>xtpf</name></decl>;</union>

<if_stmt><if>if <condition>(<expr><call><name>LookAhead</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xtpf</name><operator>.</operator><name>xtf</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCallCallbacks</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNthumbProc</name></expr></argument>, <argument><expr><name><name>xtpf</name><operator>.</operator><name>xtp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtCallCallbacks</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNjumpProc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AllocTopShadowGC</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>valuemask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>myXGCV</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valuemask</name> <operator>=</operator> <name>GCForeground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myXGCV</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>valuemask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>myXGCV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>AllocBotShadowGC</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtGCMask</name></type> <name>valuemask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>myXGCV</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valuemask</name> <operator>=</operator> <name>GCForeground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myXGCV</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name> <operator>=</operator> <call><name>XtGetGC</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>valuemask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>myXGCV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>_Xaw3dDrawShadows</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>gw</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier><name>event</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>Region</name></type> <name>region</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>XPoint</name></type> <name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>gw</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>s</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shadow_width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XtIsRealized</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>h</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>w</name> <init>= <expr><name><name>sbw</name><operator>-&gt;</operator><name>core</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>wms</name> <init>= <expr><name>w</name> <operator>-</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>hms</name> <init>= <expr><name>h</name> <operator>-</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name> <init>= <expr><call><name>XtDisplay</name> <argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>win</name> <init>= <expr><call><name>XtWindow</name> <argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>bot_shadow_GC</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top_shadow_GC</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>region</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>XRectInRegion</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RectangleOut</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>XRectInRegion</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RectangleOut</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>wms</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>hms</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillPolygon</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>region</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>XRectInRegion</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hms</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RectangleOut</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>XRectInRegion</name> <argument_list>(<argument><expr><name>region</name></expr></argument>, <argument><expr><name>wms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RectangleOut</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>wms</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>wms</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>hms</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>hms</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillPolygon</name> <argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>vim_XawScrollbarSetThumb</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>shown</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScrollbarWidget</name></type> <name>sbw</name> <init>= <expr><operator>(</operator><name>ScrollbarWidget</name><operator>)</operator> <name>w</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>scroll_mode</name></name> <operator>==</operator> <name>SMODE_CONT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>max</name> <operator>&gt;</operator> <literal type="number">1.0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>max</name> <operator>&gt;=</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>top</name> <operator>&gt;</operator> <name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>max</name></name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>top</name> <operator>&gt;=</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>top</name></expr> </then><else>: <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>top</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>shown</name> <operator>&gt;</operator> <literal type="number">1.0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>shown</name> <operator>&gt;=</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>shown</name></expr> </then><else>: <expr><name><name>sbw</name><operator>-&gt;</operator><name>scrollbar</name><operator>.</operator><name>shown</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PaintThumb</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
