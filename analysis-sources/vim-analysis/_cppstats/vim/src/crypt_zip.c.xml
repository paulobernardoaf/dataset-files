<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\crypt_zip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CRYPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32_T</name>;</typedef> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>u32_T</name></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>zip_state_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>u32_T</name></type> <name><name>crc_32_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>make_crc_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>u32_T</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>u32_T</name><operator>)</operator><literal type="number">0xedb88320L</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>crc_32_table</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(crc_32_table[((int)(c) ^ (b)) &amp; 0xff] ^ ((c) &gt;&gt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECRYPT_BYTE_ZIP</name><parameter_list>(<parameter><type><name>keys</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ short_u temp = (short_u)keys[2] | 2; t = (int)(((unsigned)(temp * (temp ^ 1U)) &gt;&gt; 8) &amp; 0xff); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_KEYS_ZIP</name><parameter_list>(<parameter><type><name>keys</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { keys[0] = CRC32(keys[0], (c)); keys[1] += keys[0] &amp; 0xff; keys[1] = keys[1] * 134775813L + 1; keys[2] = CRC32(keys[2], (int)(keys[1] &gt;&gt; 24)); } while (0)</cpp:value></cpp:define>

<function><type><name>int</name></type>

<name>crypt_zip_init</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>salt</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>salt_len</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>seed</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>seed_len</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>zip_state_T</name> <modifier>*</modifier></type><name>zs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>zs</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>zip_state_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>method_state</name></name> <operator>=</operator> <name>zs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_crc_tab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">305419896L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">591751049L</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">878082192L</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UPDATE_KEYS_ZIP</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_zip_encode</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>zip_state_T</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>method_state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ztemp</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ztemp</name> <operator>=</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECRYPT_BYTE_ZIP</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_KEYS_ZIP</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name>ztemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>^</operator> <name>ztemp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>crypt_zip_decode</name><parameter_list>(

<parameter><decl><type><name>cryptstate_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>zip_state_T</name> <modifier>*</modifier></type><name>zs</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>method_state</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short_u</name></type> <name>temp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>short_u</name><operator>)</operator><name><name>zs</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>temp</name> <operator>*</operator> <operator>(</operator><name>temp</name> <operator>^</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UPDATE_KEYS_ZIP</name><argument_list>(<argument><expr><name><name>zs</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
