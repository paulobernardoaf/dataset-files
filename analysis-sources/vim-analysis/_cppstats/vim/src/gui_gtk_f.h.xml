<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_gtk_f.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtk.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdk/gdk.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gtk/gtkcontainer.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_TYPE_FORM</name></cpp:macro> <cpp:value>(gtk_form_get_type ())</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_FORM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_FORM, GtkForm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_FORM_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_CLASS_CAST((klass), GTK_TYPE_FORM, GtkFormClass))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_IS_FORM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_FORM))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_IS_FORM_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G_TYPE_CHECK_CLASS_TYPE((klass), GTK_TYPE_FORM))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_FORM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTK_CHECK_CAST ((obj), GTK_TYPE_FORM, GtkForm))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_FORM_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTK_CHECK_CLASS_CAST ((klass), GTK_TYPE_FORM, GtkFormClass))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_IS_FORM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTK_CHECK_TYPE ((obj), GTK_TYPE_FORM))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTK_IS_FORM_CLASS</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GTK_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FORM))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>_GtkForm</name></name></type> <name>GtkForm</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>_GtkFormClass</name></name></type> <name>GtkFormClass</name>;</typedef>

<struct>struct <name>_GtkForm</name>

<block>{

<decl_stmt><decl><type><name>GtkContainer</name></type> <name>container</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GList</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GdkWindow</name> <modifier>*</modifier></type><name>bin_window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>gint</name></type> <name>freeze_count</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>_GtkFormClass</name>

<block>{

<decl_stmt><decl><type><name>GtkContainerClass</name></type> <name>parent_class</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GTK3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GType</name></type> <name>gtk_form_get_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>GtkType</name></type> <name>gtk_form_get_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>GtkWidget</name> <modifier>*</modifier></type><name>gtk_form_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gtk_form_put</name><parameter_list>(<parameter><decl><type><name>GtkForm</name> <modifier>*</modifier></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type> <name>widget</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gtk_form_move</name><parameter_list>(<parameter><decl><type><name>GtkForm</name> <modifier>*</modifier></type><name>form</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type> <name>widget</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gtk_form_move_resize</name><parameter_list>(<parameter><decl><type><name>GtkForm</name> <modifier>*</modifier></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>GtkWidget</name> <modifier>*</modifier></type> <name>widget</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>gint</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>gint</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gtk_form_freeze</name><parameter_list>(<parameter><decl><type><name>GtkForm</name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>gtk_form_thaw</name><parameter_list>(<parameter><decl><type><name>GtkForm</name> <modifier>*</modifier></type><name>form</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
