<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\viminfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>vir_line</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>vir_fd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vir_conv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vir_version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>vir_barlines</name></decl>;</decl_stmt> 

}</block></struct></type> <name>vir_T</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>BVAL_NR</name></decl>,

<decl><name>BVAL_STRING</name></decl>,

<decl><name>BVAL_EMPTY</name></decl>

}</block></enum></type> <name>btype_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>btype_T</name></type> <name>bv_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>bv_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bv_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bv_tofree</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bv_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bv_allocated</name></decl>;</decl_stmt> 

}</block></struct></type> <name>bval_T</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_VIMINFO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>viminfo_errcnt</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>find_viminfo_parameter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_viminfo</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>get_viminfo_parameter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>viminfo_filename</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>file</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_viminfofile</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>p_viminfofile</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>file</name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VIMINFO_FILE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"SYS$LOGIN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><call><name>vim_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"HOME"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"C:/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>mch_getenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"$VIM"</literal></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><literal type="string">"$VIM"</literal></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMINFO_FILE2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMINFO_FILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>VIMINFO_FILE</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>viminfo_writestring</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>LSIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>IF_EB</name><argument_list>(<argument><expr><literal type="string">"\026%d\n&lt;"</literal></expr></argument>, <argument><expr><name>CTRL_V_STR</name> <literal type="string">"%d\n&lt;"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>barline_writestring</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remaining_start</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>remaining_start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>remaining</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"&gt;%d\n|&lt;"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>LSIZE</name> <operator>-</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>remaining</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>remaining</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>--</operator><name>remaining</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>LSIZE</name> <operator>-</operator> <literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>remaining</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>viminfo_readstring</name><parameter_list>(

<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <name>convert</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>lalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>retval</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_V</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>convert</name> <operator>&amp;&amp;</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>retval</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_conv</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>viminfo_readline</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_bufferlist</name><parameter_list>(

<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sfname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>xline</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xline</name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xline</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>writing</name> <operator>&amp;&amp;</operator> <name>ARGCOUNT</name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>xline</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tab</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>vim_strrchr</name><argument_list>(<argument><expr><name>xline</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tab</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>xline</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sfname</name> <operator>=</operator> <call><name>shorten_fname1</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_new</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>sfname</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLN_LISTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buflist_setfpos</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>xline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>removable</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>part</name><index>[<expr><literal type="number">51</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>home_replace_save</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>p_viminfo</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_option_part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>part</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_STRNICMP</name><argument_list>(<argument><expr><name>part</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_bufferlist</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_buffers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_buffers</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_BUF_LEN</name></cpp:macro> <cpp:value>(MAXPATHL + 40)</cpp:value></cpp:define>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>LINE_BUF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>set_last_cursor</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Buffer list:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_p_bl</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_QUICKFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>bt_quickfix</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>bt_terminal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <call><name>removable</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_buffers</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_snprintf_add</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>LINE_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"\t%ld\t%d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>histentry_T</name> <modifier>*</modifier></type><name><name>viminfo_history</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>=

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>viminfo_hisidx</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>viminfo_hislen</name><index>[<expr><name>HIST_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>viminfo_add_at_front</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>hist_type2char</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_question</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HIST_CMD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">':'</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>use_question</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'?'</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="char">'/'</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HIST_EXPR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="char">'='</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="char">'@'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prepare_viminfo_history</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>asklen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hislen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hislen</name> <operator>=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>viminfo_add_at_front</name> <operator>=</operator> <operator>(</operator><name>asklen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>writing</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>asklen</name> <operator>&gt;</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>asklen</name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>histentry</name> <init>= <expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hislen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>viminfo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>asklen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <call><name>LALLOC_MULT</name><argument_list>(<argument><expr><name>histentry_T</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>viminfo_hislen</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_history</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>hist_char2type</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&lt;</operator> <name><name>viminfo_hislen</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>val</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><operator>*</operator><name>val</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_history</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name><operator>)</operator></expr></argument>,

<argument><expr><name>viminfo_add_at_front</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>viminfo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>handle_viminfo_history</name><parameter_list>(

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long_u</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><name><name>values</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">4</literal>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <operator>(</operator><name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name> <operator>&amp;&amp;</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_EMPTY</name><operator>)</operator>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>HIST_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&lt;</operator> <name><name>viminfo_hislen</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_string</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>val</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name> <operator>&amp;&amp;</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>==</operator> <name>BVAL_NR</name></expr>

?</condition><then> <expr><name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr> </then><else>: <expr><name>NUL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overwrite</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>in_history</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>viminfo_add_at_front</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>HIST_SEARCH</name> <operator>||</operator> <name>sep</name> <operator>==</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>overwrite</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overwrite</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overwrite</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>viminfo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>concat_history</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hislen</name> <init>= <expr><call><name>get_hislen</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>histentry</name> <init>= <expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>hisidx</name> <init>= <expr><call><name>get_hisidx</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>hisnum</name> <init>= <expr><call><name>get_hisnum</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>*</operator><name>hisidx</name> <operator>+</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>-=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>viminfo_add_at_front</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>hisidx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hisidx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>hisidx</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>viminfo</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>idx</name> <operator>==</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>*</operator><name>hisidx</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <operator>*</operator><name>hisidx</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>=</operator> <name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>viminfo</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>histentry</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>=</operator> <name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>%=</operator> <name>hislen</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>histentry</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <operator>++</operator><operator>*</operator><name>hisnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>%=</operator> <name>hislen</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>sort_hist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>histentry_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>histentry_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>time_set</name></name> <operator>&lt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>time_set</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>time_set</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>time_set</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>merge_history</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>tot_hist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>new_hist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hislen</name> <init>= <expr><call><name>get_hislen</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>histentry</name> <init>= <expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>hisidx</name> <init>= <expr><call><name>get_hisidx</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>hisnum</name> <init>= <expr><call><name>get_hisnum</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>hislen</name> <operator>+</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tot_hist</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>histentry_T</name> <operator>*</operator></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_hist</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>histentry_T</name></expr></argument>, <argument><expr><name>hislen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tot_hist</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>new_hist</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tot_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>new_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tot_hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hislen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tot_hist</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tot_hist</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>histentry_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sort_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hislen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>new_hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>tot_hist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tot_hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>hisstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_hist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisnum</name> <operator>=</operator> <operator>++</operator><operator>*</operator><name>hisnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_hist_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>hisidx</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hislen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>histentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>new_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tot_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>finish_viminfo_history</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merge</name> <init>= <expr><name><name>virp</name><operator>-&gt;</operator><name>vir_version</name></name> <operator>&gt;=</operator> <name>VIMINFO_VERSION_WITH_HISTORY</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>merge</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>merge_history</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>concat_history</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_history</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>merge</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_saved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hislen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_history</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hislen</name> <operator>=</operator> <call><name>get_hislen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hislen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <name>HIST_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>type</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>histentry_T</name> <modifier>*</modifier></type><name>histentry</name> <init>= <expr><call><name>get_histentry</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>hisidx</name> <init>= <expr><call><name>get_hisidx</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num_saved</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><call><name>hist_type2char</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_saved</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_saved</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>num_saved</name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#%s History (newest to oldest):\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>HIST_CMD</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Command Line"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Search String"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>HIST_EXPR</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expression"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>HIST_INPUT</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Input Line"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Debug Line"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_saved</name> <operator>&gt;</operator> <name>hislen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_saved</name> <operator>=</operator> <name>hislen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>hisidx</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>num_saved</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr>

</then><else>: <expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <ternary><condition><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>

</then><else>: <expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">2</literal>

<operator>||</operator> <operator>!</operator><name>merge</name>

<operator>||</operator> <operator>!</operator><name><name>histentry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>viminfo</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>num_saved</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><call><name>hist_type2char</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>HIST_SEARCH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"|%d,%d,%ld,%s,"</literal></expr></argument>, <argument><expr><name>BARTYPE_HISTORY</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>timestamp</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>barline_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>LSIZE</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>hislen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>*</operator><name>hisidx</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hisstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name><name>viminfo_history</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>viminfo_hisidx</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_barlines</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name> <init>= <expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_barlines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seen_useful</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Bar lines, copied verbatim:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seen_useful</name> <operator>||</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_useful</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>barline_parse</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>nextp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allocated</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sconv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>converted</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>values</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allocated</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>values</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>==</operator> <name>BVAL_STRING</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vp</name><operator>-&gt;</operator><name>bv_allocated</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_string</name></name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_string</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_allocated</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>allocated</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>todo</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>todo</name> <operator>-=</operator> <name>n</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'|'</literal>

<operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eof</name> <operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NL</name>

<operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>CAR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>todo</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>nextp</name> <operator>=</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>todo</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name> <operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'|'</literal>

<operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eof</name> <operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>=</operator> <name>BVAL_NR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_nr</name></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>converted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_tofree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>sconv</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_conv</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sconv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_tofree</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>sconv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>converted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>allocated</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>converted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>=</operator> <name>BVAL_STRING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_allocated</name></name> <operator>=</operator> <name>allocated</name> <operator>||</operator> <name>converted</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nextp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>nextp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nextp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>=</operator> <name>BVAL_EMPTY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_version</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="string">"#Viminfo version\n|%d,%d\n\n"</literal></expr></argument>,

<argument><expr><name>BARTYPE_VERSION</name></expr></argument>, <argument><expr><name>VIMINFO_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>no_viminfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>p_viminfofile</name></expr></argument>, <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>viminfo_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%sviminfo: %s in line: "</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRNCAT</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>IOSIZE</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>IObuff</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>IObuff</name><index>[<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>viminfo_errcnt</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E136: viminfo: Too many errors, skipping rest of file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>viminfo_encoding</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_conv</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_varlist</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name>VAR_NUMBER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>funccal_entry_T</name></type> <name>funccal_entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>writing</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>tab</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><operator>*</operator><name>tab</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt> <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt> <break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_BLOB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_STRING</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_DICT</name>

<operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_LIST</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>tab</name> <operator>-</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_FLOAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>string2float</name><argument_list>(<argument><expr><name>tab</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_float</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tab</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_SPECIAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_FALSE</name>

<operator>||</operator> <name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>==</operator> <name>VVAL_TRUE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BOOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_DICT</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>VAR_LIST</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>etv</name> <init>= <expr><call><name>eval_expr</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>etv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>*</operator><name>etv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>etv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>blob_T</name> <modifier>*</modifier></type><name>blob</name> <init>= <expr><call><name>string2blob</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blob</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_BLOB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_blob</name></name> <operator>=</operator> <name>blob</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>save_funccal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>funccal_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_var</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_funccal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name> <operator>||</operator> <name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name> <operator>||</operator>

<name><name>tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_tv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_varlist</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>hashtab_T</name> <modifier>*</modifier></type><name>gvht</name> <init>= <expr><call><name>get_globvar_ht</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hashitem_T</name> <modifier>*</modifier></type><name>hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier></type><name>this_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>numbuf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#global variables:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>gvht</name><operator>-&gt;</operator><name>ht_used</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hi</name> <operator>=</operator> <name><name>gvht</name><operator>-&gt;</operator><name>ht_array</name></name></expr>;</init> <condition><expr><name>todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hi</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HASHITEM_EMPTY</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>todo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>this_var</name> <operator>=</operator> <call><name>HI2DI</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_flavour</name><argument_list>(<argument><expr><name><name>this_var</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VAR_FLAVOUR_VIMINFO</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>this_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VAR_STRING</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"STR"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_NUMBER</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"NUM"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_FLOAT</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"FLO"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_DICT</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"DIC"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_LIST</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"LIS"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_BLOB</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"BLO"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_BOOL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"XPL"</literal></expr>;</expr_stmt> <break>break;</break> 

<case>case <expr><name>VAR_SPECIAL</name></expr>:</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"XPL"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VAR_UNKNOWN</name></expr>:</case>

<case>case <expr><name>VAR_VOID</name></expr>:</case>

<case>case <expr><name>VAR_FUNC</name></expr>:</case>

<case>case <expr><name>VAR_PARTIAL</name></expr>:</case>

<case>case <expr><name>VAR_JOB</name></expr>:</case>

<case>case <expr><name>VAR_CHANNEL</name></expr>:</case>

<continue>continue;</continue>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"!%s\t%s\t"</literal></expr></argument>, <argument><expr><name><name>this_var</name><operator>-&gt;</operator><name>di_key</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_BOOL</name>

<operator>||</operator> <name><name>this_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_SPECIAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>numbuf</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>this_var</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>numbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>echo_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this_var</name><operator>-&gt;</operator><name>di_tv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tofree</name></expr></argument>, <argument><expr><name>numbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_sub_string</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <call><name>get_old_sub</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_old_sub</name><argument_list>(<argument><expr><call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_sub_string</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_sub</name> <init>= <expr><call><name>get_old_sub</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>old_sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Last Substitute String:\n$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>old_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_search_pattern</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_scs</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>setlast</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hlsearch_on</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>spat_T</name> <modifier>*</modifier></type><name>spat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lp</name> <operator>=</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>lp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>magic</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>no_scs</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off_end</name> <operator>=</operator> <name>SEARCH_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lp</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>setlast</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>RE_SEARCH</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>RE_SUBST</name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>hlsearch_on</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>hlsearch_on</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>spat</name> <operator>=</operator> <call><name>get_spat</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <name><name>spat</name><operator>-&gt;</operator><name>pat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>lp</name> <operator>-</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_last_search_pat</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>setlast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spat</name><operator>-&gt;</operator><name>no_scs</name></name> <operator>=</operator> <name>no_scs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>off_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>off_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>setlast</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><operator>!</operator><name>hlsearch_on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>wvsp_one</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, 

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>sc</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>spat_T</name> <modifier>*</modifier></type><name>spat</name> <init>= <expr><call><name>get_spat</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spat</name><operator>-&gt;</operator><name>pat</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Last %sSearch Pattern:\n~"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c%c%c%c%ld%s%c"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>spat</name><operator>-&gt;</operator><name>magic</name></name></expr> ?</condition><then> <expr><literal type="char">'M'</literal></expr> </then><else>: <expr><literal type="char">'m'</literal></expr></else></ternary></expr></argument>, 

<argument><expr><ternary><condition><expr><name><name>spat</name><operator>-&gt;</operator><name>no_scs</name></name></expr> ?</condition><then> <expr><literal type="char">'s'</literal></expr> </then><else>: <expr><literal type="char">'S'</literal></expr></else></ternary></expr></argument>, 

<argument><expr><ternary><condition><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>line</name></name></expr> ?</condition><then> <expr><literal type="char">'L'</literal></expr> </then><else>: <expr><literal type="char">'l'</literal></expr></else></ternary></expr></argument>, 

<argument><expr><ternary><condition><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>end</name></name></expr> ?</condition><then> <expr><literal type="char">'E'</literal></expr> </then><else>: <expr><literal type="char">'e'</literal></expr></else></ternary></expr></argument>, 

<argument><expr><name><name>spat</name><operator>-&gt;</operator><name>off</name><operator>.</operator><name>off</name></name></expr></argument>, 

<argument><expr><ternary><condition><expr><call><name>get_spat_last_idx</name><argument_list>()</argument_list></call> <operator>==</operator> <name>idx</name></expr> ?</condition><then> <expr><literal type="string">"~"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, 

<argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>spat</name><operator>-&gt;</operator><name>pat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_search_pattern</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_SEARCH_EXTRA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n#hlsearch on (H) or off (h):\n~%c"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>no_hlsearch</name> <operator>||</operator> <call><name>find_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'h'</literal></expr> </then><else>: <expr><literal type="char">'H'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>wvsp_one</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RE_SEARCH</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wvsp_one</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RE_SUBST</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Substitute "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>yankreg_T</name> <modifier>*</modifier></type><name>y_read_regs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_PREVIOUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_EXEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prepare_viminfo_registers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>y_read_regs</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>yankreg_T</name></expr></argument>, <argument><expr><name>NUM_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>finish_viminfo_registers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>y_read_regs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REGISTERS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_array</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>y_read_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_register</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_it</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>set_prev</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_type</name> <init>= <expr><name>MCHAR</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>colnr_T</name></type> <name>new_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_current_p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>set_prev</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>viminfo_error</name><argument_list>(<argument><expr><literal type="string">"E577: "</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Illegal register name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>do_it</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_yank_register</name><argument_list>(<argument><expr><operator>*</operator><name>str</name><operator>++</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_current_p</name> <operator>=</operator> <call><name>get_y_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_it</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <call><name>get_execreg_lastc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_execreg_lastc</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>do_it</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>set_prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_y_previous</name><argument_list>(<argument><expr><name>y_current_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"CHAR"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_type</name> <operator>=</operator> <name>MCHAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"BLOCK"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_type</name> <operator>=</operator> <name>MBLOCK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_type</name> <operator>=</operator> <name>MLINE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_width</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TAB</name> <operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>do_it</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>limit</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_array</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator>

<call><name>alloc</name><argument_list>(<argument><expr><name>limit</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>do_it</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <name>new_array</name></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>do_it</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>do_it</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>y_current_p</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>new_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <name>new_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_time_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>y_current_p</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eof</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>handle_viminfo_register</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><name><name>values</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linecount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_regs_p</name> <init>= <expr><call><name>get_y_regs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">6</literal>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>name</name> <operator>&gt;=</operator> <name>NUM_REGISTERS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>MCHAR</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>MLINE</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>MBLOCK</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>linecount</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name>linecount</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y_read_regs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_read_regs</name><index>[<expr><name>name</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs_p</name><index>[<expr><name>name</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name><name>vp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>timestamp</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_time_set</name></name> <operator>&gt;</operator> <name>timestamp</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y_read_regs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REG_PREVIOUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_y_previous</name><argument_list>(<argument><expr><name>y_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REG_EXEC</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>force</name> <operator>||</operator> <call><name>get_execreg_lastc</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_execreg_lastc</name><argument_list>(<argument><expr><call><name>get_register_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <name>linecount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_time_set</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linecount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>linecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>linecount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bv_allocated</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bv_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bv_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bv_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_registers</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_num_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_kbyte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yankreg_T</name> <modifier>*</modifier></type><name>y_regs_p</name> <init>= <expr><call><name>get_y_regs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Registers:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_num_lines</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_num_lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_num_lines</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_num_lines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_kbyte</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_kbyte</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_REGISTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>STAR_REGISTER</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>PLUS_REGISTER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>TILDE_REGISTER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>y_read_regs</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_array</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_array</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_time_set</name> <operator>&gt;</operator> <name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_time_set</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_read_regs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_lines</name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>num_lines</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name> <operator>==</operator> <name>MCHAR</name>

<operator>&amp;&amp;</operator> <operator>*</operator><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_kbyte</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name>max_kbyte</name> <operator>*</operator> <literal type="number">1024L</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MLINE</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LINE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MCHAR</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"CHAR"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MBLOCK</name></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"BLOCK"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E574: Unknown register type %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"LINE"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>get_y_previous</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_register_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>get_execreg_lastc</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t%s\t%d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>y_ptr</name><operator>-&gt;</operator><name>y_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_num_lines</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_lines</name> <operator>&gt;</operator> <name>max_num_lines</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_lines</name> <operator>=</operator> <name>max_num_lines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_y_previous</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name><name>y_regs_p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_PREVIOUS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>get_execreg_lastc</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_EXEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"|%d,%d,%d,%d,%d,%d,%ld"</literal></expr></argument>, <argument><expr><name>BARTYPE_REGISTER</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_type</name></name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>y_ptr</name><operator>-&gt;</operator><name>y_width</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>y_ptr</name><operator>-&gt;</operator><name>y_time_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>LSIZE</name> <operator>-</operator> <literal type="number">71</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>remaining</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <call><name>barline_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>y_ptr</name><operator>-&gt;</operator><name>y_array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>xfmark_T</name> <modifier>*</modifier></type><name>vi_namedfm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>xfmark_T</name> <modifier>*</modifier></type><name>vi_jumplist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vi_jumplist_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_one_mark</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="string">"\t%c\t%ld\t%d\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pos</name><operator>-&gt;</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_buffer_marks</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="string">"\n&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <operator>(</operator><name>linenr_T</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>b_last_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'^'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_last_insert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_last_change</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>EQUAL_POS</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_changelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_one_mark</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>skip_for_viminfo</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TERMINAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>bt_terminal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>||</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<call><name>removable</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_marks</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>buflist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_mark_set</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TAB_WINDOWS</name><argument_list>(<argument>tp</argument>, <argument>win</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>set_last_cursor</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#History of marks within files (newest to oldest):\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_marks_read</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_last_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_mark_set</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>is_mark_set</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>is_mark_set</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_mark_set</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>skip_for_viminfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buflist</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_buffer_marks</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>buflist</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_one_filemark</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,

<parameter><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>fm</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>buflist_nr2name</name><argument_list>(<argument><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>fm</name><operator>-&gt;</operator><name>fname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>name</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c%c %ld %ld "</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"|%d,%d,%ld,%ld,%ld,"</literal></expr></argument>, <argument><expr><name>BARTYPE_MARK</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>col</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>barline_writestring</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LSIZE</name> <operator>-</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>write_viminfo_filemarks</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>namedfm_p</name> <init>= <expr><call><name>get_namedfm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>fm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vi_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#File marks:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>vi_namedfm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>&gt;</operator> <name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>time_set</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>vi_namedfm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>write_one_filemark</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>skip_for_viminfo</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>buflist_nr2name</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NMARKS</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>==</operator> <name>NULL</name></expr>

?</condition><then> <expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>

</then><else>: <expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>namedfm_p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>NMARKS</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>NMARKS</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>NMARKS</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>NMARKS</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>=</operator> <call><name>vim_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vi_idx</name> <operator>=</operator> <name>NMARKS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>NMARKS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NMARKS</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>vi_fm</name> <init>= <expr><ternary><condition><expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vi_namedfm</name><index>[<expr><name>vi_idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_fm</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>vi_fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>vi_fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>&gt;</operator> <name><name>namedfm_p</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>time_set</name>

<operator>||</operator> <name><name>namedfm_p</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <name>vi_fm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>vi_idx</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>namedfm_p</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_fm</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>vi_fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name>

<operator>&amp;&amp;</operator> <name><name>vi_fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>==</operator> <name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>vi_fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>vi_fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>==</operator> <name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>vi_fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>vi_fm</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>vi_idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>write_one_filemark</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>NMARKS</name> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n#Jumplist (newest first):\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cleanup_jumplist</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>JUMPLISTSIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>vi_fm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>vi_fm</name> <operator>=</operator> <ternary><condition><expr><name>vi_idx</name> <operator>&lt;</operator> <name>vi_jumplist_len</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>vi_jumplist</name><index>[<expr><name>vi_idx</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fm</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>vi_fm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fm</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>vi_fm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>&lt;</operator> <name><name>vi_fm</name><operator>-&gt;</operator><name>time_set</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <name>vi_fm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>vi_idx</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>skip_for_viminfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_one_filemark</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>buf_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>s2</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf1</name><operator>-&gt;</operator><name>b_last_used</name></name> <operator>==</operator> <name><name>buf2</name><operator>-&gt;</operator><name>b_last_used</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>buf1</name><operator>-&gt;</operator><name>b_last_used</name></name> <operator>&gt;</operator> <name><name>buf2</name><operator>-&gt;</operator><name>b_last_used</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>copy_viminfo_marks</name><parameter_list>(

<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>,

<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>buflist</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>eof</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_marked_files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>load_marks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>copy_marks_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buflist_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buflist_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name_buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>LSIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name_buf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>VIF_GET_OLDFILES</name> <operator>|</operator> <name>VIF_FORCEIT</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_vim_var_list</name><argument_list>(<argument><expr><name>VV_OLDFILES</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>num_marked_files</name> <operator>=</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>count</name> <operator>&lt;</operator> <name>num_marked_files</name> <operator>||</operator> <name>fp_out</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>viminfo_error</name><argument_list>(<argument><expr><literal type="string">"E576: "</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Missing '&gt;'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>vim_fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str</name> <operator>-</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name><operator>)</operator></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>vim_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>load_marks</name> <operator>=</operator> <name>copy_marks_out</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIF_WANT_MARKS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name_buf</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>load_marks</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fnamecmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_marks_read</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>did_read_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buflist_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TAB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>did_read_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>ltime</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>time_T</name><operator>)</operator><name>ltime</name> <operator>&lt;</operator> <name><name>buflist_buf</name><operator>-&gt;</operator><name>b_last_used</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>write_buffer_marks</name><argument_list>(<argument><expr><name>buflist_buf</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>&gt;=</operator> <name>num_marked_files</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>buflist_used</name> <operator>==</operator> <name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator>

<operator>(</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>buflist_used</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>num_marked_files</name>

<operator>&amp;&amp;</operator> <name>buflist_used</name> <operator>&lt;</operator> <name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator>

<index>[<expr><name>buflist_used</name><operator>++</operator></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_buffer_marks</name><argument_list>(<argument><expr><name>buflist_buf</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>num_marked_files</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n&gt; "</literal></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>viminfo_writestring</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_read_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_marks_out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TAB</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>load_marks</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%ld %u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case> <expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_insert</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> <expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_change</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelistlen</name></name> <operator>==</operator> <name>JUMPLISTSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelist</name></name></expr></argument>,

<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelist</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>JUMPLISTSIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelist</name><index>[

<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changelistlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> <expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_last_used</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_namedm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>copy_marks_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>load_marks</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_changelistidx</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_changelistlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>num_marked_files</name> <operator>&amp;&amp;</operator> <name>buflist_used</name> <operator>&lt;</operator> <name><name>buflist</name><operator>-&gt;</operator><name>ga_len</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buflist_buf</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>buf_T</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>buflist</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>buflist_used</name><operator>++</operator></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_buffer_marks</name><argument_list>(<argument><expr><name>buflist_buf</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>check_marks_read</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_marks_read</name></name> <operator>&amp;&amp;</operator> <call><name>get_viminfo_parameter</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ffname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_viminfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VIF_WANT_MARKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_marks_read</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_filemark</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>namedfm_p</name> <init>= <expr><call><name>get_namedfm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>fm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EBCDIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>(</operator><operator>(</operator><operator>*</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>*</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>==</operator> <name>JUMPLISTSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistidx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>namedfm_p</name><index>[<expr><operator>*</operator><name>str</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>NMARKS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>namedfm_p</name><index>[<expr><operator>*</operator><name>str</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>force</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>col</name></name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>viminfo_readstring</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str</name> <operator>-</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>, <argument><expr><name>LSIZE</name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_fd</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>prepare_viminfo_marks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>vi_namedfm</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>xfmark_T</name></expr></argument>, <argument><expr><name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vi_jumplist</name> <operator>=</operator> <call><name>ALLOC_CLEAR_MULT</name><argument_list>(<argument><expr><name>xfmark_T</name></expr></argument>, <argument><expr><name>JUMPLISTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vi_jumplist_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>finish_viminfo_marks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vi_namedfm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>vi_namedfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vi_jumplist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vi_jumplist_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vi_jumplist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>vi_jumplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>handle_viminfo_mark</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><name><name>values</name><operator>-&gt;</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>fm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&lt;</operator> <literal type="number">5</literal>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_NR</name>

<operator>||</operator> <name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_type</name> <operator>!=</operator> <name>BVAL_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name><name>vp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bv_nr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JUMPLIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vi_jumplist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vi_jumplist_len</name> <operator>&lt;</operator> <name>JUMPLISTSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>vi_jumplist</name><index>[<expr><name>vi_jumplist_len</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>&lt;</operator> <name>timestamp</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>&lt;</operator> <name>JUMPLISTSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>&lt;</operator> <name>JUMPLISTSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name> <operator>==</operator> <name>JUMPLISTSIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>idx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistidx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplistlen</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_jumplist</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xfmark_T</name> <modifier>*</modifier></type><name>namedfm_p</name> <init>= <expr><call><name>get_namedfm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>name</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>NMARKS</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name>NMARKS</name></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>namedfm_p</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>time_set</name> <operator>&lt;</operator> <name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NMARKS</name> <operator>+</operator> <name>EXTRA_MARKS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>idx</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>namedfm_p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>namedfm_p</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>name</name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>vi_namedfm</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <operator>&amp;</operator><name><name>namedfm_p</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vi_namedfm</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>&lt;</operator> <name>timestamp</name> <operator>||</operator> <name>force</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>mark</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fmark</name><operator>.</operator><name>fnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_allocated</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>fname</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bv_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fm</name><operator>-&gt;</operator><name>time_set</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_barline</name><parameter_list>(<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>got_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bartype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bval_T</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_next</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>writing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_barlines</name></name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bval_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bartype</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bartype</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>BARTYPE_VERSION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_encoding</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>read_next</name> <operator>=</operator> <call><name>barline_parse</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><name><name>values</name><operator>.</operator><name>ga_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>values</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>==</operator> <name>BVAL_NR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_version</name></name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>bv_nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>BARTYPE_HISTORY</name></expr>:</case>

<expr_stmt><expr><name>read_next</name> <operator>=</operator> <call><name>barline_parse</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_viminfo_history</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BARTYPE_REGISTER</name></expr>:</case>

<expr_stmt><expr><name>read_next</name> <operator>=</operator> <call><name>barline_parse</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_viminfo_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BARTYPE_MARK</name></expr>:</case>

<expr_stmt><expr><name>read_next</name> <operator>=</operator> <call><name>barline_parse</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_viminfo_mark</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>writing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_barlines</name></name></expr></argument>, <argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>bval_T</name> <operator>*</operator><operator>)</operator><name><name>values</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>bv_type</name></name> <operator>==</operator> <name>BVAL_STRING</name> <operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>bv_allocated</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>bv_tofree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_next</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>read_viminfo_up_to_marks</name><parameter_list>(

<parameter><decl><type><name>vir_T</name> <modifier>*</modifier></type><name>virp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>writing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_encoding</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_viminfo_history</name><argument_list>(<argument><expr><ternary><condition><expr><name>forceit</name></expr> ?</condition><then> <expr><literal type="number">9999</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case> 

<case>case <expr><literal type="char">'^'</literal></expr>:</case> 

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> 

<case>case <expr><name>NUL</name></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'|'</literal></expr>:</case>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_barline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>got_encoding</name></expr></argument>,

<argument><expr><name>forceit</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'*'</literal></expr>:</case> 

<expr_stmt><expr><name>got_encoding</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_encoding</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_varlist</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case> 

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_bufferlist</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_version</name></name> <operator>&lt;</operator> <name>VIMINFO_VERSION_WITH_REGISTERS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_register</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TAB</name>

<operator>||</operator> <name><name>virp</name><operator>-&gt;</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition>;</do></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> 

<case>case <expr><literal type="char">'~'</literal></expr>:</case> 

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_search_pattern</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_sub_string</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">':'</literal></expr>:</case>

<case>case <expr><literal type="char">'?'</literal></expr>:</case>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_version</name></name> <operator>&lt;</operator> <name>VIMINFO_VERSION_WITH_HISTORY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_history</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>writing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<case>case <expr><literal type="char">'\''</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>virp</name><operator>-&gt;</operator><name>vir_version</name></name> <operator>&lt;</operator> <name>VIMINFO_VERSION_WITH_MARKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_filemark</name><argument_list>(<argument><expr><name>virp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><call><name>viminfo_error</name><argument_list>(<argument><expr><literal type="string">"E575: "</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Illegal starting char"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>virp</name><operator>-&gt;</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>writing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>finish_viminfo_history</name><argument_list>(<argument><expr><name>virp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>fmarks_check_names</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>eof</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>do_viminfo</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_in</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vir_T</name></type> <name>vir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merge</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_copy_marks</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>garray_T</name></type> <name>buflist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>vir</name><operator>.</operator><name>vir_line</name></name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>LSIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vir</name><operator>.</operator><name>vir_fd</name></name> <operator>=</operator> <name>fp_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vir</name><operator>.</operator><name>vir_conv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vir</name><operator>.</operator><name>vir_barlines</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vir</name><operator>.</operator><name>vir_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>VIF_WANT_INFO</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>prepare_viminfo_registers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_viminfo_marks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <call><name>read_viminfo_up_to_marks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vir</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>VIF_FORCEIT</name></expr></argument>, <argument><expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>merge</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>eof</name> <operator>=</operator> <call><name>viminfo_readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vir</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>vir</name><operator>.</operator><name>vir_line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>do_copy_marks</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator>

<operator>(</operator><name>VIF_WANT_MARKS</name> <operator>|</operator> <name>VIF_GET_OLDFILES</name> <operator>|</operator> <name>VIF_FORCEIT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"#This viminfo file was generated by Vim %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>VIM_VERSION_MEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"#You may edit it if you're careful!\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_version</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"#Value of 'encoding' when this file was written\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><literal type="string">"*encoding=%s\n\n"</literal></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_search_pattern</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_sub_string</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_history</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_registers</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_viminfo_registers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>write_viminfo_varlist</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>write_viminfo_filemarks</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finish_viminfo_marks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_bufferlist</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_viminfo_barlines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vir</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_copy_marks</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buflist</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_T</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_viminfo_marks</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>do_copy_marks</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>buflist</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_copy_marks</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>copy_viminfo_marks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vir</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflist</name></expr></argument>, <argument><expr><name>eof</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buflist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>vir</name><operator>.</operator><name>vir_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vir</name><operator>.</operator><name>vir_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vir</name><operator>.</operator><name>vir_conv</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vir</name><operator>.</operator><name>vir_barlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>read_viminfo</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>no_viminfo</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>viminfo_filename</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Reading viminfo file \"%s\"%s%s%s%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fname</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIF_WANT_INFO</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" info"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIF_WANT_MARKS</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" marks"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>VIF_GET_OLDFILES</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" oldfiles"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" FAILED"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>viminfo_errcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_viminfo</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>write_viminfo</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tempname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stat_T</name></type> <name>st_new</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>mode_t</name></type> <name>umask_save</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>shortname</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stat_T</name></type> <name>st_old</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>hidden</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>no_viminfo</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>viminfo_filename</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp_in</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><name>READBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_in</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st_new</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>,

<argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXTRA</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_WRONLY</name><operator>|</operator><name>O_NOFOLLOW</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fp_out</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>st_old</name><operator>.</operator><name>st_dev</name></name> <operator>=</operator> <operator>(</operator><name>dev_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st_old</name><operator>.</operator><name>st_ino</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st_old</name><operator>.</operator><name>st_mode</name></name> <operator>=</operator> <literal type="number">0600</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st_old</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>getuid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ROOT_UID</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><ternary><condition><expr><name><name>st_old</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <call><name>getuid</name><argument_list>()</argument_list></call></expr>

?</condition><then> <expr><operator>(</operator><name><name>st_old</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0200</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>st_old</name><operator>.</operator><name>st_gid</name></name> <operator>==</operator> <call><name>getgid</name><argument_list>()</argument_list></call></expr>

?</condition><then> <expr><operator>(</operator><name><name>st_old</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0020</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name><name>st_old</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0002</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>msg_didany</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E137: Viminfo file is not writable: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>tt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hidden</name> <operator>=</operator> <call><name>mch_ishidden</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_char</name> <init>= <expr><literal type="char">'z'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tempname</name> <operator>=</operator> <call><name>buf_modname</name><argument_list>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>shortname</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>FALSE</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>fname</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"-tmp"</literal></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".tmp"</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tempname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>tempname</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>&lt;</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>wp</name> <operator>=</operator> <call><name>gettail</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st_new</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shortname</name> <operator>&amp;&amp;</operator> <name><name>st_new</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>st_old</name><operator>.</operator><name>st_dev</name></name>

<operator>&amp;&amp;</operator> <name><name>st_new</name><operator>.</operator><name>st_ino</name></name> <operator>==</operator> <name><name>st_old</name><operator>.</operator><name>st_ino</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>VIM_CLEAR</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shortname</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>umask_save</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">077</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp_out</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempname</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>umask</name><argument_list>(<argument><expr><name>umask_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>umask_save</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempname</name></expr></argument>,

<argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXTRA</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_WRONLY</name><operator>|</operator><name>O_NOFOLLOW</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>st_old</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>|</operator> <literal type="number">0600</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>umask</name><argument_list>(<argument><expr><name>umask_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempname</name></expr></argument>,

<argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXTRA</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_WRONLY</name><operator>|</operator><name>O_NOFOLLOW</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fp_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EEXIST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>fp_out</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>WRITEBIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_char</name> <operator>==</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E929: Too many viminfo temp files, like %s!"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>next_char</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>next_char</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tempname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCHOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>tempname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stat_T</name></type> <name>tmp_st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_st</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>st_old</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <name><name>tmp_st</name><operator>.</operator><name>st_uid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>fchown</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>st_old</name><operator>.</operator><name>st_uid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st_old</name><operator>.</operator><name>st_gid</name></name> <operator>!=</operator> <name><name>tmp_st</name><operator>.</operator><name>st_gid</name></name>

<operator>&amp;&amp;</operator> <call><name>fchown</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>st_old</name><operator>.</operator><name>st_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_setperm</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>mch_setperm</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E138: Can't write viminfo file %s!"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>fp_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tempname</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>fname</name></expr> </then><else>: <expr><name>tempname</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Writing viminfo file \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>viminfo_errcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_viminfo</name><argument_list>(<argument><expr><name>fp_in</name></expr></argument>, <argument><expr><name>fp_out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>forceit</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>VIF_WANT_INFO</name> <operator>|</operator> <name>VIF_WANT_MARKS</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp_out</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>viminfo_errcnt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>viminfo_errcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_rename</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>viminfo_errcnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E886: Can't rename viminfo file to %s!"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>hidden</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_hide</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>viminfo_errcnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tempname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_viminfo</name><parameter_list>(

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_viminfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_viminfo</name> <operator>=</operator> <name>p_viminfo</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_viminfo</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_viminfo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"'100"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_rviminfo</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_viminfo</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>VIF_WANT_INFO</name> <operator>|</operator> <name>VIF_WANT_MARKS</name>

<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name>VIF_FORCEIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E195: Cannot open viminfo file for reading"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_viminfo</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_viminfo</name> <operator>=</operator> <name>save_viminfo</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
