<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_athena.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/StringDefs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Intrinsic.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SimpleMenu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/MenuButton.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SmeBSB.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Box.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Text.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/AsciiText.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Scrollbar.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SimpleMenu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/MenuButton.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SmeBSB.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Box.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Dialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Text.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/AsciiText.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_at_sb.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Widget</name></type> <name>vimShell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>vimForm</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>textArea</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>menuBar</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtIntervalId</name></type> <name>timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type><name>a_cur_menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Cardinal</name></type> <name>athena_calculate_ins_pos</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_popup_callback</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>, <parameter><decl><type><name>XtPointer</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_delayed_arm_action</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_popdown_submenus_action</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>, <parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>XtActionsRec</name></type> <name><name>pullAction</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"menu-delayedpopup"</literal></expr>, <expr><operator>(</operator><name>XtActionProc</name><operator>)</operator><name>gui_athena_delayed_arm_action</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"menu-popdownsubmenus"</literal></expr>, <expr><operator>(</operator><name>XtActionProc</name><operator>)</operator><name>gui_athena_popdown_submenus_action</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_mch_reset_focus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>toolBar</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_menu_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_scroll_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>XtTranslations</name></type> <name>popupTrans</name></decl>, <decl><type ref="prev"/><name>parentTrans</name></decl>, <decl><type ref="prev"/><name>menuTrans</name></decl>, <decl><type ref="prev"/><name>supermenuTrans</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Pixmap</name></type> <name>pullerBitmap</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>puller_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_scroll_cb_jump</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>call_data</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.001</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_scroll_cb_scroll</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>call_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>client_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;</operator> <operator>-</operator><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><name>page</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<switch>switch <condition>(<expr><name>data</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>ONE_LINE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><name>ONE_LINE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ONE_PAGE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><name>ONE_PAGE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><name>page</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>END_PAGE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>-</operator><name>END_PAGE_DATA</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&gt;</operator> <operator>-</operator><name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>data</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_x11_create_widgets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vimForm</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"vimForm"</literal></expr></argument>,

<argument><expr><name>formWidgetClass</name></expr></argument>, <argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_scroll_colors</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>menuBar</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"menuBar"</literal></expr></argument>,

<argument><expr><name>boxWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainRight</name></expr></argument>,

<argument><expr><name>XtNinsertPosition</name></expr></argument>, <argument><expr><name>athena_calculate_ins_pos</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>toolBar</name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"toolBar"</literal></expr></argument>,

<argument><expr><name>boxWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainRight</name></expr></argument>,

<argument><expr><name>XtNorientation</name></expr></argument>, <argument><expr><name>XtorientHorizontal</name></expr></argument>,

<argument><expr><name>XtNhSpace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>XtNvSpace</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,

<argument><expr><name>XtNinsertPosition</name></expr></argument>, <argument><expr><name>athena_calculate_ins_pos</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>textArea</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"textArea"</literal></expr></argument>,

<argument><expr><name>coreWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_x11_callbacks</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>popupTrans</name> <operator>=</operator> <call><name>XtParseTranslationTable</name><argument_list>(

<argument><expr><literal type="string">"&lt;EnterWindow&gt;: menu-popdownsubmenus() highlight() menu-delayedpopup()\n"</literal>

<literal type="string">"&lt;LeaveWindow&gt;: unhighlight()\n"</literal>

<literal type="string">"&lt;BtnUp&gt;: menu-popdownsubmenus() XtMenuPopdown() notify() unhighlight()\n"</literal>

<literal type="string">"&lt;Motion&gt;: highlight() menu-delayedpopup()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parentTrans</name> <operator>=</operator> <call><name>XtParseTranslationTable</name><argument_list>(<argument><expr><literal type="string">"&lt;LeaveWindow&gt;: unhighlight()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menuTrans</name> <operator>=</operator> <call><name>XtParseTranslationTable</name><argument_list>(

<argument><expr><literal type="string">"&lt;EnterWindow&gt;: menu-popdownsubmenus() highlight() menu-delayedpopup()\n"</literal>

<literal type="string">"&lt;LeaveWindow&gt;: menu-popdownsubmenus() XtMenuPopdown() unhighlight()\n"</literal>

<literal type="string">"&lt;BtnUp&gt;: notify() unhighlight()\n"</literal>

<literal type="string">"&lt;BtnMotion&gt;: highlight() menu-delayedpopup()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>supermenuTrans</name> <operator>=</operator> <call><name>XtParseTranslationTable</name><argument_list>(

<argument><expr><literal type="string">"&lt;EnterWindow&gt;: menu-popdownsubmenus() highlight() menu-delayedpopup()\n"</literal>

<literal type="string">"&lt;LeaveWindow&gt;: unhighlight()\n"</literal>

<literal type="string">"&lt;BtnUp&gt;: menu-popdownsubmenus() XtMenuPopdown() notify() unhighlight()\n"</literal>

<literal type="string">"&lt;BtnMotion&gt;: highlight() menu-delayedpopup()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAppAddActions</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pullAction</name></expr></argument>,

<argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>pullAction</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>Pixmap</name></type>

<name>gui_athena_create_pullright_pixmap</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>retval</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>XFontSet</name></type> <name>font</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>XFontStruct</name> <modifier>*</modifier></type><name>font</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name> <operator>==</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>==</operator> <name>NOFONT</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>XrmValue</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>from</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>XtDefaultFontSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XFontSet</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>from</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>XtDefaultFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>XtPointer</name><operator>)</operator><operator>&amp;</operator><name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XFontStruct</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>XtConvertAndStore</name><argument_list>(<argument>w ? w :

(num_children &gt; <literal type="number">0</literal>) ? children[<literal type="number">0</literal>] : menuBar</argument>,

<argument>XtRString</argument>, <argument>&amp;from</argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument>XtRFontSet</argument>, <argument>&amp;to

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

XtRFontStruct</argument>, <argument>&amp;to</argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></macro> <operator>==</operator> <name>False</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>XFontSet</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>XFontStruct</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>menu_font</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>draw_gc</name></decl>, <decl><type ref="prev"/><name>undraw_gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>gc_values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XPoint</name></type> <name><name>points</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>fontset_height2</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>font</name><operator>-&gt;</operator><name>max_bounds</name><operator>.</operator><name>descent</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>puller_width</name> <operator>=</operator> <name>width</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>,<argument><expr><call><name>DefaultRootWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>width</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_values</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_values</name><operator>.</operator><name>background</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>draw_gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>,

<argument><expr><name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gc_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_values</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gc_values</name><operator>.</operator><name>background</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>undraw_gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>,

<argument><expr><name>GCForeground</name> <operator>|</operator> <name>GCBackground</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gc_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>, <argument><expr><name>undraw_gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillPolygon</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>, <argument><expr><name>draw_gc</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>Convex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>draw_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>undraw_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_x11_destroy_widgets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>textArea</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>menuBar</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>toolBar</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_x11_pm.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X11_XPM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/xpm.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createXpmImages</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xpm</name></decl></parameter>, <parameter><decl><type><name>Pixmap</name> <modifier>*</modifier></type><name>sen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_toolbar_pixmap</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>Pixmap</name> <modifier>*</modifier></type><name>sen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xpm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_find_iconfile</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>iconfile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>createXpmImages</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sen</name> <operator>==</operator> <operator>(</operator><name>Pixmap</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>createXpmImages</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sen</name> <operator>!=</operator> <operator>(</operator><name>Pixmap</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>icon_builtin</name></name> <operator>||</operator> <call><name>gui_find_bitmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xpm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name>

<operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>built_in_pixmaps</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>built_in_pixmaps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>xpm</name> <operator>=</operator> <name><name>built_in_pixmaps</name><index>[<expr><name><name>menu</name><operator>-&gt;</operator><name>iconidx</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>xpm</name> <operator>=</operator> <name>tb_blank_xpm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xpm</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>createXpmImages</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>xpm</name></expr></argument>, <argument><expr><name>sen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>createXpmImages</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xpm</name></decl></parameter>, <parameter><decl><type><name>Pixmap</name> <modifier>*</modifier></type><name>sen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Window</name></type> <name>rootWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XpmAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XpmColorSymbol</name></type> <name><name>color</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"none"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"iconColor1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bottomShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"topShadowColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"selectColor"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screenNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>map</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gui_mch_get_toolbar_colors</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><name>BACKGROUND</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><name>FOREGROUND</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><name>BOTTOM_SHADOW</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><name>TOP_SHADOW</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>color</name><index>[<expr><name>HIGHLIGHT</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>valuemask</name></name> <operator>=</operator> <name>XpmColorSymbols</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>colorsymbols</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>numsymbols</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>screenNum</name> <operator>=</operator> <call><name>DefaultScreen</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rootWindow</name> <operator>=</operator> <call><name>RootWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>screenNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xpm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmCreatePixmapFromData</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>rootWindow</name></expr></argument>, <argument><expr><name>xpm</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>XpmReadFileToPixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>rootWindow</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>path</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>XpmSuccess</name> <operator>&amp;&amp;</operator> <name>map</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>XGCValues</name></type> <name>gcvalues</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>back_gc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GC</name></type> <name>mask_gc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gcvalues</name><operator>.</operator><name>foreground</name></name> <operator>=</operator> <name><name>color</name><index>[<expr><name>BACKGROUND</name></expr>]</index></name><operator>.</operator><name>pixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>back_gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>GCForeground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gcvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_gc</name> <operator>=</operator> <call><name>XCreateGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>GCForeground</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gcvalues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetClipMask</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>mask_gc</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sen</name> <operator>=</operator> <call><name>XCreatePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>rootWindow</name></expr></argument>,

<argument><expr><name><name>attrs</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>height</name></name></expr></argument>,

<argument><expr><call><name>DefaultDepth</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>screenNum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sen</name></expr></argument>, <argument><expr><name>back_gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>attrs</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XCopyArea</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>*</operator><name>sen</name></expr></argument>, <argument><expr><name>mask_gc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>attrs</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>back_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreeGC</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>mask_gc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XpmFreeAttributes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_toolbar_pos</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>border</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>border</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>border</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_set_text_area_pos</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_reset_focus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mch_reset_focus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetKeyboardFocus</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>, <argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_x11_set_back_color</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>textArea</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>make_pull_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Widget</name></type> <name>get_popup_entry</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Widget</name></type> <name>submenu_widget</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Boolean</name></type> <name>has_submenu</name><parameter_list>(<parameter><decl><type><name>Widget</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_mch_submenu_change</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_athena_menu_font</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_menu_pos</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>border</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>border</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>border</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Cardinal</name></type>

<name>athena_calculate_ins_pos</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>widget</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtGetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>num_children</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num_children</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>current</name> <init>= <expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>menu</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a_cur_menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>

?</condition><then> <expr><name>root_menu</name></expr> </then><else>: <expr><name><name>a_cur_menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></else></ternary></expr>;</init>

<condition><expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>menu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name>

<operator>&amp;&amp;</operator> <name><name>a_cur_menu</name><operator>-&gt;</operator><name>priority</name></name> <operator>&lt;</operator> <name><name>menu</name><operator>-&gt;</operator><name>priority</name></name>

<operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>retval</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_add_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>idx</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pullright_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>space</name></decl>, <decl><type ref="prev"/><name>border</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a_cur_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_popup</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>XtVaCreatePopupShell</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>simpleMenuWidgetClass</name></expr></argument>, <argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNinsertPosition</name></expr></argument>, <argument><expr><name>athena_calculate_ins_pos</name></expr></argument>,

<argument><expr><name>XtNtranslations</name></expr></argument>, <argument><expr><name>popupTrans</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>menuButtonWidgetClass</name></expr></argument>, <argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XtNmenuName</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNinternational</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>XtVaCreatePopupShell</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>simpleMenuWidgetClass</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNinsertPosition</name></expr></argument>, <argument><expr><name>athena_calculate_ins_pos</name></expr></argument>,

<argument><expr><name>XtNtranslations</name></expr></argument>, <argument><expr><name>supermenuTrans</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>menu_height_fixed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XtNvSpace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>space</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>height</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>space</name> <operator>+</operator> <name>border</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>smeBSBObjectClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNinternational</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pullerBitmap</name> <operator>==</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pullerBitmap</name> <operator>=</operator> <call><name>gui_athena_create_pullright_pixmap</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNrightBitmap</name></expr></argument>, <argument><expr><name>pullerBitmap</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num_children</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>XtNrightMargin</name></expr></argument>, <argument><expr><name>puller_width</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pullright_name</name> <operator>=</operator> <call><name>make_pull_name</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <call><name>XtVaCreatePopupShell</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pullright_name</name></expr></argument>,

<argument><expr><name>simpleMenuWidgetClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>XtNtranslations</name></expr></argument>, <argument><expr><name>menuTrans</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pullright_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>XtNpopupCallback</name></expr></argument>,

<argument><expr><name>gui_athena_popup_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtOverrideTranslations</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>parentTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a_cur_menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>gui_athena_menu_has_submenus</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Widget</name></type> <name>ignore</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num_children</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ignore</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_submenu</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>False</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_menu_font</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNfontSet</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNfontSet</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fontset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_submenu</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNrightBitmap</name></expr></argument>, <argument><expr><name>pullerBitmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>managed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name> <operator>!=</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>managed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XFONTSET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>fontset</name></name> <operator>!=</operator> <name>NOFONTSET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNfontSet</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNfont</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_font</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_submenu</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNrightBitmap</name></expr></argument>, <argument><expr><name>pullerBitmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>managed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_menu_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>oldpuller</name> <init>= <expr><name>None</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menuBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pullerBitmap</name> <operator>!=</operator> <name>None</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>oldpuller</name> <operator>=</operator> <name>pullerBitmap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pullerBitmap</name> <operator>=</operator> <call><name>gui_athena_create_pullright_pixmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_submenu_change</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_height</name> <init>= <expr><literal type="number">9999</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>max_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_height</name> <operator>!=</operator> <literal type="number">9999</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>menu_height_fixed</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>space</name></decl>, <decl><type ref="prev"/><name>border</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XtNvSpace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>space</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>max_height</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>space</name> <operator>+</operator> <name>border</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>

<decl_stmt><decl><type><name>Position</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_XIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>-</operator> <call><name>xim_get_status_area_height</name><argument_list>()</argument_list></call></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oldpuller</name> <operator>!=</operator> <name>None</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name>oldpuller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_new_tooltip_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gui_find_menu</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolBar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_submenu_change</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_tooltip_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>gui_find_menu</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"ToolBar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_submenu_change</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mch_submenu_change</name><parameter_list>(

<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>colors</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <name>menu</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>colors</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>image</name></name> <operator>!=</operator> <operator>(</operator><name>Pixmap</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XFreePixmap</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_toolbar_pixmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mp</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>image</name></name> <operator>!=</operator> <operator>(</operator><name>Pixmap</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNbitmap</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XtNbackground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XtNforeground</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>XtNfontSet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>XtArgVal</name><operator>)</operator><name><name>gui</name><operator>.</operator><name>tooltip_fontset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>tip</name><operator>-&gt;</operator><name>balloonLabel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>colors</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mch_submenu_change</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>

<name>make_pull_name</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pname</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-pullright"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pname</name></expr></argument>, <argument><expr><literal type="string">"-pullright"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pname</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_add_menu_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>idx</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a_cur_menu</name> <operator>=</operator> <name>menu</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetClass</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>get_toolbar_pixmap</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNinternalHeight</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNinternalWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>image</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbitmap</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNhighlightThickness</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>commandWidgetClass</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNcallback</name></expr></argument>, <argument><expr><name>gui_x11_menu_cb</name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mch_menu_set_tip</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>smeLineObjectClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<argument><expr><name>smeBSBObjectClass</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FONTSET_ALWAYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>XtNinternational</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>left_margin</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNleftMargin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_margin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNrightMargin</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>gui_athena_menu_has_submenus</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>puller_width</name></expr> </then><else>:

<expr><name>left_margin</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_font</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNcallback</name></expr></argument>, <argument><expr><name>gui_x11_menu_cb</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a_cur_menu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_show_toolbar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>numChildren</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showit</name> <operator>&amp;&amp;</operator> <name>numChildren</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><name>BalloonEval</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>text</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"tooltips"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>&amp;</operator><name>gui_mch_enable_beval_area</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>action</name> <operator>=</operator> <operator>&amp;</operator><name>gui_mch_disable_beval_area</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_toolbar</name></expr></argument>, <argument><expr><literal type="string">"icons"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>toolbar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>toolbar</name> <operator>=</operator> <name>root_menu</name></expr>;</init> <condition><expr><name>toolbar</name></expr>;</condition> <incr><expr><name>toolbar</name> <operator>=</operator> <name><name>toolbar</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>menu_is_toolbar</name><argument_list>(<argument><expr><name><name>toolbar</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>toolbar</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>toolbar</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>)<argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbitmap</name></expr></argument>, <argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>:

<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>dname</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNbitmap</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>image</name></name> <operator>==</operator> <name>None</name><operator>)</operator></expr> ?</condition><then>

<expr><ternary><condition><expr><call><name>menu_is_separator</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><literal type="string">""</literal></expr> </then><else>:

<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>dname</name></name></expr></else></ternary></expr>

</then><else>:

<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>None</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsManaged</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_compute_toolbar_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>whgt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>marginHeight</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Dimension</name></type> <name>shadowThickness</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Cardinal</name></type> <name>numChildren</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shadowThickness</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>marginHeight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toolBar</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shadowThickness</name></expr></argument>,

<argument><expr><name>XtNvSpace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>marginHeight</name></expr></argument>,

<argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numChildren</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>numChildren</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>whgt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>whgt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>whgt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>whgt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>height</name> <operator>+</operator> <operator>(</operator><name>marginHeight</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>shadowThickness</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_get_toolbar_colors</name><parameter_list>(

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>bgp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>fgp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>bsp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>tsp</name></decl></parameter>,

<parameter><decl><type><name>Pixel</name> <modifier>*</modifier></type><name>hsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name>bgp</name></expr></argument>, <argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name>fgp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bsp</name> <operator>=</operator> <operator>*</operator><name>bgp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tsp</name> <operator>=</operator> <operator>*</operator><name>fgp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>hsp</name> <operator>=</operator> <operator>*</operator><name>tsp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name> <name>enable</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_menu_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>menuBar</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>, <argument><expr><name>XtNborderColor</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mch_submenu_change</name><argument_list>(<argument><expr><name>root_menu</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>parent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>XtParent</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>right_margin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>get_left_margin</name> <init>= <expr><name>False</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gui_athena_menu_has_submenus</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>right_margin</name> <operator>=</operator> <name>puller_width</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>get_left_margin</name> <operator>=</operator> <name>True</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num_children</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>get_left_margin</name> <operator>==</operator> <name>True</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>left_margin</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNleftMargin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_margin</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNrightMargin</name></expr></argument>, <argument><expr><name>left_margin</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNrightMargin</name></expr></argument>, <argument><expr><name>right_margin</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>height</name></decl>, <decl><type ref="prev"/><name>space</name></decl>, <decl><type ref="prev"/><name>border</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>menuBar</name></expr></argument>,

<argument><expr><name>XtNvSpace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>space</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>border</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>toolBar</name> <operator>&amp;&amp;</operator> <name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_destroy_beval_area</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>tip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>menuBar</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <name>toolBar</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_children</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>menuBar</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>menu_height_fixed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <name>height</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>space</name> <operator>+</operator> <name>border</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TOOLBAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>parent</name> <operator>==</operator> <name>toolBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_children</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_show_toolbar</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>toolbar_height</name></name> <operator>=</operator> <call><name>gui_mch_compute_toolbar_height</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_menu_timeout</name><parameter_list>(

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtIntervalId</name> <modifier>*</modifier><name>id</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>Widget</name><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>popup</name></decl>;</decl_stmt>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XtIsSubclass</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>smeBSBObjectClass</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNrightBitmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>None</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>!=</operator> <name>XtUnspecifiedPixmap</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>popup</name> <operator>=</operator> <call><name>get_popup_entry</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>popup</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtPopup</name><argument_list>(<argument><expr><name>popup</name></expr></argument>, <argument><expr><name>XtGrabNonexclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_popup_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name> <init>= <expr><operator>(</operator><name>vimmenu_T</name> <operator>*</operator><operator>)</operator><name>client_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dimension</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>root_x</name></decl>, <decl><type ref="prev"/><name>root_y</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>XtIsManaged</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtPopdown</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtTranslateCoords</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,<argument><expr><name>width</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>root_x</name></expr></argument>,

<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>root_y</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_popdown_submenus_action</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type><name>nargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WidgetList</name></type> <name>children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Cardinal</name></type> <name>num_children</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>XtNchildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>children</name></expr></argument>,

<argument><expr><name>XtNnumChildren</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_children</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>num_children</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>num_children</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>child</name> <init>= <expr><name><name>children</name><index>[<expr><name>num_children</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_submenu</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>temp_w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_w</name> <operator>=</operator> <call><name>submenu_widget</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_popdown_submenus_action</name><argument_list>(<argument><expr><name>temp_w</name></expr></argument>,<argument><expr><name>event</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtPopdown</name><argument_list>(<argument><expr><name>temp_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type>

<name>has_submenu</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>widget</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>widget</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>XtIsSubclass</name><argument_list>(<argument><expr><name>widget</name></expr></argument>,<argument><expr><name>smeBSBObjectClass</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Pixmap</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>widget</name></expr></argument>, <argument><expr><name>XtNrightBitmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>!=</operator> <name>None</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>!=</operator> <name>XtUnspecifiedPixmap</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>True</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>False</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_delayed_arm_action</name><parameter_list>(

<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>String</name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name>Cardinal</name> <modifier>*</modifier></type><name>nargs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Dimension</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MotionNotify</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>height</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>width</name> <operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>xmotion</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>height</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>Widget</name></type> <name>previous_active_widget</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>current</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>XawSimpleMenuGetActiveEntry</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <name>previous_active_widget</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timer</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtRemoveTimeOut</name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_athena_popdown_submenus_action</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>event</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_submenu</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAppAddTimeOut</name><argument_list>(<argument><expr><call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">600L</literal></expr></argument>,

<argument><expr><name>gui_athena_menu_timeout</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>previous_active_widget</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Widget</name></type>

<name>get_popup_entry</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Widget</name></type> <name>menuw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>menuw</name> <operator>=</operator> <call><name>XawSimpleMenuGetActiveEntry</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>submenu_widget</name><argument_list>(<argument><expr><name>menuw</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Widget</name></type>

<name>submenu_widget</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>widget</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pullright_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>popup</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pullright_name</name> <operator>=</operator> <call><name>make_pull_name</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>XtName</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>popup</name> <operator>=</operator> <call><name>XtNameToWidget</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pullright_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pullright_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>popup</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rootx</name></decl>, <decl><type ref="prev"/><name>rooty</name></decl>, <decl><type ref="prev"/><name>winx</name></decl>, <decl><type ref="prev"/><name>winy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Window</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XQueryPointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>child</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rootx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rooty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rootx</name> <operator>-=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rootx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rootx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rooty</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rooty</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rooty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>,

<argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>rootx</name></expr></argument>,

<argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>rooty</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtOverrideTranslations</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><name>popupTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtPopupSpringLoaded</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>

<name>gui_mch_def_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_menu_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_scroll_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_scroll_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BEVAL_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_fg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_fg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>tooltip_bg_pixel</name></name> <operator>=</operator> <call><name>gui_get_color</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>gui</name><operator>.</operator><name>rsrc_tooltip_bg_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>val</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_pos</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNhorizDistance</name></expr></argument>, <argument><expr><name>x</name></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><name>w</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_create_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>XtVaCreateWidget</name><argument_list>(<argument><expr><literal type="string">"scrollBar"</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name>scrollbarWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><name>vim_scrollbarWidgetClass</name></expr></argument>, <argument><expr><name>vimForm</name></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>XtNorientation</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>orient</name> <operator>==</operator> <name>SBAR_VERT</name><operator>)</operator></expr> ?</condition><then> <expr><name>XtorientVertical</name></expr>

</then><else>: <expr><name>XtorientHorizontal</name></expr></else></ternary></expr></argument>,

<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,

<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNjumpProc</name></expr></argument>,

<argument><expr><name>gui_athena_scroll_cb_jump</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>XtNscrollProc</name></expr></argument>,

<argument><expr><name>gui_athena_scroll_cb_scroll</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>vim_XawScrollbarSetThumb</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_colors</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,

<argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>,

<argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name> <operator>&amp;&amp;</operator> <name>vimForm</name> <operator>!=</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_athena_scroll_colors</name><argument_list>(<argument><expr><name>vimForm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>Window</name></type>

<name>gui_x11_get_wid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>textArea</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_browse</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>saving</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>ext</name></type> <name>UNUSED</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>, 

<parameter><decl><type><name>char_u</name> <modifier>*</modifier><name>filter</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>Position</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initdir</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>initdir</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>initdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>initdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dirbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dflt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dflt</name> <operator>!=</operator> <name>NUL</name>

<operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MAXPATHL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>add_pathsep</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>dflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XtTranslateCoords</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><operator>(</operator><name>Position</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>Position</name><operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>gui</name><operator>.</operator><name>menu_height</name></name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="number">0</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>vim_SelFile</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>title</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dialogStatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Atom</name></type> <name>dialogatom</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>keyhit_callback</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>cont</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>XLookupString</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>xkey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>CAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>butproc</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name></type> <name>client_data</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>client_data</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dialog_wm_handler</name><parameter_list>(

<parameter><decl><type><name>Widget</name> <name>w</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>XEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name> <modifier>*</modifier><name>dum</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ClientMessage</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>Atom</name><operator>)</operator><operator>(</operator><operator>(</operator><name>XClientMessageEvent</name> <operator>*</operator><operator>)</operator><name>event</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><operator>.</operator><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>dialogatom</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_dialog</name><parameter_list>(

<parameter><decl><type><name>int</name> <name>type</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>dfltbutton</name></type> <name>UNUSED</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>,

<parameter><decl><type><name>int</name> <name>ex_cmd</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XtAppContext</name></type> <name>app</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XEvent</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>wd</name></decl>, <decl><type ref="prev"/><name>hd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>wv</name></decl>, <decl><type ref="prev"/><name>hv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Position</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogshell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogmessage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogtextfield</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>dialogButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Widget</name></type> <name>prev_dialogButton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>butcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vertical</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Vim dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dialogStatus</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_mousehide</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_VERTICAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogshell</name> <operator>=</operator> <call><name>XtVaCreatePopupShell</name><argument_list>(<argument><expr><literal type="string">"dialogShell"</literal></expr></argument>,

<argument><expr><name>transientShellWidgetClass</name></expr></argument>, <argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>title</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialogshell</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"dialog"</literal></expr></argument>,

<argument><expr><name>formWidgetClass</name></expr></argument>, <argument><expr><name>dialogshell</name></expr></argument>,

<argument><expr><name>XtNdefaultDistance</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialog</name> <operator>==</operator> <operator>(</operator><name>Widget</name><operator>)</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogmessage</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"dialogMessage"</literal></expr></argument>,

<argument><expr><name>labelWidgetClass</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>,

<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>message</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>dialogmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dialogtextfield</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"textfield"</literal></expr></argument>,

<argument><expr><name>asciiTextWidgetClass</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainTop</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainRight</name></expr></argument>,

<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>dialogmessage</name></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNstring</name></expr></argument>, <argument><expr><name>textfield</name></expr></argument>,

<argument><expr><name>XtNlength</name></expr></argument>, <argument><expr><name>IOSIZE</name></expr></argument>,

<argument><expr><name>XtNuseStringInPlace</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,

<argument><expr><name>XtNeditType</name></expr></argument>, <argument><expr><name>XawtextEdit</name></expr></argument>,

<argument><expr><name>XtNwrap</name></expr></argument>, <argument><expr><name>XawtextWrapNever</name></expr></argument>,

<argument><expr><name>XtNresize</name></expr></argument>, <argument><expr><name>XawtextResizeHeight</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>, <argument><expr><name>KeyPressMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><operator>(</operator><name>XtEventHandler</name><operator>)</operator><name>keyhit_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XawTextSetInsertionPoint</name><argument_list>(<argument><expr><name>dialogtextfield</name></expr></argument>,

<argument><expr><operator>(</operator><name>XawTextPosition</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtSetKeyboardFocus</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>dialogtextfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buts</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buts</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>butcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>butcount</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>next</name></expr>;</condition> <incr><expr><operator>++</operator><name>next</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>next</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>next</name> <operator>==</operator> <name>DLG_BUTTON_SEP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>next</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dialogButton</name> <operator>=</operator> <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><literal type="string">"button"</literal></expr></argument>,

<argument><expr><name>commandWidgetClass</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>,

<argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XtChainBottom</name></expr></argument>,

<argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XtChainBottom</name></expr></argument>,

<argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XtChainLeft</name></expr></argument>,

<argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><ternary><condition><expr><name>textfield</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dialogmessage</name></expr> </then><else>: <expr><name>dialogtextfield</name></expr></else></ternary></expr></argument>,

<argument><expr><name>XtNvertDistance</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_athena_menu_colors</name><argument_list>(<argument><expr><name>dialogButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>butcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogButton</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>vertical</name></expr> ?</condition><then> <expr><name>XtNfromVert</name></expr> </then><else>: <expr><name>XtNfromHoriz</name></expr></else></ternary></expr></argument>, <argument><expr><name>prev_dialogButton</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>dialogButton</name></expr></argument>, <argument><expr><name>XtNcallback</name></expr></argument>, <argument><expr><name>butproc</name></expr></argument>, <argument><expr><operator>(</operator><name>XtPointer</name><operator>)</operator><operator>(</operator><name>long_u</name><operator>)</operator><name>butcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_dialogButton</name> <operator>=</operator> <name>dialogButton</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtRealizeWidget</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dialogatom</name> <operator>=</operator> <call><name>XInternAtom</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><literal type="string">"WM_DELETE_WINDOW"</literal></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XSetWMProtocols</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dialogatom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>, <argument><expr><name>NoEventMask</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>dialog_wm_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wd</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><name>XtNwidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wv</name></expr></argument>,

<argument><expr><name>XtNheight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hv</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtTranslateCoords</name><argument_list>(<argument><expr><name>vimShell</name></expr></argument>,

<argument><expr><operator>(</operator><name>Position</name><operator>)</operator><operator>(</operator><operator>(</operator><name>wv</name> <operator>-</operator> <name>wd</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>Position</name><operator>)</operator><operator>(</operator><operator>(</operator><name>hv</name> <operator>-</operator> <name>hd</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>, <argument><expr><name>XtNx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>XtNy</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XWarpPointer</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>dpy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Window</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>app</name> <operator>=</operator> <call><name>XtWidgetToApplicationContext</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtPopup</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>, <argument><expr><name>XtGrabNonexclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>XtAppNextEvent</name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XtDispatchEvent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dialogStatus</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>XtPopdown</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dialogStatus</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>textfield</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name>dialogshell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dialogStatus</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_menu_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_bg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>menu_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_athena_scroll_colors</name><parameter_list>(<parameter><decl><type><name>Widget</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNbackground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_bg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name> <operator>!=</operator> <name>INVALCOLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>XtNforeground</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_fg_pixel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
