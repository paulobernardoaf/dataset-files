<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\gui_mac.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Devices.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CARBONIZED</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_AEVENT</name></cpp:macro></cpp:define> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_OFFSETED_WINDOW</name></cpp:undef> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CW_EDITOR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_AEVENT</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIMSCRAPFLAVOR</name></cpp:macro> <cpp:value>'VIM!'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRAPTEXTFLAVOR</name></cpp:macro> <cpp:value>kScrapFlavorTypeUnicode</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>EventHandlerUPP</name></type> <name>mouseWheelHandlerUPP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt32</name></type> <name>gMacSystemVersion</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_CARBONKEYHANDLER</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_is_active</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static int im_start_row = 0;

static int im_start_col = 0;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_ELEMS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof(x[0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>TSMDocumentID</name></type> <name>gTSMDocument</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>im_on_window_switch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>EventHandlerUPP</name></type> <name>keyEventHandlerUPP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EventHandlerUPP</name></type> <name>winEventHandlerUPP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>gui_mac_handle_window_activate</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>gui_mac_handle_text_input</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>gui_mac_update_input_area</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type> <name>gui_mac_unicode_key_event</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Menus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Resources.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Processes.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AppleEvents.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AERegistry.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Gestalt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNIVERSAL_INTERFACES_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x0330</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ControlDefinitions.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Navigation.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;MacHelp.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kNothing</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCreateEmpty</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kCreateRect</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kDestroy</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>topLeft</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Point*)&amp;(r))[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>botRight</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Point*)&amp;(r))[1])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>lastMouseTick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RgnHandle</name></type> <name>cursorRgn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RgnHandle</name></type> <name>dragRgn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rect</name></type> <name>dragRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>dragRectEnbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>dragRectControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>allow_scrollbar</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>clickIsPopup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ControlActionUPP</name></type> <name>gScrollAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ControlActionUPP</name></type> <name>gScrollDrag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ControlHandle</name></type> <name>dragged_sb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name> <modifier>*</modifier></type><name>gDialogHotKeys</name></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><name>FMFontFamily</name></type> <name>family</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontSize</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontStyle</name></type> <name>style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>isPanelVisible</name></decl>;</decl_stmt>

}</block> <decl><name>gFontPanelInfo</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ATSUI_DRAWING</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>p_macatsui_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUStyle</name></type> <name>gFontStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUStyle</name></type> <name>gWideFontStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>gIsFontFallbackSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>useAntialias_cached</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((r) &lt;&lt; 16) + ((g) &lt;&lt; 8) + (b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Red</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; 0x00FF0000) &gt;&gt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Green</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; 0x0000FF00) &gt;&gt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Blue</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; 0x000000FF) &gt;&gt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Esc</name></cpp:macro> <cpp:value>0x35</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F1</name></cpp:macro> <cpp:value>0x7A</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F2</name></cpp:macro> <cpp:value>0x78</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F3</name></cpp:macro> <cpp:value>0x63</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F4</name></cpp:macro> <cpp:value>0x76</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F5</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F6</name></cpp:macro> <cpp:value>0x61</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F7</name></cpp:macro> <cpp:value>0x62</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F8</name></cpp:macro> <cpp:value>0x64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F9</name></cpp:macro> <cpp:value>0x65</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F10</name></cpp:macro> <cpp:value>0x6D</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F11</name></cpp:macro> <cpp:value>0x67</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F12</name></cpp:macro> <cpp:value>0x6F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F13</name></cpp:macro> <cpp:value>0x69</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F14</name></cpp:macro> <cpp:value>0x6B</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_F15</name></cpp:macro> <cpp:value>0x71</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Clr</name></cpp:macro> <cpp:value>0x47</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Enter</name></cpp:macro> <cpp:value>0x4C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Space</name></cpp:macro> <cpp:value>0x31</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Tab</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Return</name></cpp:macro> <cpp:value>0x24</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Delete</name></cpp:macro> <cpp:value>0X08</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Help</name></cpp:macro> <cpp:value>0x72</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Home</name></cpp:macro> <cpp:value>0x73</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_PageUp</name></cpp:macro> <cpp:value>0x74</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_FwdDelete</name></cpp:macro> <cpp:value>0x75</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_End</name></cpp:macro> <cpp:value>0x77</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_PageDown</name></cpp:macro> <cpp:value>0x79</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Up</name></cpp:macro> <cpp:value>0x7E</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Down</name></cpp:macro> <cpp:value>0x7D</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Left</name></cpp:macro> <cpp:value>0x7B</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Right</name></cpp:macro> <cpp:value>0x7C</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Undo</name></cpp:macro> <cpp:value>vk_F1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Cut</name></cpp:macro> <cpp:value>vk_F2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Copy</name></cpp:macro> <cpp:value>vk_F3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Paste</name></cpp:macro> <cpp:value>vk_F4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_PrintScreen</name></cpp:macro> <cpp:value>vk_F13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_SCrollLock</name></cpp:macro> <cpp:value>vk_F14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Pause</name></cpp:macro> <cpp:value>vk_F15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_NumLock</name></cpp:macro> <cpp:value>vk_Clr</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vk_Insert</name></cpp:macro> <cpp:value>vk_Help</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KeySym</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct

<block>{

<decl_stmt><decl><type><name>KeySym</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>vim_code1</name></decl>;</decl_stmt>

}</block> <decl><name><name>special_keys</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{<expr><name>vk_Up</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_Down</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_Left</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_Right</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F1</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F2</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F3</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F4</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F5</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F6</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F7</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F8</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F9</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F10</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">';'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F11</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F12</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'2'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F13</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F14</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'4'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_F15</name></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'5'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_Insert</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'I'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_FwdDelete</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_Home</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_End</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'7'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_PageUp</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

<expr><block>{<expr><name>vk_PageDown</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,

<expr><block>{<expr><operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>OSErr</name></type> <name>HandleUnusedParms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initialise_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>WindowRef</name></type> <name>drawer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gui_mac_set_font_attributes</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>C2Pascal_save</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>Cstring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>PascalString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>Cstring</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>Cstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>PascalString</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PascalString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>PascalString</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Cstring</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>PascalString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PascalString</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>C2Pascal_save_and_remove_backslash</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>Cstring</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>PascalString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>Cstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>PascalString</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>PascalString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>Cstring</name></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>PascalString</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>PascalString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>PascalString</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int_u</name></type>

<name>EventModifiers2VimMouseModifiers</name><parameter_list>(<parameter><decl><type><name>EventModifiers</name></type> <name>macModifiers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int_u</name></type> <name>vimModifiers</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>shiftKey</name> <operator>|</operator> <name>rightShiftKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>controlKey</name> <operator>|</operator> <name>rightControlKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>optionKey</name> <operator>|</operator> <name>rightOptionKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (macModifiers &amp; (cmdKey)) 

vimModifiers |= MOUSE_CMD;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>vimModifiers</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int_u</name></type>

<name>EventModifiers2VimModifiers</name><parameter_list>(<parameter><decl><type><name>EventModifiers</name></type> <name>macModifiers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int_u</name></type> <name>vimModifiers</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>shiftKey</name> <operator>|</operator> <name>rightShiftKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>controlKey</name> <operator>|</operator> <name>rightControlKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>optionKey</name> <operator>|</operator> <name>rightOptionKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CMD_KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>macModifiers</name> <operator>&amp;</operator> <operator>(</operator><name>cmdKey</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>vimModifiers</name> <operator>|=</operator> <name>MOD_MASK_CMD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>vimModifiers</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>points_to_pixels</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vertical</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>points</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>divisor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>divisor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>points</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>points</name> <operator>+=</operator> <operator>*</operator><name>str</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>divisor</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>divisor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <name>points</name><operator>/</operator><name>divisor</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<return>return <expr><name>pixels</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>CFStringRef</name></type>

<name>menu_title_removing_mnemonic</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>menuTitleLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>displayLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFRange</name></type> <name>mnemonicStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFRange</name></type> <name>mnemonicEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableStringRef</name></type> <name>cleanedName</name></decl>;</decl_stmt>

<expr_stmt><expr><name>menuTitleLen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>CFStringRef</name><operator>)</operator> <call><name>mac_enc_to_cfstring</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>, <argument><expr><name>menuTitleLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mnemonicStart</name> <operator>=</operator> <call><name>CFStringFind</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kCFCompareBackwards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>displayLen</name> <operator>=</operator> <call><name>CFStringGetLength</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>!=</operator> <name>kCFNotFound</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>displayLen</name>

<operator>&amp;&amp;</operator> <call><name>CFStringGetCharacterAtIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>,

<argument><expr><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>UniChar</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>mnemonic</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CFStringFindWithOptions</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>displayLen</name> <operator>-</operator> <name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>kCFCompareBackwards</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mnemonicEnd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <name><name>mnemonicEnd</name><operator>.</operator><name>location</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>cleanedName</name> <operator>=</operator> <call><name>CFStringCreateMutableCopy</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cleanedName</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CFStringDelete</name><argument_list>(<argument><expr><name>cleanedName</name></expr></argument>,

<argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><name><name>mnemonicStart</name><operator>.</operator><name>location</name></name></expr></argument>,

<argument><expr><name><name>mnemonicEnd</name><operator>.</operator><name>location</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator>

<name><name>mnemonicStart</name><operator>.</operator><name>location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>cleanedName</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type>

<name>new_fnames_from_AEDesc</name><parameter_list>(<parameter><decl><type><name>AEDesc</name> <modifier>*</modifier></type><name>theList</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>numFiles</name></decl></parameter>, <parameter><decl><type><name>OSErr</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSErr</name></type> <name>newError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>fileCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSSpec</name></type> <name>fileToOpen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>actualSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEKeyword</name></type> <name>dummyKeyword</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DescType</name></type> <name>dummyType</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <call><name>AECountItems</name><argument_list>(<argument><expr><name>theList</name></expr></argument>, <argument><expr><name>numFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>fnames</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><operator>*</operator><name>numFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>fileCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fileCount</name> <operator>&lt;</operator> <operator>*</operator><name>numFiles</name></expr>;</condition> <incr><expr><name>fileCount</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>fileCount</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>fileCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>fileCount</name> <operator>&lt;=</operator> <operator>*</operator><name>numFiles</name></expr>;</condition> <incr><expr><name>fileCount</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>newError</name> <operator>=</operator> <call><name>AEGetNthPtr</name><argument_list>(<argument><expr><name>theList</name></expr></argument>, <argument><expr><name>fileCount</name></expr></argument>, <argument><expr><name>typeFSS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dummyKeyword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummyType</name></expr></argument>,

<argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator> <operator>&amp;</operator><name>fileToOpen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FSSpec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newError</name></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>fnames</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>fileCount</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FullPathFromFSSpec_save</name><argument_list>(<argument><expr><name>fileToOpen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>fnames</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CW_EDITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>WindowSearch</name></name></type> <name>WindowSearch</name>;</typedef>

<struct>struct <name>WindowSearch</name> 

<block>{

<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>theDate</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_KAHL_SRCH_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foundFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DescType</name></type> <name>typeCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WindowSearch</name></type> <name>SearchData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Size</name></type> <name>actualSize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEGetParamPtr</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>, <argument><expr><name>keyDirectObject</name></expr></argument>, <argument><expr><name>typeChar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeCode</name></expr></argument>, <argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator> <operator>&amp;</operator><name>SearchData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WindowSearch</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>SearchData</name><operator>.</operator><name>theFile</name><operator>.</operator><name>parID</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name><operator>.</operator><name>parID</name></name>

<operator>&amp;&amp;</operator> <name><name>SearchData</name><operator>.</operator><name>theFile</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>SearchData</name><operator>.</operator><name>theFile</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>foundFile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foundFile</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>SearchData</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name>fnfErr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>SearchData</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>ModificationInfo</name></name></type> <name>ModificationInfo</name>;</typedef>

<struct>struct <name>ModificationInfo</name> 

<block>{

<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>theDate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>saved</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_KAHL_MOD_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEDescList</name></type> <name>replyList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>numFiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModificationInfo</name></type> <name>theFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>theFile</name><operator>.</operator><name>saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AECreateList</name><argument_list>(<argument><expr><name>nil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

error = AECountItems(&amp;replyList, &amp;numFiles);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>numFiles</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>theFile</name><operator>.</operator><name>theFile</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theFile</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEPutPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replyList</name></expr></argument>, <argument><expr><name>numFiles</name></expr></argument>, <argument><expr><name>typeChar</name></expr></argument>, <argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator> <operator>&amp;</operator><name>theFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>theFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

error = AECountItems(&amp;replyList, &amp;numFiles);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEPutParamDesc</name><argument_list>(<argument><expr><name>theReply</name></expr></argument>, <argument><expr><name>keyDirectObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>replyList</name><operator>.</operator><name>dataHandle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AEDisposeDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name><name>struct</name> <name>CW_GetText</name></name></type> <name>CW_GetText</name>;</typedef>

<struct>struct <name>CW_GetText</name> 

<block>{

<decl_stmt><decl><type><name>FSSpec</name></type> <name>theFile</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Handle</name></type> <name>theText</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>unused</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>theDate</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_KAHL_GTTX_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foundFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DescType</name></type> <name>typeCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CW_GetText</name></type> <name>GetTextData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Size</name></type> <name>actualSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fullbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lineStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>BufferSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lineno</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEGetParamPtr</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>, <argument><expr><name>keyDirectObject</name></expr></argument>, <argument><expr><name>typeChar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeCode</name></expr></argument>, <argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator> <operator>&amp;</operator><name>GetTextData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GetTextData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_BUFFERS</name><argument_list>(<argument>buf</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>GetTextData</name><operator>.</operator><name>theFile</name><operator>.</operator><name>parID</name></name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name><operator>.</operator><name>parID</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>foundFile</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foundFile</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>BufferSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lineno</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><name>lineno</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator> <name>lineno</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lineStart</name> <operator>=</operator> <name>BufferSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>BufferSize</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetHandleSize</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>, <argument><expr><name>BufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetHandleSize</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BufferSize</name></expr>)</condition>

<block>{<block_content>

<break>break;</break> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fullbuffer</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>fullbuffer</name> <operator>+</operator> <name>lineStart</name><operator>)</operator></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fullbuffer</name><index>[<expr><name>BufferSize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fullbuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fullbuffer</name><index>[<expr><name>BufferSize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name><name>GetTextData</name><operator>.</operator><name>theText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foundFile</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>GetTextData</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name>fnfErr</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>GetTextData</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>FindProcessBySignature</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>OSType</name></type> <name>targetType</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>OSType</name></type> <name>targetCreator</name></decl></parameter>,

<parameter><decl><type><name>ProcessSerialNumberPtr</name></type> <name>psnPtr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>anErr</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>lookingForProcess</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProcessInfoRec</name></type> <name>infoRec</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>infoRec</name><operator>.</operator><name>processInfoLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProcessInfoRec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infoRec</name><operator>.</operator><name>processName</name></name> <operator>=</operator> <name>nil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>infoRec</name><operator>.</operator><name>processAppSpec</name></name> <operator>=</operator> <name>nil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psnPtr</name><operator>-&gt;</operator><name>lowLongOfPSN</name></name> <operator>=</operator> <name>kNoProcess</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psnPtr</name><operator>-&gt;</operator><name>highLongOfPSN</name></name> <operator>=</operator> <name>kNoProcess</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lookingForProcess</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>GetNextProcess</name><argument_list>(<argument><expr><name>psnPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lookingForProcess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>GetProcessInformation</name><argument_list>(<argument><expr><name>psnPtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>anErr</name> <operator>==</operator> <name>noErr</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>infoRec</name><operator>.</operator><name>processType</name></name> <operator>==</operator> <name>targetType</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>infoRec</name><operator>.</operator><name>processSignature</name></name> <operator>==</operator> <name>targetCreator</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lookingForProcess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>anErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Send_KAHL_MOD_AE</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>anErr</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEDesc</name></type> <name>targetAppDesc</name> <init>= <expr><block>{ <expr><name>typeNull</name></expr>, <expr><name>nil</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProcessSerialNumber</name></type> <name>psn</name> <init>= <expr><block>{ <expr><name>kNoProcess</name></expr>, <expr><name>kNoProcess</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AppleEvent</name></type> <name>theReply</name> <init>= <expr><block>{ <expr><name>typeNull</name></expr>, <expr><name>nil</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AESendMode</name></type> <name>sendMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AppleEvent</name></type> <name>theEvent</name> <init>= <expr><block>{<expr><name>typeNull</name></expr>, <expr><name>nil</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEIdleUPP</name></type> <name>idleProcUPP</name> <init>= <expr><name>nil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModificationInfo</name></type> <name>ModData</name></decl>;</decl_stmt>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>FindProcessBySignature</name><argument_list>(<argument><expr><literal type="char">'APPL'</literal></expr></argument>, <argument><expr><literal type="char">'CWIE'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>AECreateDesc</name><argument_list>(<argument><expr><name>typeProcessSerialNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProcessSerialNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetAppDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>AECreateAppleEvent</name><argument_list>( <argument><expr><literal type="char">'KAHL'</literal></expr></argument>, <argument><expr><literal type="char">'MOD '</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetAppDesc</name></expr></argument>,

<argument><expr><name>kAutoGenerateReturnID</name></expr></argument>, <argument><expr><name>kAnyTransactionID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>theEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AEDisposeDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>targetAppDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ModData</name><operator>.</operator><name>theFile</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ModData</name><operator>.</operator><name>theDate</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mtime</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>AEPutParamPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theEvent</name></expr></argument>, <argument><expr><name>keyDirectObject</name></expr></argument>, <argument><expr><name>typeChar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ModData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ModData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idleProcUPP</name> <operator>==</operator> <name>nil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sendMode</name> <operator>=</operator> <name>kAENoReply</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sendMode</name> <operator>=</operator> <name>kAEWaitReply</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>anErr</name> <operator>=</operator> <call><name>AESend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theEvent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>theReply</name></expr></argument>, <argument><expr><name>sendMode</name></expr></argument>, <argument><expr><name>kAENormalPriority</name></expr></argument>, <argument><expr><name>kNoTimeOut</name></expr></argument>, <argument><expr><name>idleProcUPP</name></expr></argument>, <argument><expr><name>nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>anErr</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>sendMode</name> <operator>==</operator> <name>kAEWaitReply</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>AEDisposeDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theReply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>OSErr</name></type>

<name>HandleUnusedParms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>actualSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DescType</name></type> <name>dummyType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEKeyword</name></type> <name>missedKeyword</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEGetAttributePtr</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>, <argument><expr><name>keyMissedKeywordAttr</name></expr></argument>,

<argument><expr><name>typeKeyword</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummyType</name></expr></argument>,

<argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator><operator>&amp;</operator><name>missedKeyword</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>missedKeyword</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>errAEDescNotFound</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>noErr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

error = errAEEventNotHandled;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>SelectionRange</name></name></type> <name>SelectionRange</name>;</typedef>

<struct>struct <name>SelectionRange</name> 

<block>{

<decl_stmt><decl><type><name>short</name></type> <name>unused1</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>lineNum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>startRange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>endRange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>unused2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>theDate</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>drop_numFiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name>drop_gotPosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SelectionRange</name></type> <name>drop_thePosition</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>drop_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>cookie</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drop_numFiles</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>drop_gotPosition</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>drop_thePosition</name><operator>.</operator><name>lineNum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>drop_thePosition</name><operator>.</operator><name>lineNum</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>goto_byte</name><argument_list>(<argument><expr><name><name>drop_thePosition</name><operator>.</operator><name>startRange</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drop_gotPosition</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>drop_thePosition</name><operator>.</operator><name>lineNum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>goto_byte</name><argument_list>(<argument><expr><name><name>drop_thePosition</name><operator>.</operator><name>endRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>VIsual_mode</name> <operator>=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>HandleODocAE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>, <parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AEDesc</name></type> <name>theList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DescType</name></type> <name>typeCode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>numFiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Size</name></type> <name>actualSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SelectionRange</name></type> <name>thePosition</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>gotPosition</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEGetParamDesc</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>, <argument><expr><name>keyDirectObject</name></expr></argument>, <argument><expr><name>typeAEList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>theList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEGetParamPtr</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>, <argument><expr><name>keyAEPosition</name></expr></argument>, <argument><expr><name>typeChar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeCode</name></expr></argument>, <argument><expr><operator>(</operator><name>Ptr</name><operator>)</operator> <operator>&amp;</operator><name>thePosition</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SelectionRange</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gotPosition</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>errAEDescNotFound</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name>noErr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reset_VIsual</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>new_fnames_from_AEDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numFiles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fnum</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global_alist</name><operator>.</operator><name>al_ga</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>

<operator>||</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>alist_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>global_alist</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fnum</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fnum</name> <operator>=</operator> <name><name>GARGLIST</name><index>[<expr><name>GARGCOUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ae_fnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name> <operator>!=</operator> <name>fnum</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>cmd</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"silent %dbuffer"</literal></expr></argument>, <argument><expr><name>fnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>GARGCOUNT</name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>vim_chdirfile</name><argument_list>(<argument><expr><call><name>alist_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>GARGLIST</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>finished</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>drop_numFiles</name> <operator>=</operator> <name>numFiles</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drop_gotPosition</name> <operator>=</operator> <name>gotPosition</name></expr>;</expr_stmt>

<expr_stmt><expr><name>drop_thePosition</name> <operator>=</operator> <name>thePosition</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_drop</name><argument_list>(<argument><expr><name>numFiles</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>drop_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostEvent</name><argument_list>(<argument><expr><name>mouseUp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finished</name>:</label>

<expr_stmt><expr><call><name>AEDisposeDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_aevt_oapp_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_aevt_quit_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"confirm qa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_aevt_pdoc_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name> <name>OSErr</name></type>

<name>Handle_unknown_AE</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>AppleEvent</name> <modifier>*</modifier></type><name>theAEvent</name></decl></parameter>,

<parameter><decl><type><name>AppleEvent</name> <modifier>*</modifier></type><name>theReply</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>refCon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>HandleUnusedParms</name><argument_list>(<argument><expr><name>theAEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>OSErr</name></type>

<name>InstallAEHandlers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><name>kCoreEventClass</name></expr></argument>, <argument><expr><name>kAEOpenApplication</name></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_aevt_oapp_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><name>kCoreEventClass</name></expr></argument>, <argument><expr><name>kAEQuitApplication</name></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_aevt_quit_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><name>kCoreEventClass</name></expr></argument>, <argument><expr><name>kAEOpenDocuments</name></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>HandleODocAE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><name>kCoreEventClass</name></expr></argument>, <argument><expr><name>kAEPrintDocuments</name></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_aevt_pdoc_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

error = AEInstallEventHandler(kAECoreSuite, kAEClone,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEClose,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAECountElements,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAECreateElement,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEDelete,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEDoObjectsExist,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEGetData,

NewAEEventHandlerUPP(Handle_unknown_AE), kAEGetData, false);

error = AEInstallEventHandler(kAECoreSuite, kAEGetDataSize,

NewAEEventHandlerUPP(Handle_unknown_AE), kAEGetDataSize, false);

error = AEInstallEventHandler(kAECoreSuite, kAEGetClassInfo,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEGetEventInfo,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAEMove,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAESave,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

error = AEInstallEventHandler(kAECoreSuite, kAESetData,

NewAEEventHandlerUPP(Handle_unknown_AE), nil, false);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CW_EDITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><literal type="char">'KAHL'</literal></expr></argument>, <argument><expr><literal type="char">'GTTX'</literal></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_KAHL_GTTX_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><literal type="char">'KAHL'</literal></expr></argument>, <argument><expr><literal type="char">'SRCH'</literal></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_KAHL_SRCH_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEInstallEventHandler</name><argument_list>(<argument><expr><literal type="char">'KAHL'</literal></expr></argument>, <argument><expr><literal type="char">'MOD '</literal></expr></argument>,

<argument><expr><call><name>NewAEEventHandlerUPP</name><argument_list>(<argument><expr><name>Handle_KAHL_MOD_AE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>FontPanelHandler</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>inHandlerCallRef</name></decl></parameter>,

<parameter><decl><type><name>EventRef</name></type> <name>inEvent</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetEventKind</name><argument_list>(<argument><expr><name>inEvent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kEventFontPanelClosed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>isPanelVisible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetEventKind</name><argument_list>(<argument><expr><name>inEvent</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kEventFontSelection</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontFamily</name></type> <name>newFamily</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontSize</name></type> <name>newSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontStyle</name></type> <name>newStyle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>inEvent</name></expr></argument>, <argument><expr><name>kEventParamFMFontFamily</name></expr></argument>,

<argument><expr><name>typeFMFontFamily</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FMFontFamily</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>newFamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>family</name></name> <operator>=</operator> <name>newFamily</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>inEvent</name></expr></argument>, <argument><expr><name>kEventParamFMFontSize</name></expr></argument>,

<argument><expr><name>typeFMFontSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FMFontSize</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>inEvent</name></expr></argument>, <argument><expr><name>kEventParamFMFontStyle</name></expr></argument>,

<argument><expr><name>typeFMFontStyle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FMFontStyle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>newStyle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>InstallFontPanelHandler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name><name>eventTypes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventHandlerUPP</name></type> <name>handlerUPP</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>eventTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eventClass</name> <operator>=</operator> <name>kEventClassFont</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eventKind</name> <operator>=</operator> <name>kEventFontSelection</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eventClass</name> <operator>=</operator> <name>kEventClassFont</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>eventKind</name> <operator>=</operator> <name>kEventFontPanelClosed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>handlerUPP</name> <operator>=</operator> <call><name>NewEventHandlerUPP</name><argument_list>(<argument><expr><name>FontPanelHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InstallApplicationEventHandler</name><argument_list>(<argument><expr><name>handlerUPP</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>eventTypes</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_STYLE_BUFFER_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>GetFontPanelSelection</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>outName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Str255</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name>fontNameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUFontID</name></type> <name>fid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>styleString</name><index>[<expr><name>FONT_STYLE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outName</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFamilyName</name><argument_list>(<argument><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>family</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFromFontFamilyInstance</name><argument_list>(<argument><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>family</name></name></expr></argument>,

<argument><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>style</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATSUFindFontName</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>kFontFullName</name></expr></argument>, <argument><expr><name>kFontMacintoshPlatform</name></expr></argument>,

<argument><expr><name>kFontNoScriptCode</name></expr></argument>, <argument><expr><name>kFontNoLanguageCode</name></expr></argument>,

<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>outName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontNameLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>styleString</name></expr></argument>, <argument><expr><name>FONT_STYLE_BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="string">":h%d"</literal></expr></argument>,

<argument><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>size</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fontNameLen</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>styleString</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>outName</name> <operator>+</operator> <name>fontNameLen</name></expr></argument>, <argument><expr><name>styleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outName</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>short</name></type> 

<name>gui_mac_get_menu_item_index</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>itemIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pBrother</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pMenu</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pBrother</name> <operator>=</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>pBrother</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>itemIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pBrother</name> <operator>==</operator> <name>pMenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itemIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pBrother</name> <operator>=</operator> <name><name>pBrother</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>itemIndex</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vimmenu_T</name> <modifier>*</modifier></type>

<name>gui_mac_get_vim_menu</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>menuID</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>itemIndex</name></decl></parameter>, <parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pMenu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pChildMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>pElder</name> <init>= <expr><name><name>pMenu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pElder</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pElder</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <name>menuID</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>index</name> <operator>!=</operator> <name>itemIndex</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pMenu</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>pMenu</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pMenu</name> <operator>=</operator> <name><name>pMenu</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pMenu</name><operator>-&gt;</operator><name>children</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pChildMenu</name> <operator>=</operator> <call><name>gui_mac_get_vim_menu</name>

<argument_list>(<argument><expr><name>menuID</name></expr></argument>, <argument><expr><name>itemIndex</name></expr></argument>, <argument><expr><name><name>pMenu</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pChildMenu</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pMenu</name> <operator>=</operator> <name>pChildMenu</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>pMenu</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>pascal</name>

<name>void</name></type>

<name>gui_mac_drag_thumb</name><parameter_list>(<parameter><decl><type><name>ControlHandle</name></type> <name>theControl</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>partCode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>dragging</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ControlHandle</name></type> <name>theControlToUse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dont_scroll_save</name> <init>= <expr><name>dont_scroll</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>theControlToUse</name> <operator>=</operator> <name>dragged_sb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>GetControlReference</name><argument_list>(<argument><expr><name>theControlToUse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>GetControl32BitValue</name><argument_list>(<argument><expr><name>theControlToUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragging</name> <operator>=</operator> <operator>(</operator><name>partCode</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <operator>!</operator><name>allow_scrollbar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>dont_scroll_save</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>pascal</name>

<name>void</name></type>

<name>gui_mac_scroll_action</name><parameter_list>(<parameter><decl><type><name>ControlHandle</name></type> <name>theControl</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>partCode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sb_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dragging</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dont_scroll_save</name> <init>= <expr><name>dont_scroll</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>gui_find_scrollbar</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>GetControlReference</name><argument_list>(<argument><expr><name>theControl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>wp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>wp</name><operator>-&gt;</operator><name>w_scrollbars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>sb_info</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>partCode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>kControlUpButtonPart</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>kControlDownButtonPart</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>kControlPageDownPart</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>kControlPageUpPart</name></expr>:</case> <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>-</operator><name>page</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>sb_info</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <operator>!</operator><name>allow_scrollbar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_drag_scrollbar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>dragging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dont_scroll</name> <operator>=</operator> <name>dont_scroll_save</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>out_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_scrollbar_thumb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>sb_info</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>sb_info</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (sb_info-&gt;wp != NULL)

{

win_T *wp;

int sb_num;

sb_num = 0;

for (wp = firstwin; wp != sb-&gt;wp &amp;&amp; wp != NULL; wp = W_NEXT(wp))

sb_num++;

if (wp != NULL)

{

current_scrollbar = sb_num;

scrollbar_value = value;

gui_do_scroll();

gui_mch_set_scrollbar_thumb(sb, value, sb_info-&gt;size, sb_info-&gt;max);

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doInContentClick</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>, <parameter><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>thePoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vimModifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>thePortion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ControlHandle</name></type> <name>theControl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vimMouseButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>dblClick</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thePoint</name> <operator>=</operator> <name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectWindow</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>thePortion</name> <operator>=</operator> <call><name>FindControl</name><argument_list>(<argument><expr><name>thePoint</name></expr></argument>, <argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>theControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>theControl</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>thePortion</name> <operator>!=</operator> <name>kControlIndicatorPart</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dragged_sb</name> <operator>=</operator> <name>theControl</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TrackControl</name><argument_list>(<argument><expr><name>theControl</name></expr></argument>, <argument><expr><name>thePoint</name></expr></argument>, <argument><expr><name>gScrollAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragged_sb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dragged_sb</name> <operator>=</operator> <name>theControl</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>TrackControl</name><argument_list>(<argument><expr><name>theControl</name></expr></argument>, <argument><expr><name>thePoint</name></expr></argument>, <argument><expr><name>gScrollDrag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>TrackControl</name><argument_list>(<argument><expr><name>theControl</name></expr></argument>, <argument><expr><name>thePoint</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_mac_drag_thumb</name><argument_list>(<argument><expr><name>theControl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>dragged_sb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>=</operator> <call><name>EventModifiers2VimMouseModifiers</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vimMouseButton</name> <operator>=</operator> <name>MOUSE_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clickIsPopup</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mouse_model_popup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsShowContextualMenuClick</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vimMouseButton</name> <operator>=</operator> <name>MOUSE_RIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vimModifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOUSE_CTRL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clickIsPopup</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dblClick</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>theEvent</name><operator>-&gt;</operator><name>when</name></name> <operator>-</operator> <name>lastMouseTick</name><operator>)</operator> <operator>&lt;</operator> <call><name>GetDblTime</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>vimMouseButton</name></expr></argument>, <argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>dblClick</name></expr></argument>, <argument><expr><name>vimModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (vimMouseButton == MOUSE_LEFT)

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dragRect</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectEnbl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectControl</name> <operator>=</operator> <name>kCreateRect</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doInDragClick</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>movingLimits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>movingLimitsPtr</name> <init>= <expr><operator>&amp;</operator><name>movingLimits</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>movingLimitsPtr</name> <operator>=</operator> <call><name>GetRegionBounds</name><argument_list>(<argument><expr><call><name>GetGrayRgn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>movingLimits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DragWindow</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>movingLimitsPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doInGrowClick</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>newSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>newWidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>newHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>resizeLimits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>resizeLimitsPtr</name> <init>= <expr><operator>&amp;</operator><name>resizeLimits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>NewContentRect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>resizeLimitsPtr</name> <operator>=</operator> <call><name>GetRegionBounds</name><argument_list>(<argument><expr><call><name>GetGrayRgn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>resizeLimits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resizeLimits</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resizeLimits</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newSize</name> <operator>=</operator> <call><name>ResizeWindow</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resizeLimits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>NewContentRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newWidth</name> <operator>=</operator> <name><name>NewContentRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>NewContentRect</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newHeight</name> <operator>=</operator> <name><name>NewContentRect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>NewContentRect</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mac_doInZoomClick</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>, <parameter><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Point</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>thePart</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_RIGHT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>h</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thePart</name> <operator>=</operator> <ternary><condition><expr><call><name>IsWindowInStandardState</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>inZoomIn</name></expr> </then><else>: <expr><name>inZoomOut</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TrackBox</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>, <argument><expr><name>thePart</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>r</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>-=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>-=</operator> <name><name>p</name><operator>.</operator><name>v</name></name> <operator>%</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_BOTTOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>.</operator><name>v</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ZoomWindowIdeal</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name>thePart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowBounds</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name>kWindowContentRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_set_shellsize</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>RESIZE_BOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doUpdateEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GrafPtr</name></type> <name>savePort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RgnHandle</name></type> <name>updateRgn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>updateRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>updateRectPtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>growRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RgnHandle</name></type> <name>saveRgn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>updateRgn</name> <operator>=</operator> <call><name>NewRgn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>updateRgn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>whichWindow</name> <operator>=</operator> <operator>(</operator><name>WindowPtr</name><operator>)</operator> <name><name>event</name><operator>-&gt;</operator><name>message</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPortWindowPort</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginUpdate</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPortVisibleRegion</name><argument_list>(<argument><expr><call><name>GetWindowPort</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GetWindowRegion(whichWindow, kWindowUpdateRgn, updateRgn);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><operator>(</operator><name>Handle</name><operator>)</operator> <name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>updateRectPtr</name> <operator>=</operator> <call><name>GetRegionBounds</name><argument_list>(<argument><expr><name>updateRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updateRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GlobalToLocal(&amp;topLeft(updateRect)); 

GlobalToLocal(&amp;botRight(updateRect));

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>gui_redraw</name><argument_list>(<argument><expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,

<argument><expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>updateRectPtr</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,

<argument><expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>updateRectPtr</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>left</name></name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>top</name></name> <operator>&lt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>right</name></name> <operator>&gt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>updateRectPtr</name><operator>-&gt;</operator><name>bottom</name></name> <operator>&gt;</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>border_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><operator>(</operator><name>Handle</name><operator>)</operator> <name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeRgn</name><argument_list>(<argument><expr><name>updateRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawControls</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>saveRgn</name> <operator>=</operator> <call><name>NewRgn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetWindowBounds</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name>kWindowGrowRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>growRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetClip</name><argument_list>(<argument><expr><name>saveRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClipRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>growRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrowIcon</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetClip</name><argument_list>(<argument><expr><name>saveRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeRgn</name><argument_list>(<argument><expr><name>saveRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndUpdate</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPort</name><argument_list>(<argument><expr><name>savePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doActivateEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>whichWindow</name> <operator>=</operator> <operator>(</operator><name>WindowPtr</name><operator>)</operator> <name><name>event</name><operator>-&gt;</operator><name>message</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>whichWindow</name> <operator>==</operator> <name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ControlRef</name></type> <name>rootControl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetRootControl</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>modifiers</name></name><operator>)</operator> <operator>&amp;</operator> <name>activeFlag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ActivateControl</name><argument_list>(<argument><expr><name>rootControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeactivateControl</name><argument_list>(<argument><expr><name>rootControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>modifiers</name></name><operator>)</operator> <operator>&amp;</operator> <name>activeFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doSuspendEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>message</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_focus_change</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type>

<name>gui_mac_handle_window_activate</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>,

<parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>eventClass</name> <init>= <expr><call><name>GetEventClass</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>eventKind</name> <init>= <expr><call><name>GetEventKind</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eventClass</name> <operator>==</operator> <name>kEventClassWindow</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>eventKind</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>kEventWindowActivated</name></expr>:</case>

<expr_stmt><expr><call><name>im_on_window_switch</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

<case>case <expr><name>kEventWindowDeactivated</name></expr>:</case>

<expr_stmt><expr><call><name>im_on_window_switch</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type>

<name>gui_mac_handle_text_input</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>,

<parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>eventClass</name> <init>= <expr><call><name>GetEventClass</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>eventKind</name> <init>= <expr><call><name>GetEventKind</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eventClass</name> <operator>!=</operator> <name>kEventClassTextInput</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>kEventTextInputUpdateActiveInputArea</name> <operator>!=</operator> <name>eventKind</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>kEventTextInputUnicodeForKeyEvent</name> <operator>!=</operator> <name>eventKind</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>kEventTextInputOffsetToPos</name> <operator>!=</operator> <name>eventKind</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>kEventTextInputPosToOffset</name> <operator>!=</operator> <name>eventKind</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>kEventTextInputGetSelectedText</name> <operator>!=</operator> <name>eventKind</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>eventKind</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>kEventTextInputUpdateActiveInputArea</name></expr>:</case>

<return>return <expr><call><name>gui_mac_update_input_area</name><argument_list>(<argument><expr><name>nextHandler</name></expr></argument>, <argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kEventTextInputUnicodeForKeyEvent</name></expr>:</case>

<return>return <expr><call><name>gui_mac_unicode_key_event</name><argument_list>(<argument><expr><name>nextHandler</name></expr></argument>, <argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>kEventTextInputOffsetToPos</name></expr>:</case>

<case>case <expr><name>kEventTextInputPosToOffset</name></expr>:</case>

<case>case <expr><name>kEventTextInputGetSelectedText</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name>

<name>OSStatus</name></type> <name>gui_mac_update_input_area</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>,

<parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dialog_busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE_KEY_BUFFER_SIZE</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type>

<name>gui_mac_unicode_key_event</name><parameter_list>(

<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>,

<parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>actualSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>result</name><index>[<expr><name>INLINE_KEY_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>charcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>modifiers</name></decl>, <decl><type ref="prev"/><name>vimModifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>encLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>isSpecial</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventRef</name></type> <name>keyEvent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ObscureCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dialog_busy</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamTextInputSendText</name></expr></argument>,

<argument><expr><name>typeUnicodeText</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>actualSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamTextInputSendText</name></expr></argument>,

<argument><expr><name>typeUnicodeText</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>actualSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>require_noerr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamTextInputSendKeyboardEvent</name></expr></argument>,

<argument><expr><name>typeEventRef</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventRef</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>require_noerr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>, <argument><expr><name>kEventParamKeyModifiers</name></expr></argument>,

<argument><expr><name>typeUInt32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>require_noerr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>, <argument><expr><name>kEventParamKeyCode</name></expr></argument>,

<argument><expr><name>typeUInt32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>require_noerr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>, <argument><expr><name>kEventParamKeyMacCharCodes</name></expr></argument>,

<argument><expr><name>typeChar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>require_noerr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_CMD_KEY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>cmdKey</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <name>charcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vimModifiers</name> <operator>=</operator> <call><name>EventModifiers2VimModifiers</name><argument_list>(<argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>actualSize</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UniChar</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x7f</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name>key_sym</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr></argument>,

<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vimModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>isSpecial</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>controlKey</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>key_char</name> <operator>==</operator> <literal type="char">'c'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>cmdKey</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>key_char</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSpecial</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>&lt;</operator> <literal type="number">0x100</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isprint</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>&lt;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vimModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>extract_modifiers</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vimModifiers</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>==</operator> <name>CSI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <name>K_CSI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>isSpecial</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vimModifiers</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>vimModifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isSpecial</name> <operator>&amp;&amp;</operator> <call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>encLen</name> <operator>=</operator> <name>actualSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>mac_utf16_to_enc</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>actualSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>encLen</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><name>INLINE_KEY_BUFFER_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>noErr</name></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PostEvent</name><argument_list>(<argument><expr><name>keyUp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type>

<name>gui_mac_doKeyEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>menu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>string</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>KeySym</name></type> <name>key_sym</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>simplify</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_mh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ObscureCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key_sym</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>theEvent</name><operator>-&gt;</operator><name>message</name></name> <operator>&amp;</operator> <name>keyCodeMask</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <name><name>theEvent</name><operator>-&gt;</operator><name>message</name></name> <operator>&amp;</operator> <name>charCodeMask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>controlKey</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>==</operator> <name>Ctrl_C</name> <operator>&amp;&amp;</operator> <name>ctrl_c_interrupts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>controlKey</name><operator>|</operator><name>shiftKey</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name>key_char</name> <operator>==</operator> <literal type="char">'2'</literal> <operator>||</operator> <name>key_char</name> <operator>==</operator> <literal type="char">'6'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <name>Ctrl_AT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <name>Ctrl_HAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>cmdKey</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>key_char</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <name>cmdKey</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>cmdKey</name> <operator>|</operator> <name>btnState</name> <operator>|</operator> <name>alphaLock</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>menu</name> <operator>=</operator> <call><name>MenuKey</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HiWord</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mac_handle_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <call><name>EventModifiers2VimModifiers</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (!(theEvent-&gt;modifiers &amp; (cmdKey | controlKey | rightControlKey)))

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key_char</name> <operator>&lt;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>key_char</name> <operator>==</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>==</operator> <name>key_sym</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (special_keys[i].vim_code1 == NUL)

key_char = special_keys[i].vim_code0;

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name></expr></argument>,

<argument><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>simplify</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>simplify</name> <operator>||</operator> <name>key_char</name> <operator>==</operator> <name>TAB</name> <operator>||</operator> <name>key_char</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key_char</name> <operator>=</operator> <call><name>simplify_key</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>key_sym</name> <operator>!=</operator> <name>vk_Space</name>

<operator>&amp;&amp;</operator> <name>key_sym</name> <operator>!=</operator> <name>vk_Tab</name>

<operator>&amp;&amp;</operator> <name>key_sym</name> <operator>!=</operator> <name>vk_Return</name>

<operator>&amp;&amp;</operator> <name>key_sym</name> <operator>!=</operator> <name>vk_Enter</name>

<operator>&amp;&amp;</operator> <name>key_sym</name> <operator>!=</operator> <name>vk_Esc</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>modifiers</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>modifiers</name> <operator>==</operator> <name>MOD_MASK_CTRL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>modifiers</name> <operator>==</operator> <name>MOD_MASK_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name>modifiers</name> <operator>&amp;</operator> <operator>~</operator><name>MOD_MASK_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name>modifiers</name> <operator>&amp;</operator> <operator>~</operator><name>MOD_MASK_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name>modifiers</name> <operator>&amp;</operator> <operator>~</operator><name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_MODIFIER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>modifiers</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_SECOND</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>K_THIRD</name><argument_list>(<argument><expr><name>key_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>input_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name> <operator>&amp;&amp;</operator> <name>key_char</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>from</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>from</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>key_char</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>from</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_conv</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>key_char</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>string</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>key_char</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><index>[ <expr><name>len</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>KE_CSI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_input_buf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mac_doMouseDownEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>thePart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WindowPtr</name></type> <name>whichWindow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thePart</name> <operator>=</operator> <call><name>FindWindow</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>whichWindow</name> <operator>==</operator> <name>drawer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>thePart</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><operator>(</operator><name>inDesk</name><operator>)</operator></expr>:</case>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inMenuBar</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_handle_menu</name><argument_list>(<argument><expr><call><name>MenuSelect</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inContent</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doInContentClick</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inDrag</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doInDragClick</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>, <argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inGrow</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doInGrowClick</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>, <argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inGoAway</name><operator>)</operator></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>TrackGoAway</name><argument_list>(<argument><expr><name>whichWindow</name></expr></argument>, <argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_shell_closed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>inZoomIn</name><operator>)</operator></expr>:</case>

<case>case <expr><operator>(</operator><name>inZoomOut</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doInZoomClick</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>whichWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doMouseMovedEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>thePoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vimModifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thePoint</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>where</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vimModifiers</name> <operator>=</operator> <call><name>EventModifiers2VimMouseModifiers</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Button</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mouse_moved</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><name>clickIsPopup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>MOUSE_DRAG</name></expr></argument>, <argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>,

<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vimModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dragRect</name></expr></argument>, <argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><call><name>X_2_COL</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><call><name>Y_2_ROW</name><argument_list>(<argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dragRectEnbl</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dragRectControl</name> <operator>=</operator> <name>kCreateRect</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_doMouseUpEvent</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>thePoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vimModifiers</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lastMouseTick</name> <operator>=</operator> <name><name>theEvent</name><operator>-&gt;</operator><name>when</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectEnbl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectControl</name> <operator>=</operator> <name>kCreateEmpty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>thePoint</name> <operator>=</operator> <name><name>theEvent</name><operator>-&gt;</operator><name>where</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vimModifiers</name> <operator>=</operator> <call><name>EventModifiers2VimMouseModifiers</name><argument_list>(<argument><expr><name><name>theEvent</name><operator>-&gt;</operator><name>modifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clickIsPopup</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>vimModifiers</name> <operator>&amp;=</operator> <operator>~</operator><name>MOUSE_CTRL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clickIsPopup</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><name>MOUSE_RELEASE</name></expr></argument>, <argument><expr><name><name>thePoint</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>thePoint</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vimModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>OSStatus</name></type>

<name>gui_mac_mouse_wheel</name><parameter_list>(<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>nextHandler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>theEvent</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt32</name></type> <name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>vim_mod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventMouseWheelAxis</name></type> <name>axis</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>==</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamMouseWheelAxis</name></expr></argument>,

<argument><expr><name>typeMouseWheelAxis</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>axis</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>axis</name> <operator>!=</operator> <name>kEventMouseWheelAxisY</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamMouseWheelDelta</name></expr></argument>,

<argument><expr><name>typeSInt32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamMouseLocation</name></expr></argument>,

<argument><expr><name>typeQDPoint</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Point</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>GetEventParameter</name><argument_list>(<argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>kEventParamKeyModifiers</name></expr></argument>,

<argument><expr><name>typeUInt32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vim_mod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&amp;</operator> <name>shiftKey</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_mod</name> <operator>|=</operator> <name>MOUSE_SHIFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&amp;</operator> <name>controlKey</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_mod</name> <operator>|=</operator> <name>MOUSE_CTRL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&amp;</operator> <name>optionKey</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_mod</name> <operator>|=</operator> <name>MOUSE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>==</operator> <call><name>GetWindowBounds</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>kWindowContentRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>point</name><operator>.</operator><name>h</name></name> <operator>-=</operator> <name><name>bounds</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>point</name><operator>.</operator><name>v</name></name> <operator>-=</operator> <name><name>bounds</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_send_mouse_event</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MOUSE_4</name></expr> </then><else>: <expr><name>MOUSE_5</name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>point</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>vim_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostEvent</name><argument_list>(<argument><expr><name>keyUp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

<label><name>bail</name>:</label>

<return>return <expr><call><name>CallNextEventHandler</name><argument_list>(<argument><expr><name>nextHandler</name></expr></argument>, <argument><expr><name>theEvent</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_mousehide</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hide</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void

gui_mac_handle_contextual_menu(EventRecord *event)

{

OSStatus status = ContextualMenuSelect(CntxMenu, event-&gt;where, false, kCMHelpItemNoHelp, "", NULL, &amp;CntxType, &amp;CntxMenuID, &amp;CntxMenuItem);

if (status != noErr)

return;

if (CntxType == kCMMenuItemSelected)

{

gui_mac_handle_menu((CntxMenuID &lt;&lt; 16) + CntxMenuItem);

}

else if (CntxMenuID == kCMShowHelpSelected)

{

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mac_handle_menu</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>menuChoice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>menu</name> <init>= <expr><call><name>HiWord</name><argument_list>(<argument><expr><name>menuChoice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>item</name> <init>= <expr><call><name>LoWord</name><argument_list>(<argument><expr><name>menuChoice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>theVimMenu</name> <init>= <expr><name>root_menu</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>menu</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>item</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>theVimMenu</name> <operator>=</operator> <call><name>gui_mac_get_vim_menu</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>root_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>theVimMenu</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_menu_cb</name><argument_list>(<argument><expr><name>theVimMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>HiliteMenu</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mac_handle_event</name><parameter_list>(<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsShowContextualMenuClick</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

gui_mac_handle_contextual_menu(event);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>gui_mac_doMouseDownEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>what</name></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><operator>(</operator><name>keyDown</name><operator>)</operator></expr>:</case>

<case>case <expr><operator>(</operator><name>autoKey</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doKeyEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><operator>(</operator><name>keyUp</name><operator>)</operator></expr>:</case>

<break>break;</break>

<case>case <expr><operator>(</operator><name>mouseDown</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doMouseDownEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>mouseUp</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doMouseUpEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>updateEvt</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doUpdateEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>diskEvt</name><operator>)</operator></expr>:</case>

<break>break;</break>

<case>case <expr><operator>(</operator><name>activateEvt</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><call><name>gui_mac_doActivateEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><name>osEvt</name><operator>)</operator></expr>:</case>

<switch>switch <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>message</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>)</condition>

<block>{<block_content>

<case>case <expr><operator>(</operator><literal type="number">0xFA</literal><operator>)</operator></expr>:</case> 

<expr_stmt><expr><call><name>gui_mac_doMouseMovedEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">0x01</literal><operator>)</operator></expr>:</case> 

<expr_stmt><expr><call><name>gui_mac_doSuspendEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><operator>(</operator><name>kHighLevelEvent</name><operator>)</operator></expr>:</case>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>AEProcessAppleEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>GuiFont</name></type>

<name>gui_mac_find_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>pFontName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Str255</name></type> <name>systemFontname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>font_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>size</name><init>=<expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

char_u *fontNamePtr;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>font_name</name></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFontName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pFontName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fontName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>styleStart</name> <init>= <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fontNameLen</name> <init>= <expr><ternary><condition><expr><name>styleStart</name></expr> ?</condition><then> <expr><name>styleStart</name> <operator>-</operator> <name>font_name</name></expr> </then><else>: <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>fontName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>fontName</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><name>fontNameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ATSUFontID</name></type> <name>fontRef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FMFontStyle</name></type> <name>fontStyle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATSUFindFontFromName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFontName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pFontName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>kFontFullName</name></expr></argument>,

<argument><expr><name>kFontMacintoshPlatform</name></expr></argument>, <argument><expr><name>kFontNoScriptCode</name></expr></argument>, <argument><expr><name>kFontNoLanguageCode</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fontRef</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFamilyInstanceFromFont</name><argument_list>(<argument><expr><name>fontRef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontStyle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>font_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>pFontName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pFontName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pFontName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ATSUFindFontFromName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFontName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pFontName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>kFontFullName</name></expr></argument>, <argument><expr><name>kFontNoPlatformCode</name></expr></argument>, <argument><expr><name>kFontNoScriptCode</name></expr></argument>,

<argument><expr><name>kFontNoLanguageCode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontRef</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFamilyInstanceFromFont</name><argument_list>(<argument><expr><name>fontRef</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontStyle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>font_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>fontNamePtr</name> <operator>=</operator> <call><name>C2Pascal_save_and_remove_backslash</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFNum</name><argument_list>(<argument><expr><name>fontNamePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>font_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFamilyName</name><argument_list>(<argument><expr><name>systemFont</name></expr></argument>, <argument><expr><name>systemFontname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOFONT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EqualString</name><argument_list>(<argument><expr><name>pFontName</name></expr></argument>, <argument><expr><name>systemFontname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NOFONT</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>points_to_pixels</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>font_id</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_prepare</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXE_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FSSpec</name></type> <name>applDir</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_BUNDLE_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>short</name></type> <name>applVRefNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>applDirID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Str255</name></type> <name>volName</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ProcessSerialNumber</name></type> <name>psn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSRef</name></type> <name>applFSRef</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

InitCursor();

RegisterAppearanceClient();

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
(void) InstallAEHandlers();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

pomme = NewMenu(256, "\p\024"); 

AppendMenu(pomme, "\pAbout VIM");

InsertMenu(pomme, 0);

DrawMenuBar();

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OFFSETED_WINDOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
SetRect(&amp;windRect, 10, 48, 10+80*7 + 16, 48+24*11);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

SetRect(&amp;windRect, 300, 40, 300+80*7 + 16, 40+24*11);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

CreateNewWindow(kDocumentWindowClass,

kWindowResizableAttribute | kWindowCollapseBoxAttribute,

&amp;windRect, &amp;gui.VimWindow);

SetPortWindowPort(gui.VimWindow);

gui.char_width = 7;

gui.char_height = 11;

gui.char_ascent = 6;

gui.num_rows = 24;

gui.num_cols = 80;

gui.in_focus = TRUE; 

gScrollAction = NewControlActionUPP(gui_mac_scroll_action);

gScrollDrag = NewControlActionUPP(gui_mac_drag_thumb);

dragRectEnbl = FALSE;

dragRgn = NULL;

dragRectControl = kCreateEmpty;

cursorRgn = NewRgn();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_EXE_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIND_BUNDLE_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>HGetVol</name><argument_list>(<argument><expr><name>volName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applVRefNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applDirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><name>applVRefNum</name></expr></argument>, <argument><expr><name>applDirID</name></expr></argument>, <argument><expr><literal type="string">"\p"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>applDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetCurrentProcess</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>GetProcessBundleLocation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applFSRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>FSGetCatalogInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>applFSRef</name></expr></argument>, <argument><expr><name>kFSCatInfoNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>applDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>exe_name</name> <operator>=</operator> <call><name>FullPathFromFSSpec_save</name><argument_list>(<argument><expr><name>applDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALWAYS_USE_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>

<name>gui_mch_init_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>disallow_gui</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>OSErr</name></type>

<name>receiveHandler</name><parameter_list>(<parameter><decl><type><name>WindowRef</name></type> <name>theWindow</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handlerRefCon</name></decl></parameter>, <parameter><decl><type><name>DragRef</name></type> <name>theDrag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_u</name></type> <name>modifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt16</name></type> <name>mouseUpModifiers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt16</name></type> <name>countItem</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDragMouse</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GlobalToLocal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>point</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>point</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDragModifiers</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouseUpModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <call><name>EventModifiers2VimMouseModifiers</name><argument_list>(<argument><expr><name>mouseUpModifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CountDragItems</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>countItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>countItem</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>ALLOC_MULT</name><argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnames</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>dragNotAcceptedErr</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DragItemRef</name></type> <name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Size</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlavorType</name></type> <name>type</name> <init>= <expr><name>flavorTypeHFS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HFSFlavor</name></type> <name>hfsFlavor</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDragItemReferenceNumber</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetFlavorDataSize</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hfsFlavor</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetFlavorData</name><argument_list>(<argument><expr><name>theDrag</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hfsFlavor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fnames</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>FullPathFromFSSpec_save</name><argument_list>(<argument><expr><name><name>hfsFlavor</name><operator>.</operator><name>fileSpec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_handle_drop</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>, <argument><expr><name>fnames</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PostEvent</name><argument_list>(<argument><expr><name>mouseUp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>noErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>windRect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MenuHandle</name></type> <name>pomme</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventHandlerRef</name></type> <name>mouseWheelHandlerRef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name>eventTypeSpec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ControlRef</name></type> <name>rootControl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Gestalt</name><argument_list>(<argument><expr><name>gestaltSystemVersion</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gMacSystemVersion</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gMacSystemVersion</name> <operator>=</operator> <literal type="number">0x1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>InitCursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegisterAppearanceClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_AEVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>InstallAEHandlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pomme</name> <operator>=</operator> <call><name>NewMenu</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"\p\024"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AppendMenu</name><argument_list>(<argument><expr><name>pomme</name></expr></argument>, <argument><expr><literal type="string">"\pAbout VIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name>pomme</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_OFFSETED_WINDOW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>windRect</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">10</literal><operator>+</operator><literal type="number">80</literal><operator>*</operator><literal type="number">7</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">48</literal><operator>+</operator><literal type="number">24</literal><operator>*</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>windRect</name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">300</literal><operator>+</operator><literal type="number">80</literal><operator>*</operator><literal type="number">7</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">40</literal><operator>+</operator><literal type="number">24</literal><operator>*</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name> <operator>=</operator> <call><name>NewCWindow</name><argument_list>(<argument><expr><name>nil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>windRect</name></expr></argument>, <argument><expr><literal type="string">"\pgVim on Macintosh"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>zoomDocProc</name></expr></argument>,

<argument><expr><operator>(</operator><name>WindowPtr</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateRootControl</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InstallReceiveHandler</name><argument_list>(<argument><expr><operator>(</operator><name>DragReceiveHandlerUPP</name><operator>)</operator><name>receiveHandler</name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPortWindowPort</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>in_focus</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>gScrollAction</name> <operator>=</operator> <call><name>NewControlActionUPP</name><argument_list>(<argument><expr><name>gui_mac_scroll_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gScrollDrag</name> <operator>=</operator> <call><name>NewControlActionUPP</name><argument_list>(<argument><expr><name>gui_mac_drag_thumb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>InstallFontPanelHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectEnbl</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRgn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectControl</name> <operator>=</operator> <name>kCreateEmpty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cursorRgn</name> <operator>=</operator> <call><name>NewRgn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>display_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_pixel</name></name> <operator>=</operator> <literal type="number">0x00000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name> <operator>=</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_normal_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_check_colors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_norm_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>def_back_pixel</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>highlight_gui_started</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>menu_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>scrollbar_height</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>border_offset</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"QDTEXT_MINSIZE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventTypeSpec</name><operator>.</operator><name>eventClass</name></name> <operator>=</operator> <name>kEventClassMouse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eventTypeSpec</name><operator>.</operator><name>eventKind</name></name> <operator>=</operator> <name>kEventMouseWheelMoved</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mouseWheelHandlerUPP</name> <operator>=</operator> <call><name>NewEventHandlerUPP</name><argument_list>(<argument><expr><name>gui_mac_mouse_wheel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>InstallApplicationEventHandler</name><argument_list>(<argument><expr><name>mouseWheelHandlerUPP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>eventTypeSpec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mouseWheelHandlerRef</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>mouseWheelHandlerRef</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeEventHandlerUPP</name><argument_list>(<argument><expr><name>mouseWheelHandlerUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouseWheelHandlerUPP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>InterfaceTypeList</name></type> <name>supportedServices</name> <init>= <expr><block>{ <expr><name>kUnicodeDocument</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NewTSMDocument</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>supportedServices</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gTSMDocument</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UseInputWindow</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name><name>textEventTypes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>kEventClassTextInput</name></expr>, <expr><name>kEventTextInputUpdateActiveInputArea</name></expr> }</block></expr>,

<expr><block>{ <expr><name>kEventClassTextInput</name></expr>, <expr><name>kEventTextInputUnicodeForKeyEvent</name></expr> }</block></expr>,

<expr><block>{ <expr><name>kEventClassTextInput</name></expr>, <expr><name>kEventTextInputPosToOffset</name></expr> }</block></expr>,

<expr><block>{ <expr><name>kEventClassTextInput</name></expr>, <expr><name>kEventTextInputOffsetToPos</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>keyEventHandlerUPP</name> <operator>=</operator> <call><name>NewEventHandlerUPP</name><argument_list>(<argument><expr><name>gui_mac_handle_text_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>InstallApplicationEventHandler</name><argument_list>(<argument><expr><name>keyEventHandlerUPP</name></expr></argument>,

<argument><expr><call><name>NR_ELEMS</name><argument_list>(<argument><expr><name>textEventTypes</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>textEventTypes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DisposeEventHandlerUPP</name><argument_list>(<argument><expr><name>keyEventHandlerUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keyEventHandlerUPP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name><name>windowEventTypes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>kEventClassWindow</name></expr>, <expr><name>kEventWindowActivated</name></expr> }</block></expr>,

<expr><block>{ <expr><name>kEventClassWindow</name></expr>, <expr><name>kEventWindowDeactivated</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>winEventHandlerUPP</name> <operator>=</operator> <call><name>NewEventHandlerUPP</name><argument_list>(<argument><expr><name>gui_mac_handle_window_activate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noErr</name> <operator>!=</operator> <call><name>InstallWindowEventHandler</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>,

<argument><expr><name>winEventHandlerUPP</name></expr></argument>,

<argument><expr><call><name>NR_ELEMS</name><argument_list>(<argument><expr><name>windowEventTypes</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>windowEventTypes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DisposeEventHandlerUPP</name><argument_list>(<argument><expr><name>winEventHandlerUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>winEventHandlerUPP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>initialise_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_new_colors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gui_win_x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>gui_win_y</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_set_winpos</name><argument_list>(<argument><expr><name>gui_win_x</name></expr></argument>, <argument><expr><name>gui_win_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>ProcessSerialNumber</name></type> <name>psn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCurrentProcess</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetFrontProcess</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mac_dispose_atsui_style</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gFontStyle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ATSUDisposeStyle</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gWideFontStyle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ATSUDisposeStyle</name><argument_list>(<argument><expr><name>gWideFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DisposeRgn</name><argument_list>(<argument><expr><name>cursorRgn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>keyEventHandlerUPP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DisposeEventHandlerUPP</name><argument_list>(<argument><expr><name>keyEventHandlerUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>mouseWheelHandlerUPP</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DisposeEventHandlerUPP</name><argument_list>(<argument><expr><name>mouseWheelHandlerUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mac_dispose_atsui_style</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FixTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeactivateTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeleteTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_get_winpos</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetWindowBounds</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>kWindowStructureRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_winpos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MoveWindowStructure</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_shellsize</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>base_width</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>base_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CGrafPtr</name></type> <name>VimPort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>VimBound</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>VimPort</name> <operator>=</operator> <call><name>GetWindowPort</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPortBounds</name><argument_list>(<argument><expr><name>VimPort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>VimBound</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetPortBounds</name><argument_list>(<argument><expr><name>VimPort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>VimPort</name> <operator>=</operator> <call><name>GetWindowPort</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPortBounds</name><argument_list>(<argument><expr><name>VimPort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>VimBound</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPortBounds</name><argument_list>(<argument><expr><name>VimPort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SizeWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_resize_shell</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_get_screen_dimensions</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>screen_h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GDHandle</name></type> <name>dominantDevice</name> <init>= <expr><call><name>GetMainDevice</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>screenRect</name> <init>= <expr><name><operator>(</operator><operator>*</operator><operator>*</operator><name>dominantDevice</name><operator>)</operator><operator>.</operator><name>gdRect</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_w</name> <operator>=</operator> <name><name>screenRect</name><operator>.</operator><name>right</name></name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>screen_h</name> <operator>=</operator> <name><name>screenRect</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GuiFont</name></type>

<name>gui_mac_select_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>selected_font</name> <init>= <expr><name>NOFONT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontSelectionQDStyle</name></type> <name>curr_font</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>curr_font</name><operator>.</operator><name>instance</name><operator>.</operator><name>fontFamily</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr_font</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr_font</name><operator>.</operator><name>instance</name><operator>.</operator><name>fontStyle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr_font</name><operator>.</operator><name>hasColor</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curr_font</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SetFontInfoForSelection</name><argument_list>(<argument><expr><name>kFontSelectionQDType</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>curr_font</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>family</name></name> <operator>=</operator> <name><name>curr_font</name><operator>.</operator><name>instance</name><operator>.</operator><name>fontFamily</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name><name>curr_font</name><operator>.</operator><name>instance</name><operator>.</operator><name>fontStyle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>curr_font</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FPShowHideFontPanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>gFontPanelInfo</name><operator>.</operator><name>isPanelVisible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>gFontPanelInfo</name><operator>.</operator><name>isPanelVisible</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>EventRecord</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WaitNextEvent</name><argument_list>(<argument><expr><name>everyEvent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>GetFontPanelSelection</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>selected_font</name> <operator>=</operator> <call><name>gui_mac_find_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>selected_font</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mac_create_atsui_style</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gFontStyle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ATSUCreateStyle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gFontStyle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gFontStyle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gWideFontStyle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ATSUCreateStyle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gWideFontStyle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gWideFontStyle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_macatsui_last</name> <operator>=</operator> <name>p_macatsui</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>gui_mch_init_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>font_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Str255</name></type> <name>suggestedFont</name> <init>= <expr><literal type="string">"\pMonaco"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>suggestedSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontInfo</name></type> <name>font_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>font_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>used_font_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>gui_mac_create_atsui_style</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>font_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetFNum</name><argument_list>(<argument><expr><name>suggestedFont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>font_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>font_id</name> <operator>=</operator> <call><name>GetAppFont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>, <argument><expr><literal type="string">"Monaco"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <operator>(</operator><name>suggestedSize</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>font_id</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>new_p_guifont</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mac_select_font</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_p_guifont</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_p_guifont</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>new_p_guifont</name></expr></argument>, <argument><expr><name>used_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p_guifont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_guifont</name> <operator>=</operator> <name>new_p_guifont</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>new_p_guifont</name></expr>;</condition> <incr><expr><operator>++</operator><name>new_p_guifont</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>new_p_guifont</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>new_p_guifont</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mac_find_font</name><argument_list>(<argument><expr><name>font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>, <argument><expr><name>font_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>used_font_name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>norm_font</name></name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hl_set_font_name</name><argument_list>(<argument><expr><name>used_font_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextSize</name><argument_list>(<argument><expr><name>font</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextFont</name><argument_list>(<argument><expr><name>font</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFontInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <name><name>font_info</name><operator>.</operator><name>ascent</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>=</operator> <call><name>CharWidth</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <name><name>font_info</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>font_info</name><operator>.</operator><name>descent</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gFontStyle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mac_set_font_attributes</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_adjust_charheight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FontInfo</name></type> <name>font_info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetFontInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>=</operator> <name><name>font_info</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>font_info</name><operator>.</operator><name>descent</name></name> <operator>+</operator> <name>p_linespace</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>char_ascent</name></name> <operator>=</operator> <name><name>font_info</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name>p_linespace</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>GuiFont</name></type>

<name>gui_mch_get_font</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>giveErrorIfMissing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiFont</name></type> <name>font</name></decl>;</decl_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>gui_mac_find_font</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>font</name> <operator>==</operator> <name>NOFONT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>giveErrorIfMissing</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_font</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NOFONT</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_get_fontname</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>gui_mac_set_font_attributes</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ATSUFontID</name></type> <name>fontID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Fixed</name></type> <name>fontSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Fixed</name></type> <name>fontWidth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fontID</name> <operator>=</operator> <name>font</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fontSize</name> <operator>=</operator> <call><name>Long2Fix</name><argument_list>(<argument><expr><name>font</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fontWidth</name> <operator>=</operator> <call><name>Long2Fix</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ATSUAttributeTag</name></type> <name><name>attribTags</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>kATSUFontTag</name></expr>, <expr><name>kATSUSizeTag</name></expr>, <expr><name>kATSUImposeWidthTag</name></expr>,

<expr><name>kATSUMaxATSUITagValue</name> <operator>+</operator> <literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name><name>attribSizes</name><index>[]</index></name> <init>=

<expr><block>{

<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ATSUFontID</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fixed</name></expr></argument>)</argument_list></sizeof></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>fontWidth</name></expr></argument>)</argument_list></sizeof></expr>,

<expr>sizeof<operator>(</operator><name>font</name><operator>)</operator></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeValuePtr</name></type> <name><name>attribValues</name><index>[]</index></name> <init>=

<expr><block>{

<expr><operator>&amp;</operator><name>fontID</name></expr>, <expr><operator>&amp;</operator><name>fontSize</name></expr>, <expr><operator>&amp;</operator><name>fontWidth</name></expr>, <expr><operator>&amp;</operator><name>font</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFromFontFamilyInstance</name><argument_list>(<argument><expr><name>fontID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>,

<argument><expr><operator>(</operator><sizeof>sizeof <name>attribTags</name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATSUAttributeTag</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>attribTags</name></expr></argument>, <argument><expr><name>attribSizes</name></expr></argument>, <argument><expr><name>attribValues</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"couldn't set font style\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ATSUDisposeStyle</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gFontStyle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fontWidth</name> <operator>=</operator> <call><name>Long2Fix</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gWideFontStyle</name></expr></argument>,

<argument><expr><operator>(</operator><sizeof>sizeof <name>attribTags</name></sizeof><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATSUAttributeTag</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>attribTags</name></expr></argument>, <argument><expr><name>attribSizes</name></expr></argument>, <argument><expr><name>attribValues</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ATSUDisposeStyle</name><argument_list>(<argument><expr><name>gWideFontStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gWideFontStyle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_set_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GuiFont</name></type> <name>currFont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name>actualFontByteCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <name>gFontStyle</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ATSUGetAttribute</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>, <argument><expr><name>kATSUMaxATSUITagValue</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>currFont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>actualFontByteCount</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name>

<operator>&amp;&amp;</operator> <name>actualFontByteCount</name> <operator>==</operator> <operator>(</operator><sizeof>sizeof <name>font</name></sizeof><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>currFont</name> <operator>==</operator> <name>font</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_mac_set_font_attributes</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gIsFontFallbackSet</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ATSUAttributeTag fallbackTags[] = { kATSULineFontFallbacksTag };

ByteCount fallbackSizes[] = { sizeof(ATSUFontFallbacks) };

ATSUCreateFontFallbacks(&amp;gFontFallbacks);

ATSUSetObjFontFallbacks(gFontFallbacks, );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>wide_font</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ATSUFontID</name></type> <name>fallbackFonts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>gIsFontFallbackSet</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FMGetFontFromFontFamilyInstance</name><argument_list>(

<argument><expr><operator>(</operator><name><name>gui</name><operator>.</operator><name>wide_font</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fallbackFonts</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ATSUSetFontFallbacks</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof <name>fallbackFonts</name></sizeof><operator>)</operator><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ATSUFontID</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fallbackFonts</name></expr></argument>,

<argument><expr><name>kATSUSequentialFallbacksPreferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TextSize</name><argument_list>(<argument><expr><name>font</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextFont</name><argument_list>(<argument><expr><name>font</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_free_font</name><parameter_list>(<parameter><decl><type><name>GuiFont</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_color</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RGBColor</name></type> <name>MacColor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"hilite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>LMGetHiliteRGB</name><argument_list>(<argument><expr><operator>&amp;</operator><name>MacColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><call><name>RGB</name><argument_list>(<argument><expr><name><name>MacColor</name><operator>.</operator><name>red</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>MacColor</name><operator>.</operator><name>green</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>MacColor</name><operator>.</operator><name>blue</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>gui_get_color_cmn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gui_get_rgb_color_cmn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_fg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RGBColor</name></type> <name>TheColor</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>red</name></name> <operator>=</operator> <call><name>Red</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>green</name></name> <operator>=</operator> <call><name>Green</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <call><name>Blue</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RGBForeColor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TheColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_bg_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RGBColor</name></type> <name>TheColor</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>red</name></name> <operator>=</operator> <call><name>Red</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>green</name></name> <operator>=</operator> <call><name>Green</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>TheColor</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <call><name>Blue</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RGBBackColor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TheColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>RGBColor</name></type> <name>specialColor</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>gui_mch_set_sp_color</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>specialColor</name><operator>.</operator><name>red</name></name> <operator>=</operator> <call><name>Red</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>specialColor</name><operator>.</operator><name>green</name></name> <operator>=</operator> <call><name>Green</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>specialColor</name><operator>.</operator><name>blue</name></name> <operator>=</operator> <call><name>Blue</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>draw_undercurl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cells</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RGBForeColor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>specialColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>cells</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>x</name> <operator>%</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LineTo</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>draw_string_QD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>output_conv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_conv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gMacSystemVersion</name> <operator>&gt;=</operator> <literal type="number">0x1020</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>qd_flags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>p_antialias</name></expr> ?</condition><then>

<expr><name>kQDUseCGTextRendering</name> <operator>|</operator> <name>kQDUseCGTextMetrics</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QDSwapTextFlags</name><argument_list>(<argument><expr><name>qd_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>gMacSystemVersion</name> <operator>&gt;=</operator> <literal type="number">0x1020</literal> <operator>&amp;&amp;</operator> <name>p_antialias</name><operator>)</operator> <operator>||</operator> <name>p_linespace</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>len</name> <operator>==</operator> <name>Columns</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gMacSystemVersion</name> <operator>&gt;=</operator> <literal type="number">0x1020</literal> <operator>&amp;&amp;</operator> <name>p_antialias</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>StyleParameter</name></type> <name>face</name></decl>;</decl_stmt>

<expr_stmt><expr><name>face</name> <operator>=</operator> <name>normal</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>face</name> <operator>|=</operator> <name>bold</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>face</name> <operator>|=</operator> <name>underline</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TextFace</name><argument_list>(<argument><expr><name>face</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcOr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextFace</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcOr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcOr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LineTo</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_STRIKE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LineTo</name><argument_list>(<argument><expr><call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_undercurl</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>draw_string_ATSUI</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UniCharCount</name></type> <name>utf16_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><call><name>mac_enc_to_utf16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>utf16_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>utf16_len</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UniChar</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAC_ATSUI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"row = %d, col = %d, len = %d: '%c'\n"</literal></expr></argument>,

<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><ternary><condition><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>len</name> <operator>==</operator> <name>Columns</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TextFace</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_TRANSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TextMode</name><argument_list>(<argument><expr><name>srcOr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MoveTo</name><argument_list>(<argument><expr><call><name>TEXT_X</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TEXT_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gFontStyle</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Boolean</name></type> <name>attValue</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeTag</name></type> <name><name>attribTags</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>kATSUQDBoldfaceTag</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name><name>attribSizes</name><index>[]</index></name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>Boolean</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeValuePtr</name></type> <name><name>attribValues</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>attValue</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attribTags</name></expr></argument>, <argument><expr><name>attribSizes</name></expr></argument>, <argument><expr><name>attribValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>useAntialias</name> <init>= <expr><ternary><condition><expr><name>p_antialias</name></expr> ?</condition><then> <expr><name>kATSStyleApplyAntiAliasing</name></expr>

</then><else>: <expr><name>kATSStyleNoAntiAliasing</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>useAntialias</name> <operator>!=</operator> <name>useAntialias_cached</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ATSUAttributeTag</name></type> <name><name>attribTags</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>kATSUStyleRenderingOptionsTag</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name><name>attribSizes</name><index>[]</index></name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>UInt32</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeValuePtr</name></type> <name><name>attribValues</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>useAntialias</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gFontStyle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attribTags</name></expr></argument>,

<argument><expr><name>attribSizes</name></expr></argument>, <argument><expr><name>attribValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gWideFontStyle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gWideFontStyle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attribTags</name></expr></argument>,

<argument><expr><name>attribSizes</name></expr></argument>, <argument><expr><name>attribValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>useAntialias_cached</name> <operator>=</operator> <name>useAntialias</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>width_in_cell</name></decl>, <decl><type ref="prev"/><name>last_width_in_cell</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UniCharArrayOffset</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UniCharCount</name></type> <name>yet_to_draw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUTextLayout</name></type> <name>textLayout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUStyle</name></type> <name>textStyle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_width_in_cell</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUCreateTextLayout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>textLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUSetTextPointerLocation</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>, <argument><expr><name>tofree</name></expr></argument>,

<argument><expr><name>kATSUFromTextBeginning</name></expr></argument>,

<argument><expr><name>kATSUToTextEnd</name></expr></argument>, <argument><expr><name>utf16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name> <operator>+=</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>width_in_cell</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2cells</name>)<argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width_in_cell</name> <operator>!=</operator> <name>last_width_in_cell</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAC_ATSUI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tn = %2d, (%d-%d), offset = %d, yet_to_draw = %d\n"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><name>last_width_in_cell</name></expr></argument>, <argument><expr><name>width_in_cell</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>yet_to_draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>textStyle</name> <operator>=</operator> <ternary><condition><expr><name>last_width_in_cell</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>gWideFontStyle</name></expr>

</then><else>: <expr><name>gFontStyle</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUSetRunStyle</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>, <argument><expr><name>textStyle</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>yet_to_draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>yet_to_draw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yet_to_draw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_width_in_cell</name> <operator>=</operator> <name>width_in_cell</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>yet_to_draw</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>yet_to_draw</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAC_ATSUI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\tn = %2d, (%d-%d), offset = %d, yet_to_draw = %d\n"</literal></expr></argument>,

<argument><expr><name>n</name></expr></argument>, <argument><expr><name>last_width_in_cell</name></expr></argument>, <argument><expr><name>width_in_cell</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>yet_to_draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>textStyle</name> <operator>=</operator> <ternary><condition><expr><name>width_in_cell</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>gWideFontStyle</name></expr> </then><else>: <expr><name>gFontStyle</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUSetRunStyle</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>, <argument><expr><name>textStyle</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>kATSUToTextEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ATSUSetTransientFontMatching</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUDrawText</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>,

<argument><expr><name>kATSUFromTextBeginning</name></expr></argument>, <argument><expr><name>kATSUToTextEnd</name></expr></argument>,

<argument><expr><name>kATSUUseGrafPortPenLoc</name></expr></argument>, <argument><expr><name>kATSUUseGrafPortPenLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUDisposeTextLayout</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>ATSUTextLayout</name></type> <name>textLayout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATSUCreateTextLayoutWithTextPtr</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>,

<argument><expr><name>kATSUFromTextBeginning</name></expr></argument>, <argument><expr><name>kATSUToTextEnd</name></expr></argument>,

<argument><expr><name>utf16_len</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>gFontStyle</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf16_len</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>gFontStyle</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>gFontStyle</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>textLayout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ATSUSetTransientFontMatching</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUDrawText</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>,

<argument><expr><name>kATSUFromTextBeginning</name></expr></argument>, <argument><expr><name>kATSUToTextEnd</name></expr></argument>,

<argument><expr><name>kATSUUseGrafPortPenLoc</name></expr></argument>, <argument><expr><name>kATSUUseGrafPortPenLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ATSUDisposeTextLayout</name><argument_list>(<argument><expr><name>textLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gFontStyle</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>DRAW_BOLD</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Boolean</name></type> <name>attValue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeTag</name></type> <name><name>attribTags</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>kATSUQDBoldfaceTag</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ByteCount</name></type> <name><name>attribSizes</name><index>[]</index></name> <init>= <expr><block>{ <expr>sizeof<operator>(</operator><name>Boolean</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ATSUAttributeValuePtr</name></type> <name><name>attribValues</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>attValue</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ATSUSetAttributes</name><argument_list>(<argument><expr><name>gFontStyle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>attribTags</name></expr></argument>, <argument><expr><name>attribSizes</name></expr></argument>,

<argument><expr><name>attribValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>DRAW_UNDERC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_undercurl</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_draw_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ATSUI_DRAWING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_macatsui_last</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mac_dispose_atsui_style</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_macatsui</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_macatsui_last</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mac_create_atsui_style</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_macatsui</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>draw_string_ATSUI</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>draw_string_QD</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_haskey</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key_sym</name> <operator>!=</operator> <operator>(</operator><name>KeySym</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code0</name> <operator>&amp;&amp;</operator>

<name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>special_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vim_code1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_beep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SysBeep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_cols</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>gui</name><operator>.</operator><name>num_rows</name></name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui_delay</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>msec</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_invert_rectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>nc</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>nr</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InvertRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_iconify</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>gui_mch_set_foreground</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_draw_hollow_cursor</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_lefthalve</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>+=</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_part_cursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>guicolor_T</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_RIGHTLEFT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>CURSOR_BAR_RIGHT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>-</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>rc</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_fg_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FrameRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EventRecord</name></type> <name>theEvent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EventAvail</name><argument_list>(<argument><expr><name>everyEvent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>theEvent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>theEvent</name><operator>.</operator><name>what</name></name> <operator>!=</operator> <name>nullEvent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_mch_wait_for_chars</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>pascal</name>

<name>Boolean</name></type>

<name>WaitNextEventWrp</name><parameter_list>(<parameter><decl><type><name>EventMask</name></type> <name>eventMask</name></decl></parameter>, <parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>theEvent</name></decl></parameter>, <parameter><decl><type><name>UInt32</name></type> <name>sleep</name></decl></parameter>, <parameter><decl><type><name>RgnHandle</name></type> <name>mouseRgn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>sleep</name><operator>)</operator> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sleep</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>WaitNextEvent</name><argument_list>(<argument><expr><name>eventMask</name></expr></argument>, <argument><expr><name>theEvent</name></expr></argument>, <argument><expr><name>sleep</name></expr></argument>, <argument><expr><name>mouseRgn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_wait_for_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wtime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EventMask</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>everyEvent</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventRecord</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>entryTick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>currentTick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>sleeppyTick</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dragged_sb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entryTick</name> <operator>=</operator> <call><name>TickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<do>do

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (dragRectControl == kCreateEmpty)

{

dragRgn = NULL;

dragRectControl = kNothing;

}

else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>dragRectControl</name> <operator>==</operator> <name>kCreateRect</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dragRgn</name> <operator>=</operator> <name>cursorRgn</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RectRgn</name><argument_list>(<argument><expr><name>dragRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dragRect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dragRectControl</name> <operator>=</operator> <name>kNothing</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wtime</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sleeppyTick</name> <operator>=</operator> <literal type="number">60</literal> <operator>*</operator> <name>wtime</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>sleeppyTick</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitNextEventWrp</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>sleeppyTick</name></expr></argument>, <argument><expr><name>dragRgn</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mac_handle_event</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>input_available</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentTick</name> <operator>=</operator> <call><name>TickCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><name>wtime</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>currentTick</name> <operator>-</operator> <name>entryTick</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">60</literal><operator>*</operator><name>wtime</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>)</condition>;</do>

<expr_stmt><expr><name>allow_scrollbar</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_block</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name>col2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>col2</name> <operator>==</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_clear_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>Columns</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_width</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name>Rows</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>border_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EraseRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_delete_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>num_lines</name> <operator>*</operator> <name><name>gui</name><operator>.</operator><name>char_height</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RgnHandle</name><operator>)</operator> <name>nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_insert_lines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>FILL_X</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>top</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <call><name>FILL_Y</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ScrollRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>char_height</name></name> <operator>*</operator> <name>num_lines</name></expr></argument>, <argument><expr><operator>(</operator><name>RgnHandle</name><operator>)</operator> <name>nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>row</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&gt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name>

<operator>&amp;&amp;</operator> <name><name>gui</name><operator>.</operator><name>cursor_col</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name> <operator>-</operator> <name>num_lines</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>+=</operator> <name>num_lines</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>gui</name><operator>.</operator><name>cursor_row</name></name> <operator>&lt;=</operator> <name><name>gui</name><operator>.</operator><name>scroll_region_bot</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gui</name><operator>.</operator><name>cursor_is_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>gui_clear_block</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_left</name></name></expr></argument>,

<argument><expr><name>row</name> <operator>+</operator> <name>num_lines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>scroll_region_right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_request_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Handle</name></type> <name>textOfClip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flavor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Size</name></type> <name>scrapSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrapFlavorFlags</name></type> <name>scrapFlags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrapRef</name></type> <name>scrap</name> <init>= <expr><name>nil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>searchCR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tempclip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetCurrentScrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetScrapFlavorFlags</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>VIMSCRAPFLAVOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrapFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetScrapFlavorSize</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>VIMSCRAPFLAVOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>noErr</name> <operator>&amp;&amp;</operator> <name>scrapSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flavor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flavor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetScrapFlavorFlags</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>SCRAPTEXTFLAVOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrapFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetScrapFlavorSize</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>SCRAPTEXTFLAVOR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ReserveMem</name><argument_list>(<argument><expr><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textOfClip</name> <operator>=</operator> <call><name>NewHandle</name><argument_list>(<argument><expr><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetScrapFlavorData</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>flavor</name></expr> ?</condition><then> <expr><name>VIMSCRAPFLAVOR</name></expr> </then><else>: <expr><name>SCRAPTEXTFLAVOR</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name>scrapSize</name></expr></argument>, <argument><expr><operator>*</operator><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scrapSize</name> <operator>-=</operator> <name>flavor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flavor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>textOfClip</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>MAUTO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tempclip</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>scrapSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>tempclip</name></expr></argument>, <argument><expr><operator>*</operator><name>textOfClip</name> <operator>+</operator> <name>flavor</name></expr></argument>, <argument><expr><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempclip</name><index>[<expr><name>scrapSize</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>encLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>mac_utf16_to_enc</name><argument_list>(<argument><expr><operator>(</operator><name>UniChar</name> <operator>*</operator><operator>)</operator><name>tempclip</name></expr></argument>, <argument><expr><name>scrapSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scrapSize</name> <operator>=</operator> <name>encLen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tempclip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempclip</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>searchCR</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tempclip</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>searchCR</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>searchCR</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>searchCR</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>searchCR</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>searchCR</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>clip_yank_selection</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>tempclip</name></expr></argument>, <argument><expr><name>scrapSize</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tempclip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_lose_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>clip_mch_own_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>clip_mch_set_selection</name><parameter_list>(<parameter><decl><type><name>Clipboard_T</name> <modifier>*</modifier></type><name>cbd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Handle</name></type> <name>textOfClip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>scrapSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScrapRef</name></type> <name>scrap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_get_selection</name><argument_list>(<argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cbd</name><operator>-&gt;</operator><name>owned</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>clip_convert_selection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>long_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>scrapSize</name></expr></argument>, <argument><expr><name>cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>utf16_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UniChar</name> <modifier>*</modifier></type><name>to</name> <init>= <expr><call><name>mac_enc_to_utf16</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>scrapSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf16_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>scrapSize</name> <operator>=</operator> <name>utf16_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>to</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ClearCurrentScrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textOfClip</name> <operator>=</operator> <call><name>NewHandle</name><argument_list>(<argument><expr><name>scrapSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>*</operator><name>textOfClip</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><operator>*</operator><name>textOfClip</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>scrapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetCurrentScrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PutScrapFlavor</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>SCRAPTEXTFLAVOR</name></expr></argument>, <argument><expr><name>kScrapFlavorMaskNone</name></expr></argument>,

<argument><expr><name>scrapSize</name></expr></argument>, <argument><expr><operator>*</operator><name>textOfClip</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PutScrapFlavor</name><argument_list>(<argument><expr><name>scrap</name></expr></argument>, <argument><expr><name>VIMSCRAPFLAVOR</name></expr></argument>, <argument><expr><name>kScrapFlavorMaskNone</name></expr></argument>,

<argument><expr><name>scrapSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>textOfClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_text_area_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>VimBound</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowBounds</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>kWindowGlobalPortRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>VimBound</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><name><name>gui</name><operator>.</operator><name>scrollbar_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>VimBound</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetWindowBounds</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>kWindowGlobalPortRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VimBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_menu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_menu_pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_add_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>next_avail_id</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>menu_after_me</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>brother</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_avail_id</name> <operator>==</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>brother</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>brother</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>brother</name> <operator>=</operator> <name><name>brother</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>brother</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu_after_me</name> <operator>=</operator> <name><name>brother</name><operator>-&gt;</operator><name>submenu_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>menu_is_menubar</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>menu_after_me</name> <operator>=</operator> <name>hierMenu</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>menu_title_removing_mnemonic</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>C2Pascal_save</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <name>next_avail_id</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CreateNewMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>MenuRef</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetMenuTitleWithCFString</name><argument_list>(<argument><expr><operator>(</operator><name>MenuRef</name><operator>)</operator><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_avail_id</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>menu_after_me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>gui_mac_get_menu_item_index</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><literal type="string">"\p "</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetMenuItemTextWithCFString</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetItemCmd</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetItemMark</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>hierMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

DrawMenuBar();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_add_menu_item</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>menu_inserted</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>menu_title_removing_mnemonic</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>C2Pascal_save</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>menu_inserted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_actext</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_actext</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>actext</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>find_special_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_actext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifiers</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_actext</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_CTRL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>+=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modifiers</name> <operator>|=</operator> <name>MOD_MASK_SHIFT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>key</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>key</name> <operator>+=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <literal type="number">0x22</literal> <operator>&amp;&amp;</operator> <call><name>vim_isprintc_strict</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>mac_mods</name> <init>= <expr><name>kMenuNoModifiers</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mac_mods</name> <operator>|=</operator> <name>kMenuShiftModifier</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CTRL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mac_mods</name> <operator>|=</operator> <name>kMenuControlModifier</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_CMD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mac_mods</name> <operator>|=</operator> <name>kMenuNoCommandModifier</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_ALT</name> <operator>||</operator> <name>modifiers</name> <operator>&amp;</operator> <name>MOD_MASK_MULTI_CLICK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>item_txt</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item_txt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>item_txt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>item_txt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item_txt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>item_txt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMenuItemModifiers</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>mac_mods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>menu_inserted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>menu_inserted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><literal type="string">"\p "</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>SetMenuItemTextWithCFString</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

DrawMenuBar();

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_toggle_tearoffs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_menu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>index</name> <init>= <expr><call><name>gui_mac_get_menu_item_index</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>

<block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><call><name>DeleteMenuItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_MENU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gmdm 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<block>{<block_content>

<expr_stmt><expr><call><name>DeleteMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeMenu</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_menu_grey</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>index</name> <init>= <expr><call><name>gui_mac_get_menu_item_index</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>grey</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DisableMenuItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DisableMenuItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EnableMenuItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EnableMenuItem</name><argument_list>(<argument><expr><name><name>menu</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_menu_hidden</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hidden</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_menu_grey</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>hidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_draw_menubar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawMenuBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_enable_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShowControl</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HideControl</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_SB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"enb_sb (%x) %x\n"</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_thumb</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SetControl32BitMaximum</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetControl32BitMinimum</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetControl32BitValue</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetControlViewSize</name> <argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_SB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thumb_sb (%x) %lx, %lx,%lx\n"</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_scrollbar_pos</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (gui.which_scrollbars[SBAR_LEFT])

{

MoveControl(sb-&gt;id, x-16, y);

SizeControl(sb-&gt;id, w + 1, h);

}

else

{

MoveControl(sb-&gt;id, x, y);

SizeControl(sb-&gt;id, w + 1, h);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <operator>&amp;</operator><name><name>gui</name><operator>.</operator><name>bottom_sbar</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gui</name><operator>.</operator><name>which_scrollbars</name><index>[<expr><name>SBAR_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MoveControl</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SizeControl</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_SB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"size_sb (%x) %x, %x, %x, %x\n"</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_create_scrollbar</name><parameter_list>(

<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>orient</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>bounds</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>-</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>NewControl</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bounds</name></expr></argument>,

<argument><expr><literal type="string">"\pScrollBar"</literal></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><literal type="number">0</literal></expr></argument>, 

<argument><expr><name>kControlScrollBarLiveProc</name></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>sb</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_SB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"create_sb (%x) %x\n"</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>orient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_destroy_scrollbar</name><parameter_list>(<parameter><decl><type><name>scrollbar_T</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mch_set_bg_color</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>back_pixel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeControl</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_SB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dest_sb (%x) \n"</literal></expr></argument>,<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_is_blinking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_is_blink_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_blinking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

blink_waittime = wait;

blink_ontime = on;

blink_offtime = off;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_stop_blink</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>may_call_gui_update_cursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>may_call_gui_update_cursor</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

gui_w32_rm_blink_timer();

if (blink_state == BLINK_OFF)

gui_update_cursor(TRUE, FALSE);

blink_state = BLINK_NONE;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_start_blink</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_update_cursor</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if (blink_waittime &amp;&amp; blink_ontime &amp;&amp; blink_offtime)

{

blink_timer = SetTimer(NULL, 0, (UINT)blink_waittime,

(TIMERPROC)_OnBlinkTimer);

blink_state = BLINK_ON;

gui_update_cursor(TRUE, FALSE);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>guicolor_T</name></type>

<name>gui_mch_get_rgb</name><parameter_list>(<parameter><decl><type><name>guicolor_T</name></type> <name>pixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>guicolor_T</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>Red</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>Green</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <call><name>Blue</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>char_u</name> <modifier>*</modifier></type>

<name>gui_mch_browse</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>saving</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dflt</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>initdir</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NavReplyRecord</name></type> <name>reply</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>fnames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>numFiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NavDialogOptions</name></type> <name>navOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NavGetDefaultDialogOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>navOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>navOptions</name><operator>.</operator><name>dialogOptionFlags</name></name> <operator>=</operator> <name>kNavAllowInvisibleFiles</name>

<operator>|</operator> <name>kNavDontAutoTranslate</name>

<operator>|</operator> <name>kNavDontAddTranslateItems</name>

<operator>|</operator> <name>kNavAllowStationery</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>navOptions</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>dflt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>navOptions</name><operator>.</operator><name>savedFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saving</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>NavPutFile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>navOptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="char">'TEXT'</literal></expr></argument>, <argument><expr><literal type="char">'VIM!'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reply</name><operator>.</operator><name>validRecord</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>NavGetFile</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>navOptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>reply</name><operator>.</operator><name>validRecord</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>fnames</name> <operator>=</operator> <call><name>new_fnames_from_AEDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reply</name><operator>.</operator><name>selection</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numFiles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NavDisposeReply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fnames</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>fnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fname</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_DIALOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>short</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Rect</name></type> <name>box</name></decl>;</decl_stmt>

}</block></struct></type> <name>vgmDlgItm</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MoveRectTo</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OffsetRect(r,x-r-&gt;left,y-r-&gt;top)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>macMoveDialogItem</name><parameter_list>(

<parameter><decl><type><name>DialogRef</name></type> <name>theDialog</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>itemNumber</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>X</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>Y</name></decl></parameter>,

<parameter><decl><type><name>Rect</name> <modifier>*</modifier></type><name>inBox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

MoveDialogItem(theDialog, itemNumber, X, Y);

if (inBox != nil)

GetDialogItem(theDialog, itemNumber, &amp;itemType, &amp;itemHandle, inBox);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>short</name></type> <name>itemType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>itemHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>localBox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name> <modifier>*</modifier></type><name>itemBox</name> <init>= <expr><operator>&amp;</operator><name>localBox</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inBox</name> <operator>!=</operator> <name>nil</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itemBox</name> <operator>=</operator> <name>inBox</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>itemNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><name>itemBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><name>itemBox</name></expr></argument>, <argument><expr><operator>-</operator><name><name>itemBox</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>itemBox</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OffsetRect</name><argument_list>(<argument><expr><name>itemBox</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>MoveControl</name><argument_list>(<argument><expr><operator>(</operator><name>ControlRef</name><operator>)</operator> <name>itemHandle</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>itemNumber</name></expr></argument>, <argument><expr><name>itemType</name></expr></argument>, <argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><name>itemBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>macSizeDialogItem</name><parameter_list>(

<parameter><decl><type><name>DialogRef</name></type> <name>theDialog</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>itemNumber</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>width</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>itemType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>itemHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>itemBox</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>itemNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>itemBox</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>itemBox</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>itemBox</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>itemBox</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

SizeDialogItem(theDialog, itemNumber, width, height); 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>itemBox</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>itemBox</name><operator>.</operator><name>left</name></name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>itemBox</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>itemBox</name><operator>.</operator><name>top</name></name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itemType</name> <operator>&amp;</operator> <name>kControlDialogItem</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SizeControl</name><argument_list>(<argument><expr><operator>(</operator><name>ControlRef</name><operator>)</operator> <name>itemHandle</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>itemNumber</name></expr></argument>, <argument><expr><name>itemType</name></expr></argument>, <argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>macSetDialogItemText</name><parameter_list>(

<parameter><decl><type><name>DialogRef</name></type> <name>theDialog</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name>itemNumber</name></decl></parameter>,

<parameter><decl><type><name>Str255</name></type> <name>itemName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>itemType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>itemHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>itemBox</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>itemNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itemType</name> <operator>&amp;</operator> <name>kControlDialogItem</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetControlTitle</name><argument_list>(<argument><expr><operator>(</operator><name>ControlRef</name><operator>)</operator> <name>itemHandle</name></expr></argument>, <argument><expr><name>itemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetDialogItemText</name><argument_list>(<argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><name>itemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pascal</name> <name>Boolean</name></type>

<name>DialogHotkeyFilterProc</name> <parameter_list>(

<parameter><decl><type><name>DialogRef</name></type> <name>theDialog</name></decl></parameter>,

<parameter><decl><type><name>EventRecord</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,

<parameter><decl><type><name>DialogItemIndex</name> <modifier>*</modifier></type><name>itemHit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name>keyHit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>what</name></name> <operator>==</operator> <name>keyDown</name> <operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>what</name></name> <operator>==</operator> <name>autoKey</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keyHit</name> <operator>=</operator> <operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>message</name></name> <operator>&amp;</operator> <name>charCodeMask</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gDialogHotKeys</name> <operator>&amp;&amp;</operator> <name><name>gDialogHotKeys</name><index>[<expr><name>keyHit</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_DIALOG_HOTKEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"user pressed hotkey '%c' --&gt; item %d\n"</literal></expr></argument>, <argument><expr><name>keyHit</name></expr></argument>, <argument><expr><name><name>gDialogHotKeys</name><index>[<expr><name>keyHit</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>itemHit</name> <operator>=</operator> <name><name>gDialogHotKeys</name><index>[<expr><name>keyHit</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <name>kEventControlSimulateHit</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>StdFilterProc</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>itemHit</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_dialog</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dfltbutton</name></decl></parameter>,

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>textfield</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ex_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Handle</name></type> <name>buttonDITL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>iconDITL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>inputDITL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>messageDITL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>itemHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>iconHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DialogPtr</name></type> <name>theDialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>PascalTitle</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GrafPtr</name></type> <name>oldPort</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>itemHit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buttonChar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name><name>hotKeys</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name>aHotKey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rect</name></type> <name>box</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>button</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>lastButton</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>itemType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>useIcon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>totalButtonWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>widestButton</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>dfltButtonEdge</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>dfltElementSpacing</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>dfltIconSideSpace</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>maximumWidth</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>maxButtonWidth</name> <init>= <expr><literal type="number">175</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>dialogHeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>messageLines</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontInfo</name></type> <name>textFontInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vgmDlgItm</name></type> <name>iconItm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vgmDlgItm</name></type> <name>messageItm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vgmDlgItm</name></type> <name>inputItm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vgmDlgItm</name></type> <name>buttonItm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WindowRef</name></type> <name>theWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModalFilterUPP</name></type> <name>dialogUPP</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_go</name></expr></argument>, <argument><expr><name>GO_VERTICAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>theDialog</name> <operator>=</operator> <call><name>GetNewDialog</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>, <argument><expr><name>nil</name></expr></argument>, <argument><expr><operator>(</operator><name>WindowRef</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>theWindow</name> <operator>=</operator> <call><name>GetDialogWindow</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HideWindow</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPortDialogPort</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFontInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>textFontInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PascalTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWTitle</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>, <argument><expr><name>PascalTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buttonDITL</name> <operator>=</operator> <call><name>GetResource</name><argument_list>(<argument><expr><literal type="char">'DITL'</literal></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buttonChar</name> <operator>=</operator> <name>buttons</name></expr>;</expr_stmt>

<expr_stmt><expr><name>button</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><name>hotKeys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hotKeys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><operator>*</operator><name>buttonChar</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>button</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>buttonChar</name> <operator>!=</operator> <name>DLG_BUTTON_SEP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>buttonChar</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>buttonChar</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buttonChar</name> <operator>!=</operator> <name>DLG_HOTKEY_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buttonChar</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>aHotKey</name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>*</operator><operator>(</operator><name>buttonChar</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aHotKey</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>aHotKey</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aHotKey</name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>aHotKey</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">'a'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">'A'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hotKeys</name><index>[<expr><name>aHotKey</name></expr>]</index></name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_MAC_DIALOG_HOTKEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"###hotKey for button %d is '%c'\n"</literal></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>aHotKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buttonChar</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buttonChar</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendDITL</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>buttonDITL</name></expr></argument>, <argument><expr><name>overlayDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>macSetDialogItemText</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>StringWidth</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dfltButtonEdge</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>maxButtonWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>maxButtonWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>macSizeDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalButtonWidth</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>widestButton</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>widestButton</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ReleaseResource</name><argument_list>(<argument><expr><name>buttonDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastButton</name> <operator>=</operator> <name>button</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconItm</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>lastButton</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iconDITL</name> <operator>=</operator> <call><name>GetResource</name><argument_list>(<argument><expr><literal type="char">'DITL'</literal></expr></argument>, <argument><expr><literal type="number">131</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VIM_GENERIC</name></expr>:</case>

<case>case <expr><name>VIM_INFO</name></expr>:</case>

<case>case <expr><name>VIM_QUESTION</name></expr>:</case> <expr_stmt><expr><name>useIcon</name> <operator>=</operator> <name>kNoteIcon</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VIM_WARNING</name></expr>:</case> <expr_stmt><expr><name>useIcon</name> <operator>=</operator> <name>kCautionIcon</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VIM_ERROR</name></expr>:</case> <expr_stmt><expr><name>useIcon</name> <operator>=</operator> <name>kStopIcon</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>useIcon</name> <operator>=</operator> <name>kStopIcon</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>AppendDITL</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>iconDITL</name></expr></argument>, <argument><expr><name>overlayDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseResource</name><argument_list>(<argument><expr><name>iconDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>iconItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iconHandle</name> <operator>=</operator> <call><name>GetIcon</name><argument_list>(<argument><expr><name>useIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>iconItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><name>itemType</name></expr></argument>, <argument><expr><name>iconHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageItm</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>lastButton</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>messageDITL</name> <operator>=</operator> <call><name>GetResource</name><argument_list>(<argument><expr><literal type="char">'DITL'</literal></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendDITL</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>messageDITL</name></expr></argument>, <argument><expr><name>overlayDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseResource</name><argument_list>(<argument><expr><name>messageDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>messageItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDialogItemText</name><argument_list>(<argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageItm</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>StringWidth</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>lastButton</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inputDITL</name> <operator>=</operator> <call><name>GetResource</name><argument_list>(<argument><expr><literal type="char">'DITL'</literal></expr></argument>, <argument><expr><literal type="number">132</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendDITL</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>inputDITL</name></expr></argument>, <argument><expr><name>overlayDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReleaseResource</name><argument_list>(<argument><expr><name>inputDITL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDialogItemText</name><argument_list>(<argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inputItm</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>StringWidth</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gDialogHotKeys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>gDialogHotKeys</name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hotKeys</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetDialogDefaultItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>dfltbutton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDialogCancelItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>totalButtonWidth</name> <operator>&gt;</operator> <name>maximumWidth</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vertical</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>macMoveDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>iconItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><name>dfltIconSideSpace</name></expr></argument>, <argument><expr><name>dfltElementSpacing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconItm</name><operator>.</operator><name>box</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iconItm</name><operator>.</operator><name>box</name><operator>.</operator><name>bottom</name></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>iconItm</name><operator>.</operator><name>box</name><operator>.</operator><name>right</name></name> <operator>+</operator> <name>dfltIconSideSpace</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>macSizeDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>messageItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>messageLines</name> <operator>*</operator> <operator>(</operator><name><name>textFontInfo</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>textFontInfo</name><operator>.</operator><name>descent</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>macMoveDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>messageItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>dfltElementSpacing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>messageItm</name><operator>.</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>macSizeDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>textFontInfo</name><operator>.</operator><name>ascent</name></name> <operator>+</operator> <name><name>textFontInfo</name><operator>.</operator><name>descent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>macMoveDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inputItm</name><operator>.</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inputItm</name><operator>.</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><name>kEditTextDialogItem</name></expr></argument>, <argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inputItm</name><operator>.</operator><name>box</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectDialogItemText</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>inputItm</name><operator>.</operator><name>box</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>messageItm</name><operator>.</operator><name>box</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>button</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>button</name> <operator>&lt;=</operator> <name>lastButton</name></expr>;</condition> <incr><expr><name>button</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>macMoveDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>macSizeDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><name>widestButton</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name>button</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vertical</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buttonItm</name><operator>.</operator><name>box</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>right</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dialogHeight</name> <operator>=</operator> <name><name>box</name><operator>.</operator><name>bottom</name></name> <operator>+</operator> <name>dfltElementSpacing</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SizeWindow</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>, <argument><expr><name>maximumWidth</name></expr></argument>, <argument><expr><name>dialogHeight</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AutoSizeDialog</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelectWindow</name><argument_list>(<argument><expr><name>theWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GetPort(&amp;oldPort);

SetPortDialogPort(theDialog);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dialog_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dialogUPP</name> <operator>=</operator> <call><name>NewModalFilterUPP</name><argument_list>(<argument><expr><name>DialogHotkeyFilterProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ModalDialog</name><argument_list>(<argument><expr><name>dialogUPP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><operator>(</operator><name>itemHit</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>itemHit</name> <operator>&gt;</operator> <name>lastButton</name><operator>)</operator></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dialog_busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>textfield</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetDialogItem</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>, <argument><expr><name><name>inputItm</name><operator>.</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDialogItemText</name><argument_list>(<argument><expr><name>itemHandle</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IOSIZE</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>IOSIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>IOSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>textfield</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPort</name><argument_list>(<argument><expr><name>oldPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeRoutineDescriptor</name><argument_list>(<argument><expr><name>dialogUPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisposeDialog</name><argument_list>(<argument><expr><name>theDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>itemHit</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MCH_ERRMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>

<name>display_errors</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>pError</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>error_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pError</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pError</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pError</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pError</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParamText</name><argument_list>(<argument><expr><name>pError</name></expr></argument>, <argument><expr><name>nil</name></expr></argument>, <argument><expr><name>nil</name></expr></argument>, <argument><expr><name>nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Alert</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>gui_mch_getmouse</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetMouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name><name>where</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name><name>where</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_setmouse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

CursorDevicePtr myMouse;

Point where;

if ( NGetTrapAddress(_CursorDeviceDispatch, ToolTrap)

!= NGetTrapAddress(_Unimplemented, ToolTrap))

{

myMouse = nil;

do

{

CursorDeviceNextDevice(&amp;myMouse);

}

while ((myMouse != nil) &amp;&amp; (myMouse-&gt;cntButtons != 1));

CursorDeviceMoveTo(myMouse, x, y);

}

else

{

where.h = x;

where.v = y;

*(Point *)RawMouse = where;

*(Point *)MTemp = where;

*(Ptr) CrsrNew = 0xFFFF;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_popupmenu</name><parameter_list>(<parameter><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MenuHandle</name></type> <name>CntxMenu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Point</name></type> <name>where</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>CntxType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt16</name></type> <name>CntxMenuID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt16</name></type> <name>CntxMenuItem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Str255</name></type> <name>HelpName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GrafPtr</name></type> <name>savePort</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GetMouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LocalToGlobal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>CntxMenu</name> <operator>=</operator> <name><name>menu</name><operator>-&gt;</operator><name>submenu_handle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ContextualMenuSelect</name><argument_list>(<argument><expr><name>CntxMenu</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>kCMHelpItemRemoveHelp</name></expr></argument>,

<argument><expr><name>HelpName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CntxType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CntxMenuID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CntxMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>noErr</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CntxType</name> <operator>==</operator> <name>kCMMenuItemSelected</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>gui_mac_handle_menu</name><argument_list>(<argument><expr><operator>(</operator><name>CntxMenuID</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>CntxMenuItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>CntxMenuID</name> <operator>==</operator> <name>kCMShowHelpSelected</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPort</name><argument_list>(<argument><expr><name>savePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_CW_EDITOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>mch_post_buffer_write</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>GetFSSpecFromPath</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ffname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_FSSpec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Send_KAHL_MOD_AE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_TITLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>

<name>gui_mch_settitle</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>icon</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>CFStringRef</name></type> <name>windowTitle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>windowTitleLen</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pascalTitle</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>windowTitleLen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>windowTitle</name> <operator>=</operator> <operator>(</operator><name>CFStringRef</name><operator>)</operator><call><name>mac_enc_to_cfstring</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>windowTitleLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>windowTitle</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWindowTitleWithCFString</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>windowTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>windowTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pascalTitle</name> <operator>=</operator> <call><name>C2Pascal_save</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pascalTitle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetWTitle</name><argument_list>(<argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>, <argument><expr><name>pascalTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>pascalTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>C2PascalString</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>CString</name></decl></parameter>, <parameter><decl><type><name>Str255</name> <modifier>*</modifier></type><name>PascalString</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>PascalPtr</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name>PascalString</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>PascalPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CString</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>CString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>PascalPtr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>CString</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>PascalPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>GetFSSpecFromPath</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>FSSpec</name> <modifier>*</modifier></type><name>fileFSSpec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Str255</name></type> <name>filePascal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CInfoPBRec</name></type> <name>myCPB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSErr</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>C2PascalString</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filePascal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioNamePtr</name></name> <operator>=</operator> <name>filePascal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioVRefNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioFDirIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>myCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name><operator>=</operator> <call><name>PBGetCatInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>myCPB</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filePascal</name></expr></argument>, <argument><expr><name>fileFSSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char_u</name> <modifier>*</modifier></type><name>FullPathFromFSSpec_save</name><parameter_list>(<parameter><decl><type><name>FSSpec</name></type> <name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CInfoPBRec</name></type> <name>theCPB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>fname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>filenamePtr</name> <init>= <expr><name>fname</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSErr</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>folder</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SInt16</name></type> <name>dfltVol_vRefNum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt32</name></type> <name>dfltVol_dirID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSRef</name></type> <name>refFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UInt32</name></type> <name>pathSize</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>pathname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>pathname</name></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Str255</name></type> <name>directoryName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>temporary</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temporaryPtr</name> <init>= <expr><name>temporary</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>error</name><operator>=</operator><call><name>HGetVol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dfltVol_vRefNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dfltVol_dirID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioFDirIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioNamePtr</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioVRefNum</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>vRefNum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>parID</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>PBGetCatInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theCPB</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>error</name> <operator>!=</operator> <name>fnfErr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>theCPB</name><operator>.</operator><name>hFileInfo</name><operator>.</operator><name>ioFlAttrib</name></name> <operator>&amp;</operator> <name>ioDirMask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>error</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>folder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>folder</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>fnfErr</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>FSSpec</name></type> <name>dirSpec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FSRef</name></type> <name>dirRef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Str255</name></type> <name>emptyFilename</name> <init>= <expr><literal type="string">"\p"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>FSMakeFSSpec</name><argument_list>(<argument><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioVRefNum</name></name></expr></argument>,

<argument><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name></expr></argument>, <argument><expr><name>emptyFilename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>FSpMakeFSRef</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirSpec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>FSRefMakePath</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dirRef</name></expr></argument>, <argument><expr><operator>(</operator><name>UInt8</name><operator>*</operator><operator>)</operator><name>path</name></expr></argument>, <argument><expr><name>pathSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>filenamePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>error</name><operator>=</operator><call><name>FSpMakeFSRef</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>refFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name><operator>=</operator><call><name>FSRefMakePath</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refFile</name></expr></argument>, <argument><expr><operator>(</operator><name>UInt8</name> <operator>*</operator><operator>)</operator> <name>path</name></expr></argument>, <argument><expr><name>pathSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>folder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioNamePtr</name></name> <operator>=</operator> <name>directoryName</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrParID</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>parID</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>parID</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>TRUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>file</name><operator>.</operator><name>parID</name></name> <operator>!=</operator> <name>fsRtDirID</name> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<do>do

<block>{<block_content>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioFDirIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioVRefNum</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>vRefNum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>=</operator> <name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrParID</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>PBGetCatInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theCPB</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>temporaryPtr</name></expr></argument>, <argument><expr><name>filenamePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>directoryName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>directoryName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><name>temporaryPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if> 

while <condition>(<expr><operator>(</operator><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrParID</name></name> <operator>!=</operator> <name>fsRtDirID</name><operator>)</operator></expr>

)</condition>;</do></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>!=</operator> <name>fsRtDirID</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioFDirIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioVRefNum</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>vRefNum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrDirID</name></name> <operator>=</operator> <name><name>theCPB</name><operator>.</operator><name>dirInfo</name><operator>.</operator><name>ioDrParID</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>PBGetCatInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theCPB</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>vRefNum</name></name> <operator>!=</operator> <name>dfltVol_vRefNum</name></expr>)</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>temporaryPtr</name></expr></argument>, <argument><expr><name>filenamePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_strncpy</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>directoryName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>directoryName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><name>temporaryPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>temporaryPtr</name></expr></argument>, <argument><expr><name>filenamePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filenamePtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><literal type="string">"Volumes:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><name>temporaryPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>folder</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UNIXFILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temporaryPtr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>filenamePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temporaryPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>filenamePtr</name></expr></argument>, <argument><expr><name>temporaryPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>fname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><call><name>vim_strsave</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_CARBONKEYHANDLER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>im_set_position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

im_start_row = row;

im_start_col = col;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScriptLanguageRecord</name></type> <name>gTSLWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScriptLanguageRecord</name></type> <name>gTSLInsert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScriptLanguageRecord</name></type> <name>gTSLDefault</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Component</name></type> <name>gTSCWindow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Component</name></type> <name>gTSCInsert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Component</name></type> <name>gTSCDefault</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>im_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>im_on_window_switch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScriptLanguageRecord</name> <modifier>*</modifier></type><name>slptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>im_initialized</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>im_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSCDefault</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gTSLDefault</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ActivateTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slptr</name> <operator>=</operator> <operator>&amp;</operator><name>gTSLWindow</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><name>gTSCWindow</name></expr></argument>, <argument><expr><name>slptr</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SetTextServiceLanguage</name><argument_list>(<argument><expr><name>slptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>KeyScript</name><argument_list>(<argument><expr><name><name>slptr</name><operator>-&gt;</operator><name>fScript</name></name> <operator>|</operator> <name>smKeyForceKeyScriptMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetTextServiceLanguage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSLWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>slptr</name> <operator>=</operator> <operator>&amp;</operator><name>gTSLWindow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSCWindow</name></expr></argument>, <argument><expr><name>slptr</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeactivateTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>im_set_active</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ScriptLanguageRecord</name> <modifier>*</modifier></type><name>slptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>im_initialized</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>im_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSCDefault</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gTSLDefault</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ActivateTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slptr</name> <operator>=</operator> <operator>&amp;</operator><name>gTSLInsert</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slptr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><name>gTSCInsert</name></expr></argument>, <argument><expr><name>slptr</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SetTextServiceLanguage</name><argument_list>(<argument><expr><name>slptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>KeyScript</name><argument_list>(<argument><expr><name><name>slptr</name><operator>-&gt;</operator><name>fScript</name></name> <operator>|</operator> <name>smKeyForceKeyScriptMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetTextServiceLanguage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSLInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>noErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>slptr</name> <operator>=</operator> <operator>&amp;</operator><name>gTSLInsert</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSCInsert</name></expr></argument>, <argument><expr><name>slptr</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetDefaultInputMethodOfClass</name><argument_list>(<argument><expr><name>gTSCDefault</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gTSLDefault</name></expr></argument>,

<argument><expr><name>kKeyboardInputMethodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextServiceLanguage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gTSLDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>im_is_active</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DeactivateTSMDocument</name><argument_list>(<argument><expr><name>gTSMDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>im_get_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>gui</name><operator>.</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>im_is_active</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI_TABLINE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>MenuRef</name></type> <name>contextMenu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>kTabContextMenuId</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>CFStringRef</name></type>

<name>getTabLabel</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_tabline_label</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MACOS_CONVERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>CFStringRef</name><operator>)</operator><call><name>mac_enc_to_cfstring</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>,

<argument><expr><name>kCFStringEncodingMacRoman</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAWER_SIZE</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRAWER_INSET</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ControlRef</name></type> <name>dataBrowser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFStringRef</name> <modifier>*</modifier></type><name>tabLabels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tabLabelsSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>kTabsColumn</name> <init>= <expr><literal type="char">'Tabs'</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>getTabCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numTabs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FOR_ALL_TABPAGES</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call>

<operator>++</operator><name>numTabs</name></expr>;</expr_stmt>

<return>return <expr><name>numTabs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>dbItemDataCallback</name><parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>browser</name></decl></parameter>,

<parameter><decl><type><name>DataBrowserItemID</name></type> <name>itemID</name></decl></parameter>,

<parameter><decl><type><name>DataBrowserPropertyID</name></type> <name>property</name></decl></parameter> ,

<parameter><decl><type><name>DataBrowserItemDataRef</name></type> <name>itemData</name></decl></parameter>,

<parameter><decl><type><name>Boolean</name></type> <name>changeValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name> <init>= <expr><name>noErr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changeValue</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>itemID</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>itemID</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>tabLabelsSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>tabLabels</name><index>[<expr><name>itemID</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>SetDataBrowserItemDataText</name><argument_list>(<argument><expr><name>itemData</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>errDataBrowserPropertyNotSupported</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dbItemNotificationCallback</name><parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>browser</name></decl></parameter>,

<parameter><decl><type><name>DataBrowserItemID</name></type> <name>item</name></decl></parameter>,

<parameter><decl><type><name>DataBrowserItemNotification</name></type> <name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>message</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>kDataBrowserItemSelected</name></expr>:</case>

<expr_stmt><expr><call><name>send_tabline_event</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dbGetContextualMenuCallback</name><parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>browser</name></decl></parameter>,

<parameter><decl><type><name>MenuRef</name> <modifier>*</modifier></type><name>menu</name></decl></parameter>,

<parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>helpType</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>helpItemString</name></decl></parameter>,

<parameter><decl><type><name>AEDesc</name> <modifier>*</modifier></type><name>selection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>helpType</name> <operator>=</operator> <name>kCMHelpItemRemoveHelp</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>helpItemString</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>menu</name> <operator>=</operator> <name>contextMenu</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dbSelectContextualMenuCallback</name><parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>browser</name></decl></parameter>,

<parameter><decl><type><name>MenuRef</name></type> <name>menu</name></decl></parameter>,

<parameter><decl><type><name>UInt32</name></type> <name>selectionType</name></decl></parameter>,

<parameter><decl><type><name>SInt16</name></type> <name>menuID</name></decl></parameter>,

<parameter><decl><type><name>MenuItemIndex</name></type> <name>menuItem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>selectionType</name> <operator>==</operator> <name>kCMMenuItemSelected</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MenuCommand</name></type> <name>command</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetMenuItemCommandID</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>menuItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Handle</name></type> <name>items</name> <init>= <expr><call><name>NewHandle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>items</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>numItems</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDataBrowserItems</name><argument_list>(<argument><expr><name>browser</name></expr></argument>, <argument><expr><name>kDataBrowserNoItem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,

<argument><expr><name>kDataBrowserItemIsSelected</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>numItems</name> <operator>=</operator> <call><name>GetHandleSize</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DataBrowserItemID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>numItems</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DataBrowserItemID</name> <modifier>*</modifier></type><name>itemsPtr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HLock</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>itemsPtr</name> <operator>=</operator> <operator>(</operator><name>DataBrowserItemID</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>items</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>itemsPtr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HUnlock</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>send_tabline_menu_event</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DisposeHandle</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>dbFocusCallback</name><parameter_list>(<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetEventClass</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kEventClassControl</name>

<operator>&amp;&amp;</operator> <call><name>GetEventKind</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kEventControlSetFocusPart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>paramErr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>drawerCallback</name><parameter_list>(<parameter><decl><type><name>EventHandlerCallRef</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>EventRef</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>GetEventKind</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>kEventWindowBoundsChanged</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>UInt32</name></type> <name>attribs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEventParameter</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>kEventParamAttributes</name></expr></argument>, <argument><expr><name>typeUInt32</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>attribs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attribs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attribs</name> <operator>&amp;</operator> <name>kWindowBoundsChangeSizeChanged</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetWindowBounds</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>kWindowContentRgn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetRect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>right</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>bottom</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetControlBounds</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDataBrowserTableViewNamedColumnWidth</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>,

<argument><expr><name>kTabsColumn</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>eventNotHandledErr</name></expr>;</return>

</block_content>}</block></function>

<cpp:empty>#import &lt;mach-o/dyld.h&gt;</cpp:empty>

<enum>enum <block>{ <decl><name>kMyDataBrowserAttributeListViewAlternatingRowColors</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>OSStatus</name></type>

<name>myDataBrowserChangeAttributes</name><parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>inDataBrowser</name></decl></parameter>,

<parameter><decl><type><name>OptionBits</name></type> <name>inAttributesToSet</name></decl></parameter>,

<parameter><decl><type><name>OptionBits</name></type> <name>inAttributesToClear</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>osVersion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>symbolName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NSSymbol</name></type> <name>symbol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>OSStatus</name></type> (<modifier>*</modifier><name>dataBrowserChangeAttributes</name>)<parameter_list>(<parameter><decl><type><name>ControlRef</name></type> <name>inDataBrowser</name></decl></parameter>,

<parameter><decl><type><name>OptionBits</name></type> <name>inAttributesToSet</name></decl></parameter>, <parameter><decl><type><name>OptionBits</name></type> <name>inAttributesToClear</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>Gestalt</name><argument_list>(<argument><expr><name>gestaltSystemVersion</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>osVersion</name> <operator>&lt;</operator> <literal type="number">0x1040</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>noErr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>symbolName</name> <operator>=</operator> <literal type="string">"_DataBrowserChangeAttributes"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NSIsSymbolNameDefined</name><argument_list>(<argument><expr><name>symbolName</name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>symbol</name> <operator>=</operator> <call><name>NSLookupAndBindSymbol</name><argument_list>(<argument><expr><name>symbolName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>noErr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dataBrowserChangeAttributes</name> <operator>=</operator> <call><name>NSAddressOfSymbol</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dataBrowserChangeAttributes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>noErr</name></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>dataBrowserChangeAttributes</name><argument_list>(<argument><expr><name>inDataBrowser</name></expr></argument>,

<argument><expr><name>inAttributesToSet</name></expr></argument>, <argument><expr><name>inAttributesToClear</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>initialise_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rect</name></type> <name>drawerRect</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DRAWER_SIZE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DataBrowserCallbacks</name></type> <name>dbCallbacks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name>focusEvent</name> <init>= <expr><block>{<expr><name>kEventClassControl</name></expr>, <expr><name>kEventControlSetFocusPart</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EventTypeSpec</name></type> <name>resizeEvent</name> <init>= <expr><block>{<expr><name>kEventClassWindow</name></expr>, <expr><name>kEventWindowBoundsChanged</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DataBrowserListViewColumnDesc</name></type> <name>colDesc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CreateNewWindow</name><argument_list>(<argument><expr><name>kDrawerWindowClass</name></expr></argument>,

<argument><expr><name>kWindowStandardHandlerAttribute</name>

<operator>|</operator> <name>kWindowCompositingAttribute</name>

<operator>|</operator> <name>kWindowResizableAttribute</name>

<operator>|</operator> <name>kWindowLiveResizeAttribute</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>drawerRect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetThemeWindowBackground</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>kThemeBrushDrawerBackground</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDrawerParent</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name><name>gui</name><operator>.</operator><name>VimWindow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDrawerOffsets</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>kWindowOffsetUnchanged</name></expr></argument>, <argument><expr><name>DRAWER_INSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateDataBrowserControl</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drawerRect</name></expr></argument>, <argument><expr><name>kDataBrowserListView</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dataBrowser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbCallbacks</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>kDataBrowserLatestCallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitDataBrowserCallbacks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbCallbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbCallbacks</name><operator>.</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>itemDataCallback</name></name> <operator>=</operator>

<call><name>NewDataBrowserItemDataUPP</name><argument_list>(<argument><expr><name>dbItemDataCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbCallbacks</name><operator>.</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>itemNotificationCallback</name></name> <operator>=</operator>

<call><name>NewDataBrowserItemNotificationUPP</name><argument_list>(<argument><expr><name>dbItemNotificationCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbCallbacks</name><operator>.</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>getContextualMenuCallback</name></name> <operator>=</operator>

<call><name>NewDataBrowserGetContextualMenuUPP</name><argument_list>(<argument><expr><name>dbGetContextualMenuCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dbCallbacks</name><operator>.</operator><name>u</name><operator>.</operator><name>v1</name><operator>.</operator><name>selectContextualMenuCallback</name></name> <operator>=</operator>

<call><name>NewDataBrowserSelectContextualMenuUPP</name><argument_list>(<argument><expr><name>dbSelectContextualMenuCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDataBrowserCallbacks</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbCallbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDataBrowserListViewHeaderBtnHeight</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetDataBrowserHasScrollBars</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetDataBrowserSelectionFlags</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>,

<argument><expr><name>kDataBrowserSelectOnlyOne</name> <operator>|</operator> <name>kDataBrowserNeverEmptySelectionSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDataBrowserTableViewHiliteStyle</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>,

<argument><expr><name>kDataBrowserTableViewFillHilite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>b</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetControlData</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>kControlEntireControl</name></expr></argument>,

<argument><expr><name>kControlDataBrowserIncludesFrameAndFocusTag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>myDataBrowserChangeAttributes</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>,

<argument><expr><name>kMyDataBrowserAttributeListViewAlternatingRowColors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InstallControlEventHandler</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>dbFocusCallback</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusEvent</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InstallWindowEventHandler</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>drawerCallback</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>resizeEvent</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>propertyDesc</name><operator>.</operator><name>propertyID</name></name> <operator>=</operator> <name>kTabsColumn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>propertyDesc</name><operator>.</operator><name>propertyType</name></name> <operator>=</operator> <name>kDataBrowserTextType</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>propertyDesc</name><operator>.</operator><name>propertyFlags</name></name> <operator>=</operator> <name>kDataBrowserDefaultPropertyFlags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>kDataBrowserListViewLatestHeaderDesc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>minimumWidth</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>maximumWidth</name></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>titleOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>titleString</name></name> <operator>=</operator> <call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"Tabs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>initialOrder</name></name> <operator>=</operator> <name>kDataBrowserOrderIncreasing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>btnFontStyle</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>colDesc</name><operator>.</operator><name>headerBtnDesc</name><operator>.</operator><name>btnContentInfo</name><operator>.</operator><name>contentType</name></name> <operator>=</operator> <name>kControlContentTextOnly</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddDataBrowserListViewColumn</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colDesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateNewMenu</name><argument_list>(<argument><expr><name>kTabContextMenuId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contextMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendMenuItemTextWithCFString</name><argument_list>(<argument><expr><name>contextMenu</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"Close Tab"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>TABLINE_MENU_CLOSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendMenuItemTextWithCFString</name><argument_list>(<argument><expr><name>contextMenu</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"New Tab"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>TABLINE_MENU_NEW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AppendMenuItemTextWithCFString</name><argument_list>(<argument><expr><name>contextMenu</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"Open Tab..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>TABLINE_MENU_OPEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_show_tabline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>showit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>showit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseDrawer</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OpenDrawer</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>, <argument><expr><name>kWindowEdgeRight</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>gui_mch_showing_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WindowDrawerState</name></type> <name>state</name> <init>= <expr><call><name>GetDrawerState</name><argument_list>(<argument><expr><name>drawer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>state</name> <operator>==</operator> <name>kWindowDrawerOpen</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>kWindowDrawerOpening</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_update_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numTabs</name> <init>= <expr><call><name>getTabCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curtabidx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tabLabels</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabLabelsSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>tabLabels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tabLabels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tabLabels</name> <operator>=</operator> <operator>(</operator><name>CFStringRef</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>numTabs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CFStringRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tabLabelsSize</name> <operator>=</operator> <name>numTabs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tp</name> <operator>=</operator> <name>first_tabpage</name></expr>;</init> <condition><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>nr</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curtabidx</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tabLabels</name><index>[<expr><name>nr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>getTabLabel</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RemoveDataBrowserItems</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>kDataBrowserNoItem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>kDataBrowserItemNoProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddDataBrowserItems</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>kDataBrowserNoItem</name></expr></argument>, <argument><expr><name>numTabs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>kDataBrowserItemNoProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DataBrowserItemID</name></type> <name>item</name> <init>= <expr><name>curtabidx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetDataBrowserSelectedItems</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>kDataBrowserItemsAssign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>gui_mch_set_curtab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DataBrowserItemID</name></type> <name>item</name> <init>= <expr><name>nr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetDataBrowserSelectedItems</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>kDataBrowserItemsAssign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RevealDataBrowserItem</name><argument_list>(<argument><expr><name>dataBrowser</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>kTabsColumn</name></expr></argument>,

<argument><expr><name>kDataBrowserRevealOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
