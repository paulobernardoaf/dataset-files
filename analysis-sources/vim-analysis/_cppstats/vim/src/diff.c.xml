<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vim.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff/xdiff.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_need_update</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_FILLER</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_IBLANK</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_ICASE</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_IWHITE</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_IWHITEALL</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_IWHITEEOL</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_HORIZONTAL</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_VERTICAL</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_HIDDEN_OFF</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_INTERNAL</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_CLOSE_OFF</name></cpp:macro> <cpp:value>0x400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_WHITE_DIFF</name></cpp:macro> <cpp:value>(DIFF_IWHITE | DIFF_IWHITEALL | DIFF_IWHITEEOL)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_flags</name> <init>= <expr><name>DIFF_INTERNAL</name> <operator>|</operator> <name>DIFF_FILLER</name> <operator>|</operator> <name>DIFF_CLOSE_OFF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>diff_algorithm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBUFLEN</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_a_works</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_bin_works</name> <init>= <expr><name>MAYBE</name></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>din_fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>din_mmfile</name></decl>;</decl_stmt> 

}</block></struct></type> <name>diffin_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dout_fname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>garray_T</name></type> <name>dout_ga</name></decl>;</decl_stmt> 

}</block></struct></type> <name>diffout_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>diffin_T</name></type> <name>dio_orig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>diffin_T</name></type> <name>dio_new</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>diffout_T</name></type> <name>dio_diff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>dio_internal</name></decl>;</decl_stmt> 

}</block></struct></type> <name>diffio_T</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_buf_idx</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_buf_idx_tp</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>diff_mark_adjust_tp</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>diff_check_unchanged</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_check_sanity</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_external_diff</name><parameter_list>(<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>diffio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_file</name><parameter_list>(<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>diffio</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_equal_entry</name><parameter_list>(<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_cmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>diff_fold_update</name><parameter_list>(<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>diff_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx_orig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_new</name></decl></parameter>, <parameter><decl><type><name>diffout_T</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>diff_copy_entry</name><parameter_list>(<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_orig</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_new</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>diff_T</name> <modifier>*</modifier></type><name>diff_alloc_new</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_diff_ed</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_orig</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_orig</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_new</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_new</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_diff_unified</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_orig</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_orig</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_new</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_new</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>xdiff_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><parameter_list>(<parameter><type><name>tp</name></type></parameter>, <parameter><type><name>dp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ((dp) = (tp)-&gt;tp_first_diff; (dp) != NULL; (dp) = (dp)-&gt;df_next)</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>diff_buf_delete</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>diff_buf_idx_tp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_buf_adjust</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>win</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_buf_add</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_buf_add</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E96: Cannot diff more than %d buffers"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DB_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_buf_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_buf_idx</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_buf_idx_tp</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_invalidate</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>diff_buf_idx_tp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_mark_adjust</name><parameter_list>(

<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>diff_buf_idx_tp</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_mark_adjust_tp</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>amount_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_mark_adjust_tp</name><parameter_list>(

<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dnext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inserted</name></decl>, <decl><type ref="prev"/><name>deleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_deleted</name> <init>= <expr><name>line1</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>check_unchanged</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_internal</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_update</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line2</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>inserted</name> <operator>=</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>amount_after</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>inserted</name> <operator>=</operator> <name>amount_after</name></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>inserted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted</name> <operator>=</operator> <operator>-</operator><name>amount_after</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>line2</name>

<operator>||</operator> <operator>(</operator><name>line2</name> <operator>==</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;</operator> <name>line1</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>dprev</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name>line1</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>diff_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dnext</name> <operator>=</operator> <call><name>diff_alloc_new</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>dprev</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dnext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dnext</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dnext</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>inserted</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dnext</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dnext</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>line1</name>

<operator>+</operator> <operator>(</operator><name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dnext</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>deleted</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>line1</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>deleted</name> <operator>+</operator> <name>inserted</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&gt;</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>amount_after</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name>amount_after</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>check_unchanged</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deleted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&gt;=</operator> <name>line1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <name>lnum_deleted</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;=</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <name>lnum_deleted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_deleted</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>deleted</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-=</operator> <name>line2</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>check_unchanged</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>line1</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-=</operator> <name>last</name> <operator>-</operator> <name>lnum_deleted</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>line2</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>deleted</name> <operator>-=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name>

<operator>-</operator> <name>lnum_deleted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum_deleted</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>line2</name> <operator>-</operator> <name>last</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>check_unchanged</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-=</operator> <name>deleted</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;=</operator> <name>line1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name>inserted</name></expr>;</expr_stmt>

<expr_stmt><expr><name>check_unchanged</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <name>inserted</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>check_unchanged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_check_unchanged</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name>

<operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dprev</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dnext</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>dnext</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>=</operator> <name>dnext</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dprev</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name>dnext</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_diff_redraw</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_need_scrollbind</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>diff_T</name> <modifier>*</modifier></type>

<name>diff_alloc_new</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dnew</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dnew</name> <operator>=</operator> <call><name>ALLOC_ONE</name><argument_list>(<argument><expr><name>diff_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dnew</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dnew</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>=</operator> <name>dnew</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dprev</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name>dnew</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dnew</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_check_unchanged</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_org</name></decl>, <decl><type ref="prev"/><name>off_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><name>FORWARD</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i_org</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_org</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i_org</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i_org</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i_org</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_check_sanity</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off_org</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<while>while <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i_org</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off_org</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i_org</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_org</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i_org</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i_org</name></expr>]</index></name> <operator>+</operator> <name>off_org</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_org</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i_new</name> <operator>=</operator> <name>i_org</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i_new</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i_new</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i_new</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off_new</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i_new</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off_new</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>off_new</name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i_new</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_cmp</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>, <argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i_new</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i_new</name></expr>]</index></name> <operator>+</operator> <name>off_new</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_new</name> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i_new</name> <operator>=</operator> <name>i_org</name></expr>;</init> <condition><expr><name>i_new</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i_new</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i_new</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>FORWARD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i_new</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i_new</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>BACKWARD</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_check_sanity</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal>

<operator>&gt;</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_redraw</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>dofold</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>need_diff_redraw</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dofold</name> <operator>&amp;&amp;</operator> <call><name>foldmethodIsDiff</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_diffin</name><parameter_list>(<parameter><decl><type><name>diffin_T</name> <modifier>*</modifier></type><name>din</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>din</name><operator>-&gt;</operator><name>din_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>din</name><operator>-&gt;</operator><name>din_mmfile</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>din</name><operator>-&gt;</operator><name>din_mmfile</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name><name>din</name><operator>-&gt;</operator><name>din_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clear_diffout</name><parameter_list>(<parameter><decl><type><name>diffout_T</name> <modifier>*</modifier></type><name>dout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dout</name><operator>-&gt;</operator><name>dout_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ga_clear_strings</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name><name>dout</name><operator>-&gt;</operator><name>dout_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_write_buffer</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>diffin_T</name> <modifier>*</modifier></type><name>din</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_diff_failed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not enough memory to use internal diff for buffer \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>din</name><operator>-&gt;</operator><name>din_mmfile</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>din</name><operator>-&gt;</operator><name>din_mmfile</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>lnum</name></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_ICASE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>cbuf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name>enc_utf8</name></expr> ?</condition><then> <expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>MB_TOLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_len</name> <operator>=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mb_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>orig_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>orig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>orig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>orig_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>orig_len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_write</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>diffin_T</name> <modifier>*</modifier></type><name>din</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_ff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_lockmarks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>din</name><operator>-&gt;</operator><name>din_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>diff_write_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>din</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>save_ff</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>FF_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_lockmarks</name> <operator>=</operator> <name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>buf_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>din</name><operator>-&gt;</operator><name>din_fname</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>lockmarks</name></name> <operator>=</operator> <name>save_lockmarks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_p_ff</name></name> <operator>=</operator> <name>save_ff</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_try_update</name><parameter_list>(

<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>dio</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx_orig</name></decl></parameter>,

<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_new</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dio</name><operator>-&gt;</operator><name>dio_internal</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ga_init2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_ga</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>dio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_internal</name></name> <operator>&amp;&amp;</operator> <call><name>check_external_diff</name><argument_list>(<argument><expr><name>dio</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eap</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>idx_new</name> <operator>=</operator> <name>idx_orig</name></expr>;</init> <condition><expr><name>idx_new</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx_new</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_new</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buf_valid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>buf_check_timestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_orig</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idx_new</name> <operator>=</operator> <name>idx_orig</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx_new</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx_new</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_new</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_mfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>diff_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_new</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_file</name><argument_list>(<argument><expr><name>dio</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_read</name><argument_list>(<argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>idx_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_diffin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_diffout</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>clear_diffin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diff_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_INTERNAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>*</operator><name>p_dex</name> <operator>==</operator> <name>NUL</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_internal_failed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-&gt;</operator><name>b_diff_failed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffupdate</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diffio_T</name></type> <name>diffio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>had_diffs</name> <init>= <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_busy</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>diff_need_update</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_clear</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>idx_orig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx_orig</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx_orig</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx_orig</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>idx_new</name> <operator>=</operator> <name>idx_orig</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx_new</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx_new</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx_new</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>diffio</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffio</name><operator>.</operator><name>dio_internal</name></name> <operator>=</operator> <call><name>diff_internal</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>diff_internal_failed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_try_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffio</name></expr></argument>, <argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diffio</name><operator>.</operator><name>dio_internal</name></name> <operator>&amp;&amp;</operator> <call><name>diff_internal_failed</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>diffio</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_try_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffio</name></expr></argument>, <argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>had_diffs</name> <operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_DIFFUPDATED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>check_external_diff</name><parameter_list>(<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>diffio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>io_error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>io_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><literal type="string">"line1\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>io_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>io_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><literal type="string">"line2\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>io_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_file</name><argument_list>(<argument><expr><name>diffio</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>io_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>linebuf</name><index>[<expr><name>LBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LBUFLEN</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><literal type="string">"1c1"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name><name>diffio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name><name>diffio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name><name>diffio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dex</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name>diff_a_works</name> <operator>==</operator> <name>MAYBE</name> <operator>&amp;&amp;</operator> <name>diff_bin_works</name> <operator>==</operator> <name>MAYBE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>diff_a_works</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_bin_works</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>&amp;&amp;</operator> <name>diff_a_works</name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <name>diff_bin_works</name> <operator>==</operator> <name>TRUE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>diff_bin_works</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>diff_a_works</name> <operator>!=</operator> <name>MAYBE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff_a_works</name> <operator>=</operator> <name>ok</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>io_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E810: Cannot read or write temp files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E97: Cannot create diffs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_a_works</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>diff_bin_works</name> <operator>=</operator> <name>MAYBE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_file_internal</name><parameter_list>(<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>diffio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>emit_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitcb_t</name></type> <name>emit_cb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emit_cfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>emit_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emit_cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>emit_cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>diff_algorithm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEEOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE_AT_EOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IBLANK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>param</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>XDF_IGNORE_BLANK_LINES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>emit_cfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emit_cb</name><operator>.</operator><name>priv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_diff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emit_cb</name><operator>.</operator><name>outf</name></name> <operator>=</operator> <name>xdiff_out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdl_diff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_mmfile</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>diffio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_mmfile</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>emit_cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>emit_cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E960: Problem creating the internal diff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_file</name><parameter_list>(<parameter><decl><type><name>diffio_T</name> <modifier>*</modifier></type><name>dio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_orig</name> <init>= <expr><name><name>dio</name><operator>-&gt;</operator><name>dio_orig</name><operator>.</operator><name>din_fname</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_new</name> <init>= <expr><name><name>dio</name><operator>-&gt;</operator><name>dio_new</name><operator>.</operator><name>din_fname</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_diff</name> <init>= <expr><name><name>dio</name><operator>-&gt;</operator><name>dio_diff</name><operator>.</operator><name>dout_fname</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_dex</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>eval_diff</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>, <argument><expr><name>tmp_new</name></expr></argument>, <argument><expr><name>tmp_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><name><name>dio</name><operator>-&gt;</operator><name>dio_internal</name></name></expr>)</condition>

<block>{<block_content>

<return>return <expr><call><name>diff_file_internal</name><argument_list>(<argument><expr><name>dio</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmp_diff</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p_srr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"DIFF_OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vim_setenv</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"DIFF_OPTIONS"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"diff %s%s%s%s%s%s%s%s %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>diff_a_works</name> <operator>==</operator> <name>FALSE</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-a "</literal></expr></else></ternary></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>MSWIN</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>

<argument><expr><ternary><condition><expr><name>diff_bin_works</name> <operator>==</operator> <name>TRUE</name></expr> ?</condition><then> <expr><literal type="string">"--binary "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><literal type="string">""</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-b "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEALL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-w "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEEOL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-Z "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IBLANK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-B "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_ICASE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"-i "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>tmp_orig</name></expr></argument>, <argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>append_redir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>p_srr</name></expr></argument>, <argument><expr><name>tmp_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_shell</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>SHELL_FILTER</name><operator>|</operator><name>SHELL_SILENT</name><operator>|</operator><name>SHELL_DOOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffpatch</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_orig</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmp_new</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>dirbuf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fullname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>browseFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>browse_flag</name> <init>= <expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>stat_T</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>esc_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>browseFile</name> <operator>=</operator> <call><name>do_browse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Patch file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>_</name><argument_list>(<argument><expr><name>BROWSE_FILTER_ALL_FILES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>browseFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>browseFile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>tmp_orig</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_new</name> <operator>=</operator> <call><name>vim_tempname</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_orig</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tmp_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>buf_write</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>tmp_orig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>FullName_save</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>esc_name</name> <operator>=</operator> <call><name>vim_strsave_shellescape</name><argument_list>(

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>fullname</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>esc_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>esc_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mch_dirname</name><argument_list>(<argument><expr><name>dirbuf</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OK</name> <operator>||</operator> <call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dirbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEMPDIRNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>vim_tempdir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>vim_tempdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vim_ignored</name> <operator>=</operator> <call><name>mch_chdir</name><argument_list>(<argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pex</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>eval_patch</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<argument><expr><ternary><condition><expr><name>fullname</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>fullname</name></expr> </then><else>:

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"patch -o %s %s &lt; %s"</literal></expr></argument>,

<argument><expr><name>tmp_new</name></expr></argument>, <argument><expr><name>tmp_orig</name></expr></argument>, <argument><expr><name>esc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>call_shell</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SHELL_FILTER</name> <operator>|</operator> <name>SHELL_COOKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unblock_autocmds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>dirbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mch_chdir</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dirbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_prev_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shorten_fnames</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".orig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".rej"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mch_stat</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E816: Cannot read patch output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newname</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><literal type="string">".new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_VERTICAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>WSP_VERT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_split</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>tmp_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_exedit</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>newname</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_file</name><argument_list>(<argument><expr><name>eap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>au_has_group</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"filetypedetect"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">":doau filetypedetect BufRead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>theend</name>:</label>

<if_stmt><if>if <condition>(<expr><name>tmp_orig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmp_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp_new</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mch_remove</name><argument_list>(<argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>tmp_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>esc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_BROWSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>browseFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>browse</name></name> <operator>=</operator> <name>browse_flag</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffsplit</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bufref_T</name></type> <name>old_curbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>set_bufref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_GUI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>need_mouse_correct</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_fraction</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmdmod</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_split</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_VERTICAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>WSP_VERT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_split</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_exedit</name><argument_list>(<argument><expr><name>eap</name></expr></argument>, <argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curwin</name> <operator>!=</operator> <name>old_curwin</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>win_valid</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>old_curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bufref_valid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_curbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <call><name>diff_get_corresponding_line</name><argument_list>(

<argument><expr><name><name>old_curbuf</name><operator>.</operator><name>br_buf</name></name></expr></argument>, <argument><expr><name><name>old_curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>scroll_to_fraction</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffthis</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier><name>eap</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_win_options</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_diff_option</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>curbuf_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"diff"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>curbuf_lock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_win_options</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>addbuf</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>newFoldLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scb_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_crb_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff_saved</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm_save</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_string_option_direct_in_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"fdm"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"diff"</literal></expr></argument>,

<argument><expr><name>OPT_LOCAL</name><operator>|</operator><name>OPT_FREE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl_save</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>=</operator> <name>diff_foldcolumn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"set sbo+=hor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff_saved</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_diff_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_buf_add</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffoff</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diffwin</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr> </then><else>: <expr><name>wp</name> <operator>==</operator> <name>curwin</name></expr></else></ternary></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>set_diff_option</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff_saved</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_scb</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_scb_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_crb_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free_string_option</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(

<argument><expr><ternary><condition><expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm_save</name></name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdm_save</name></name></expr> </then><else>: <expr><operator>(</operator><name>char_u</name><operator>*</operator><operator>)</operator><literal type="string">"manual"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>==</operator> <name>diff_foldcolumn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdc_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fdl_save</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen</name></name> <operator>=</operator> <ternary><condition><expr><call><name>foldmethodIsManual</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FALSE</name></expr>

</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fen_save</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>foldUpdateAll</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_window_setting_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_buf_adjust</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diffwin</name> <operator>|=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>forceit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_buf_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diffwin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>diff_need_update</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_update</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_clear</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diffwin</name> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_sbo</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_cmdline_cmd</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"set sbo-=hor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_read</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>idx_orig</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>idx_new</name></decl></parameter>, 

<parameter><decl><type><name>diffout_T</name> <modifier>*</modifier></type><name>dout</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>linebuf</name><index>[<expr><name>LBUFLEN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum_orig</name></decl>, <decl><type ref="prev"/><name>lnum_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>count_orig</name></decl>, <decl><type ref="prev"/><name>count_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>notset</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<enum>enum <block>{

<decl><name>DIFF_ED</name></decl>,

<decl><name>DIFF_UNIFIED</name></decl>,

<decl><name>DIFF_NONE</name></decl>

}</block> <decl><name>diffstyle</name> <init>= <expr><name>DIFF_NONE</name></expr></init></decl>;</enum>

<if_stmt><if>if <condition>(<expr><name><name>dout</name><operator>-&gt;</operator><name>dout_fname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>diffstyle</name> <operator>=</operator> <name>DIFF_UNIFIED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mch_fopen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dout</name><operator>-&gt;</operator><name>dout_fname</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E98: Cannot read diff output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>line_idx</name> <operator>&gt;=</operator> <name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name><operator>.</operator><name>ga_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>line_idx</name><operator>++</operator></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vim_fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LBUFLEN</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>linebuf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diffstyle</name> <operator>==</operator> <name>DIFF_NONE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diffstyle</name> <operator>=</operator> <name>DIFF_ED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diffstyle</name> <operator>=</operator> <name>DIFF_UNIFIED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LBUFLEN</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"+++ "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LBUFLEN</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diffstyle</name> <operator>=</operator> <name>DIFF_UNIFIED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diffstyle</name> <operator>==</operator> <name>DIFF_ED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>parse_diff_ed</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_orig</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>lnum_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_new</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>diffstyle</name> <operator>==</operator> <name>DIFF_UNIFIED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>parse_diff_unified</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lnum_orig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_orig</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>lnum_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count_new</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E959: Invalid diff format."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>lnum_orig</name> <operator>&gt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>notset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_copy_entry</name><argument_list>(<argument><expr><name>dprev</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>idx_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>notset</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>lnum_orig</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name>

<operator>&amp;&amp;</operator> <name>lnum_orig</name> <operator>+</operator> <name>count_orig</name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>dpl</name> <operator>=</operator> <name>dp</name></expr>;</init> <condition><expr><name><name>dpl</name><operator>-&gt;</operator><name>df_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>dpl</name> <operator>=</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>lnum_orig</name> <operator>+</operator> <name>count_orig</name> <operator>&lt;</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>-</operator> <name>lnum_orig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx_orig</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx_new</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>lnum_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>count_new</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>notset</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>lnum_new</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>count_new</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>+=</operator> <name>count_new</name> <operator>-</operator> <name>count_orig</name>

<operator>+</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name>

<operator>-</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>lnum_orig</name> <operator>+</operator> <name>count_orig</name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>dpl</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>notset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>+=</operator> <operator>-</operator><name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx_orig</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx_new</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name>

<operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>dn</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name><name>dpl</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dn</name> <operator>!=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dpl</name> <operator>=</operator> <name><name>dn</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dn</name> <operator>=</operator> <name>dpl</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>diff_alloc_new</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>dprev</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>=</operator> <name>lnum_orig</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>=</operator> <name>count_orig</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>lnum_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name>count_new</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx_orig</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>idx_new</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_copy_entry</name><argument_list>(<argument><expr><name>dprev</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>notset</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<while>while <condition>(<expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>notset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_copy_entry</name><argument_list>(<argument><expr><name>dprev</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>idx_orig</name></expr></argument>, <argument><expr><name>idx_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>notset</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_copy_entry</name><parameter_list>(

<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl></parameter>,

<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx_orig</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx_new</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>dprev</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>+</operator> <name><name>dprev</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_orig</name></expr>]</index></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_new</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_orig</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_clear</name><parameter_list>(<parameter><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>next_p</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>next_p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diff_check</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>diff_equal_entry</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zero</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_FILLER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxcount</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>maxcount</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_equal_entry</name><parameter_list>(<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>!=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_check_sanity</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx1</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx1</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>diff_cmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx2</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_equal_char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>enc_utf8</name>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_ICASE</name><operator>)</operator>

<operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>!=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p1</name> <operator>!=</operator> <operator>*</operator><name>p2</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_ICASE</name><operator>)</operator>

<operator>||</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>diff_cmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IBLANK</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_ICASE</name> <operator>|</operator> <name>ALL_WHITE_DIFF</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_ICASE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>ALL_WHITE_DIFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MB_STRICMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEALL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>diff_equal_char</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diff_check_fill</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_FILLER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>diff_set_topline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>fromwin</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>towin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>frombuf</name> <init>= <expr><name><name>fromwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>fromwin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fromidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>toidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fromidx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>frombuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromidx</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>towin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>-</operator> <operator>(</operator><name><name>frombuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>toidx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name><name>towin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toidx</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>toidx</name></expr>]</index></name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>max_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <name>max_count</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_count</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>fromwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_count</name> <operator>-</operator> <name><name>fromwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>toidx</name></expr>]</index></name>

<operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>fromwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>toidx</name></expr>]</index></name>

<operator>+</operator> <name>max_count</name> <operator>-</operator> <name><name>fromwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>toidx</name></expr>]</index></name>

<operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>toidx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>toidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_FILLER</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>fromidx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>fromwin</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>fromidx</name></expr>]</index></name>

<operator>+</operator> <name>max_count</name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&gt;</operator> <name><name>towin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <name><name>towin</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>invalidate_botline_win</name><argument_list>(<argument><expr><name>towin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_line_abv_curs_win</name><argument_list>(<argument><expr><name>towin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_topfill</name><argument_list>(<argument><expr><name>towin</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>towin</name></expr></argument>, <argument><expr><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>towin</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diffopt_changed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_context_new</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_flags_new</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_foldcolumn_new</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>diff_algorithm_new</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>diff_indent_heuristic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_dip</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"filler"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_FILLER</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"context:"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_context_new</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iblank"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_IBLANK</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"icase"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_ICASE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iwhiteall"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_IWHITEALL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iwhiteeol"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_IWHITEEOL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iwhite"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_IWHITE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"horizontal"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_HORIZONTAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_VERTICAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"foldcolumn:"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VIM_ISDIGIT</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_foldcolumn_new</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"hiddenoff"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_HIDDEN_OFF</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"closeoff"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_CLOSE_OFF</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"indent-heuristic"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_indent_heuristic</name> <operator>=</operator> <name>XDF_INDENT_HEURISTIC</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"internal"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_flags_new</name> <operator>|=</operator> <name>DIFF_INTERNAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"algorithm:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"myers"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_algorithm_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_algorithm_new</name> <operator>=</operator> <name>XDF_NEED_MINIMAL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"patience"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_algorithm_new</name> <operator>=</operator> <name>XDF_PATIENCE_DIFF</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"histogram"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_algorithm_new</name> <operator>=</operator> <name>XDF_HISTOGRAM_DIFF</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>diff_algorithm_new</name> <operator>|=</operator> <name>diff_indent_heuristic</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff_flags_new</name> <operator>&amp;</operator> <name>DIFF_HORIZONTAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>diff_flags_new</name> <operator>&amp;</operator> <name>DIFF_VERTICAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_flags</name> <operator>!=</operator> <name>diff_flags_new</name> <operator>||</operator> <name>diff_algorithm</name> <operator>!=</operator> <name>diff_algorithm_new</name></expr>)</condition><block type="pseudo"><block_content>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff_flags</name> <operator>=</operator> <name>diff_flags_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_context</name> <operator>=</operator> <ternary><condition><expr><name>diff_context_new</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>diff_context_new</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_foldcolumn</name> <operator>=</operator> <name>diff_foldcolumn_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_algorithm</name> <operator>=</operator> <name>diff_algorithm_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_scrollbind</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diffopt_horizontal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_HORIZONTAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diffopt_hiddenoff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_HIDDEN_OFF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diffopt_closeoff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_CLOSE_OFF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diff_find_change</name><parameter_list>(

<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>startp</name></decl></parameter>, 

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>endp</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_org</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>si_org</name></decl>, <decl><type ref="prev"/><name>si_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ei_org</name></decl>, <decl><type ref="prev"/><name>ei_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_org</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_org</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>diff_check_sanity</name><argument_list>(<argument><expr><name>curtab</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>lnum</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>idx</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line_new</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si_org</name> <operator>=</operator> <name>si_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>line_org</name><index>[<expr><name>si_org</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_org</name><index>[<expr><name>si_org</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_new</name><index>[<expr><name>si_new</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEALL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_org</name><index>[<expr><name>si_org</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_new</name><index>[<expr><name>si_new</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>si_org</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>line_org</name> <operator>+</operator> <name>si_org</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_org</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>si_new</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>line_new</name> <operator>+</operator> <name>si_new</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line_new</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>diff_equal_char</name><argument_list>(<argument><expr><name>line_org</name> <operator>+</operator> <name>si_org</name></expr></argument>, <argument><expr><name>line_new</name> <operator>+</operator> <name>si_new</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>si_org</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>si_new</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>si_org</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line_org</name></expr></argument>, <argument><expr><name>line_org</name> <operator>+</operator> <name>si_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si_new</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line_new</name></expr></argument>, <argument><expr><name>line_new</name> <operator>+</operator> <name>si_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>startp</name> <operator>&gt;</operator> <name>si_org</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>startp</name> <operator>=</operator> <name>si_org</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line_org</name><index>[<expr><name>si_org</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name><name>line_new</name><index>[<expr><name>si_new</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ei_org</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ei_new</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ei_org</name> <operator>&gt;=</operator> <operator>*</operator><name>startp</name> <operator>&amp;&amp;</operator> <name>ei_new</name> <operator>&gt;=</operator> <name>si_new</name>

<operator>&amp;&amp;</operator> <name>ei_org</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ei_new</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITE</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_org</name><index>[<expr><name>ei_org</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_new</name><index>[<expr><name>ei_new</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>diff_flags</name> <operator>&amp;</operator> <name>DIFF_IWHITEALL</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_org</name><index>[<expr><name>ei_org</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_new</name><index>[<expr><name>ei_new</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>ei_org</name> <operator>&gt;=</operator> <operator>*</operator><name>startp</name>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_org</name><index>[<expr><name>ei_org</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>ei_org</name></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>ei_new</name> <operator>&gt;=</operator> <name>si_new</name>

<operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>line_new</name><index>[<expr><name>ei_new</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>ei_new</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>line_org</name> <operator>+</operator> <name>ei_org</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>line_new</name> <operator>+</operator> <name>ei_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line_org</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>-=</operator> <call>(<modifier>*</modifier><name>mb_head_off</name>)<argument_list>(<argument><expr><name>line_new</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>diff_equal_char</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ei_org</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ei_new</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>&lt;</operator> <name>ei_org</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>ei_org</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>line_org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>added</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>

<name>diff_infold</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>other</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>other</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <name>diff_context</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>diff_context</name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>nv_diffgetput</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>put</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>exarg_T</name></type> <name>ea</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_JOB_CHANNEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>bt_prompt</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vim_beep</name><argument_list>(<argument><expr><name>BO_OPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>put</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_diffput</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>cmdidx</name></name> <operator>=</operator> <name>CMD_diffget</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>addr_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>line1</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ea</name><operator>.</operator><name>line2</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ex_diffgetput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ex_diffgetput</name><parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dprev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dfree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_from</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>aco_save_T</name></type> <name>aco</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_skip</name></decl>, <decl><type ref="prev"/><name>end_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_not_ma</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx_cur</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx_cur</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E99: Current buffer is not in diff mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>idx_other</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx_other</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx_other</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_other</name></expr>]</index></name> <operator>!=</operator> <name>curbuf</name>

<operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_other</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_diffput</name>

<operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_other</name></expr>]</index></name><operator>-&gt;</operator><name>b_p_ma</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_not_ma</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx_other</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>found_not_ma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E793: No other buffer in diff mode is modifiable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E100: No other buffer in diff mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx_other</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>curbuf</name>

<operator>&amp;&amp;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_diffput</name> <operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_p_ma</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E101: More than two buffers in diff mode, don't know which one to use"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>&amp;&amp;</operator> <call><name>VIM_ISWHITE</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>vim_isdigit</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name> <operator>+</operator> <name>i</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>buflist_findpat</name><argument_list>(<argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buflist_findnr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E102: Can't find buffer \"%s\""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>curbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>idx_other</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx_other</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>semsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E103: Buffer \"%s\" is not in diff mode"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>diff_busy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_diffget</name>

<operator>&amp;&amp;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>&amp;&amp;</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>eap</name><operator>-&gt;</operator><name>line1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>==</operator> <name>CMD_diffget</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>idx_from</name> <operator>=</operator> <name>idx_other</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx_to</name> <operator>=</operator> <name>idx_cur</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>idx_from</name> <operator>=</operator> <name>idx_cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx_to</name> <operator>=</operator> <name>idx_other</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aucmd_prepbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>, <argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_other</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>change_warning</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>idx_to</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>emsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E787: Buffer changed unexpectedly"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>theend</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr>;</init> <condition><expr><name>dp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>dfree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_to</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_to</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>&gt;</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <name>off</name>

<operator>&amp;&amp;</operator> <call><name>u_save</name><argument_list>(<argument><expr><name>lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FAIL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>end_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>addr_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>start_skip</name> <operator>=</operator> <name><name>eap</name><operator>-&gt;</operator><name>line1</name></name> <operator>+</operator> <name>off</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_cur</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_skip</name> <operator>&gt;</operator> <name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>start_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>start_skip</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>start_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>end_skip</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal>

<operator>-</operator> <operator>(</operator><name><name>eap</name><operator>-&gt;</operator><name>line2</name></name> <operator>+</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx_cur</name> <operator>==</operator> <name>idx_from</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_cur</name></expr>]</index></name> <operator>-</operator> <name>start_skip</name> <operator>-</operator> <name>end_skip</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>end_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_skip</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_from</name></expr>]</index></name> <operator>-</operator> <name>start_skip</name> <operator>-</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_skip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>end_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_empty</name> <operator>=</operator> <call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>buf_empty</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>added</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_from</name></expr>]</index></name> <operator>-</operator> <name>start_skip</name> <operator>-</operator> <name>end_skip</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>nr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx_from</name></expr>]</index></name> <operator>+</operator> <name>start_skip</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_from</name></expr>]</index></name><operator>-&gt;</operator><name><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>idx_from</name></expr>]</index></name></expr></argument>,

<argument><expr><name>nr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>added</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_empty</name> <operator>&amp;&amp;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>buf_empty</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>new_count</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_to</name></expr>]</index></name> <operator>+</operator> <name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_to</name></expr>]</index></name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_skip</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>end_skip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>idx_from</name>

<operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>idx_to</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>diff_equal_entry</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>idx_from</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dfree</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dprev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dprev</name><operator>-&gt;</operator><name>df_next</name></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>added</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mark_adjust</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>MAXLNUM</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>lnum</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;=</operator> <name>lnum</name> <operator>+</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>added</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>changed_lines</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dfree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>diff_fold_update</name><argument_list>(<argument><expr><name>dfree</name></expr></argument>, <argument><expr><name>idx_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>vim_free</name><argument_list>(<argument><expr><name>dfree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx_to</name></expr>]</index></name> <operator>=</operator> <name>new_count</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idx_cur</name> <operator>==</operator> <name>idx_to</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dfree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dprev</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>eap</name><operator>-&gt;</operator><name>cmdidx</name></name> <operator>!=</operator> <name>CMD_diffget</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aucmd_restbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>

<expr_stmt><expr><name>diff_busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_need_update</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>check_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_need_update</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff_need_update</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_DIFFUPDATED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_FOLDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>diff_fold_update</name><parameter_list>(<parameter><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_WINDOWS</name><argument_list>(<argument>wp</argument>)</argument_list></macro>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DB_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diffbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>skip_idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>foldUpdate</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>diff_mode_buf</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<macro><name>FOR_ALL_TABPAGES</name><argument_list>(<argument>tp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>diff_buf_idx_tp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>diff_move_to</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DB_COUNT</name> <operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <name>BACKWARD</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name></expr>;</init> <condition>;</condition> <incr><expr><name>dp</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dir</name> <operator>==</operator> <name>FORWARD</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>dir</name> <operator>==</operator> <name>BACKWARD</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_next</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_next</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setpcmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>linenr_T</name></type>

<name>diff_get_corresponding_line_int</name><parameter_list>(

<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name></type> <name>lnum1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>baseline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx1</name> <operator>==</operator> <name>DB_COUNT</name> <operator>||</operator> <name>idx2</name> <operator>==</operator> <name>DB_COUNT</name> <operator>||</operator> <name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>lnum1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_first_diff</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>lnum1</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>&gt;</operator> <name>lnum1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>lnum1</name> <operator>-</operator> <name>baseline</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>lnum1</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>baseline</name> <operator>=</operator> <name>lnum1</name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>baseline</name> <operator>&gt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>baseline</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx2</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>+</operator> <name>baseline</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>==</operator> <name>lnum1</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>)</operator>

<operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>baseline</name> <operator>=</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx1</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx1</name></expr>]</index></name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx2</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><name>lnum1</name> <operator>-</operator> <name>baseline</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type>

<name>diff_get_corresponding_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><call><name>diff_get_corresponding_line_int</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>lnum1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>lnum</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>linenr_T</name></type>

<name>diff_lnum_win</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>diff_T</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curtab</name><operator>-&gt;</operator><name>tp_diff_invalid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ex_diffupdate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<macro><name>FOR_ALL_DIFFBLOCKS_IN_TAB</name><argument_list>(<argument>curtab</argument>, <argument>dp</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name>

<operator>-</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>diff_buf_idx</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>DB_COUNT</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <operator>(</operator><name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_lnum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><operator>-&gt;</operator><name>df_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>parse_diff_ed</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_orig</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_orig</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_new</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_new</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>l1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>difftype</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>difftype</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l1</name> <operator>&lt;</operator> <name>f1</name> <operator>||</operator> <name>l2</name> <operator>&lt;</operator> <name>f2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>difftype</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lnum_orig</name> <operator>=</operator> <name>f1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_orig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lnum_orig</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_orig</name> <operator>=</operator> <name>l1</name> <operator>-</operator> <name>f1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>difftype</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lnum_new</name> <operator>=</operator> <name>f2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_new</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lnum_new</name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_new</name> <operator>=</operator> <name>l2</name> <operator>-</operator> <name>f2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>parse_diff_unified</name><parameter_list>(

<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_orig</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_orig</name></decl></parameter>,

<parameter><decl><type><name>linenr_T</name> <modifier>*</modifier></type><name>lnum_new</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count_new</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>oldline</name></decl>, <decl><type ref="prev"/><name>oldcount</name></decl>, <decl><type ref="prev"/><name>newline</name></decl>, <decl><type ref="prev"/><name>newcount</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>oldline</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldcount</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>oldcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newcount</name> <operator>=</operator> <call><name>getdigits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>newcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>oldcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oldline</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newline</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newline</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>lnum_orig</name> <operator>=</operator> <name>oldline</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_orig</name> <operator>=</operator> <name>oldcount</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lnum_new</name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>count_new</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>

<return>return <expr><name>OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>xdiff_out</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>mb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>diffout_T</name> <modifier>*</modifier></type><name>dout</name> <init>= <expr><operator>(</operator><name>diffout_T</name> <operator>*</operator><operator>)</operator><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbuf</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>dout</name><operator>-&gt;</operator><name>dout_ga</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_EVAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type>

<name>f_diff_filler</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>f_diff_hlID</name><parameter_list>(<parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>argvars</name></type> <name>UNUSED</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><name>rettv</name></type> <name>UNUSED</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FEAT_DIFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><call><name>tv_get_lnum</name><argument_list>(<argument><expr><name>argvars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>prev_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>varnumber_T</name></type> <name>changedtick</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>change_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>change_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>hlf_T</name></type> <name>hlID</name> <init>= <expr><operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filler_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <name>prev_lnum</name>

<operator>||</operator> <name>changedtick</name> <operator>!=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call>

<operator>||</operator> <name>fnum</name> <operator>!=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>change_start</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>change_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_find_change</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changedtick</name> <operator>=</operator> <call><name>CHANGEDTICK</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fnum</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_fnum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hlID</name> <operator>==</operator> <name>HLF_CHD</name> <operator>||</operator> <name>hlID</name> <operator>==</operator> <name>HLF_TXD</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>tv_get_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argvars</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>change_start</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;=</operator> <name>change_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <name>HLF_TXD</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hlID</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <ternary><condition><expr><name>hlID</name> <operator>==</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>hlID</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
