<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\xxd\xxd.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_DEPRECATE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_NONSTDC_NO_DEPRECATE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CYGWIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYGWIN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAXC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;file.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CYGWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MWERKS__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BEBOX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unix.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_FIXED_PROTOTYPES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_FIXED_PROTOTYPES__</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_FIXED_PROTOTYPES__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>fprintf</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>fputs</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>_flsbuf</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>,</operator> <name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>_filbuf</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>fflush</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>fclose</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>fseek</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>rewind</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>perror</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>long</name> <name>int</name></type> <name>strtol</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>long</name> <name>int</name></type> <name>ftell</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[]</index></name> <init>= <expr><literal type="string">"xxd V1.10 27oct98 by Juergen Weigert"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>osver</name><index>[]</index></name> <init>= <expr><literal type="string">" (Win32)"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name></type> <name><name>osver</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_READ</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? "rb" : "rt")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_WRITE</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? "wb" : "wt")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_CREAT</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? (O_CREAT|O_BINARY) : O_CREAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_ASSIGN</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setmode(fileno(fp), (yes) ? O_BINARY : O_TEXT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CYGWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_READ</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? "rb" : "rt")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_WRITE</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? "wb" : "w")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_CREAT</name><parameter_list>(<parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? (O_CREAT|O_BINARY) : O_CREAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_ASSIGN</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>yes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yes) ? (void) setmode(fileno(fp), O_BINARY) : (void) (fp))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_READ</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"r"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_WRITE</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"w"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_CREAT</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>O_CREAT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_ASSIGN</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>']'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_SEP</name></cpp:macro> <cpp:value>'.'</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_READ</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"r"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_WRITE</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"w"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_CREAT</name><parameter_list>(<parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>O_CREAT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_ASSIGN</name><parameter_list>(<parameter><type><name>fp</name></type></parameter>, <parameter><type><name>dummy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_SEP</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MWERKS__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>, <parameter><type><name>umask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>open(name, mode)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>, <parameter><type><name>umask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>open(name, mode, umask)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncmp(s1, s2, (size_t)l)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strncmp(s1, s2, l)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>exit_with_usage</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>die</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>huntype</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>,</operator> <name>FILE</name> <operator>*</operator><operator>,</operator> <name>FILE</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>int</name><operator>,</operator> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>xxdline</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_SEEK</name></cpp:macro></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLEN</name></cpp:macro> <cpp:value>((2*(int)sizeof(unsigned long)) + 4 + (9*COLS-1) + COLS + 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>hexxa</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef0123456789ABCDEF"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hexx</name> <init>= <expr><name>hexxa</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_POSTSCRIPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_CINCLUDE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_LITTLEENDIAN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONDITIONAL_CAPITALIZE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(capitalize ? toupper((int)c) : c)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>exit_with_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage:\n %s [options] [infile [outfile]]\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" or\n %s -r [-s [-]offset] [-c cols] [-ps] [infile [outfile]]\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -a toggle autoskip: A single '*' replaces nul-lines. Default off.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -b binary digit dump (incompatible with -ps,-i,-r). Default hex.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -C capitalize variable names in C include file style (-i).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -c cols format &lt;cols&gt; octets per line. Default 16 (-i: 12, -ps: 30).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -E show characters in EBCDIC. Default ASCII.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -e little-endian dump (incompatible with -ps,-i,-r).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -g number of octets per group in normal output. Default 2 (-e: 4).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -h print this summary.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -i output in C include file style.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -l len stop after &lt;len&gt; octets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -o off add &lt;off&gt; to the displayed file position.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -ps output in postscript plain hexdump style.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -r reverse operation: convert (or patch) hexdump into binary.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -r -s off revert with &lt;off&gt; added to file positions found in hexdump.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -s %sseek start at &lt;seek&gt; bytes abs. %sinfile offset.\n"</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">"[+][-]"</literal></expr></argument>, <argument><expr><literal type="string">"(or +: rel.) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><literal type="string">""</literal></expr><operator>,</operator> <expr><literal type="string">""</literal></expr></expr_stmt>)</block_content></block>;</function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -u use upper case hex letters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" -v show version: \"%s%s\".\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>osver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}

static <function><type><name>void</name></type>

<name>die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>huntype</name><parameter_list>(

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fpi</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fpo</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fperr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hextype</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>base_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>ign_garb</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><name>cols</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>have_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>want_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_POSTSCRIPT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n3</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ign_garb</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ign_garb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>cols</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hextype</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>want_off</name> <operator>=</operator> <operator>(</operator><name>want_off</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>n1</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base_off</name> <operator>+</operator> <name>want_off</name> <operator>!=</operator> <name>have_off</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><name>base_off</name> <operator>+</operator> <name>want_off</name> <operator>-</operator> <name>have_off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>have_off</name> <operator>=</operator> <name>base_off</name> <operator>+</operator> <name>want_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>base_off</name> <operator>+</operator> <name>want_off</name> <operator>&lt;</operator> <name>have_off</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fperr</name></expr></argument>, <argument><expr><literal type="string">"%s: sorry, cannot seek backwards.\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">5</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>have_off</name> <operator>&lt;</operator> <name>base_off</name> <operator>+</operator> <name>want_off</name></expr>;</condition> <incr><expr><name>have_off</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><operator>(</operator><name>n2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>n1</name></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>have_off</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>want_off</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>p</name> <operator>&gt;=</operator> <name>cols</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>hextype</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>want_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ign_garb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>n1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n3</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hextype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>want_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ign_garb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>xxdline</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>z</name><index>[<expr><name>LLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>zero_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <name>zero_seen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nz</name> <operator>||</operator> <operator>!</operator><name>zero_seen</name><operator>++</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nz</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zero_seen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zero_seen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>zero_seen</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"*\n"</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nz</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>zero_seen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nz</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zero_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>etoa64</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0040</literal></expr>,<expr><literal type="number">0240</literal></expr>,<expr><literal type="number">0241</literal></expr>,<expr><literal type="number">0242</literal></expr>,<expr><literal type="number">0243</literal></expr>,<expr><literal type="number">0244</literal></expr>,<expr><literal type="number">0245</literal></expr>,<expr><literal type="number">0246</literal></expr>,

<expr><literal type="number">0247</literal></expr>,<expr><literal type="number">0250</literal></expr>,<expr><literal type="number">0325</literal></expr>,<expr><literal type="number">0056</literal></expr>,<expr><literal type="number">0074</literal></expr>,<expr><literal type="number">0050</literal></expr>,<expr><literal type="number">0053</literal></expr>,<expr><literal type="number">0174</literal></expr>,

<expr><literal type="number">0046</literal></expr>,<expr><literal type="number">0251</literal></expr>,<expr><literal type="number">0252</literal></expr>,<expr><literal type="number">0253</literal></expr>,<expr><literal type="number">0254</literal></expr>,<expr><literal type="number">0255</literal></expr>,<expr><literal type="number">0256</literal></expr>,<expr><literal type="number">0257</literal></expr>,

<expr><literal type="number">0260</literal></expr>,<expr><literal type="number">0261</literal></expr>,<expr><literal type="number">0041</literal></expr>,<expr><literal type="number">0044</literal></expr>,<expr><literal type="number">0052</literal></expr>,<expr><literal type="number">0051</literal></expr>,<expr><literal type="number">0073</literal></expr>,<expr><literal type="number">0176</literal></expr>,

<expr><literal type="number">0055</literal></expr>,<expr><literal type="number">0057</literal></expr>,<expr><literal type="number">0262</literal></expr>,<expr><literal type="number">0263</literal></expr>,<expr><literal type="number">0264</literal></expr>,<expr><literal type="number">0265</literal></expr>,<expr><literal type="number">0266</literal></expr>,<expr><literal type="number">0267</literal></expr>,

<expr><literal type="number">0270</literal></expr>,<expr><literal type="number">0271</literal></expr>,<expr><literal type="number">0313</literal></expr>,<expr><literal type="number">0054</literal></expr>,<expr><literal type="number">0045</literal></expr>,<expr><literal type="number">0137</literal></expr>,<expr><literal type="number">0076</literal></expr>,<expr><literal type="number">0077</literal></expr>,

<expr><literal type="number">0272</literal></expr>,<expr><literal type="number">0273</literal></expr>,<expr><literal type="number">0274</literal></expr>,<expr><literal type="number">0275</literal></expr>,<expr><literal type="number">0276</literal></expr>,<expr><literal type="number">0277</literal></expr>,<expr><literal type="number">0300</literal></expr>,<expr><literal type="number">0301</literal></expr>,

<expr><literal type="number">0302</literal></expr>,<expr><literal type="number">0140</literal></expr>,<expr><literal type="number">0072</literal></expr>,<expr><literal type="number">0043</literal></expr>,<expr><literal type="number">0100</literal></expr>,<expr><literal type="number">0047</literal></expr>,<expr><literal type="number">0075</literal></expr>,<expr><literal type="number">0042</literal></expr>,

<expr><literal type="number">0303</literal></expr>,<expr><literal type="number">0141</literal></expr>,<expr><literal type="number">0142</literal></expr>,<expr><literal type="number">0143</literal></expr>,<expr><literal type="number">0144</literal></expr>,<expr><literal type="number">0145</literal></expr>,<expr><literal type="number">0146</literal></expr>,<expr><literal type="number">0147</literal></expr>,

<expr><literal type="number">0150</literal></expr>,<expr><literal type="number">0151</literal></expr>,<expr><literal type="number">0304</literal></expr>,<expr><literal type="number">0305</literal></expr>,<expr><literal type="number">0306</literal></expr>,<expr><literal type="number">0307</literal></expr>,<expr><literal type="number">0310</literal></expr>,<expr><literal type="number">0311</literal></expr>,

<expr><literal type="number">0312</literal></expr>,<expr><literal type="number">0152</literal></expr>,<expr><literal type="number">0153</literal></expr>,<expr><literal type="number">0154</literal></expr>,<expr><literal type="number">0155</literal></expr>,<expr><literal type="number">0156</literal></expr>,<expr><literal type="number">0157</literal></expr>,<expr><literal type="number">0160</literal></expr>,

<expr><literal type="number">0161</literal></expr>,<expr><literal type="number">0162</literal></expr>,<expr><literal type="number">0136</literal></expr>,<expr><literal type="number">0314</literal></expr>,<expr><literal type="number">0315</literal></expr>,<expr><literal type="number">0316</literal></expr>,<expr><literal type="number">0317</literal></expr>,<expr><literal type="number">0320</literal></expr>,

<expr><literal type="number">0321</literal></expr>,<expr><literal type="number">0345</literal></expr>,<expr><literal type="number">0163</literal></expr>,<expr><literal type="number">0164</literal></expr>,<expr><literal type="number">0165</literal></expr>,<expr><literal type="number">0166</literal></expr>,<expr><literal type="number">0167</literal></expr>,<expr><literal type="number">0170</literal></expr>,

<expr><literal type="number">0171</literal></expr>,<expr><literal type="number">0172</literal></expr>,<expr><literal type="number">0322</literal></expr>,<expr><literal type="number">0323</literal></expr>,<expr><literal type="number">0324</literal></expr>,<expr><literal type="number">0133</literal></expr>,<expr><literal type="number">0326</literal></expr>,<expr><literal type="number">0327</literal></expr>,

<expr><literal type="number">0330</literal></expr>,<expr><literal type="number">0331</literal></expr>,<expr><literal type="number">0332</literal></expr>,<expr><literal type="number">0333</literal></expr>,<expr><literal type="number">0334</literal></expr>,<expr><literal type="number">0335</literal></expr>,<expr><literal type="number">0336</literal></expr>,<expr><literal type="number">0337</literal></expr>,

<expr><literal type="number">0340</literal></expr>,<expr><literal type="number">0341</literal></expr>,<expr><literal type="number">0342</literal></expr>,<expr><literal type="number">0343</literal></expr>,<expr><literal type="number">0344</literal></expr>,<expr><literal type="number">0135</literal></expr>,<expr><literal type="number">0346</literal></expr>,<expr><literal type="number">0347</literal></expr>,

<expr><literal type="number">0173</literal></expr>,<expr><literal type="number">0101</literal></expr>,<expr><literal type="number">0102</literal></expr>,<expr><literal type="number">0103</literal></expr>,<expr><literal type="number">0104</literal></expr>,<expr><literal type="number">0105</literal></expr>,<expr><literal type="number">0106</literal></expr>,<expr><literal type="number">0107</literal></expr>,

<expr><literal type="number">0110</literal></expr>,<expr><literal type="number">0111</literal></expr>,<expr><literal type="number">0350</literal></expr>,<expr><literal type="number">0351</literal></expr>,<expr><literal type="number">0352</literal></expr>,<expr><literal type="number">0353</literal></expr>,<expr><literal type="number">0354</literal></expr>,<expr><literal type="number">0355</literal></expr>,

<expr><literal type="number">0175</literal></expr>,<expr><literal type="number">0112</literal></expr>,<expr><literal type="number">0113</literal></expr>,<expr><literal type="number">0114</literal></expr>,<expr><literal type="number">0115</literal></expr>,<expr><literal type="number">0116</literal></expr>,<expr><literal type="number">0117</literal></expr>,<expr><literal type="number">0120</literal></expr>,

<expr><literal type="number">0121</literal></expr>,<expr><literal type="number">0122</literal></expr>,<expr><literal type="number">0356</literal></expr>,<expr><literal type="number">0357</literal></expr>,<expr><literal type="number">0360</literal></expr>,<expr><literal type="number">0361</literal></expr>,<expr><literal type="number">0362</literal></expr>,<expr><literal type="number">0363</literal></expr>,

<expr><literal type="number">0134</literal></expr>,<expr><literal type="number">0237</literal></expr>,<expr><literal type="number">0123</literal></expr>,<expr><literal type="number">0124</literal></expr>,<expr><literal type="number">0125</literal></expr>,<expr><literal type="number">0126</literal></expr>,<expr><literal type="number">0127</literal></expr>,<expr><literal type="number">0130</literal></expr>,

<expr><literal type="number">0131</literal></expr>,<expr><literal type="number">0132</literal></expr>,<expr><literal type="number">0364</literal></expr>,<expr><literal type="number">0365</literal></expr>,<expr><literal type="number">0366</literal></expr>,<expr><literal type="number">0367</literal></expr>,<expr><literal type="number">0370</literal></expr>,<expr><literal type="number">0371</literal></expr>,

<expr><literal type="number">0060</literal></expr>,<expr><literal type="number">0061</literal></expr>,<expr><literal type="number">0062</literal></expr>,<expr><literal type="number">0063</literal></expr>,<expr><literal type="number">0064</literal></expr>,<expr><literal type="number">0065</literal></expr>,<expr><literal type="number">0066</literal></expr>,<expr><literal type="number">0067</literal></expr>,

<expr><literal type="number">0070</literal></expr>,<expr><literal type="number">0071</literal></expr>,<expr><literal type="number">0372</literal></expr>,<expr><literal type="number">0373</literal></expr>,<expr><literal type="number">0374</literal></expr>,<expr><literal type="number">0375</literal></expr>,<expr><literal type="number">0376</literal></expr>,<expr><literal type="number">0377</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fpo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>relseek</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>negseek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>revert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nonzero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>autoskip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hextype</name> <init>= <expr><name>HEX_NORMAL</name></expr></init></decl>, <decl><type ref="prev"/><name>capitalize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ebcdic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>octspergrp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>grplen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seekoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>displayoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>l</name><index>[<expr><name>LLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>addrlen</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AMIGA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>pname</name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name><operator>++</operator> <operator>==</operator> <name>PATH_SEP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>pp</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILE_SEP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>pname</name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pp</name> <operator>==</operator> <name>FILE_SEP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>autoskip</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>autoskip</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hextype</name> <operator>=</operator> <name>HEX_BITS</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hextype</name> <operator>=</operator> <name>HEX_LITTLEENDIAN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-u"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hexx</name> <operator>=</operator> <name>hexxa</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hextype</name> <operator>=</operator> <name>HEX_POSTSCRIPT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hextype</name> <operator>=</operator> <name>HEX_CINCLUDE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-C"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>capitalize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>revert</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-E"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ebcdic</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>osver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"apitalize"</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>capitalize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"ols"</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"roup"</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-o"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reloffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>negoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"ffset"</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>displayoff</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>reloffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>reloffset</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>negoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negoffset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>displayoff</name> <operator>=</operator> <name>ULONG_MAX</name> <operator>-</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>reloffset</name><operator>+</operator><name>negoffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>displayoff</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>reloffset</name><operator>+</operator><name>negoffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>relseek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>negseek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"kip"</literal></expr></argument>, <argument><expr><name>pp</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"eek"</literal></expr></argument>, <argument><expr><name>pp</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>relseek</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>relseek</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>negseek</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>seekoff</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal><operator>+</operator><name>relseek</name><operator>+</operator><name>negseek</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>relseek</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>relseek</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>negseek</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>seekoff</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>relseek</name><operator>+</operator><name>negseek</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><literal type="string">"en"</literal></expr></argument>, <argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt> 

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name>hextype</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEX_POSTSCRIPT</name></expr>:</case> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_CINCLUDE</name></expr>:</case> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_BITS</name></expr>:</case> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_NORMAL</name></expr>:</case>

<case>case <expr><name>HEX_LITTLEENDIAN</name></expr>:</case>

<default>default:</default> <expr_stmt><expr><name>cols</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>octspergrp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name>hextype</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEX_BITS</name></expr>:</case> <expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_NORMAL</name></expr>:</case> <expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_LITTLEENDIAN</name></expr>:</case> <expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>HEX_POSTSCRIPT</name></expr>:</case>

<case>case <expr><name>HEX_CINCLUDE</name></expr>:</case>

<default>default:</default> <expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>hextype</name> <operator>==</operator> <name>HEX_NORMAL</name> <operator>||</operator> <name>hextype</name> <operator>==</operator> <name>HEX_BITS</name> <operator>||</operator> <name>hextype</name> <operator>==</operator> <name>HEX_LITTLEENDIAN</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name>cols</name> <operator>&gt;</operator> <name>COLS</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: invalid number of columns (max. %d).\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>octspergrp</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>octspergrp</name></expr></argument> &gt;</argument_list></name> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>octspergrp</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_LITTLEENDIAN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>octspergrp</name> <operator>&amp;</operator> <operator>(</operator><name>octspergrp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><literal type="string">"%s: number of octets per group must be a power of 2 with -e.\n"</literal></expr></argument>,

<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit_with_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIN_ASSIGN</name><argument_list>(<argument><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr></argument>, <argument><expr><operator>!</operator><name>revert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>BIN_READ</name><argument_list>(<argument><expr><operator>!</operator><name>revert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BIN_ASSIGN</name><argument_list>(<argument><expr><name>fpo</name> <operator>=</operator> <name>stdout</name></expr></argument>, <argument><expr><name>revert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>revert</name></expr> ?</condition><then> <expr><name>O_WRONLY</name></expr> </then><else>: <expr><operator>(</operator><name>O_TRUNC</name><operator>|</operator><name>O_WRONLY</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>OPEN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mode</name> <operator>|</operator> <call><name>BIN_CREAT</name><argument_list>(<argument><expr><name>revert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>fpo</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>BIN_WRITE</name><argument_list>(<argument><expr><name>revert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>revert</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>hextype</name> <operator>!=</operator> <name>HEX_POSTSCRIPT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: sorry, cannot revert this type of hexdump\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>huntype</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fpo</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>hextype</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>negseek</name></expr> ?</condition><then> <expr><operator>-</operator><name>seekoff</name></expr> </then><else>: <expr><name>seekoff</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seekoff</name> <operator>||</operator> <name>negseek</name> <operator>||</operator> <operator>!</operator><name>relseek</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRY_SEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>relseek</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>negseek</name></expr> ?</condition><then> <expr><operator>-</operator><name>seekoff</name></expr> </then><else>: <expr><name>seekoff</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>negseek</name></expr> ?</condition><then> <expr><operator>-</operator><name>seekoff</name></expr> </then><else>: <expr><name>seekoff</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>negseek</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>negseek</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: sorry cannot seek.\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seekoff</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><name>seekoff</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: sorry cannot seek.\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_CINCLUDE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>stdin</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><literal type="string">"unsigned char %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"__"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>CONDITIONAL_CAPITALIZE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="char">'_'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"[] = {\n"</literal></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>p</name> <operator>&lt;</operator> <name>length</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>hexx</name> <operator>==</operator> <name>hexxa</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"%s0x%02x"</literal></expr> </then><else>: <expr><literal type="string">"%s0X%02X"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>%</operator> <name>cols</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><operator>&amp;</operator><literal type="string">",\n "</literal><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>!</operator><name>p</name></expr>]</index></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><operator>&amp;</operator><literal type="string">"};\n"</literal><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>fp</name> <operator>==</operator> <name>stdin</name><operator>)</operator></expr>]</index></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>stdin</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><literal type="string">"unsigned int %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"__"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>CONDITIONAL_CAPITALIZE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="char">'_'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><literal type="string">"_%s = %d;\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>capitalize</name></expr> ?</condition><then> <expr><literal type="string">"LEN"</literal></expr> </then><else>: <expr><literal type="string">"len"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_POSTSCRIPT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <name>length</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><name><name>hexx</name><index>[<expr><operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name>

<operator>||</operator> <call><name>putc</name><argument_list>(<argument><expr><name><name>hexx</name><index>[<expr><name>e</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>p</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>cols</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fpo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>!=</operator> <name>HEX_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>grplen</name> <operator>=</operator> <name>octspergrp</name> <operator>+</operator> <name>octspergrp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>grplen</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>octspergrp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <name>length</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"%08lx:"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>seekoff</name> <operator>+</operator> <name>displayoff</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>addrlen</name></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>LLEN</name></expr>;</condition> <incr><expr><name><name>l</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_NORMAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>addrlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>/</operator> <name>octspergrp</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>hexx</name><index>[<expr><operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><operator>++</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>hexx</name><index>[ <expr><name>e</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>hextype</name> <operator>==</operator> <name>HEX_LITTLEENDIAN</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>p</name> <operator>^</operator> <operator>(</operator><name>octspergrp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>addrlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>octspergrp</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>hexx</name><index>[<expr><operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><operator>++</operator><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>hexx</name><index>[ <expr><name>e</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>addrlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>/</operator> <name>octspergrp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><operator>++</operator><name>c</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>e</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nonzero</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ebcdic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>e</name> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'.'</literal></expr> </then><else>: <expr><name><name>etoa64</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">64</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>addrlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>octspergrp</name> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>=</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><operator>(</operator><name>e</name> <operator>&gt;=</operator> <literal type="number">64</literal><operator>)</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<operator>(</operator><name>e</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;</operator> <literal type="number">127</literal><operator>)</operator></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

?</condition><then> <expr><name>e</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>p</name> <operator>==</operator> <name>cols</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>addrlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>octspergrp</name> <operator>+</operator> <name>p</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>l</name><index>[<expr><operator>++</operator><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xxdline</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><ternary><condition><expr><name>autoskip</name></expr> ?</condition><then> <expr><name>nonzero</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nonzero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>c</name> <operator>=</operator> <operator>(</operator><name>addrlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>grplen</name> <operator>*</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name>octspergrp</name> <operator>+</operator> <name>p</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>l</name><index>[<expr><operator>++</operator><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xxdline</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>autoskip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xxdline</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>fpo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
