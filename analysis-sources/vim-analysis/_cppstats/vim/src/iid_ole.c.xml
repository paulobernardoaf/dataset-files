<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\_cppstats\vim\src\iid_ole.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal><block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;w32api.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__W32API_MAJOR_VERSION</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>__W32API_MINOR_VERSION</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IID_DEFINED__</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IID_DEFINED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IID_DEFINED__</name></cpp:macro></cpp:define>

<typedef>typedef <type><struct>struct <name>_IID</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>IID</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLSID_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLSID_DEFINED</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>IID</name></type> <name>CLSID</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>IID_IVim</name> <init>= <expr><block>{<expr><literal type="number">0x0F0BFAE2</literal></expr>,<expr><literal type="number">0x4C90</literal></expr>,<expr><literal type="number">0x11d1</literal></expr>,<expr><block>{<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x19</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IID</name></type> <name>LIBID_Vim</name> <init>= <expr><block>{<expr><literal type="number">0x0F0BFAE0</literal></expr>,<expr><literal type="number">0x4C90</literal></expr>,<expr><literal type="number">0x11d1</literal></expr>,<expr><block>{<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x19</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CLSID</name></type> <name>CLSID_Vim</name> <init>= <expr><block>{<expr><literal type="number">0x0F0BFAE1</literal></expr>,<expr><literal type="number">0x4C90</literal></expr>,<expr><literal type="number">0x11d1</literal></expr>,<expr><block>{<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x19</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
