<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\lua\converter.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lua.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lualib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lauxlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/converter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>maxidx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>string_keys_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>has_string_with_nul</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ObjectType</name></type> <name>type</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>lua_Number</name></type> <name>val</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>has_type_key</name></decl>;</decl_stmt> 
}</block></struct></type> <name>LuaTableProps</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua/converter.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IDX_VALUE</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAL_IDX_VALUE</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_PUSH_STATIC_STRING</name><parameter_list>(<parameter><type><name>lstate</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pushlstring(lstate, s, sizeof(s) - 1)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>LuaTableProps</name></type> <name>nlua_traverse_table</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lstate</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>val_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>has_val_key</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>other_keys_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>LuaTableProps</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1502: Lua failed to grow stack to %i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeNil</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>has_string_with_nul</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>string_keys_num</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>SIZE_MAX</name> <operator>||</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>other_keys_num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name><name>ret</name><operator>.</operator><name>maxidx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>maxidx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>TYPE_IDX_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeFloat</name>
<operator>||</operator> <name>n</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeArray</name>
<operator>||</operator> <name>n</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeDictionary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>has_type_key</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><name>ObjectType</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>other_keys_num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>other_keys_num</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_val_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val_type</name> <operator>=</operator> <call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val_type</name> <operator>==</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><name>other_keys_num</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><name>tsize</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>has_type_key</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeFloat</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_val_key</name> <operator>||</operator> <name>val_type</name> <operator>!=</operator> <name>LUA_TNUMBER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeNil</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>maxidx</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ret</name><operator>.</operator><name>maxidx</name></name> <operator>!=</operator> <operator>(</operator><name>tsize</name>
<operator>-</operator> <name><name>ret</name><operator>.</operator><name>has_type_key</name></name>
<operator>-</operator> <name>other_keys_num</name>
<operator>-</operator> <name>has_val_key</name>
<operator>-</operator> <name><name>ret</name><operator>.</operator><name>string_keys_num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name><name>ret</name><operator>.</operator><name>maxidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name><name>ret</name><operator>.</operator><name>maxidx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ret</name><operator>.</operator><name>maxidx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tsize</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>tsize</name> <operator>==</operator> <name><name>ret</name><operator>.</operator><name>maxidx</name></name>
<operator>&amp;&amp;</operator> <name>other_keys_num</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>ret</name><operator>.</operator><name>string_keys_num</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeArray</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tsize</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>lua_getmetatable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>nlua_empty_dict_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeDictionary</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ret</name><operator>.</operator><name>string_keys_num</name></name> <operator>==</operator> <name>tsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeDictionary</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeNil</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>container</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>special</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt> 
}</block></struct></type> <name>TVPopStackItem</name>;</typedef>










<function><type><name>bool</name></type> <name>nlua_pop_typval</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>ret_tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>initial_size</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>TVPopStackItem</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((TVPopStackItem) { ret_tv, false, false, <literal type="number">0</literal> })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1502: Lua failed to grow stack to %i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>TVPopStackItem</name></type> <name>cur</name> <init>= <expr><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>special</name></name> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name><name>cur</name><operator>.</operator><name>special</name></name></expr> ?</condition><then> <expr><name>VAR_LIST</name></expr> </then><else>: <expr><name>VAR_DICT</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>next_key_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_key_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>next_key_found</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>special</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kv_pair</name> <init>= <expr><call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>typval_T</name></type> <name>s_tv</name> <init>= <expr><call><name>decode_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>kTrue</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_unref</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tv_list_append_owned_tv</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>, <argument><expr><name>s_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>tv_list_append_owned_tv</name><argument_list>(<argument>kv_pair</argument>, <argument>(typval_T) {
.v_type = VAR_UNKNOWN</argument>,
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_append_list</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>TVPopStackItem</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>tv</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name>kv_pair</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>container</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>special</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>di</name> <init>= <expr><call><name>tv_dict_item_alloc_len</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tv_dict_add</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>TVPopStackItem</name><operator>)</operator> <block>{ <expr><operator>&amp;</operator><name><name>di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>tv_list_len</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<macro><name>tv_list_append_owned_tv</name><argument_list>(<argument>cur.tv-&gt;vval.v_list</argument>, <argument>(typval_T) {
.v_type = VAR_UNKNOWN</argument>,
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>TVPopStackItem</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>tv</name> <operator>=</operator> <call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><call><name>tv_list_last</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>container</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>special</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>tv</name></name> <operator>=</operator> <operator>(</operator><name>typval_T</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>,
<expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>,
<expr><operator>.</operator><name>vval</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>v_number</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>,
}</block></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LUA_TNIL</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_special</name></name> <operator>=</operator> <name>kSpecialVarNull</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_special</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><name>kSpecialVarTrue</name></expr>
</then><else>: <expr><name>kSpecialVarFalse</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>tv</name></name> <operator>=</operator> <call><name>decode_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>kNone</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>VARNUMBER_MAX</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>VARNUMBER_MIN</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><operator>(</operator><name>varnumber_T</name><operator>)</operator><name>n</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <operator>(</operator><name>float_T</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_NUMBER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <operator>(</operator><name>varnumber_T</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_traverse_table</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>TVPopStackItem</name></type> <name>item</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>container</name></name> <operator>&amp;&amp;</operator> <call><name>lua_rawequal</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_copy</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>tv</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<goto>goto <name>nlua_pop_typval_table_processing_end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<switch>switch <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeArray</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <call><name>tv_list_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>table_props</name><operator>.</operator><name>maxidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_ref</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>maxidx</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeDictionary</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>special</name></name> <operator>=</operator> <name><name>table_props</name><operator>.</operator><name>has_string_with_nul</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>has_string_with_nul</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_create_map_special_dict</name><argument_list>(
<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name></name></expr></argument>, <argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_DICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>val_di</name> <init>= <expr><call><name>tv_dict_find</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name></expr></argument>,
<argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"_VAL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val_di</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>val_di</name><operator>-&gt;</operator><name>di_tv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_DICT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name></name> <operator>=</operator> <call><name>tv_dict_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_dict</name><operator>-&gt;</operator><name>dv_refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeFloat</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_FLOAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_float</name></name> <operator>=</operator> <operator>(</operator><name>float_T</name><operator>)</operator><name><name>table_props</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeNil</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5100: Cannot convert given lua table: table "</literal>
<literal type="string">"should either have a sequence of positive integer keys "</literal>
<literal type="string">"or contain only string keys"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<label><name>nlua_pop_typval_table_processing_end</name>:</label>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TUSERDATA</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>nlua_nil_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_nil</name> <init>= <expr><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_nil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>tv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_special</name></name> <operator>=</operator> <name>kSpecialVarNull</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5101: Cannot convert given lua type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E5101: Cannot convert given lua type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><name>ret_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ret_tv</name> <operator>=</operator> <operator>(</operator><name>typval_T</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_NUMBER</name></expr>,
<expr><operator>.</operator><name>v_lock</name> <operator>=</operator> <name>VAR_UNLOCKED</name></expr>,
<expr><operator>.</operator><name>vval</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>v_number</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>initial_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>initial_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>typval_conv_special</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_ALLOW_SPECIALS</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_NIL</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (typval_conv_special) { lua_pushnil(lstate); } else { nlua_pushref(lstate, nlua_nil_ref); } } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_BOOL</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pushboolean(lstate, (bool)(num))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_NUMBER</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pushnumber(lstate, (lua_Number)(num))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_UNSIGNED_NUMBER</name></cpp:macro> <cpp:value>TYPVAL_ENCODE_CONV_NUMBER</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_FLOAT</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>flt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TYPVAL_ENCODE_CONV_NUMBER(tv, flt)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_STRING</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_pushlstring(lstate, (const char *)(str), (len))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_STR_STRING</name></cpp:macro> <cpp:value>TYPVAL_ENCODE_CONV_STRING</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_EXT_STRING</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TYPVAL_ENCODE_CONV_NIL(tv)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_FUNC_START</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>fun</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TYPVAL_ENCODE_CONV_NIL(tv); goto typval_encode_stop_converting_one_item; } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_ARGS</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_SELF</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_FUNC_END</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_EMPTY_LIST</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_createtable(lstate, 0, 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_EMPTY_DICT</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (typval_conv_special) { nlua_create_typed_table(lstate, 0, 0, kObjectTypeDictionary); } else { lua_createtable(lstate, 0, 0); nlua_pushref(lstate, nlua_empty_dict_ref); lua_setmetatable(lstate, -2); } } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_LIST_START</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!lua_checkstack(lstate, lua_gettop(lstate) + 3)) { emsgf(_("E5102: Lua failed to grow stack to %i"), lua_gettop(lstate) + 3); return false; } lua_createtable(lstate, (int)(len), 0); lua_pushnumber(lstate, 1); } while (0)</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_REAL_LIST_AFTER_START</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>mpsv</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_LIST_BETWEEN_ITEMS</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { lua_Number idx = lua_tonumber(lstate, -2); lua_rawset(lstate, -3); lua_pushnumber(lstate, idx + 1); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_LIST_END</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_rawset(lstate, -3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_DICT_START</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!lua_checkstack(lstate, lua_gettop(lstate) + 3)) { emsgf(_("E5102: Lua failed to grow stack to %i"), lua_gettop(lstate) + 3); return false; } lua_createtable(lstate, 0, (int)(len)); } while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_SPECIAL_DICT_KEY_CHECK</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>kv_pair</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>, <parameter><type><name>mpsv</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_DICT_AFTER_KEY</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_DICT_BETWEEN_ITEMS</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lua_rawset(lstate, -3)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_DICT_END</name><parameter_list>(<parameter><type><name>tv</name></type></parameter>, <parameter><type><name>dict</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TYPVAL_ENCODE_CONV_DICT_BETWEEN_ITEMS(tv, dict)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_CONV_RECURSE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>conv_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (size_t backref = kv_size(*mpstack); backref; backref--) { const MPConvStackVal mpval = kv_A(*mpstack, backref - 1); if (mpval.type == conv_type) { if (conv_type == kMPConvDict ? (void *)mpval.data.d.dict == (void *)(val) : (void *)mpval.data.l.list == (void *)(val)) { lua_pushvalue(lstate, -((int)((kv_size(*mpstack) - backref + 1) * 2))); break; } } } } while (0)</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_SCOPE</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_NAME</name></cpp:macro> <cpp:value>lua</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name></cpp:macro> <cpp:value>lua_State *const</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></cpp:macro> <cpp:value>lstate</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval_encode.c.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_SCOPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_NAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_FIRST_ARG_TYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_FIRST_ARG_NAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_STRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_STR_STRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_EXT_STRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_NUMBER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_FLOAT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_FUNC_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_ARGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_FUNC_BEFORE_SELF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_FUNC_END</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_EMPTY_LIST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_LIST_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_REAL_LIST_AFTER_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_EMPTY_DICT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_NIL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_BOOL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_UNSIGNED_NUMBER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_DICT_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_REAL_DICT_AFTER_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_DICT_END</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_DICT_AFTER_KEY</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_DICT_BETWEEN_ITEMS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_SPECIAL_DICT_KEY_CHECK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_LIST_END</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_LIST_BETWEEN_ITEMS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_CONV_RECURSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPVAL_ENCODE_ALLOW_SPECIALS</name></cpp:undef>










<function><type><name>bool</name></type> <name>nlua_push_typval</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>typval_conv_special</name> <operator>=</operator> <name>special</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>initial_size</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>initial_size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E1502: Lua failed to grow stack to %i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>initial_size</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>encode_vim_to_lua</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><literal type="string">"nlua_push_typval argument"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>initial_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>nlua_push_type_idx</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>TYPE_IDX_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>nlua_push_val_idx</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>VAL_IDX_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>nlua_push_type</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>ObjectType</name></type> <name>type</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>nlua_create_typed_table</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>narr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nrec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjectType</name></type> <name>type</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>narr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>nrec</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_type_idx</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>nlua_push_String</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nlua_push_Integer</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Integer</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nlua_push_Float</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Float</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>special</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_create_typed_table</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kObjectTypeFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_val_idx</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nlua_push_Boolean</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Boolean</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nlua_push_Dictionary</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Dictionary</name></type> <name>dict</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>special</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_create_typed_table</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kObjectTypeDictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dict</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dict</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>special</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>nlua_empty_dict_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dict</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_push_String</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name><name>dict</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_Object</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name><name>dict</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>nlua_push_Array</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Array</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>array</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_push_Object</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name><name>array</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATE_INDEX_FUNCTION</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void nlua_push_##type(lua_State *lstate, const type item, bool special) FUNC_ATTR_NONNULL_ALL { lua_pushnumber(lstate, (lua_Number)(item)); }</cpp:value></cpp:define>






<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Buffer</argument>)</argument_list></macro>
<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Window</argument>)</argument_list></macro>
<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Tabpage</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GENERATE_INDEX_FUNCTION</name></cpp:undef>




<function><type><name>void</name></type> <name>nlua_push_Object</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Object</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>special</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>obj</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeNil</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>special</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>nlua_nil_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeLuaRef</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name><name>obj</name><operator>.</operator><name>data</name><operator>.</operator><name>luaref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>data_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case kObjectType##type: { nlua_push_##type(lstate, obj.data.data_key, special); break; }</cpp:value></cpp:define>




<macro><name>ADD_TYPE</name><argument_list>(<argument>Boolean</argument>, <argument>boolean</argument>)</argument_list></macro>
<macro><name>ADD_TYPE</name><argument_list>(<argument>Integer</argument>, <argument>integer</argument>)</argument_list></macro>
<macro><name>ADD_TYPE</name><argument_list>(<argument>Float</argument>, <argument>floating</argument>)</argument_list></macro>
<macro><name>ADD_TYPE</name><argument_list>(<argument>String</argument>, <argument>string</argument>)</argument_list></macro>
<macro><name>ADD_TYPE</name><argument_list>(<argument>Array</argument>, <argument>array</argument>)</argument_list></macro>
<macro><name>ADD_TYPE</name><argument_list>(<argument>Dictionary</argument>, <argument>dictionary</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_TYPE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_REMOTE_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case kObjectType##type: { nlua_push_##type(lstate, (type)obj.data.integer, special); break; }</cpp:value></cpp:define>




<macro><name>ADD_REMOTE_TYPE</name><argument_list>(<argument>Buffer</argument>)</argument_list></macro>
<macro><name>ADD_REMOTE_TYPE</name><argument_list>(<argument>Window</argument>)</argument_list></macro>
<macro><name>ADD_REMOTE_TYPE</name><argument_list>(<argument>Tabpage</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_REMOTE_TYPE</name></cpp:undef>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>String</name></type> <name>nlua_pop_String</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Expected lua string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>String</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ret</name><operator>.</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ret</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Integer</name></type> <name>nlua_pop_Integer</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Expected lua number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>API_INTEGER_MAX</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>API_INTEGER_MIN</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator><name>n</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Number is not integral"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Boolean</name></type> <name>nlua_pop_Boolean</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Boolean</name></type> <name>ret</name> <init>= <expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>LuaTableProps</name></type> <name>nlua_check_type</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lstate</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjectType</name></type> <name>type</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LUA_TTABLE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Expected lua table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>LuaTableProps</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kObjectTypeNil</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_traverse_table</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kObjectTypeDictionary</name> <operator>&amp;&amp;</operator> <name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeArray</name>
<operator>&amp;&amp;</operator> <name><name>table_props</name><operator>.</operator><name>maxidx</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>table_props</name><operator>.</operator><name>has_type_key</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeDictionary</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Unexpected type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>table_props</name></expr>;</return>
</block_content>}</block>




<function><type><name>Float</name></type> <name>nlua_pop_Float</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TNUMBER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Float</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>Float</name><operator>)</operator><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_check_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kObjectTypeFloat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeFloat</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>Float</name><operator>)</operator><name><name>table_props</name><operator>.</operator><name>val</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>Array</name></type> <name>nlua_pop_Array_unchecked</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lstate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>ret</name> <init>= <expr><block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>table_props</name><operator>.</operator><name>maxidx</name></name></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ret</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ret</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Object</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>nlua_pop_Object</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Array</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Array</name></type> <name>nlua_pop_Array</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_check_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kObjectTypeArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>Array</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>nlua_pop_Array_unchecked</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>table_props</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>Dictionary</name></type> <name>nlua_pop_Dictionary_unchecked</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ref</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>ret</name> <init>= <expr><block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ret</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ret</name><operator>.</operator><name>size</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <call><name>nlua_pop_String</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <call><name>nlua_pop_Object</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Dictionary</name></type> <name>nlua_pop_Dictionary</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lstate</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_check_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>kObjectTypeDictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kObjectTypeDictionary</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>Dictionary</name><operator>)</operator> <block>{ <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>items</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>nlua_pop_Dictionary_unchecked</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>table_props</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>container</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ObjPopStackItem</name>;</typedef>




<function><type><name>Object</name></type> <name>nlua_pop_Object</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lstate</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Object</name></type> <name>ret</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>initial_size</name> <init>= <expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>ObjPopStackItem</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((ObjPopStackItem) { &amp;ret, false })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Lua failed to grow stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ObjPopStackItem</name></type> <name>cur</name> <init>= <expr><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeDictionary</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>size</name></name>
<operator>==</operator> <name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>next_key_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_TSTRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_key_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>next_key_found</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>size</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>data</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>len</name></expr>,
}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>ObjPopStackItem</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>obj</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>value</name></expr>,
<expr><operator>.</operator><name>container</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_rawgeti</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lua_isnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>ObjPopStackItem</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>obj</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name></expr>,
<expr><operator>.</operator><name>container</name> <operator>=</operator> <name>false</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LUA_TNIL</name></expr>:</case> <block>{<block_content>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <macro><name>STRING_OBJ</name><argument_list>(<argument>((String) {
.data = xmemdupz(s, len),
.size = len,
})</argument>)</argument_list></macro></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TNUMBER</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>lua_Number</name></type> <name>n</name> <init>= <expr><call><name>lua_tonumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>API_INTEGER_MAX</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>API_INTEGER_MIN</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Integer</name><operator>)</operator><name>n</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Float</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>LuaTableProps</name></type> <name>table_props</name> <init>= <expr><call><name>nlua_traverse_table</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>table_props</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeArray</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <macro><name>ARRAY_OBJ</name><argument_list>(<argument>((Array) {
.items = NULL,
.size = <literal type="number">0</literal>,
.capacity = <literal type="number">0</literal>,
})</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>maxidx</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>items</name></name> <operator>=</operator>
<call><name>xcalloc</name><argument_list>(<argument><expr><name><name>table_props</name><operator>.</operator><name>maxidx</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>table_props</name><operator>.</operator><name>maxidx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeDictionary</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <macro><name>DICTIONARY_OBJ</name><argument_list>(<argument>((Dictionary) {
.items = NULL,
.size = <literal type="number">0</literal>,
.capacity = <literal type="number">0</literal>,
})</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>items</name></name> <operator>=</operator>
<call><name>xcalloc</name><argument_list>(<argument><expr><name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>obj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>table_props</name><operator>.</operator><name>string_keys_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnil</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeFloat</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Float</name><operator>)</operator><name><name>table_props</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeNil</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Cannot convert given lua table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<default>default:</default> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>LUA_TFUNCTION</name></expr>:</case> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <call><name>LUAREF_OBJ</name><argument_list>(<argument><expr><call><name>nlua_ref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>type_error</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>LUA_TUSERDATA</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>nlua_pushref</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><name>nlua_nil_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_nil</name> <init>= <expr><call><name>lua_rawequal</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>is_nil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Cannot convert userdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default> <block>{<block_content>
<label><name>type_error</name>:</label>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Cannot convert given lua type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>initial_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>lua_gettop</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>initial_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATE_INDEX_FUNCTION</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type nlua_pop_##type(lua_State *lstate, Error *err) FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT { type ret; ret = (type)lua_tonumber(lstate, -1); lua_pop(lstate, 1); return ret; }</cpp:value></cpp:define>









<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Buffer</argument>)</argument_list></macro>
<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Window</argument>)</argument_list></macro>
<macro><name>GENERATE_INDEX_FUNCTION</name><argument_list>(<argument>Tabpage</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GENERATE_INDEX_FUNCTION</name></cpp:undef>











<function><type><name>void</name></type> <name>nlua_init_types</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"type_idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_type_idx</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"val_idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlua_push_val_idx</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeDictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushnumber</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name>kObjectTypeDictionary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LUA_PUSH_STATIC_STRING</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><literal type="string">"dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lua_rawset</name><argument_list>(<argument><expr><name>lstate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
