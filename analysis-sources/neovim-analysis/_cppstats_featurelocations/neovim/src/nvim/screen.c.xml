<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\screen.c">





























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/arabic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor_shape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fold.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/indent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/menu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/quickfix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/sign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/spell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/terminal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lua/executor.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_FILLER_CHAR</name></cpp:macro> <cpp:value>'&lt;'</cpp:value></cpp:define> 






<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>linebuf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>schar_T</name> <modifier>*</modifier></type><name>linebuf_char</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sattr_T</name> <modifier>*</modifier></type><name>linebuf_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>match_T</name></type> <name>search_hl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>foldinfo_T</name></type> <name>win_foldinfo</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>StlClickDefinition</name> <modifier>*</modifier></type><name>tab_page_click_defs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>tab_page_click_defs_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name></decl>;</decl_stmt> 
}</block></struct></type> <name>LineState</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_STATE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ p, 0, 0 }</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>send_grid_resize</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>conceal_cursor_used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>redraw_popupmenu</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>msg_grid_invalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>resizing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screen.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH_HL_PRIORITY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>






<function><type><name>void</name></type> <name>redraw_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redraw_win_later</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>redraw_all_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>&lt;</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>screen_invalidate_highlights</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>redraw_curbuf_later</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_later</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redraw_buf_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redraw_buf_line_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name>
<operator>&amp;&amp;</operator> <name>line</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&amp;&amp;</operator> <name>line</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redraw_buf_range_later</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>firstline</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lastline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name>
<operator>&amp;&amp;</operator> <name>lastline</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&amp;&amp;</operator> <name>firstline</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>&gt;</operator> <name>firstline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <name>firstline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>&lt;</operator> <name>lastline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <name>lastline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>









<function><type><name>void</name></type>
<name>redrawWinline</name><parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>
)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>&gt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>redraw_win_later</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>update_curbuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>redraw_curbuf_later</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>update_screen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_intro</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_one</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>||</operator> <name>resizing</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>need_diff_redraw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>diff_redraw</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>must_redraw</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>must_redraw</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>must_redraw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>NOT_VALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <name>updating_screen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>INVERTED_ALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>display_tick</name><operator>++</operator></expr>;</expr_stmt> 




<if_stmt><if>if <condition>(<expr><name>msg_did_scroll</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_did_scroll</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled_at_flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>CLEAR</name> <operator>||</operator> <operator>!</operator><name><name>default_grid</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>||</operator> <name>msg_grid_invalid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>valid</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name>Rows</name> <operator>-</operator> <call><name>msg_scrollsize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>MIN</name><argument_list>(<argument><expr><call><name>msg_scrollsize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>, <argument><expr><name><name>msg_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>msg_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>msg_use_msgsep</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>throttled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NOT_VALID</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>msg_scrolled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>valid</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Rows</name><operator>-</operator><name>p_ch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name></expr></argument>, <argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>&gt;</operator> <name>valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_grid_set_pos</name><argument_list>(<argument><expr><name>Rows</name><operator>-</operator><name>p_ch</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_invalid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>!=</operator> <name>CLEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_ins_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>msg_scrolled</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <name>msg_scrolled</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>msg_scrolled</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>REDRAW_TOP</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_upd_rows</name></name> <operator>=</operator> <name>msg_scrolled</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>REDRAW_TOP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name>
<operator>&lt;=</operator> <name>msg_scrolled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled_at_flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>win_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_ext_check_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>need_highlight_changed</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>CLEAR</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>cmdline_screen_cleared</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>default_grid</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_invalidate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NOT_VALID</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>msg_use_grid</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>msg_grid</name><operator>.</operator><name>chars</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>Rows</name><operator>-</operator><name>p_ch</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>NOT_VALID</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr>
?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>INVERTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_curswant</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&lt;</operator> <name>type</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>type</name> <operator>==</operator> <name>VALID</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_topfill</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_botfill</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>INVERTED</name>
<operator>&amp;&amp;</operator> <name>VIsual_active</name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>==</operator> <name>VIsual_mode</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_VIRTCOL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_old_curswant</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name><operator>)</operator>
<operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_window_hl</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>curtab</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_window_hl</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr></argument>, <argument><expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>update_window_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wwp</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>wwp</name> <operator>=</operator> <name>firstwin</name></expr>;</init> <condition><expr><name>wwp</name> <operator>!=</operator> <name>wp</name></expr>;</condition> <incr><expr><name>wwp</name> <operator>=</operator> <name><name>wwp</name><operator>-&gt;</operator><name>w_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wwp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>wwp</name> <operator>==</operator> <name>wp</name> <operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syn_stack_apply_changes</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FIXED_TEMP_ARRAY</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>display_tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_start</name></name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"error in luahl start: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>





<expr_stmt><expr><name>did_one</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>==</operator> <name>CLEAR</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_invalidate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_one</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_one</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>end_search_hl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pum_drawn</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>must_redraw_pum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pum_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>send_grid_resize</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>updating_screen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name> <operator>||</operator> <name>redraw_cmdline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_intro</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maybe_intro_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>did_intro</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<expr_stmt><expr><name>cmdline_was_last_drawn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>conceal_cursor_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>conceal_check_cursor_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>should_conceal</name> <init>= <expr><call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>conceal_cursor_used</name> <operator>!=</operator> <name>should_conceal</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redrawWinline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>curs_columns</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>win_cursorline_standout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_active</name> <operator>||</operator> <operator>!</operator><call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>DecorationRedrawState</name></type> <name>decorations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>decorations_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>decorations_add_luahl_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>decorations.active</argument>,
<argument>((HlRange){ start_row, start_col, end_row, end_col, attr_id, NULL })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>void</name></type> <name>win_update</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mid_start</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mid_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bot_start</name> <init>= <expr><literal type="number">999</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>scrolled_down</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>top_to_mod</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>srow</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>eof</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>didline</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>old_botline</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fold_count</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_LINE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DID_FOLD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>did_update</name> <init>= <expr><name>DID_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>syntax_last_parsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>mod_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>mod_bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_got_int</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>buf_signcols</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>win_grid_alloc</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>NOT_VALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>draw_vsep_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_check_size</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_mod_set</name></name>
<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mod_top</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_top</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_top</name> <operator>-=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_s</name><operator>.</operator><name>b_syn_sync_linebreaks</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mod_bot</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_bot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnumt</name></decl>, <decl><type ref="prev"/><name>lnumb</name></decl>;</decl_stmt>













<expr_stmt><expr><name>lnumt</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lnumb</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>&lt;</operator> <name>mod_top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnumt</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnumb</name> <operator>==</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;=</operator> <name>mod_bot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnumb</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnumb</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mod_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>&gt;</operator> <name>lnumt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name>lnumt</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mod_bot</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>mod_bot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod_bot</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_bot</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>&lt;</operator> <name>lnumb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>lnumb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mod_top</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top_end</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redraw_bot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDRAW_TOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_upd_rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_end</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>top_end</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>VALID</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SOME_VALID</name>
<operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED_ALL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_botfill</name></name></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name>mod_top</name></expr>)</condition> <block>{<block_content>




</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name><operator>)</operator>
<operator>)</operator></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>ln</name></decl>;</decl_stmt>



<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ln</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</init> <condition><expr><name>ln</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</condition> <incr><expr><name>ln</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ln</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>plines_m_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 



<expr_stmt><expr><call><name>win_scroll_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>top_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scrolled_down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>+=</operator> <name>j</name><operator>)</operator> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</init> <condition><expr><name>idx</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>idx</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>row</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_scroll_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bot_start</name> <operator>&lt;</operator> <literal type="number">999</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bot_start</name> <operator>+</operator> <name>row</name>
<operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bot_start</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>j</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_diff</name></name> <operator>&amp;&amp;</operator> <name>bot_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator>
<call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mid_start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SOME_VALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>NOT_VALID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>INVERTED_ALL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>from</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name>
<operator>||</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&lt;</operator> <name>from</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name>to</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>






<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>fromc</name></decl>, <decl><type ref="prev"/><name>toc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_ve_flags</name> <init>= <expr><name>ve_flags</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>VE_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>getvcols</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>VIsual</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ve_flags</name> <operator>=</operator> <name>save_ve_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>toc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>toc</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fromc</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name>
<operator>||</operator> <name>toc</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>=</operator> <name>fromc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>=</operator> <name>toc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>mid_start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scrolled_down</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <name>top_end</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name>from</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_start</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>scrolled_down</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name>mid_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>&gt;=</operator> <name>to</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid_end</name> <operator>=</operator> <name>srow</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>srow</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name> <operator>=</operator> <name><name>VIsual</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_curswant</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_curswant</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_visual_col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>save_got_int</name> <operator>=</operator> <name>got_int</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>proftime_T</name></type> <name>syntax_tm</name> <init>= <expr><call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>syn_set_timeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syntax_tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_foldinfo</name><operator>.</operator><name>fi_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>srow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>decorations_active</name> <operator>=</operator> <call><name>decorations_redraw_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decorations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FIXED_TEMP_ARRAY</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>knownmax</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;</operator> <name>VALID_BOTLINE</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr>
</then><else>: <expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>WINDOW_OBJ</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>knownmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_window</name></name></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"error in luahl window: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>didline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>srow</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <name>top_end</name>
<operator>||</operator> <operator>(</operator><name>row</name> <operator>&gt;=</operator> <name>mid_start</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name>mid_end</name><operator>)</operator>
<operator>||</operator> <name>top_to_mod</name>
<operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>||</operator> <operator>(</operator><name>row</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name>bot_start</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mod_top</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name>mod_top</name>
<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>&gt;=</operator> <name>mod_top</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnum</name> <operator>&lt;</operator> <name>mod_bot</name>
<operator>||</operator> <name>did_update</name> <operator>==</operator> <name>DID_FOLD</name>
<operator>||</operator> <operator>(</operator><name>did_update</name> <operator>==</operator> <name>DID_LINE</name>
<operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>foldmethodIsSyntax</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>hasAnyFolding</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <call><name>syntax_check_changed</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>


<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_mod_xlines</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>mod_top</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top_to_mod</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>mod_top</name>
<operator>&amp;&amp;</operator> <name>mod_bot</name> <operator>!=</operator> <name>MAXLNUM</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mod_bot</name> <operator>==</operator> <name>mod_top</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xtra_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>l</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name>mod_bot</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_rows</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>mod_bot</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_valid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>old_rows</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt></block_content></block></while>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>j</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <name>lnum</name></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>mod_bot</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_rows</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_rows</name> <operator>+=</operator> <call><name>plines_win_nofill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_rows</name> <operator>+=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_rows</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_rows</name> <operator>=</operator> <literal type="number">9999</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>xtra_rows</name> <operator>=</operator> <name>new_rows</name> <operator>-</operator> <name>old_rows</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xtra_rows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>row</name> <operator>-</operator> <name>xtra_rows</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>win_scroll_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>xtra_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>+</operator> <name>xtra_rows</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>xtra_rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>xtra_rows</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_bot</name> <operator>=</operator> <name>MAXLNUM</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>win_scroll_lines</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>old_rows</name></expr></argument>, <argument><expr><name>xtra_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top_end</name> <operator>&gt;</operator> <name>row</name> <operator>+</operator> <name>old_rows</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>top_end</name> <operator>+=</operator> <name>xtra_rows</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>mod_bot</name> <operator>!=</operator> <name>MAXLNUM</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>row</name> <operator>+</operator> <name>new_rows</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>wl_size</name>
<operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>bot_start</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot_start</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>;</init> <condition><expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&gt;=</operator> <name>idx</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>




<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>fold_count</name> <operator>=</operator> <call><name>foldedCount</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fold_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fold_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>fold_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>fold_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_folded</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <name>fold_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_FOLD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <operator>(</operator><name>DY_LASTLINE</name> <operator>|</operator> <name>DY_TRUNCATE</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>srow</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name>
<operator>&amp;&amp;</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>
)</condition> <block>{<block_content>


<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>prepare_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>syntax_last_parsed</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_end_parsing</name><argument_list>(<argument><expr><name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>win_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><name>mod_top</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_folded</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_LINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>syntax_last_parsed</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <call><name>plines_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>wl_size</name> <operator>=</operator> <name>row</name> <operator>-</operator> <name>srow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name> <operator>+=</operator> <name>fold_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>fold_count</name> <operator>=</operator> <call><name>foldedCount</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fold_count</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fold_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>fold_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_foldinfo</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>win_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>row</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>wl_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wl_lastlnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>did_update</name> <operator>=</operator> <name>DID_NONE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>syntax_last_parsed</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>syntax_end_parsing</name><argument_list>(<argument><expr><name>syntax_last_parsed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_empty_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>didline</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>at_attr</name> <init>= <expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>,
<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <name>srow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_filler_rows</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <name>srow</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_TRUNCATE</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>scr_row</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"@@"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>scr_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>at_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>scr_row</name></expr></argument>, <argument><expr><name>scr_row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>,
<argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>at_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dy_flags</name> <operator>&amp;</operator> <name>DY_LASTLINE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><name>at_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>srow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>diff_check_fill</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>char2cells</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>diff</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>diff</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>j</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name> <operator>-</operator> <name>row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name></expr></argument>, <argument><expr><name>HLF_DED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>eob</name></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>,
<argument><expr><name>HLF_EOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>&gt;=</operator> <name>REDRAW_TOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>draw_vsep_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>syn_set_timeout</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_topfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_botfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dollar_vcol</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_BOTLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_viewport_invalid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botline</name></name> <operator>!=</operator> <name>old_botline</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recursive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VALID_TOPLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_update</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_mod_set</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>save_got_int</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function> 










<function><type><name>int</name></type> <name>win_signcol_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>win_fill_end</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nn</name> <init>= <expr><name>off</name> <operator>+</operator> <name>width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nn</name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>nn</name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>off</name></expr></argument>,
<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>nn</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>win_draw_end</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>draw_margin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>, <parameter><decl><type><name>hlf_T</name></type> <name>hl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hl</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hl</name> <operator>&lt;</operator> <name>HLF_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_margin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>win_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fdc</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>,
<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>win_signcol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>win_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_SC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>win_fill_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>,
<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>,
<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr></argument>,
<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>endrow</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_empty_rows</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>advance_color_col</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vcol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>color_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>color_cols</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&gt;</operator> <operator>*</operator><operator>*</operator><name>color_cols</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>color_cols</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>*</operator><operator>*</operator><name>color_cols</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_foldcolumn</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>win_fdccol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wmw</name> <init>= <expr><ternary><condition><expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>p_wmw</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>p_wmw</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wwidth</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <name>wwidth</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>wmw</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fdc</name> <operator>=</operator> <name>wwidth</name> <operator>-</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>wmw</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fdc</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>line_putchar</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxcells</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name></decl>, <decl><type ref="prev"/><name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>&gt;</operator> <name>maxcells</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_c</name></name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>arabic_char</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>pc1</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstbyte</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_c1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>c_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_c1</name></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>c_len</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_c</name></name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstbyte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_c</name></name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>schar_from_cc</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>c_len</name></expr>;</expr_stmt>
<return>return <expr><name>cells</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>fold_line</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>fold_count</name></decl></parameter>, <parameter><decl><type><name>foldinfo_T</name> <modifier>*</modifier></type><name>foldinfo</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>FOLD_TEXT_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnume</name> <init>= <expr><name>lnum</name> <operator>+</operator> <name>fold_count</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>txtcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>









<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>cmdwin_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MEMSET</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (wp-&gt;w_p_rl) { for (int ri = 0; ri &lt; l; ri++) { linebuf_attr[off + (wp-&gt;w_grid.Columns - (p) - (l)) + ri] = v; } } else { for (int ri = 0; ri &lt; l; ri++) { linebuf_attr[off + (p) + ri] = v; } } } while (0)</cpp:value></cpp:define>














<expr_stmt><expr><name>fdc</name> <operator>=</operator> <call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_foldcolumn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fdc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_c</name> <init>= <expr><call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_char</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>col</name></expr>]</index></name></expr></argument>,
<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_char</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>fdc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>win_signcol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_max</name> <init>= <expr><call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>win_signcol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>len_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len_max</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>space_buf</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len_max</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>space_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>space_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%*ld "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>get_cursor_rel_lnum</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>num</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%-*ld "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>FOLD_TEXT_LEN</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>len</name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_text_attr</name><argument_list>(<argument><expr><name>off</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>get_foldtext</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>lnume</name></expr></argument>, <argument><expr><name>foldinfo</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>txtcol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>LineState</name></type> <name>s</name> <init>= <expr><call><name>LINE_STATE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name><name>s</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>maxcells</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>col</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><call><name>line_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>linebuf_char</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxcells</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>txtcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>schar_T</name></type> <name>sc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>schar_from_char</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>txtcol</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name><operator>+</operator><name>col</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;=</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnume</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'v'</literal>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>lnum</name> <operator>&gt;</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>top</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lnume</name> <operator>&lt;</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>lnume</name> <operator>==</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator><operator>)</operator>
<operator>&gt;=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnume</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>+</operator> <name>txtcol</name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name> <operator>+</operator> <name>txtcol</name>
<operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>txtcol</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name> <operator>+</operator> <name>txtcol</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>RL_MEMSET</name><argument_list>(<argument><expr><name>txtcol</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name> <operator>-</operator> <name>txtcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_txtcol</name> <init>= <expr><name>txtcol</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>txtcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>txtcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name> <operator>=</operator>
<call><name>hl_combine_attr</name><argument_list>(<argument><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>txtcol</name> <operator>=</operator> <name>old_txtcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>txtcol</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>txtcol</name> <operator>-=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>txtcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>txtcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(
<argument><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name> <operator>+</operator> <name>txtcol</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_put_linebuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnume</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>conceal_cursor_used</name> <operator>=</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_text_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>fill_foldcolumn</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>closed</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>char_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>MAX_MCO</name> <operator>*</operator> <name>fdc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>win_foldinfo</name><operator>.</operator><name>fi_level</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>first_level</name> <operator>=</operator> <name>level</name> <operator>-</operator> <name>fdc</name> <operator>-</operator> <name>closed</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_level</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>fdc</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>win_foldinfo</name><operator>.</operator><name>fi_lnum</name></name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name>first_level</name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name><name>win_foldinfo</name><operator>.</operator><name>fi_low_level</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldopen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first_level</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldsep</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first_level</name> <operator>+</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>first_level</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>symbol</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>char_counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>char_counter</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first_level</name> <operator>+</operator> <name>i</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>closed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>char_counter</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>char_counter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>foldclosed</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>char_counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>char_counter</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>MAX</name><argument_list>(<argument><expr><name>char_counter</name> <operator>+</operator> <operator>(</operator><name>fdc</name><operator>-</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>fdc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_line</name> <parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>startrow</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>endrow</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nochange</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>number_only</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>vcol_sbr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>vcol_prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name></type> <name><name>extra</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p_extra_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c_extra</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c_final</name> <init>= <expr><name>NUL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extra_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>at_end_str</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>lcs_eol_one</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lcs_prec_todo</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>prec</name></name></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>saved_n_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>saved_p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_c_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_c_final</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_char_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>saved_attr2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n_attr3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>saved_attr3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fromcol</name> <init>= <expr><operator>-</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tocol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fromcol_prev</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>noinvcur</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lnum_in_visual_area</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>char_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>attr_pri</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>area_highlighting</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>area_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>search_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vcol_save_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>syntax_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_syntax</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>save_did_emsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eol_hl_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>draw_color_col</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>color_cols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>has_spell</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPWORDLEN</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>nextline</name><index>[<expr><name>SPWORDLEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nextlinecol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nextline_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>spell_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>word_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>checked_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>checked_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cap_col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>capcol_lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cur_checked_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extra_check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>multi_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>mb_utf8</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>filler_lines</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>filler_todo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>hlf_T</name></type> <name>diff_hlf</name> <init>= <expr><operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>change_start</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>change_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>trailcol</name> <init>= <expr><name>MAXCOL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>need_showbreak</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>line_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>line_attr_lowprio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>prevcol_hl_flag</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prev_c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>search_attr_from_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>has_decorations</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>do_virttext</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_CMDLINE</name></cpp:macro> <cpp:value>WL_START + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_FOLD</name></cpp:macro> <cpp:value>WL_CMDLINE + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SIGN</name></cpp:macro> <cpp:value>WL_FOLD + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_NR</name></cpp:macro> <cpp:value>WL_SIGN + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_BRI</name></cpp:macro> <cpp:value>WL_NR + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_SBR</name></cpp:macro> <cpp:value>WL_BRI + 1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WL_LINE</name></cpp:macro> <cpp:value>WL_SBR + 1</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>int</name></type> <name>draw_state</name> <init>= <expr><name>WL_START</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>syntax_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syntax_seqnr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_syntax_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>conceal_attr</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CONCEAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_concealing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boguscols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vcol_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>did_wcol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match_conc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>old_boguscols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCOL_HLC</name></cpp:macro> <cpp:value>(vcol - vcol_off)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_FOR_BOGUSCOLS</name></cpp:macro> <cpp:value>{ n_extra += vcol_off; vcol -= vcol_off; vcol_off = 0; col -= boguscols; old_boguscols = boguscols; boguscols = 0; }</cpp:value></cpp:define>









<if_stmt><if>if <condition>(<expr><name>startrow</name> <operator>&gt;</operator> <name>endrow</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>startrow</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>startrow</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>luatext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>number_only</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>syntax_present</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>decorations_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_luahl_line</name></name> <operator>!=</operator> <name>LUA_NOREF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FIXED_TEMP_ARRAY</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>WINDOW_OBJ</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BUFFER_OBJ</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lua_attr_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>executor_exec_lua_cb</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_luahl_line</name></name></expr></argument>, <argument><expr><literal type="string">"line"</literal></expr></argument>,
<argument><expr><name>args</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lua_attr_active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>luatext</name> <operator>=</operator> <name><name>o</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_virttext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"error in luahl line: %s"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>luatext</name> <operator>=</operator> <name><name>err</name><operator>.</operator><name>msg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_virttext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>has_decorations</name> <operator>=</operator> <call><name>decorations_redraw_line</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>decorations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_decorations</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>color_cols</name> <operator>=</operator> <ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cc_cols</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color_cols</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_spell</name></name>
<operator>&amp;&amp;</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_p_spl</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_langp</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_langp</name><operator>.</operator><name>ga_data</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_spell</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>nextline</name><index>[<expr><name>SPWORDLEN</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>spell_cat_line</name><argument_list>(<argument><expr><name>nextline</name> <operator>+</operator> <name>SPWORDLEN</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name>checked_lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_checked_col</name> <operator>=</operator> <name>checked_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>checked_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>!=</operator> <name>capcol_lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ltoreq</name><argument_list>(<argument><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>VIsual</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>&amp;</operator><name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lnum_in_visual_area</name> <operator>=</operator> <operator>(</operator><name>lnum</name> <operator>&gt;=</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum_in_visual_area</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_fcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_old_cursor_lcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fromcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gchar_pos</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>fromcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>VIsual_mode</name> <operator>!=</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>bot</name><operator>-&gt;</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>bot</name><operator>-&gt;</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bot</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>bot</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tocol</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>highlight_match</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <call><name>cursor_is_block_during_visual</name><argument_list>(<argument><expr><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>noinvcur</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>highlight_match</name>
<operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&gt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>search_match_lines</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>fromcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>+</operator> <name>search_match_lines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>search_match_endcol</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvcol</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>==</operator> <name>tocol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tocol</name> <operator>=</operator> <name>fromcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <call><name>diff_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>filler_lines</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>diff_find_change</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>change_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>change_start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_TXD</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_ADD</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filler_lines</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filler_todo</name> <operator>=</operator> <name>filler_lines</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>VIsual_active</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cul_attr</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>ae</name> <init>= <expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>cul_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ae</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ae</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_attr_lowprio</name> <operator>=</operator> <name>cul_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>qf_current_entry</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>cul_attr</name></expr></argument>, <argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <name>cul_attr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_last_cursorline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>buf_getsigntype</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>SIGN_LINEHL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>sign_get_attr</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr></argument>, <argument><expr><name>SIGN_LINEHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>bt_quickfix</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>qf_current_entry</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_QFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_attr_lowprio</name> <operator>||</operator> <name>line_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_spell</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>number_only</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cap_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getwhitecols</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>nextline</name><index>[<expr><name>SPWORDLEN</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>SPWORDLEN</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>nextline</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>nextline</name> <operator>+</operator> <name>v</name></expr></argument>, <argument><expr><name>nextline</name> <operator>+</operator> <name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nextlinecol</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>SPWORDLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>nextline</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>nextlinecol</name></expr></argument>, <argument><expr><name>SPWORDLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>nextline_idx</name> <operator>=</operator> <name>SPWORDLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trailcol</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>trailcol</name> <operator>&gt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>trailcol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trailcol</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>trailcol</name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>number_only</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_ptr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>







<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name>
<operator>||</operator> <name>draw_color_col</name>
<operator>||</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>||</operator> <operator>(</operator><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&gt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>prev_ptr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>c</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_skip</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>vcol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>&lt;=</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fromcol</name> <operator>&lt;</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>has_spell</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>linecol</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hlf_T</name></type> <name>spell_hlf</name> <init>= <expr><name>HLF_COUNT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>linecol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>spell_move_to</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>FORWARD</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spell_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>linecol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>ptr</name> <operator>-</operator> <name>line</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>spell_hlf</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>spell_to_word_end</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>line</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>spell_hlf</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>has_syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>syntax_start</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>noinvcur</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>fromcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>fromcol_prev</name> <operator>=</operator> <name>fromcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>fromcol</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fromcol_prev</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fromcol</name> <operator>&gt;=</operator> <name>tocol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fromcol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>shl_flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>number_only</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shl_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <operator>&amp;</operator><name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_slow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>
<operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_attr_from_match</name> <operator>=</operator> <name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>area_highlighting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>term_attrs</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>terminal_get_line_attributes</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>term_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_check</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>has_match_conc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>did_decrement_ptr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>!=</operator> <name>WL_LINE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_CMDLINE</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_CMDLINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmdwin_type</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>cmdwin_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_FOLD</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fdc</name> <init>= <expr><call><name>compute_foldcolumn</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_FOLD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>MAX_MCO</name> <operator>*</operator> <name>fdc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>fill_foldcolumn</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extra_free</name><index>[<expr><name>n_extra</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>p_extra_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_FC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_SIGN</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_SIGN</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>win_signcol_count</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>text_sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_SC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>startrow</name> <operator>+</operator> <name>filler_lines</name> <operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text_sign</name> <operator>=</operator> <call><name>buf_getsigntype</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>SIGN_TEXT</name></expr></argument>,
<argument><expr><name>sign_idx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>text_sign</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <call><name>sign_get_text</name><argument_list>(<argument><expr><name>text_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>symbol_blen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&gt;=</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>symbol_blen</name> <operator>+</operator>
<operator>(</operator><call><name>win_signcol_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>mb_string2cells</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>symbol_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>symbol_blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_extra</name><index>[<expr><name>n_extra</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>sign_get_attr</name><argument_list>(<argument><expr><name>text_sign</name></expr></argument>, <argument><expr><name>SIGN_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign_idx</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign_idx</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_SIGN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_NR</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_NR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>==</operator> <name>startrow</name>
<operator>+</operator> <name>filler_lines</name>
<operator>||</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_NUMCOL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>startrow</name>
<operator>+</operator> <name>filler_lines</name></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%*ld "</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>labs</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>get_cursor_rel_lnum</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%-*ld "</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</init> <condition><expr><operator>*</operator><name>p_extra</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p_extra</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_extra</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>skiptowhite</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>extra</name></expr></init></decl>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr>;</condition> <incr><expr><name>p1</name><operator>++</operator></expr><operator>,</operator> <expr><name>p2</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>p1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <operator>*</operator><name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>number_width</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_sign</name> <init>= <expr><call><name>buf_getsigntype</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>SIGN_NUMHL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_sign</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>sign_get_attr</name><argument_list>(<argument><expr><name>num_sign</name></expr></argument>, <argument><expr><name>SIGN_NUMHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_brisbr</name></name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_brisbr</name></name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_SBR</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_BRI</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_BRI</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_bri</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>row</name> <operator>!=</operator> <name>startrow</name> <operator>||</operator> <name>need_showbreak</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>filler_lines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator>
<call><name>get_breakindent_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tocol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_SBR</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_SBR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>char2cells</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>diff</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>diff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_DED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>need_showbreak</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>p_sbr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vcol_sbr</name> <operator>=</operator> <name>vcol</name> <operator>+</operator> <call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_LINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>saved_n_extra</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>saved_n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>saved_c_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>saved_c_final</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>saved_p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_char_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dollar_vcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>number_only</name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_put_linebuf</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><operator>-</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cline_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>area_highlighting</name> <operator>||</operator> <name>has_spell</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>==</operator> <name>fromcol</name>
<operator>||</operator> <operator>(</operator><name>vcol</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>fromcol</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>vcol_prev</name> <operator>==</operator> <name>fromcol_prev</name>
<operator>&amp;&amp;</operator> <name>vcol_prev</name> <operator>&lt;</operator> <name>vcol</name> 
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>area_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>vcol</name> <operator>==</operator> <name>tocol</name>
<operator>||</operator> <operator>(</operator><name>noinvcur</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>area_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n_extra</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pos_inprogress</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pos_inprogress</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name>
<operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp_col</name> <init>= <expr><name>v</name> <operator>+</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>&lt;</operator> <name>tmp_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>tmp_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name>
<operator>&amp;&amp;</operator> <call><name>syn_name2id</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"Conceal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>has_match_conc</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>match_conc</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>conceal_char</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_match_conc</name> <operator>=</operator> <name>match_conc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <operator>&amp;</operator><name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name> <operator>==</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>endcol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>search_attr_from_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <name><name>search_hl</name><operator>.</operator><name>attr_cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr_cur</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_attr_from_match</name> <operator>=</operator> <name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>search_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_CHD</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&gt;=</operator> <name>change_start</name>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_TXD</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_TXD</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&gt;</operator> <name>change_end</name>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_attr</name> <operator>=</operator> <ternary><condition><expr><literal type="number">0</literal> <operator>!=</operator> <name>line_attr_lowprio</name></expr> 
?</condition><then> <expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>hl_get_underline</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>attr_pri</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><name>area_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>search_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr</name></expr></argument>, <argument><expr><name>search_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>


<if type="elseif">else if <condition>(<expr><name>line_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>fromcol</name> <operator>==</operator> <operator>-</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>tocol</name> <operator>==</operator> <name>MAXCOL</name><operator>)</operator>
<operator>||</operator> <name>vcol</name> <operator>&lt;</operator> <name>fromcol</name> <operator>||</operator> <name>vcol_prev</name> <operator>&lt;</operator> <name>fromcol_prev</name>
<operator>||</operator> <name>vcol</name> <operator>&gt;=</operator> <name>tocol</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>line_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>attr_pri</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_syntax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>syntax_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c_final</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c_final</name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr> ?</condition><then> <expr><name>c_final</name></expr> </then><else>: <expr><name>c_extra</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <name>n_extra</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mb_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>n_extra</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>-=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra</name> <operator>+=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c0</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>


<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mb_c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c0</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>MAX_MCO</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mb_l</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_l</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mb_c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>transchar_hex</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>extra</name></expr></argument>, <argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>rl_mirror</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mb_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>arabic_char</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>pc1</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name>prev_c1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mb_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c1</name> <operator>=</operator> <name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mb_l</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>mb_c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc1</name></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>mb_c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>did_decrement_ptr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>n_skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mb_l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>MB_FILLER_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_check</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>can_spell</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_syntax</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>save_did_emsg</name> <operator>=</operator> <name>did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>syntax_attr</name> <operator>=</operator> <call><name>get_syntax_attr</name><argument_list>(<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>has_spell</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>can_spell</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_s</name><operator>-&gt;</operator><name>b_syn_error</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_syntax</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>save_did_emsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>syntax_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>syntax_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>syntax_flags</name> <operator>=</operator> <call><name>get_syntax_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syntax_seqnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>has_spell</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>word_end</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <name>cur_checked_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>syntax_attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>has_syntax</name> <operator>||</operator> <name>can_spell</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>prev_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hlf_T</name></type> <name>spell_hlf</name> <init>= <expr><name>HLF_COUNT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prev_ptr</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>mb_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>mb_l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>nextlinecol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>nextline</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <name>nextlinecol</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>prev_ptr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmplen</name> <init>= <expr><call><name>spell_check</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>spell_hlf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cap_col</name></expr></argument>, <argument><expr><name>nochange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmplen</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>tmplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_end</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>word_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>spell_hlf</name> <operator>=</operator> <name>HLF_COUNT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spell_redraw_lnum</name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>==</operator> <name>HLF_COUNT</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>!=</operator> <name>prev_ptr</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>nextline_idx</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>checked_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>checked_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>-</operator> <name>nextline_idx</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>spell_hlf</name> <operator>!=</operator> <name>HLF_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>spell_attr</name> <operator>=</operator> <name><name>highlight_attr</name><index>[<expr><name>spell_hlf</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cap_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>prev_ptr</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>cap_col</name> <operator>&gt;=</operator> <name>nextline_idx</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>nextline</name><operator>)</operator> <operator>+</operator> <name>cap_col</name>
<operator>-</operator> <name>nextline_idx</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cap_col</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>prev_ptr</name> <operator>-</operator> <name>line</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>spell_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>spell_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>spell_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_decorations</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extmark_attr</name> <init>= <expr><call><name>decorations_redraw_col</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>v</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>decorations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>extmark_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_pri</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>extmark_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>extmark_attr</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name><name>term_attrs</name><index>[<expr><name>vcol</name></expr>]</index></name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>&amp;&amp;</operator> <name>c0</name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <call><name>vim_isbreak</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isbreak</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_off</name> <init>= <expr><call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name> <operator>-</operator> <operator>(</operator><name>mb_off</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>win_lbr_chartabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>+</operator> <name>col</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <name>vcol</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <ternary><condition><expr><name>mb_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MB_FILLER_CHAR</name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>FIX_FOR_BOGUSCOLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">160</literal>
<operator>||</operator> <operator>(</operator><name>mb_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mb_c</name> <operator>==</operator> <literal type="number">160</literal> <operator>||</operator> <name>mb_c</name> <operator>==</operator> <literal type="number">0x202f</literal><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name>
<operator>&amp;&amp;</operator> <name>ptr</name> <operator>-</operator> <name>line</name> <operator>&lt;=</operator> <name>trailcol</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>space</name></name></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>nbsp</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailcol</name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;</operator> <name>line</name> <operator>+</operator> <name>trailcol</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>trail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tab_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>vcol_adjusted</name> <init>= <expr><name>vcol</name></expr></init></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_sbr</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>==</operator> <name>vcol_sbr</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol_adjusted</name> <operator>=</operator> <name>vcol</name> <operator>-</operator> <call><name>MB_CHARLEN</name><argument_list>(<argument><expr><name>p_sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tab_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name>
<operator>-</operator> <name>vcol_adjusted</name> <operator>%</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name> <operator>||</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <name>tab_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_nextra</name> <init>= <expr><name>n_extra</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vcol_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>vcol_off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name> <operator>&amp;&amp;</operator> <name>old_boguscols</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>n_extra</name> <operator>&gt;</operator> <name>tab_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>n_extra</name> <operator>-</operator> <name>tab_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>tab_len</name> <operator>*</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n_extra</name> <operator>-</operator> <name>tab_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tab_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lcs</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>tab_len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lcs</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>saved_nextra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>p_extra_free</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>vcol_off</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>-=</operator> <name>vcol_off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vc_saved</name> <init>= <expr><name>vcol_off</name></expr></init></decl>;</decl_stmt>







<expr_stmt><expr><name>FIX_FOR_BOGUSCOLS</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>==</operator> <name>tab_len</name> <operator>+</operator> <name>vc_saved</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tab_len</name> <operator>+=</operator> <name>vc_saved</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name><operator>)</operator></expr>
?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name></expr>
</then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab2</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab3</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>tab_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>fromcol</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>fromcol_prev</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>&gt;</operator> <name>vcol</name>
<operator>&amp;&amp;</operator> <name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>noinvcur</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>line_attr</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>line_attr_lowprio</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>area_highlighting</name> <operator>&amp;&amp;</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>!=</operator> <name>MAXCOL</name> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <name>at_end_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lcs_eol_one</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_extra</name> <operator>=</operator> <call><name>transchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dy_flags</name> <operator>&amp;</operator> <name>DY_UHEX</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rl_mirror</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lbr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>n_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_extra</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>n_extra</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_extra_free</name> <operator>=</operator> <name>p_extra</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <call><name>byte2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p_extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <name>n_extra</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_attr2</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>VIsual_active</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <name>VIsual_mode</name> <operator>==</operator> <literal type="char">'v'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>virtual_active</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <name>tocol</name> <operator>!=</operator> <name>MAXCOL</name>
<operator>&amp;&amp;</operator> <name>vcol</name> <operator>&lt;</operator> <name>tocol</name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>||</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>syntax_flags</name> <operator>&amp;</operator> <name>HL_CONCEAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>has_match_conc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>lnum_in_visual_area</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cocu</name></name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>conceal_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev_syntax_id</name> <operator>!=</operator> <name>syntax_seqnr</name> <operator>||</operator> <name>has_match_conc</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>syn_get_sub_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <name>match_conc</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>match_conc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>match_conc</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>syn_get_sub_char</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>syn_get_sub_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>conceal</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>conceal</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>prev_syntax_id</name> <operator>=</operator> <name>syntax_seqnr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol_off</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>boguscols</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n_skip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_concealing</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_syntax_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_concealing</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n_skip</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>did_decrement_ptr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_wcol</name> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name>
<operator>&amp;&amp;</operator> <name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&lt;=</operator> <name>vcol</name> <operator>+</operator> <name>n_skip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>boguscols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>boguscols</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_wcol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <name>VALID_WCOL</name><operator>|</operator><name>VALID_WROW</name><operator>|</operator><name>VALID_VIRTCOL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n_attr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>search_attr_from_match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>, <argument><expr><name>extra_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>lcs_prec_todo</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name>
<operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs_prec_todo</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>c_extra</name> <operator>=</operator> <name>MB_FILLER_CHAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_final</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>saved_attr3</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>n_attr3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>prevcol</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr> ?</condition><then> <expr><name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr> </then><else>: <expr><name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name>prevcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevcol</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>prevcol_hl_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>search_hl</name><operator>.</operator><name>is_addpos</name></name> <operator>&amp;&amp;</operator> <name>prevcol</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>search_hl</name><operator>.</operator><name>startcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevcol_hl_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>is_addpos</name></name> <operator>&amp;&amp;</operator> <name>prevcol</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>startcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prevcol_hl_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>==</operator> <name>lcs_eol_one</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>area_attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vcol</name> <operator>==</operator> <name>fromcol</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>VIsual_mode</name> <operator>!=</operator> <name>Ctrl_V</name>
<operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>prevcol_hl_flag</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>area_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name><name>search_hl</name><operator>.</operator><name>attr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>FALSE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>priority</name></name> <operator>&gt;</operator> <name>SEARCH_HL_PRIORITY</name><operator>)</operator>
<operator>||</operator> <name>cur</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>line</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>shl</name><operator>-&gt;</operator><name>startcol</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>shl</name> <operator>==</operator> <operator>&amp;</operator><name>search_hl</name> <operator>||</operator> <operator>!</operator><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>attr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eol_attr</name> <init>= <expr><name>char_attr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cul</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eol_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eol_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>eol_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eol_hl_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_skipcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_leftcol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>vcol</name> <operator>&lt;</operator> <name>v</name> <operator>+</operator> <name>col</name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>col</name> <operator>-</operator> <call><name>win_col_off</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>boguscols</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>VirtText</name></type> <name>virt_text</name> <init>= <expr><name>KV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>luatext</name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>virt_text</argument>, <argument>((VirtTextChunk){ .text = luatext, .hl_id = <literal type="number">0</literal> })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>do_virttext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_decorations</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><call><name>decorations_redraw_virt_text</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decorations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>vp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>virt_text</name> <operator>=</operator> <operator>*</operator><name>vp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>do_virttext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&gt;=</operator> <name>VCOL_HLC</name> <operator>-</operator> <name>eol_hl_off</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>&lt;</operator>
<name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>*</operator> <operator>(</operator><name>row</name> <operator>-</operator> <name>startrow</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>v</name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>
<operator>||</operator> <name>draw_color_col</name> <operator>||</operator> <name>line_attr_lowprio</name> <operator>||</operator> <name>line_attr</name>
<operator>||</operator> <name>diff_hlf</name> <operator>!=</operator> <operator>(</operator><name>hlf_T</name><operator>)</operator><literal type="number">0</literal> <operator>||</operator> <name>do_virttext</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rightmost_vcol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>virt_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LineState</name></type> <name>s</name> <init>= <expr><call><name>LINE_STATE</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>virt_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>delay_virttext</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>==</operator> <name>lcs_eol_one</name>
<operator>&amp;&amp;</operator> <name>eol_hl_off</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rightmost_vcol</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rightmost_vcol</name> <operator>&lt;</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rightmost_vcol</name> <operator>=</operator> <name><name>color_cols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cuc_attr</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mc_attr</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>==</operator> <name>HLF_TXD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff_hlf</name> <operator>=</operator> <name>HLF_CHD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>diff_hlf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>diff_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>diff_hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_attr</name> <init>= <expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr_lowprio</name></expr></argument>, <argument><expr><name>diff_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>base_attr</name> <operator>||</operator> <name>line_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rightmost_vcol</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_stride</name> <init>= <expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>do_virttext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>delay_virttext</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>virt_pos</name> <operator>&lt;</operator> <name><name>virt_text</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>kv_A</name><argument_list>(<argument><expr><name>virt_text</name></expr></argument>, <argument><expr><name>virt_pos</name></expr></argument>)</argument_list></call><operator>.</operator><name>text</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl_id</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>virt_text</name></expr></argument>, <argument><expr><name>virt_pos</name></expr></argument>)</argument_list></call><operator>.</operator><name>hl_id</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virt_attr</name> <operator>=</operator> <ternary><condition><expr><name>hl_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>hl_id</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>virt_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>do_virttext</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cells</name> <operator>=</operator> <call><name>line_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <name>col</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>delay_virttext</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>cells</name> <operator>*</operator> <name>col_stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col_attr</name> <init>= <expr><name>base_attr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_attr</name> <operator>=</operator> <name>cuc_attr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>draw_color_col</name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>*</operator><name>color_cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_attr</name> <operator>=</operator> <name>mc_attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_virttext</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>col_attr</name></expr></argument>, <argument><expr><name>virt_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>col_attr</name></expr></argument>, <argument><expr><name>line_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>col_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>col_attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>cells</name> <operator>*</operator> <name>col_stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>VCOL_HLC</name> <operator>&gt;=</operator> <name>rightmost_vcol</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>s</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name>virt_pos</name> <operator>&gt;=</operator> <name><name>virt_text</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>cells</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>terminal</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name><name>term_attrs</name><index>[<expr><name>vcol</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_put_linebuf</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>=</operator> <name>startrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>=</operator> <name>row</name> <operator>-</operator> <name>startrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_folded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_valid</name></name> <operator>|=</operator> <operator>(</operator><name>VALID_CHEIGHT</name><operator>|</operator><name>VALID_CROW</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>conceal_cursor_used</name> <operator>=</operator> <call><name>conceal_cursor_line</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>ext</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>col</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name>
<operator>||</operator> <name>lcs_eol_one</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p_extra</name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>ext</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_utf8</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_color_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>draw_color_col</name> <operator>=</operator> <call><name>advance_color_col</name><argument_list>(<argument><expr><name>VCOL_HLC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>color_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lnum_in_visual_area</name>
<operator>&amp;&amp;</operator> <name>search_attr</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>area_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cuc</name></name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name>
<operator>&amp;&amp;</operator> <name>lnum</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_CUC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>draw_color_col</name> <operator>&amp;&amp;</operator> <name>VCOL_HLC</name> <operator>==</operator> <operator>*</operator><name>color_cols</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol_save_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_MC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>==</operator> <name>WL_LINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>line_attr_lowprio</name></expr></argument>, <argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>vcol_prev</name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&lt;</operator> <name>WL_LINE</name> <operator>||</operator> <name>n_skip</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_utf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_cc</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_c</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>multi_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>multi_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>multi_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebuf_char</name><index>[<expr><name>off</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name> <operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>tocol</name> <operator>==</operator> <name>vcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tocol</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_cole</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_concealing</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>n_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>vcol_off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcol_off</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name></expr>)</condition> <block>{<block_content>













<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>-=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>boguscols</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>mb_char2cells</name>)<argument_list>(<argument><expr><name>mb_c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>boguscols</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n_attr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>n_skip</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vcol_save_attr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>vcol_save_attr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>&gt;</operator> <name>WL_NR</name> <operator>&amp;&amp;</operator> <name>n_attr3</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>n_attr3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_attr3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>n_attr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>draw_state</name> <operator>==</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>n_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>char_attr</name> <operator>=</operator> <name>saved_attr2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name><operator>)</operator></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name>
<operator>||</operator> <name>filler_todo</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>eol</name></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name>p_extra</name> <operator>!=</operator> <name>at_end_str</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>n_extra</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c_extra</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>p_extra</name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>wrap</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name> 
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal> 
<operator>&amp;&amp;</operator> <name>lcs_eol_one</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> 
<operator>&amp;&amp;</operator> <name>row</name> <operator>!=</operator> <name>endrow</name> <operator>-</operator> <literal type="number">1</literal> 
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>==</operator> <name>Columns</name> 
<operator>||</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call><operator>)</operator> 
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>grid_put_linebuf</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <name>boguscols</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr></argument>,
<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wrap</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>current_grid</name> <init>= <expr><name>grid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_row</name> <init>= <expr><name>row</name></expr></init></decl>, <decl><type ref="prev"/><name>dummy_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current_row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>current_grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>current_grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>current_row</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>current_grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>current_row</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>boguscols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_wrap</name></name>
<operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal>
<operator>)</operator> <operator>||</operator> <name>lcs_eol_one</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>draw_state</name> <operator>!=</operator> <name>WL_LINE</name> <operator>&amp;&amp;</operator> <name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_draw_end</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><name>HLF_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>endrow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>endrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>row</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>draw_state</name> <operator>=</operator> <name>WL_START</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_n_extra</name> <operator>=</operator> <name>n_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_p_extra</name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_c_extra</name> <operator>=</operator> <name>c_extra</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_c_final</name> <operator>=</operator> <name>c_final</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_char_attr</name> <operator>=</operator> <name>char_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs_prec_todo</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>prec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>need_showbreak</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filler_todo</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>filler_todo</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_botfill</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 


<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>capcol_lnum</name> <operator>=</operator> <name>lnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p_extra_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>luatext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>row</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>screen_adjust_grid</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier><modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>row_off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>col_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>grid</name><operator>)</operator><operator>-&gt;</operator><name>chars</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>grid</name> <operator>!=</operator> <operator>&amp;</operator><name>default_grid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>row_off</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>grid</name><operator>)</operator><operator>-&gt;</operator><name>row_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>col_off</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>grid</name><operator>)</operator><operator>-&gt;</operator><name>col_offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>grid</name> <operator>==</operator> <operator>&amp;</operator><name>msg_grid_adj</name> <operator>&amp;&amp;</operator> <name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>grid</name> <operator>=</operator> <operator>&amp;</operator><name>msg_grid</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>grid</name> <operator>=</operator> <operator>&amp;</operator><name>default_grid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>grid_char_needs_redraw</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off_to</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>cols</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>schar_cmp</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off_from</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>linebuf_attr</name><index>[<expr><name>off_from</name></expr>]</index></name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name></expr>]</index></name>
<operator>||</operator> <operator>(</operator><call><name>line_off2cells</name><argument_list>(<argument><expr><name>linebuf_char</name></expr></argument>, <argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>off_from</name> <operator>+</operator> <name>cols</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>schar_cmp</name><argument_list>(<argument><expr><name><name>linebuf_char</name><index>[<expr><name>off_from</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>||</operator> <name>rdb_flags</name> <operator>&amp;</operator> <name>RDB_NODELTA</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>grid_put_linebuf</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coloff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endcol</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>clear_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rlflag</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bg_attr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wrap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>redraw_this</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>redraw_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>clear_next</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_cells</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start_dirty</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_dirty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>endcol</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>||</operator> <name>coloff</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"invalid state, skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off_from</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_to</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_off_from</name> <operator>=</operator> <name>linebuf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_off_to</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rlflag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name>endcol</name> <operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal>
<operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>==</operator> <name>bg_attr</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>off_to</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>coloff</name></expr></argument>, <argument><expr><name>endcol</name> <operator>+</operator> <name>coloff</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>bg_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>endcol</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off_to</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name> <operator>+</operator> <name>coloff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off_from</name> <operator>+=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endcol</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>clear_width</name></expr> </then><else>: <expr><operator>-</operator><name>clear_width</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bg_attr</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>col</name></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>endcol</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>linebuf_attr</name><index>[<expr><name>off_from</name><operator>+</operator><name>c</name></expr>]</index></name> <operator>=</operator>
<call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>bg_attr</name></expr></argument>, <argument><expr><name><name>linebuf_attr</name><index>[<expr><name>off_from</name><operator>+</operator><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <call><name>grid_char_needs_redraw</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>endcol</name> <operator>-</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>endcol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>char_cells</name> <operator>=</operator> <call><name>line_off2cells</name><argument_list>(<argument><expr><name>linebuf_char</name></expr></argument>, <argument><expr><name>off_from</name></expr></argument>, <argument><expr><name>max_off_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>redraw_this</name> <operator>=</operator> <name>redraw_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_next</name> <operator>=</operator> <call><name>grid_char_needs_redraw</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off_from</name> <operator>+</operator> <name>char_cells</name></expr></argument>,
<argument><expr><name>off_to</name> <operator>+</operator> <name>char_cells</name></expr></argument>,
<argument><expr><name>endcol</name> <operator>-</operator> <name>col</name> <operator>-</operator> <name>char_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw_this</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start_dirty</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_dirty</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end_dirty</name> <operator>=</operator> <name>col</name> <operator>+</operator> <name>char_cells</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>char_cells</name> <operator>==</operator> <name>endcol</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>char_cells</name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off_to</name></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off_to</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>linebuf_char</name><index>[<expr><name>off_from</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>linebuf_char</name><index>[<expr><name>off_from</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name><name>linebuf_attr</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>char_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>linebuf_attr</name><index>[<expr><name>off_from</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off_to</name> <operator>+=</operator> <name>char_cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off_from</name> <operator>+=</operator> <name>char_cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>char_cells</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>clear_next</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_dirty</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clear_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>rlflag</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>clear_width</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>!=</operator> <name>bg_attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off_to</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off_to</name></expr>]</index></name> <operator>=</operator> <name>bg_attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_dirty</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_dirty</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_dirty</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clear_end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_dirty</name> <operator>=</operator> <name>endcol</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>clear_end</name> <operator>=</operator> <name>col</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>off_to</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>clear_end</name> <operator>&lt;</operator> <name>end_dirty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_end</name> <operator>=</operator> <name>end_dirty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>start_dirty</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_dirty</name> <operator>=</operator> <name>end_dirty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clear_end</name> <operator>&gt;</operator> <name>start_dirty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>coloff</name><operator>+</operator><name>start_dirty</name></expr></argument>, <argument><expr><name>coloff</name><operator>+</operator><name>end_dirty</name></expr></argument>, <argument><expr><name>coloff</name><operator>+</operator><name>clear_end</name></expr></argument>,
<argument><expr><name>bg_attr</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rl_mirror</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p1</name> <operator>=</operator> <name>str</name></expr><operator>,</operator> <expr><name>p2</name> <operator>=</operator> <name>str</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr>;</condition> <incr><expr><operator>++</operator><name>p1</name></expr><operator>,</operator> <expr><operator>--</operator><name>p2</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <operator>*</operator><name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>status_redraw_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>status_redraw_curbuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>status_redraw_buf</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>status_redraw_buf</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>redraw_statuslines</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_status</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>win_redraw_last_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>frame_T</name> <modifier>*</modifier></type><name>frp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_LEAF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_win</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_ROW</name></expr>)</condition> <block>{<block_content>
<macro><name>FOR_ALL_FRAMES</name><argument_list>(<argument>frp</argument>, <argument>frp-&gt;fr_child</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>frp</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_child</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frp</name> <operator>=</operator> <name><name>frp</name><operator>-&gt;</operator><name>fr_next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>frp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>




<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_vsep_win</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fillchar_vsep</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name>row</name></expr></argument>, <argument><expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>status_match_len</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emenu</name> <init>= <expr><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>skip_status_match_char</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_status_match_char</name><parameter_list>(<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rem_backslash</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>!=</operator> <name>EXPAND_HELP</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>
)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BACKSLASH_IN_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>xp</name><operator>-&gt;</operator><name>xp_shell</name></name> <operator>&amp;&amp;</operator> <call><name>csh_like_shell</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type>
<name>win_redr_status_matches</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_matches</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>match</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>showtail</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_MATCH</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(showtail ? sm_gettail(matches[m], false) : matches[m])</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>highlight</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>selstart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>selstart_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>selend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>first_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_left</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emenu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>Columns</name> <operator>*</operator> <name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>highlight</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>match</name> <operator>&lt;</operator> <name>first_match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>first_match</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>match</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>first_match</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>first_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>match</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_matches</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_matches</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add_left</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>add_left</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>first_match</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>first_match</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>clen</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first_match</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first_match</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>first_match</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>clen</name> <operator>+</operator> <call><name>status_match_len</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>selstart</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>selstart_col</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>L_MATCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emenu</name> <operator>=</operator> <operator>(</operator><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUS</name>
<operator>||</operator> <name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>==</operator> <name>EXPAND_MENUNAMES</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>emenu</name> <operator>&amp;&amp;</operator> <call><name>menu_is_separator</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>transchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>skip_status_match_char</name><argument_list>(<argument><expr><name>xp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>transchar_byte</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>match</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>selend</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>num_matches</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>num_matches</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name>cmdline_row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wild_menu_showing</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>wild_menu_showing</name> <operator>==</operator> <name>WM_LIST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>msg_scrolled</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>cmdline_row</name> <operator>==</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_scroll_up</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmdline_row</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <name>WM_SCROLLED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_p_ls</name> <operator>=</operator> <name>p_ls</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_p_wmh</name> <operator>=</operator> <name>p_wmh</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_ls</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_wmh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>last_status</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wild_menu_showing</name> <operator>=</operator> <name>WM_SHOWN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>wild_menu_showing</name> <operator>==</operator> <name>WM_SCROLLED</name><operator>)</operator></expr>
?</condition><then> <expr><operator>&amp;</operator><name>msg_grid_adj</name></expr> </then><else>: <expr><operator>&amp;</operator><name>default_grid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>selstart</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>highlight</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>selend</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>selstart</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>selstart_col</name></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_WM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>,
<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>win_redraw_last_status</name><argument_list>(<argument><expr><name>topframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>win_redr_status</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_ru_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>busy</name>

<operator>||</operator> <operator>(</operator><name>wild_menu_showing</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIWildmenu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p_stl</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>redraw_custom_statusline</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name>
<operator>||</operator> <call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bt_help</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Help]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Preview]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"[+]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ro</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[RO]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;"</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>mb_string2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>clen</name> <operator>&gt;=</operator> <name>this_ru_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition>
<incr><expr><name>i</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>-=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>,
<argument><expr><name>this_ru_col</name> <operator>+</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_keymap_str</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>this_ru_col</name> <operator>-</operator> <name>len</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>this_ru_col</name> <operator>-</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_vsep_width</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stl_connected</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_vsep</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>, <argument><expr><call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>busy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>redraw_custom_statusline</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"statusline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>
?</condition><then> <expr><name>OPT_LOCAL</name></expr> </then><else>: <expr><name>OPT_GLOBAL</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>stl_connected</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>frame_T</name> <modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_frame</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name><operator>-&gt;</operator><name>fr_layout</name></name> <operator>==</operator> <name>FR_COL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fr</name><operator>-&gt;</operator><name>fr_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <name><name>fr</name><operator>-&gt;</operator><name>fr_parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>get_keymap_str</name> <parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_iminsert</name></name> <operator>!=</operator> <name>B_IMODE_LMAP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>old_curbuf</name> <init>= <expr><name>curbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>old_curwin</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"b:keymap_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>emsg_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>emsg_skip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curbuf</name> <operator>=</operator> <name>old_curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curwin</name> <operator>=</operator> <name>old_curwin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_kmap_state</name></name> <operator>&amp;</operator> <name>KEYMAP_LOADED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_keymap</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"lang"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fmt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_redr_custom</name> <parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>draw_ruler</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>entered</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>stl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stl_hlrec</name></name></type> <name><name>hltab</name><index>[<expr><name>STL_MAX_ITEM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StlClickRecord</name></type> <name><name>tabtab</name><index>[<expr><name>STL_MAX_ITEM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_sandbox</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>ewp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_crb_save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name>default_grid</name></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>entered</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_tal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabline"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_ruler</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_ruf</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stl</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>stl</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>stl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>stl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>stl</name><operator>++</operator> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_ruf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>maxwidth</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>grid</name> <operator>=</operator> <operator>&amp;</operator><name>msg_grid_adj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxwidth</name><operator>--</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"rulerformat"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>stl</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>stl</name> <operator>=</operator> <name>p_stl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>use_sandbox</name> <operator>=</operator> <call><name>was_set_insecurely</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"statusline"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>*</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>==</operator> <name>NUL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>OPT_LOCAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>



<expr_stmt><expr><name>ewp</name> <operator>=</operator> <ternary><condition><expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name>wp</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>p_crb_save</name> <operator>=</operator> <name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>stl</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>build_stl_str_hl</name><argument_list>(<argument><expr><name>ewp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>stl</name></expr></argument>, <argument><expr><name>use_sandbox</name></expr></argument>,
<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>maxwidth</name></expr></argument>, <argument><expr><name>hltab</name></expr></argument>, <argument><expr><name>tabtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>stl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ewp</name><operator>-&gt;</operator><name>w_p_crb</name></name> <operator>=</operator> <name>p_crb_save</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>transstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>width</name> <operator>&lt;</operator> <name>maxwidth</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>grid_puts_line_start</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>textlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>textlen</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>curattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>vim_strnsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>textlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curattr</name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><operator>-</operator><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_stlnc</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>curattr</name> <operator>=</operator> <name><name>highlight_user</name><index>[<expr><name><name>hltab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>userhl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name> <operator>&gt;=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name>curattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grid_puts_line_flush</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StlClickDefinition</name></type> <name>cur_click_def</name> <init>= <expr><block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kStlClickDisabled</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>vim_strnsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tab_page_click_defs</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cur_click_def</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator> <name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_click_def</name> <operator>=</operator> <name><name>tabtab</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>def</name></expr>;</expr_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tab_page_click_defs</name><index>[<expr><name>col</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cur_click_def</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><name>entered</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>schar_from_ascii</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>schar_from_char</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>schar_from_cc</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>u8cc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>schar_cmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sc1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>sc1</name></expr></argument>, <argument><expr><name>sc2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>schar_copy</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sc1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sc2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>sc1</name></expr></argument>, <argument><expr><name>sc2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>line_off2cells</name><parameter_list>(<parameter><decl><type><name>schar_T</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>off</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>max_off</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>grid_off2cells</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>line_off2cells</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>grid_lefthalve</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></argument>,
<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>grid_fix_col</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>coloff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coloff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>coloff</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>coloff</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>col</name> <operator>-</operator> <name>coloff</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>grid_putchar</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>grid_getbytes</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attrp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>attrp</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>grid_puts</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScreenGrid</name> <modifier>*</modifier></type><name>put_dirty_grid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>put_dirty_row</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>put_dirty_first</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>put_dirty_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<function><type><name>void</name></type> <name>grid_puts_line_start</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>put_dirty_row</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_row</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_grid</name> <operator>=</operator> <name>grid</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>grid_puts_len</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>textlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>max_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbyte_blen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mbyte_cells</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u8c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>u8cc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clear_next_cell</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>nc1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pcc</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_redraw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_flush</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>||</operator> <name>row</name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>put_dirty_row</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_line_start</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_flush</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>!=</operator> <name>put_dirty_grid</name> <operator>||</operator> <name>row</name> <operator>!=</operator> <name>put_dirty_row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>grid</name> <operator>!=</operator> <operator>&amp;</operator><name>default_grid</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>grid_invalid_row</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>put_dirty_first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_last</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>put_dirty_last</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_off</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>text</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mbyte_blen</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mbyte_blen</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>utfc_ptr2char</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <call><name>utf_char2cells</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_arshape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_tbidi</name> <operator>&amp;&amp;</operator> <call><name>arabic_char</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>text</name><operator>)</operator> <operator>+</operator> <name>mbyte_blen</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nc1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>utfc_ptr2char_len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>mbyte_blen</name></expr></argument>, <argument><expr><name>pcc</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name>mbyte_blen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc1</name> <operator>=</operator> <name><name>pcc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>prev_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>u8c</name> <operator>=</operator> <call><name>arabic_shape</name><argument_list>(<argument><expr><name>u8c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>u8cc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nc</name></expr></argument>, <argument><expr><name>nc1</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev_c</name> <operator>=</operator> <name>u8c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>mbyte_cells</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mbyte_cells</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>schar_T</name></type> <name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>schar_from_cc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>u8c</name></expr></argument>, <argument><expr><name>u8cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>need_redraw</name> <operator>=</operator> <call><name>schar_cmp</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>attr</name>
<operator>||</operator> <name>exmode_active</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_redraw</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>clear_next_cell</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_next_cell</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ptr</name><index>[<expr><name>mbyte_blen</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>
</then><else>: <expr><name>ptr</name> <operator>+</operator> <name>mbyte_blen</name> <operator>&gt;=</operator> <name>text</name> <operator>+</operator> <name>len</name></expr></else></ternary><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>grid_off2cells</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_off</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clear_next_cell</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mbyte_cells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>put_dirty_first</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>put_dirty_first</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_last</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>put_dirty_last</name></expr></argument>, <argument><expr><name>col</name><operator>+</operator><name>mbyte_cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>mbyte_cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>mbyte_cells</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>mbyte_blen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear_next_cell</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>do_flush</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_line_flush</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>grid_puts_line_flush</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>set_cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>put_dirty_row</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>put_dirty_first</name> <operator>&lt;</operator> <name>put_dirty_last</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>set_cursor</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_grid_cursor_goto</name><argument_list>(<argument><expr><name><name>put_dirty_grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>put_dirty_row</name></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>put_dirty_last</name></expr></argument>, <argument><expr><name><name>put_dirty_grid</name><operator>-&gt;</operator><name>Columns</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>put_dirty_grid</name><operator>-&gt;</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_line</name><argument_list>(<argument><expr><name>put_dirty_grid</name></expr></argument>, <argument><expr><name>put_dirty_row</name></expr></argument>, <argument><expr><name>put_dirty_first</name></expr></argument>, <argument><expr><name>put_dirty_last</name></expr></argument>,
<argument><expr><name>put_dirty_last</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>put_dirty_grid</name><operator>-&gt;</operator><name>dirty_col</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>put_dirty_last</name> <operator>&gt;</operator> <name><name>put_dirty_grid</name><operator>-&gt;</operator><name>dirty_col</name><index>[<expr><name>put_dirty_row</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>put_dirty_grid</name><operator>-&gt;</operator><name>dirty_col</name><index>[<expr><name>put_dirty_row</name></expr>]</index></name> <operator>=</operator> <name>put_dirty_last</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>put_dirty_first</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>put_dirty_row</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_grid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>start_search_hl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_hls</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_hlsearch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>last_pat_prog</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>search_hl</name><operator>.</operator><name>rm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>tm</name></name> <operator>=</operator> <call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>end_search_hl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>init_search_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>



<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>match</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>hlg_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>first_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>tm</name></name> <operator>=</operator> <call><name>profile_setlimit</name><argument_list>(<argument><expr><name>p_rdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>first_lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>search_hl</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_search_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>shl_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>






<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_match_head</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>shl_flag</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shl_flag</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name>search_hl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shl_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shl</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>re_multiline</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</init>
<condition><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</condition>
<incr><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFoldingWin</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pos_inprogress</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>&lt;</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pos_inprogress</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>next_search_hl</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>shl</name></expr></argument>, <argument><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>n</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>shl</name> <operator>==</operator> <operator>&amp;</operator><name>search_hl</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos_inprogress</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>cur</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name>
<operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name>
<operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name><name>shl</name><operator>-&gt;</operator><name>first_lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>next_search_hl</name> <parameter_list>(
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>mincol</name></decl></parameter>, 
<parameter><decl><type><name>matchitem_T</name> <modifier>*</modifier></type><name>cur</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>matchcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>nmatched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>-</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;</operator> <name>mincol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>profile_passed_limit</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>tm</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_SEARCH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&lt;=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>matchcol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ml</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>matchcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>matchcol</name> <operator>+=</operator> <call><name>mb_ptr2len</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>matchcol</name> <operator>=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>bool</name></type> <name>regprog_is_copy</name> <init>= <expr><operator>(</operator><name>shl</name> <operator>!=</operator> <operator>&amp;</operator><name>search_hl</name>
<operator>&amp;&amp;</operator> <name>cur</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>shl</name> <operator>==</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>hl</name></name>
<operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timed_out</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <call><name>vim_regexec_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shl</name><operator>-&gt;</operator><name>rm</name></name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name><name>shl</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>shl</name><operator>-&gt;</operator><name>tm</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regprog_is_copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>match</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>hl</name><operator>.</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>called_emsg</name> <operator>||</operator> <name>got_int</name> <operator>||</operator> <name>timed_out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shl</name> <operator>==</operator> <operator>&amp;</operator><name>search_hl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_no_hlsearch</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>regprog</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nmatched</name> <operator>=</operator> <call><name>next_search_hl_pos</name><argument_list>(<argument><expr><name>shl</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr></argument>, <argument><expr><name>matchcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nmatched</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;=</operator> <name>mincol</name>
<operator>||</operator> <name>nmatched</name> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;</operator> <name>mincol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>+=</operator> <name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<break>break;</break> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_search_hl_pos</name><parameter_list>(
<parameter><decl><type><name>match_T</name> <modifier>*</modifier></type><name>shl</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>,
<parameter><decl><type><name>posmatch_T</name> <modifier>*</modifier></type><name>posmatch</name></decl></parameter>, 
<parameter><decl><type><name>colnr_T</name></type> <name>mincol</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXPOSMATCH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>llpos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><operator>&amp;</operator><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name>mincol</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>llpos_T</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>pos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><literal type="number">0</literal></expr></then><else>: <expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>
?</condition><then> <expr><name>MAXCOL</name></expr> </then><else>: <expr><name>start</name> <operator>+</operator> <name><name>posmatch</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>rm</name><operator>.</operator><name>endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shl</name><operator>-&gt;</operator><name>is_addpos</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posmatch</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name>found</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>grid_fill</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>schar_T</name></type> <name>sc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>col_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_row</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_row</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_col</name> <operator>+=</operator> <name>col_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_col</name> <operator>+=</operator> <name>col_off</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>end_row</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_row</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_col</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>start_row</name> <operator>&gt;=</operator> <name>end_row</name> <operator>||</operator> <name>start_col</name> <operator>&gt;=</operator> <name>end_col</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name>start_row</name></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>end_row</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>start_col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>grid_fix_col</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>start_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>start_col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name>
<operator>&amp;&amp;</operator> <call><name>grid_fix_col</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>end_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>dirty_first</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name>start_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>schar_from_char</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineoff</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>start_col</name></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>end_col</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>lineoff</name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>schar_cmp</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>!=</operator> <name>attr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_copy</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dirty_first</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dirty_first</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dirty_last</name> <operator>=</operator> <name>col</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <name>start_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_char</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>dirty_last</name> <operator>&gt;</operator> <name>dirty_first</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>put_dirty_row</name> <operator>==</operator> <name>row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>put_dirty_first</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>put_dirty_first</name></expr></argument>, <argument><expr><name>dirty_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>put_dirty_last</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>put_dirty_last</name></expr></argument>, <argument><expr><name>dirty_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>grid</name> <operator>==</operator> <operator>&amp;</operator><name>msg_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c2</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>dirty_last</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dirty</name> <operator>=</operator> <name>dirty_first</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>dirty_col</name></name> <operator>&amp;&amp;</operator> <name>dirty</name> <operator>&gt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>dirty_col</name><index>[<expr><name>row</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>dirty_col</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>dirty</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><ternary><condition><expr><name>c2</name> <operator>!=</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><name>dirty_last</name></expr> </then><else>: <expr><name>dirty_first</name> <operator>+</operator> <operator>(</operator><name>c1</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>dirty_first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>dirty_last</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_col</name> <operator>==</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>row</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>check_for_delay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>check_msg_scroll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>emsg_on_display</name> <operator>||</operator> <operator>(</operator><name>check_msg_scroll</name> <operator>&amp;&amp;</operator> <name>msg_scroll</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_wait_return</name>
<operator>&amp;&amp;</operator> <name>emsg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_delay</name><argument_list>(<argument><expr><literal type="number">1000L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>emsg_on_display</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>check_msg_scroll</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>win_grid_alloc</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>want_allocation</name> <init>= <expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_allocation</name> <init>= <expr><operator>(</operator><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>!=</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_lines</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>rows</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wline_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_resized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>has_allocation</name> <operator>!=</operator> <name>want_allocation</name><operator>)</operator>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>!=</operator> <name>rows</name>
<operator>||</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>!=</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>want_allocation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_alloc</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>valid</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>grid_free</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>was_resized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>want_allocation</name> <operator>&amp;&amp;</operator> <name>has_allocation</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_invalidate</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>row_offset</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>col_offset</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>send_grid_resize</name> <operator>||</operator> <name>was_resized</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>want_allocation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_grid_resize</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>grid_assign_handle</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_grid_handle</name> <init>= <expr><name>DEFAULT_GRID_HANDLE</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>++</operator><name>last_grid_handle</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>screenalloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>resizing</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>resizing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>retry</name>:</label>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name>Rows</name> <operator>==</operator> <name><name>default_grid</name><operator>.</operator><name>Rows</name></name>
<operator>&amp;&amp;</operator> <name>Columns</name> <operator>==</operator> <name><name>default_grid</name><operator>.</operator><name>Columns</name></name>
<operator>)</operator>
<operator>||</operator> <name>Rows</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name>Columns</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>full_screen</name> <operator>&amp;&amp;</operator> <name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>resizing</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><operator>++</operator><name>RedrawingDisabled</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_grid_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>win_new_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>comp_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 











<expr_stmt><expr><call><name>grid_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StlClickDefinition</name> <modifier>*</modifier></type><name>new_tab_page_click_defs</name> <init>= <expr><call><name>xcalloc</name><argument_list>(
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>Columns</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_tab_page_click_defs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_tab_page_click_defs</name><argument_list>(<argument><expr><name>tab_page_click_defs</name></expr></argument>, <argument><expr><name>tab_page_click_defs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tab_page_click_defs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tab_page_click_defs</name> <operator>=</operator> <name>new_tab_page_click_defs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab_page_click_defs_size</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>row_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>col_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>DEFAULT_GRID_HANDLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>RedrawingDisabled</name><operator>--</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>retry_count</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apply_autocmds</name><argument_list>(<argument><expr><name>EVENT_VIMRESIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>resizing</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>grid_alloc</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScreenGrid</name></type> <name>new</name> <init>= <expr><operator>*</operator><name>grid</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rows</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>columns</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ncells</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>rows</name> <operator>*</operator> <name>columns</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ncells</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>attrs</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>ncells</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>line_offset</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>rows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>line_wraps</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>rows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new</name><operator>.</operator><name>Rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>Columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>new_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>new_row</name> <operator>&lt;</operator> <name><name>new</name><operator>.</operator><name>Rows</name></name></expr>;</condition> <incr><expr><name>new_row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name> <operator>=</operator> <name>new_row</name> <operator>*</operator> <name><name>new</name><operator>.</operator><name>Columns</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>.</operator><name>line_wraps</name><index>[<expr><name>new_row</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new</name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>new_row</name> <operator>&lt;</operator> <name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>&amp;&amp;</operator> <name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>new</name><operator>.</operator><name>chars</name></name> <operator>+</operator> <name><name>new</name><operator>.</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>new</name><operator>.</operator><name>attrs</name></name> <operator>+</operator> <name><name>new</name><operator>.</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>+</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>new_row</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>grid_free</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>grid</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>linebuf_size</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>linebuf_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>linebuf_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linebuf_char</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linebuf_attr</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>columns</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linebuf_size</name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>grid_free</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>screen_free_all_mem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>grid_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>linebuf_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>linebuf_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>clear_tab_page_click_defs</name><parameter_list>(<parameter><decl><type><name>StlClickDefinition</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tpcd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>tpcd_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tpcd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tpcd_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tpcd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name> <operator>!=</operator> <name><name>tpcd</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>tpcd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tpcd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>tpcd_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tpcd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>screenclear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screenalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>==</operator> <name>NO_SCREEN</name> <operator>||</operator> <name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>default_grid</name><operator>.</operator><name>Rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name><name>default_grid</name><operator>.</operator><name>line_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>default_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>default_grid</name><operator>.</operator><name>line_wraps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ui_call_grid_clear</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_all_later</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redraw_popupmenu</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pum_invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_redr_type</name></name> <operator>=</operator> <name>CLEAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>must_redraw</name> <operator>==</operator> <name>CLEAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_redraw</name> <operator>=</operator> <name>NOT_VALID</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>compute_cmdrow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scrolled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>msg_didany</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>msg_use_grid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_invalidate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_grid_invalid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>grid_clear_line</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>schar_from_ascii</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name><index>[<expr><name>off</name> <operator>+</operator> <name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>int</name></type> <name>fill</name> <init>= <expr><ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>grid_invalidate</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>Rows</name></name> <operator>*</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>grid_invalid_row</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>row</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>linecopy</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off_to</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>to</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>off_from</name> <init>= <expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>from</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>chars</name></name> <operator>+</operator> <name>off_from</name></expr></argument>,
<argument><expr><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>schar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>+</operator> <name>off_to</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>attrs</name></name> <operator>+</operator> <name>off_from</name></expr></argument>,
<argument><expr><name>width</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sattr_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>setcursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_grid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name>
<operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>gchar_cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_grid_cursor_goto</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>win_scroll_lines</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <name>line_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>line_count</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_del_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><operator>-</operator><name>line_count</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_ins_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















<function><type><name>void</name></type> <name>grid_ins_lines</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>-=</operator> <name>line_count</name><operator>)</operator> <operator>&gt;=</operator> <name>row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>linecopy</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>line_count</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>line_count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>-=</operator> <name>line_count</name><operator>)</operator> <operator>&gt;=</operator> <name>row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name> <operator>+</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grid</name><operator>-&gt;</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_grid_scroll</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>col</name><operator>+</operator><name>width</name></expr></argument>, <argument><expr><operator>-</operator><name>line_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>grid_del_lines</name><parameter_list>(<parameter><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>screen_adjust_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>grid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>row_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>line_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>+=</operator> <name>line_count</name><operator>)</operator> <operator>&lt;=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>linecopy</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>line_count</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>line_count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>j</name> <operator>+=</operator> <name>line_count</name><operator>)</operator> <operator>&lt;=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_offset</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>grid</name><operator>-&gt;</operator><name>line_wraps</name><index>[<expr><name>j</name> <operator>-</operator> <name>line_count</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_clear_line</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>grid</name><operator>-&gt;</operator><name>Columns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>grid</name><operator>-&gt;</operator><name>throttled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_grid_scroll</name><argument_list>(<argument><expr><name><name>grid</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>col</name><operator>+</operator><name>width</name></expr></argument>, <argument><expr><name>line_count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>showmode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_clear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nwr_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sub_attr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>clear_cmdline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_ext_clear</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>do_mode</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>TERM_FOCUS</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>
<operator>||</operator> <name>restart_edit</name>
<operator>||</operator> <name>VIsual_active</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_mode</name> <operator>||</operator> <name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator> <operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nwr_save</name> <operator>=</operator> <name>need_wait_return</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>check_for_delay</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>clear_cmdline</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clear_cmdline</name> <operator>&amp;&amp;</operator> <name>cmdline_row</name> <operator>&lt;</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_pos_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_lines_left</name> <init>= <expr><name>lines_left</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>do_mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edit_submode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_COMPLETIONMENU</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>Rows</name> <operator>-</operator> <name>msg_row</name><operator>)</operator> <operator>*</operator> <name>Columns</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>edit_submode_pre</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>-=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode_pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>-</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>edit_submode</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>edit_submode_pre</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode_pre</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>edit_submode_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>edit_submode_highl</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sub_attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>edit_submode_highl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sub_attr</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>edit_submode_extra</name></expr></argument>, <argument><expr><name>sub_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>TERM_FOCUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" TERMINAL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>VREPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" VREPLACE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>REPLACE_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" REPLACE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_ri</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" REVERSE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" INSERT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'I'</literal> <operator>||</operator> <name>restart_edit</name> <operator>==</operator> <literal type="char">'i'</literal>
<operator>||</operator> <name>restart_edit</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (insert)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (replace)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>restart_edit</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (vreplace)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_hkmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Hebrew"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_arab</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Arabic"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_keymap_str</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" (%s)"</literal></expr></argument>,
<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>p_paste</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" (paste)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<switch>switch <condition>(<expr><operator>(</operator><ternary><condition><expr><name>VIsual_select</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <name>Ctrl_V</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>
<operator>+</operator> <operator>(</operator><name>VIsual_mode</name> <operator>==</operator> <literal type="char">'V'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" VISUAL BLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT LINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">" SELECT BLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><literal type="string">" --"</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>edit_submode</name> <operator>==</operator> <name>NULL</name></expr> 
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recording_mode</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_clear</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode_displayed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_clear</name> <operator>||</operator> <name>clear_cmdline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>msg_didout</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_no_more</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lines_left</name> <operator>=</operator> <name>save_lines_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_wait_return</name> <operator>=</operator> <name>nwr_save</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clear_cmdline</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_clr_cmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>msg_ext_flush_showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><call><name>lastwin_nofloating</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_cmdline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_pos_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>unshowmode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>clearmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clearmode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>save_msg_row</name> <init>= <expr><name>msg_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>save_msg_col</name> <init>= <expr><name>msg_col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_ext_ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_pos_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>recording_mode</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_CM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_ext_flush_showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>save_msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>save_msg_row</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recording_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recording"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shortmess</name><argument_list>(<argument><expr><name>SHM_RECORDING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" @%c"</literal></expr></argument>, <argument><expr><name>reg_recording</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_PUTS_ATTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>draw_tabline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tabcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tabwidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>cwp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wincount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_nosel</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_fill</name> <init>= <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_TPF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>room</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_sep_chars</name> <init>= <expr><operator>(</operator><name>t_colors</name> <operator>&lt;</operator> <literal type="number">8</literal>
<operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>default_grid</name><operator>.</operator><name>chars</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUITabline</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_ext_tabline_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tabline_height</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>==</operator> <name>tab_page_click_defs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_tab_page_click_defs</name><argument_list>(<argument><expr><name>tab_page_click_defs</name></expr></argument>, <argument><expr><name>tab_page_click_defs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_tal</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_did_emsg</name> <init>= <expr><name>did_emsg</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>did_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"tabline"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>did_emsg</name> <operator>|=</operator> <name>saved_did_emsg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>tabcount</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>tabcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>tabcount</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>tabcount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tabwidth</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tabwidth</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>attr_nosel</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tabcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>curtab</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cwp</name> <operator>=</operator> <name>curwin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name>firstwin</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cwp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wp</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>tp_firstwin</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>==</operator> <name>topframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>cwp</name></expr></argument>, <argument><expr><name>HLF_TPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_sep_chars</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_topframe</name></name> <operator>!=</operator> <name>topframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>cwp</name></expr></argument>, <argument><expr><name>HLF_TP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>wincount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>wp</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>wincount</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufIsChanged</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>modified</name> <operator>||</operator> <name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wincount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>wincount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>cwp</name></expr></argument>, <argument><expr><name>HLF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>modified</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>room</name> <operator>=</operator> <name>scol</name> <operator>-</operator> <name>col</name> <operator>+</operator> <name>tabwidth</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>room</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name><name>cwp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>shorten_dir</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NameBuff</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>room</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>col</name><operator>++</operator></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>tabcount</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tab_page_click_defs</name><index>[<expr><name>scol</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StlClickDefinition</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kStlClickTabSwitch</name></expr>,
<expr><operator>.</operator><name>tabnr</name> <operator>=</operator> <name>tabcount</name></expr>,
<expr><operator>.</operator><name>func</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>use_sep_chars</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>attr_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>first_tabpage</name><operator>-&gt;</operator><name>tp_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_grid</name></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attr_nosel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab_page_click_defs</name><index>[<expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>StlClickDefinition</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kStlClickTabClose</name></expr>,
<expr><operator>.</operator><name>tabnr</name> <operator>=</operator> <literal type="number">999</literal></expr>,
<expr><operator>.</operator><name>func</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>redraw_tabline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ui_ext_tabline_update</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>tabs</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<macro><name>FOR_ALL_TABS</name><argument_list>(<argument>tp</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>tab_info</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>tab_info</name></expr></argument>, <argument><expr><literal type="string">"tab"</literal></expr></argument>, <argument><expr><call><name>TABPAGE_OBJ</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>cwp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tp</name> <operator>==</operator> <name>curtab</name><operator>)</operator></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name><name>tp</name><operator>-&gt;</operator><name>tp_curwin</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_trans_bufname</name><argument_list>(<argument><expr><name><name>cwp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>tab_info</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>tab_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>ui_call_tabline_update</name><argument_list>(<argument><expr><name><name>curtab</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>get_trans_bufname</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><call><name>buf_spname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>home_replace</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_fname</name></name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>trans_characters</name><argument_list>(<argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>fillchar_status</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fill</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_curwin</name> <init>= <expr><operator>(</operator><name>wp</name> <operator>==</operator> <name>curwin</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_curwin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fill</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stl</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_SNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fill</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stlnc</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>attr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_S</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_SNC</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><name>is_curwin</name> <operator>||</operator> <name>ONE_WINDOW</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stl</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>stlnc</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>fill</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>is_curwin</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="char">'^'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="char">'='</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>fillchar_vsep</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>attr</name> <operator>=</operator> <call><name>win_hl_attr</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>HLF_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_fcs_chars</name><operator>.</operator><name>vert</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>redrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><name>RedrawingDisabled</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p_lz</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>do_redraw</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>messaging</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><operator>(</operator><name>p_lz</name> <operator>&amp;&amp;</operator> <call><name>char_avail</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>showruler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>always</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p_stl</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_stl</name></name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_custom_statusline</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>win_redr_ruler</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>always</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_maketitle</name>
<operator>||</operator> <operator>(</operator><name>p_icon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>stl_syntax</name> <operator>&amp;</operator> <name>STL_IN_ICON</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>p_title</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>stl_syntax</name> <operator>&amp;</operator> <name>STL_IN_TITLE</name><operator>)</operator><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>redraw_tabline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>draw_tabline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win_redr_ruler</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>did_show_ext_ruler</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_ru</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>&gt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>==</operator> <name>lastwin</name> <operator>&amp;&amp;</operator> <name><name>lastwin</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>edit_submode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_ruf</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name> <init>= <expr><name>called_emsg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_redr_custom</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>called_emsg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_string_option_direct</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"rulerformat"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><name>OPT_FREE</name></expr></argument>, <argument><expr><name>SID_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>called_emsg</name> <operator>|=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>empty_line</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>empty_line</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>validate_virtcol_win</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><name>redraw_cmdline</name>
<operator>||</operator> <name>always</name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>col</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_virtcol</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name><operator>.</operator><name>coladd</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_topline</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_line_count</name></name>
<operator>||</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_topfill</name></name>
<operator>||</operator> <name>empty_line</name> <operator>!=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_ru_empty</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>part_of_status</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>W_ENDROW</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <call><name>fillchar_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>part_of_status</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fillchar</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>colnr_T</name></type> <name>virtcol</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_lcs_chars</name><operator>.</operator><name>tab1</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>virtcol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_list</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULER_BUF_LEN</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><name>RULER_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>vim_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">","</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_flags</name></name> <operator>&amp;</operator> <name>ML_EMPTY</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0L</literal></expr>
</then><else>: <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>col_print</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>len</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>empty_line</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>virtcol</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_rel_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>o</name> <init>= <expr><name>i</name> <operator>+</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_status_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_ru_col</name> <init>= <expr><name>ru_col</name> <operator>-</operator> <operator>(</operator><name>Columns</name> <operator>-</operator> <name>width</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>this_ru_col</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name>o</name> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name><name>o</name> <argument_list type="generic">&lt; <argument><expr><name>width</name> <operator>&amp;&amp;</operator> <name>RULER_BUF_LEN</name></expr></argument> &gt;</argument_list></name> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>get_rel_pos</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>RULER_BUF_LEN</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMessages</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>part_of_status</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>content</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>chunk</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_msg_ruler</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_show_ext_ruler</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>did_show_ext_ruler</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_msg_ruler</name><argument_list>(<argument><expr><operator>(</operator><name>Array</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_show_ext_ruler</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_ru_col</name> <operator>+</operator> <name>o</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>ScreenGrid</name> <modifier>*</modifier></type><name>grid</name> <init>= <expr><ternary><condition><expr><name>part_of_status</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>default_grid</name></expr> </then><else>: <expr><operator>&amp;</operator><name>msg_grid_adj</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grid_puts</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>this_ru_col</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>this_ru_col</name> <operator>+</operator> <name>off</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>fillchar</name></expr></argument>,
<argument><expr><name>fillchar</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_cursor</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_virtcol</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_virtcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_empty</name></name> <operator>=</operator> <name>empty_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_topline</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_line_count</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_ru_topfill</name></name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_topfill</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>number_width</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_rnu</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_nu</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_height_inner</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_width</name></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_line_count</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_nuw</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_nrwidth_width</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>screen_resize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>busy</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>updating_screen</name> <operator>||</operator> <name>busy</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>SETWSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>SETWSIZE</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>busy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_shellsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_lines</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_columns</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_grid_resize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>send_grid_resize</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>State</name> <operator>!=</operator> <name>ASKMORE</name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>EXTERNCMD</name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>CONFIRM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>screenclear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>starting</name> <operator>!=</operator> <name>NO_SCREEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>maketitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>changed_line_abv_curs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invalidate_botline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>ASKMORE</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>EXTERNCMD</name> <operator>||</operator> <name>State</name> <operator>==</operator> <name>CONFIRM</name>
<operator>||</operator> <name>exmode_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>screenalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>msg_grid</name><operator>.</operator><name>chars</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_grid_validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ui_comp_set_screen_valid</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repeat_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_scb</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>do_check_scrollbind</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>redraw_popupmenu</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pum_drawn</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cmdline_pum_display</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pum_drawn</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>redraw_popupmenu</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ins_compl_show_pum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><name>NOT_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>redrawing</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>busy</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>check_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&lt;</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Rows</name> <operator>=</operator> <call><name>min_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>limit_screen_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>limit_screen_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>MIN_COLUMNS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Columns</name> <operator>=</operator> <name>MIN_COLUMNS</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Columns</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Columns</name> <operator>=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Rows</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Rows</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>win_new_shellsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>old_Rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>old_Columns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old_Rows</name> <operator>!=</operator> <name>Rows</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p_window</name> <operator>==</operator> <name>old_Rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name>old_Rows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p_window</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>old_Rows</name> <operator>=</operator> <name>Rows</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shell_new_rows</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_Columns</name> <operator>!=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_Columns</name> <operator>=</operator> <name>Columns</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shell_new_columns</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>win_T</name> <modifier>*</modifier></type><name>get_win_by_grid_handle</name><parameter_list>(<parameter><decl><type><name>handle_T</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>handle</name></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>wp</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
