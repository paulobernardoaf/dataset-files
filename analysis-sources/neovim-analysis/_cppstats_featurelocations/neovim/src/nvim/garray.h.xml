<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\garray.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_GARRAY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_GARRAY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>




<typedef>typedef <type><struct>struct <name>growarray</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ga_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ga_maxlen</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ga_itemsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ga_growsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ga_data</name></decl>;</decl_stmt> 
}</block></struct></type> <name>garray_T</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_EMPTY_INIT_VALUE</name></cpp:macro> <cpp:value>{ 0, 0, 0, 1, NULL }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_INIT</name><parameter_list>(<parameter><type><name>itemsize</name></type></parameter>, <parameter><type><name>growsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ 0, 0, (itemsize), (growsize), NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_EMPTY</name><parameter_list>(<parameter><type><name>ga_ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ga_ptr)-&gt;ga_len &lt;= 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_APPEND</name><parameter_list>(<parameter><type><name>item_type</name></type></parameter>, <parameter><type><name>gap</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ga_grow(gap, 1); ((item_type *)(gap)-&gt;ga_data)[(gap)-&gt;ga_len++] = (item); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_APPEND_VIA_PTR</name><parameter_list>(<parameter><type><name>item_type</name></type></parameter>, <parameter><type><name>gap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ga_append_via_ptr(gap, sizeof(item_type))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"garray.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>ga_append_via_ptr</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>item_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>item_size</name> <operator>!=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_itemsize</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"wrong item size (%zu), should be %d"</literal></expr></argument>, <argument><expr><name>item_size</name></expr></argument>, <argument><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_itemsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><name>gap</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>item_size</name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_DEEP_CLEAR</name><parameter_list>(<parameter><type><name>gap</name></type></parameter>, <parameter><type><name>item_type</name></type></parameter>, <parameter><type><name>free_item_fn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { garray_T *_gap = (gap); if (_gap-&gt;ga_data != NULL) { for (int i = 0; i &lt; _gap-&gt;ga_len; i++) { item_type *_item = &amp;(((item_type *)_gap-&gt;ga_data)[i]); free_item_fn(_item); } } ga_clear(_gap); } while (false)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_PTR_PTR</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xfree(*(ptr))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GA_DEEP_CLEAR_PTR</name><parameter_list>(<parameter><type><name>gap</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GA_DEEP_CLEAR(gap, void*, FREE_PTR_PTR)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
