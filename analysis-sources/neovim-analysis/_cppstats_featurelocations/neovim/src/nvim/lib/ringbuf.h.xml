<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\lib\ringbuf.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_LIB_RINGBUF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_LIB_RINGBUF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RINGBUF_LENGTH</name><parameter_list>(<parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rb)-&gt;first == NULL ? 0 : ((rb)-&gt;next == (rb)-&gt;first) ? (size_t) ((rb)-&gt;buf_end - (rb)-&gt;buf) + 1 : ((rb)-&gt;next &gt; (rb)-&gt;first) ? (size_t) ((rb)-&gt;next - (rb)-&gt;first) : (size_t) ((rb)-&gt;next - (rb)-&gt;buf + (rb)-&gt;buf_end - (rb)-&gt;first + 1))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RINGBUF_NEXT</name><parameter_list>(<parameter><type><name>rb</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) == (rb)-&gt;buf_end ? (rb)-&gt;buf : (var) + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_RINGBUF_PREV</name><parameter_list>(<parameter><type><name>rb</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) == (rb)-&gt;buf ? (rb)-&gt;buf_end : (var) - 1)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_FORALL</name><parameter_list>(<parameter><type><name>rb</name></type></parameter>, <parameter><type><name>RBType</name></type></parameter>, <parameter><type><name>varname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>size_t varname##_length_fa_ = _RINGBUF_LENGTH(rb); for (RBType *varname = ((rb)-&gt;first == NULL ? (rb)-&gt;next : (rb)-&gt;first); varname##_length_fa_; (varname = _RINGBUF_NEXT(rb, varname)), varname##_length_fa_--)</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_ITER_BACK</name><parameter_list>(<parameter><type><name>rb</name></type></parameter>, <parameter><type><name>RBType</name></type></parameter>, <parameter><type><name>varname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>size_t varname##_length_ib_ = _RINGBUF_LENGTH(rb); for (varname = ((rb)-&gt;next == (rb)-&gt;buf ? (rb)-&gt;buf_end : (rb)-&gt;next - 1); varname##_length_ib_; (varname = _RINGBUF_PREV(rb, varname)), varname##_length_ib_--)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_TYPEDEF</name><parameter_list>(<parameter><type><name>TypeName</name></type></parameter>, <parameter><type><name>RBType</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { RBType *buf; RBType *next; RBType *first; RBType *buf_end; } TypeName##RingBuffer;</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_DUMMY_FREE</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_STATIC</name><parameter_list>(<parameter><type><name>scope</name></type></parameter>, <parameter><type><name>TypeName</name></type></parameter>, <parameter><type><name>RBType</name></type></parameter>, <parameter><type><name>varname</name></type></parameter>, <parameter><type><name>rbsize</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static RBType _##varname##_buf[rbsize]; scope TypeName##RingBuffer varname = { .buf = _##varname##_buf, .next = _##varname##_buf, .first = NULL, .buf_end = _##varname##_buf + rbsize - 1, };</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_INIT</name><parameter_list>(<parameter><type><name>TypeName</name></type></parameter>, <parameter><type><name>funcprefix</name></type></parameter>, <parameter><type><name>RBType</name></type></parameter>, <parameter><type><name>rbfree</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline TypeName##RingBuffer funcprefix##_rb_new(const size_t size) REAL_FATTR_WARN_UNUSED_RESULT; static inline TypeName##RingBuffer funcprefix##_rb_new(const size_t size) { assert(size != 0); RBType *buf = xmalloc(size * sizeof(RBType)); return (TypeName##RingBuffer) { .buf = buf, .next = buf, .first = NULL, .buf_end = buf + size - 1, }; } static inline void funcprefix##_rb_free(TypeName##RingBuffer *const rb) REAL_FATTR_UNUSED; static inline void funcprefix##_rb_free(TypeName##RingBuffer *const rb) { if (rb == NULL) { return; } RINGBUF_FORALL(rb, RBType, rbitem) { rbfree(rbitem); } XFREE_CLEAR(rb-&gt;buf); } static inline void funcprefix##_rb_dealloc(TypeName##RingBuffer *const rb) REAL_FATTR_UNUSED; static inline void funcprefix##_rb_dealloc(TypeName##RingBuffer *const rb) { XFREE_CLEAR(rb-&gt;buf); } static inline void funcprefix##_rb_push(TypeName##RingBuffer *const rb, RBType item) REAL_FATTR_NONNULL_ARG(1); static inline void funcprefix##_rb_push(TypeName##RingBuffer *const rb, RBType item) { if (rb-&gt;next == rb-&gt;first) { rbfree(rb-&gt;first); rb-&gt;first = _RINGBUF_NEXT(rb, rb-&gt;first); } else if (rb-&gt;first == NULL) { rb-&gt;first = rb-&gt;next; } *rb-&gt;next = item; rb-&gt;next = _RINGBUF_NEXT(rb, rb-&gt;next); } static inline ptrdiff_t funcprefix##_rb_find_idx( const TypeName##RingBuffer *const rb, const RBType *const item_p) REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE REAL_FATTR_UNUSED; static inline ptrdiff_t funcprefix##_rb_find_idx( const TypeName##RingBuffer *const rb, const RBType *const item_p) { assert(rb-&gt;buf &lt;= item_p); assert(rb-&gt;buf_end &gt;= item_p); if (rb-&gt;first == NULL) { return -1; } else if (item_p &gt;= rb-&gt;first) { return item_p - rb-&gt;first; } else { return item_p - rb-&gt;buf + rb-&gt;buf_end - rb-&gt;first + 1; } } static inline size_t funcprefix##_rb_size( const TypeName##RingBuffer *const rb) REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE; static inline size_t funcprefix##_rb_size( const TypeName##RingBuffer *const rb) { return (size_t) (rb-&gt;buf_end - rb-&gt;buf) + 1; } static inline size_t funcprefix##_rb_length( const TypeName##RingBuffer *const rb) REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE; static inline size_t funcprefix##_rb_length( const TypeName##RingBuffer *const rb) { return _RINGBUF_LENGTH(rb); } static inline RBType *funcprefix##_rb_idx_p( const TypeName##RingBuffer *const rb, const size_t idx) REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE; static inline RBType *funcprefix##_rb_idx_p( const TypeName##RingBuffer *const rb, const size_t idx) { assert(idx &lt;= funcprefix##_rb_size(rb)); assert(idx &lt;= funcprefix##_rb_length(rb)); if (rb-&gt;first + idx &gt; rb-&gt;buf_end) { return rb-&gt;buf + ((rb-&gt;first + idx) - (rb-&gt;buf_end + 1)); } else { return rb-&gt;first + idx; } } static inline RBType funcprefix##_rb_idx(const TypeName##RingBuffer *const rb, const size_t idx) REAL_FATTR_NONNULL_ALL REAL_FATTR_PURE REAL_FATTR_UNUSED; static inline RBType funcprefix##_rb_idx(const TypeName##RingBuffer *const rb, const size_t idx) { return *funcprefix##_rb_idx_p(rb, idx); } static inline void funcprefix##_rb_insert(TypeName##RingBuffer *const rb, const size_t idx, RBType item) REAL_FATTR_NONNULL_ARG(1) REAL_FATTR_UNUSED; static inline void funcprefix##_rb_insert(TypeName##RingBuffer *const rb, const size_t idx, RBType item) { assert(idx &lt;= funcprefix##_rb_size(rb)); assert(idx &lt;= funcprefix##_rb_length(rb)); const size_t length = funcprefix##_rb_length(rb); if (idx == length) { funcprefix##_rb_push(rb, item); return; } RBType *const insertpos = funcprefix##_rb_idx_p(rb, idx); if (insertpos == rb-&gt;next) { funcprefix##_rb_push(rb, item); return; } if (length == funcprefix##_rb_size(rb)) { rbfree(rb-&gt;first); } if (insertpos &lt; rb-&gt;next) { memmove(insertpos + 1, insertpos, (size_t) ((uintptr_t) rb-&gt;next - (uintptr_t) insertpos)); } else { assert(insertpos &gt; rb-&gt;first); assert(rb-&gt;next &lt;= rb-&gt;first); memmove(rb-&gt;buf + 1, rb-&gt;buf, (size_t) ((uintptr_t) rb-&gt;next - (uintptr_t) rb-&gt;buf)); *rb-&gt;buf = *rb-&gt;buf_end; memmove(insertpos + 1, insertpos, (size_t) ((uintptr_t) (rb-&gt;buf_end + 1) - (uintptr_t) insertpos)); } *insertpos = item; if (length == funcprefix##_rb_size(rb)) { rb-&gt;first = _RINGBUF_NEXT(rb, rb-&gt;first); } rb-&gt;next = _RINGBUF_NEXT(rb, rb-&gt;next); } static inline void funcprefix##_rb_remove(TypeName##RingBuffer *const rb, const size_t idx) REAL_FATTR_NONNULL_ARG(1) REAL_FATTR_UNUSED; static inline void funcprefix##_rb_remove(TypeName##RingBuffer *const rb, const size_t idx) { assert(idx &lt; funcprefix##_rb_size(rb)); assert(idx &lt; funcprefix##_rb_length(rb)); RBType *const rmpos = funcprefix##_rb_idx_p(rb, idx); rbfree(rmpos); if (rmpos == rb-&gt;next - 1) { rb-&gt;next--; if (rb-&gt;first == rb-&gt;next) { rb-&gt;first = NULL; rb-&gt;next = rb-&gt;buf; } } else if (rmpos == rb-&gt;first) { rb-&gt;first = _RINGBUF_NEXT(rb, rb-&gt;first); if (rb-&gt;first == rb-&gt;next) { rb-&gt;first = NULL; rb-&gt;next = rb-&gt;buf; } } else if (rb-&gt;first &lt; rb-&gt;next || rb-&gt;next == rb-&gt;buf) { assert(rmpos &gt; rb-&gt;first); assert(rmpos &lt;= _RINGBUF_PREV(rb, rb-&gt;next)); memmove(rb-&gt;first + 1, rb-&gt;first, (size_t) ((uintptr_t) rmpos - (uintptr_t) rb-&gt;first)); rb-&gt;first = _RINGBUF_NEXT(rb, rb-&gt;first); } else if (rmpos &lt; rb-&gt;next) { memmove(rmpos, rmpos + 1, (size_t) ((uintptr_t) rb-&gt;next - (uintptr_t) rmpos)); rb-&gt;next = _RINGBUF_PREV(rb, rb-&gt;next); } else { assert(rb-&gt;first &lt; rb-&gt;buf_end); memmove(rb-&gt;first + 1, rb-&gt;first, (size_t) ((uintptr_t) rmpos - (uintptr_t) rb-&gt;first)); rb-&gt;first = _RINGBUF_NEXT(rb, rb-&gt;first); } }</cpp:value></cpp:define>































































































































































































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
