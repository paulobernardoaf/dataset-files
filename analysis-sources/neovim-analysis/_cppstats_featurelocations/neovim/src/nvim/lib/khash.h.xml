<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\lib\khash.h">



















































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_LIB_KHASH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_LIB_KHASH_H</name></cpp:macro></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_VERSION_KHASH_H</name></cpp:macro> <cpp:value>"0.2.8"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINT_MAX</name> <operator>==</operator> <literal type="number">0xffffffffu</literal></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>khint32_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ULONG_MAX</name> <operator>==</operator> <literal type="number">0xffffffffu</literal></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>khint32_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ULONG_MAX</name> <operator>==</operator> <name>ULLONG_MAX</name></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>khint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>khint64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_inline</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>khint32_t</name></type> <name>khint_t</name>;</typedef>
<typedef>typedef <type><name>khint_t</name></type> <name>khiter_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_isempty</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_isdel</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_iseither</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flag[i&gt;&gt;4]&gt;&gt;((i&amp;0xfU)&lt;&lt;1))&amp;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isdel_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(khint_t)(1ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isempty_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(khint_t)(2ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isboth_false</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]&amp;=~(khint_t)(3ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_set_isdel_true</name><parameter_list>(<parameter><type><name>flag</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flag[i&gt;&gt;4]|=(khint_t)1ul&lt;&lt;((i&amp;0xfU)&lt;&lt;1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_fsize</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((m) &lt; 16? 1 : (m)&gt;&gt;4)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kroundup32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kroundup32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(x), (x)|=(x)&gt;&gt;1, (x)|=(x)&gt;&gt;2, (x)|=(x)&gt;&gt;4, (x)|=(x)&gt;&gt;8, (x)|=(x)&gt;&gt;16, ++(x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kcalloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kcalloc</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xcalloc(N,Z)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kmalloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmalloc</name><parameter_list>(<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xmalloc(Z)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>krealloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>krealloc</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xrealloc(P,Z)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>kfree</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kfree</name><parameter_list>(<parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XFREE_CLEAR(P)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ac_HASH_UPPER</name></cpp:macro> <cpp:value>0.77</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_TYPE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; khkey_t *keys; khval_t *vals; } kh_##name##_t;</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_PROTOTYPES</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>extern kh_##name##_t *kh_init_##name(void); extern void kh_dealloc_##name(kh_##name##_t *h); extern void kh_destroy_##name(kh_##name##_t *h); extern void kh_clear_##name(kh_##name##_t *h); extern khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key); extern void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets); extern khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret); extern void kh_del_##name(kh_##name##_t *h, khint_t x);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__KHASH_IMPL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>SCOPE</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SCOPE kh_##name##_t *kh_init_##name(void) REAL_FATTR_UNUSED; SCOPE kh_##name##_t *kh_init_##name(void) { return (kh_##name##_t*)kcalloc(1, sizeof(kh_##name##_t)); } SCOPE void kh_dealloc_##name(kh_##name##_t *h) REAL_FATTR_UNUSED; SCOPE void kh_dealloc_##name(kh_##name##_t *h) { kfree(h-&gt;keys); kfree(h-&gt;flags); kfree(h-&gt;vals); } SCOPE void kh_destroy_##name(kh_##name##_t *h) REAL_FATTR_UNUSED; SCOPE void kh_destroy_##name(kh_##name##_t *h) { if (h) { kh_dealloc_##name(h); kfree(h); } } SCOPE void kh_clear_##name(kh_##name##_t *h) REAL_FATTR_UNUSED; SCOPE void kh_clear_##name(kh_##name##_t *h) { if (h &amp;&amp; h-&gt;flags) { memset(h-&gt;flags, 0xaa, __ac_fsize(h-&gt;n_buckets) * sizeof(khint32_t)); h-&gt;size = h-&gt;n_occupied = 0; } } SCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) REAL_FATTR_UNUSED; SCOPE khint_t kh_get_##name(const kh_##name##_t *h, khkey_t key) { if (h-&gt;n_buckets) { khint_t k, i, last, mask, step = 0; mask = h-&gt;n_buckets - 1; k = __hash_func(key); i = k &amp; mask; last = i; while (!__ac_isempty(h-&gt;flags, i) &amp;&amp; (__ac_isdel(h-&gt;flags, i) || !__hash_equal(h-&gt;keys[i], key))) { i = (i + (++step)) &amp; mask; if (i == last) { return h-&gt;n_buckets; } } return __ac_iseither(h-&gt;flags, i) ? h-&gt;n_buckets : i; } else { return 0; } } SCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) REAL_FATTR_UNUSED; SCOPE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) { khint32_t *new_flags = 0; khint_t j = 1; { kroundup32(new_n_buckets); if (new_n_buckets &lt; 4) { new_n_buckets = 4; } if (h-&gt;size &gt;= (khint_t)(new_n_buckets * __ac_HASH_UPPER + 0.5)) { j = 0; } else { new_flags = (khint32_t*)kmalloc(__ac_fsize(new_n_buckets) * sizeof(khint32_t)); memset(new_flags, 0xaa, __ac_fsize(new_n_buckets) * sizeof(khint32_t)); if (h-&gt;n_buckets &lt; new_n_buckets) { khkey_t *new_keys = (khkey_t*)krealloc( (void *)h-&gt;keys, new_n_buckets * sizeof(khkey_t)); h-&gt;keys = new_keys; if (kh_is_map) { khval_t *new_vals = (khval_t*)krealloc( (void *)h-&gt;vals, new_n_buckets * sizeof(khval_t)); h-&gt;vals = new_vals; } } } } if (j) { for (j = 0; j != h-&gt;n_buckets; ++j) { if (__ac_iseither(h-&gt;flags, j) == 0) { khkey_t key = h-&gt;keys[j]; khval_t val; khint_t new_mask; new_mask = new_n_buckets - 1; if (kh_is_map) { val = h-&gt;vals[j]; } __ac_set_isdel_true(h-&gt;flags, j); while (1) { khint_t k, i, step = 0; k = __hash_func(key); i = k &amp; new_mask; while (!__ac_isempty(new_flags, i)) { i = (i + (++step)) &amp; new_mask; } __ac_set_isempty_false(new_flags, i); if (i &lt; h-&gt;n_buckets &amp;&amp; __ac_iseither(h-&gt;flags, i) == 0) { { khkey_t tmp = h-&gt;keys[i]; h-&gt;keys[i] = key; key = tmp; } if (kh_is_map) { khval_t tmp = h-&gt;vals[i]; h-&gt;vals[i] = val; val = tmp; } __ac_set_isdel_true(h-&gt;flags, i); } else { h-&gt;keys[i] = key; if (kh_is_map) { h-&gt;vals[i] = val; } break; } } } } if (h-&gt;n_buckets &gt; new_n_buckets) { h-&gt;keys = (khkey_t*)krealloc((void *)h-&gt;keys, new_n_buckets * sizeof(khkey_t)); if (kh_is_map) { h-&gt;vals = (khval_t*)krealloc((void *)h-&gt;vals, new_n_buckets * sizeof(khval_t)); } } kfree(h-&gt;flags); h-&gt;flags = new_flags; h-&gt;n_buckets = new_n_buckets; h-&gt;n_occupied = h-&gt;size; h-&gt;upper_bound = (khint_t)(h-&gt;n_buckets * __ac_HASH_UPPER + 0.5); } } SCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) REAL_FATTR_UNUSED; SCOPE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) { khint_t x; if (h-&gt;n_occupied &gt;= h-&gt;upper_bound) { if (h-&gt;n_buckets &gt; (h-&gt;size &lt;&lt; 1)) { kh_resize_##name(h, h-&gt;n_buckets - 1); } else { kh_resize_##name(h, h-&gt;n_buckets + 1); } } { khint_t k, i, site, last, mask = h-&gt;n_buckets - 1, step = 0; x = site = h-&gt;n_buckets; k = __hash_func(key); i = k &amp; mask; if (__ac_isempty(h-&gt;flags, i)) { x = i; } else { last = i; while (!__ac_isempty(h-&gt;flags, i) &amp;&amp; (__ac_isdel(h-&gt;flags, i) || !__hash_equal(h-&gt;keys[i], key))) { if (__ac_isdel(h-&gt;flags, i)) { site = i; } i = (i + (++step)) &amp; mask; if (i == last) { x = site; break; } } if (x == h-&gt;n_buckets) { if (__ac_isempty(h-&gt;flags, i) &amp;&amp; site != h-&gt;n_buckets) { x = site; } else { x = i; } } } } if (__ac_isempty(h-&gt;flags, x)) { h-&gt;keys[x] = key; __ac_set_isboth_false(h-&gt;flags, x); h-&gt;size++; h-&gt;n_occupied++; *ret = 1; } else if (__ac_isdel(h-&gt;flags, x)) { h-&gt;keys[x] = key; __ac_set_isboth_false(h-&gt;flags, x); h-&gt;size++; *ret = 2; } else { *ret = 0; } return x; } SCOPE void kh_del_##name(kh_##name##_t *h, khint_t x) REAL_FATTR_UNUSED; SCOPE void kh_del_##name(kh_##name##_t *h, khint_t x) { if (x != h-&gt;n_buckets &amp;&amp; !__ac_iseither(h-&gt;flags, x)) { __ac_set_isdel_true(h-&gt;flags, x); --h-&gt;size; } }</cpp:value></cpp:define>





















































































































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_DECLARE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__KHASH_TYPE(name, khkey_t, khval_t) __KHASH_PROTOTYPES(name, khkey_t, khval_t)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_INIT2</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>SCOPE</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__KHASH_TYPE(name, khkey_t, khval_t) __KHASH_IMPL(name, SCOPE, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khkey_t</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>, <parameter><type><name>kh_is_map</name></type></parameter>, <parameter><type><name>__hash_func</name></type></parameter>, <parameter><type><name>__hash_equal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT2(name, static kh_inline, khkey_t, khval_t, kh_is_map, __hash_func, __hash_equal)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_int_hash_func</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(khint32_t)(key)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_int_hash_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) == (b))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_int64_hash_func</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(khint32_t)((key)&gt;&gt;33^(key)^(key)&lt;&lt;11)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_int64_hash_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) == (b))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>kh_inline</name> <name>khint_t</name></type> <name>__ac_X31_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>khint_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>khint_t</name><operator>)</operator><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><expr><operator>++</operator><name>s</name></expr> ;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <name>h</name> <operator>+</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_str_hash_func</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__ac_X31_hash_string(key)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_str_hash_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strcmp(a, b) == 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>kh_inline</name> <name>khint_t</name></type> <name>__ac_Wang_hash</name><parameter_list>(<parameter><decl><type><name>khint_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <operator>~</operator><operator>(</operator><name>key</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>^=</operator> <operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <operator>(</operator><name>key</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>^=</operator> <operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <operator>~</operator><operator>(</operator><name>key</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>^=</operator> <operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_int_hash_func2</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__ac_Wang_hash((khint_t)key)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>khash_t</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_##name##_t</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_init</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_init_##name()</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_destroy</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_destroy_##name(h)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_dealloc</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_dealloc_##name(h)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_clear</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_clear_##name(h)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_resize</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_resize_##name(h, s)</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_put</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_put_##name(h, k, r)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_get</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_get_##name(h, k)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_del</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_del_##name(h, k)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_exist</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!__ac_iseither((h)-&gt;flags, (x)))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_key</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;keys[x])</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_val</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;vals[x])</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_value</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;vals[x])</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_begin</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(khint_t)(0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_end</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;n_buckets)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_size</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;size)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_n_buckets</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h)-&gt;n_buckets)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_foreach</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>kvar</name></type></parameter>, <parameter><type><name>vvar</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ khint_t __i; for (__i = kh_begin(h); __i != kh_end(h); ++__i) { if (!kh_exist(h,__i)) continue; (kvar) = kh_key(h,__i); (vvar) = kh_val(h,__i); code; } }</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_foreach_value</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>vvar</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ khint_t __i; for (__i = kh_begin(h); __i != kh_end(h); ++__i) { if (!kh_exist(h,__i)) continue; (vvar) = kh_val(h,__i); code; } }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kh_foreach_key</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>kvar</name></type></parameter>, <parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ khint_t __i; for (__i = kh_begin(h); __i != kh_end(h); __i++) { if (!kh_exist(h, __i)) { continue; } (kvar) = kh_key(h, __i); code; } }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_SET_INIT_INT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, khint32_t, char, 0, kh_int_hash_func, kh_int_hash_equal)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_MAP_INIT_INT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, khint32_t, khval_t, 1, kh_int_hash_func, kh_int_hash_equal)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_SET_INIT_INT64</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, khint64_t, char, 0, kh_int64_hash_func, kh_int64_hash_equal)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_MAP_INIT_INT64</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, khint64_t, khval_t, 1, kh_int64_hash_func, kh_int64_hash_equal)</cpp:value></cpp:define>


<typedef>typedef <type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kh_cstr_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_SET_INIT_STR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, kh_cstr_t, char, 0, kh_str_hash_func, kh_str_hash_equal)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_MAP_INIT_STR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>khval_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_INIT(name, kh_cstr_t, khval_t, 1, kh_str_hash_func, kh_str_hash_equal)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KHASH_EMPTY_TABLE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((kh_##name##_t) { .n_buckets = 0, .size = 0, .n_occupied = 0, .upper_bound = 0, .flags = NULL, .keys = NULL, .vals = NULL, })</cpp:value></cpp:define>









<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
