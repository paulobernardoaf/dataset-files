<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\extmark.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_updates.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extmark.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ExtmarkNs</name> <modifier>*</modifier></type><name>buf_ns_ref</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>put</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>put</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkNs</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><call><name>map_ref</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkNs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>put</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>put</name> <operator>&amp;&amp;</operator> <name><name>ns</name><operator>-&gt;</operator><name>map</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>free_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ns</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>uint64_t</name></type> <name>extmark_set</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>ExtmarkOp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>old_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>free_id</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>old_mark</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>old_mark</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_mark</name> <operator>&amp;</operator> <name>MARKTREE_PAIRED_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extmark_del</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>old_pos</name> <operator>=</operator> <call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>old_mark</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>old_pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>row</name> <operator>&amp;&amp;</operator> <name><name>old_pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>, <argument><expr><name>old_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>marktree_revise</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>revised</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ns</name><operator>-&gt;</operator><name>free_id</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>free_id</name></name></expr></argument>, <argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>marktree_put</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>revised</name>:</label>
<macro><name>map_put</name><argument_list>(<argument>uint64_t</argument>, <argument>ExtmarkItem</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name><operator>,</operator> <name>mark</name><operator>,</operator>
<operator>(</operator><name>ExtmarkItem</name><operator>)</operator><block>{ <expr><name>ns_id</name></expr>, <expr><name>id</name></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>KV_INITIAL_VALUE</name></expr> }</block><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>kExtmarkNoUndo</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>u_extmark_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>extmark_setraw</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>row</name> <operator>&amp;&amp;</operator> <name><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>marktree_move</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>extmark_del</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mark</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mark</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name></type> <name>item</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mark</name> <operator>&amp;</operator> <name>MARKTREE_PAIRED_FLAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos2</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>,
<argument><expr><name>mark</name><operator>|</operator><name>MARKTREE_END_FLAG</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pos2</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>hl_id</name></name> <operator>&amp;&amp;</operator> <name><name>pos2</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name><name>pos</name><operator>.</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_range_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pos2</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_line_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_virttext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>extmark_clear</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>l_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>l_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>u_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>u_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>marks_cleared</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>all_ns</name> <init>= <expr><operator>(</operator><name>ns_id</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_ns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>



</block_content>}</block></if></if_stmt>


<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>delete_set</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delete_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delete_set</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_itr_get</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>l_row</name></expr></argument>, <argument><expr><name>l_col</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name>u_row</name>
<operator>||</operator> <operator>(</operator><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>u_row</name> <operator>&amp;&amp;</operator> <name><name>mark</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>u_col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>del_status</name> <init>= <expr><call><call><name>map_ref</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>delete_set</name></expr></argument>, <argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>del_status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>delete_set</name></expr></argument>, <argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>del_status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_range_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><operator>(</operator><operator>*</operator><name>del_status</name><operator>)</operator></expr></argument>, <argument><expr><name><name>mark</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_id</name> <init>= <expr><name><name>mark</name><operator>.</operator><name>id</name></name> <operator>&amp;</operator> <operator>~</operator><name>MARKTREE_END_FLAG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name></type> <name>item</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>,
<argument><expr><name>start_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>ns_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>mark_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>mark_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>.</operator><name>ns_id</name></name> <operator>==</operator> <name>ns_id</name> <operator>||</operator> <name>all_ns</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>redraw_buf_line_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mark</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>clear_virttext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>marks_cleared</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>id</name></name> <operator>&amp;</operator> <name>MARKTREE_PAIRED_FLAG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>other</name> <init>= <expr><name><name>mark</name><operator>.</operator><name>id</name></name> <operator>^</operator> <name>MARKTREE_END_FLAG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>status</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>hl_id</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>mark</name><operator>.</operator><name>row</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>delete_set</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>my_ns</name> <init>= <expr><ternary><condition><expr><name>all_ns</name></expr> ?</condition><then> <expr><call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>ns_id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ns</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>my_ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>mark_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_del</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>, <argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_del_itr</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
<macro><name>map_foreach</name><argument_list>(<argument>delete_set</argument>, <argument>id</argument>, <argument>status</argument>, <argument>{
mtpos_t pos = marktree_lookup(buf-&gt;b_marktree, id, itr);
assert(itr-&gt;node);
marktree_del_itr(buf-&gt;b_marktree, itr, false);
if (status &gt; <literal type="number">0</literal>) {
redraw_buf_range_later(buf, (linenr_T)status, pos.row+<literal type="number">1</literal>);
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>delete_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>marks_cleared</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>ExtmarkArray</name></type> <name>extmark_get</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>l_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>l_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>u_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>u_col</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkArray</name></type> <name>array</name> <init>= <expr><name>KV_INITIAL_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>marktree_itr_get_ext</name><argument_list>(<argument>buf-&gt;b_marktree</argument>, <argument>(mtpos_t){ l_row</argument>, <argument>l_col }</argument>,
<argument>itr</argument>, <argument>reverse</argument>, <argument>false</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>amount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>-</operator> <name>u_row</name><operator>)</operator> <operator>*</operator> <name>order</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>u_row</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mark</name><operator>.</operator><name>col</name></name> <operator>-</operator> <name>u_col</name><operator>)</operator> <operator>*</operator> <name>order</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name></type> <name>item</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>,
<argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>ns_id</name></name> <operator>==</operator> <name>ns_id</name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>array</argument>, <argument>((ExtmarkInfo) { .ns_id = item.ns_id,
.mark_id = item.mark_id,
.row = mark.row, .col = mark.col })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_prev</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>array</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ExtmarkInfo</name></type> <name>extmark_from_id</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkInfo</name></type> <name>ret</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ns</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mark</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mark</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>mtpos_t</name></type> <name>pos</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>ns_id</name></name> <operator>=</operator> <name>ns_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>mark_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>extmark_free_all</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkNs</name></type> <name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>marktree_clear</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>map_foreach</name><argument_list>(<argument>buf-&gt;b_extmark_ns</argument>, <argument>id</argument>, <argument>ns</argument>, <argument>{
(void)id;
map_free(uint64_t, uint64_t)(ns.map);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkNs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_ns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<macro><name>map_foreach</name><argument_list>(<argument>buf-&gt;b_extmark_index</argument>, <argument>id</argument>, <argument>item</argument>, <argument>{
(void)id;
clear_virttext(&amp;item.virt_text);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>u_extmark_set</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mark</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>u_force_get_undo_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ExtmarkSavePos</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>old_row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>old_col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ExtmarkUndoObject</name></type> <name>undo</name> <init>= <expr><block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>kExtmarkSavePos</name></expr>,
<expr><operator>.</operator><name><name>data</name><operator>.</operator><name>savepos</name></name> <operator>=</operator> <name>pos</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>, <argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>u_extmark_copy</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>l_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>l_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>u_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>u_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>u_force_get_undo_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ExtmarkUndoObject</name></type> <name>undo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_itr_get</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>l_row</name></expr></argument>, <argument><expr><name>l_col</name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name>u_row</name>
<operator>||</operator> <operator>(</operator><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>u_row</name> <operator>&amp;&amp;</operator> <name><name>mark</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>u_col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ExtmarkSavePos</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>mark</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>old_row</name></name> <operator>=</operator> <name><name>mark</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>old_col</name></name> <operator>=</operator> <name><name>mark</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>undo</name><operator>.</operator><name>data</name><operator>.</operator><name>savepos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>undo</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>kExtmarkSavePos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>, <argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>extmark_apply_undo</name><parameter_list>(<parameter><decl><type><name>ExtmarkUndoObject</name></type> <name>undo_info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>undo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>undo_info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kExtmarkSplice</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ExtmarkSplice</name></type> <name>splice</name> <init>= <expr><name><name>undo_info</name><operator>.</operator><name>data</name><operator>.</operator><name>splice</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>start_col</name></name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>newextent_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>newextent_col</name></name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>oldextent_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>oldextent_col</name></name></expr></argument>,
<argument><expr><name>kExtmarkNoUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>start_col</name></name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>oldextent_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>oldextent_col</name></name></expr></argument>,
<argument><expr><name><name>splice</name><operator>.</operator><name>newextent_row</name></name></expr></argument>, <argument><expr><name><name>splice</name><operator>.</operator><name>newextent_col</name></name></expr></argument>,
<argument><expr><name>kExtmarkNoUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>undo_info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kExtmarkSavePos</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkSavePos</name></type> <name>pos</name> <init>= <expr><name><name>undo_info</name><operator>.</operator><name>data</name><operator>.</operator><name>savepos</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>old_row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extmark_setraw</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>old_row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>old_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extmark_setraw</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>undo_info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kExtmarkMove</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkMove</name></type> <name>move</name> <init>= <expr><name><name>undo_info</name><operator>.</operator><name>data</name><operator>.</operator><name>move</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>undo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>extmark_move_region</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>new_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>new_col</name></name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>extent_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>extent_col</name></name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>start_col</name></name></expr></argument>,
<argument><expr><name>kExtmarkNoUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>extmark_move_region</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>start_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>start_col</name></name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>extent_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>extent_col</name></name></expr></argument>,
<argument><expr><name><name>move</name><operator>.</operator><name>new_row</name></name></expr></argument>, <argument><expr><name><name>move</name><operator>.</operator><name>new_col</name></name></expr></argument>,
<argument><expr><name>kExtmarkNoUndo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>extmark_adjust</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>line1</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>line2</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>amount</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>amount_after</name></decl></parameter>,
<parameter><decl><type><name>ExtmarkOp</name></type> <name>undo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curbuf_splice_pending</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_extent</name></decl>, <decl><type ref="prev"/><name>new_extent</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <name>MAXLNUM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_extent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>line2</name> <operator>-</operator> <name>line1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>new_extent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>amount_after</name> <operator>+</operator> <name>old_extent</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>line2</name> <operator>==</operator> <name>MAXLNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_extent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_extent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>amount</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>extmark_splice</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>line1</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>old_extent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>new_extent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>undo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>extmark_splice</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>oldextent_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>oldextent_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>newextent_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>newextent_col</name></decl></parameter>,
<parameter><decl><type><name>ExtmarkOp</name></type> <name>undo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>buf_updates_send_splice</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>,
<argument><expr><name>oldextent_row</name></expr></argument>, <argument><expr><name>oldextent_col</name></expr></argument>,
<argument><expr><name>newextent_row</name></expr></argument>, <argument><expr><name>newextent_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>undo</name> <operator>==</operator> <name>kExtmarkUndo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldextent_row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>oldextent_col</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>end_row</name> <init>= <expr><name>start_row</name> <operator>+</operator> <name>oldextent_row</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_col</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>oldextent_row</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>start_col</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>oldextent_col</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>u_extmark_copy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>end_row</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>marktree_splice</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>,
<argument><expr><name>oldextent_row</name></expr></argument>, <argument><expr><name>oldextent_col</name></expr></argument>,
<argument><expr><name>newextent_row</name></expr></argument>, <argument><expr><name>newextent_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>undo</name> <operator>==</operator> <name>kExtmarkUndo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>u_force_get_undo_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>merged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>oldextent_row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newextent_row</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkUndoObject</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><call><name>kv_A</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>,
<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>uhp</name><operator>-&gt;</operator><name>uh_extmark</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kExtmarkSplice</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkSplice</name> <modifier>*</modifier></type><name>splice</name> <init>= <expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>splice</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>splice</name><operator>-&gt;</operator><name>start_row</name></name> <operator>==</operator> <name>start_row</name> <operator>&amp;&amp;</operator> <name><name>splice</name><operator>-&gt;</operator><name>oldextent_row</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>splice</name><operator>-&gt;</operator><name>newextent_row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>oldextent_col</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>start_col</name> <operator>&gt;=</operator> <name><name>splice</name><operator>-&gt;</operator><name>start_col</name></name>
<operator>&amp;&amp;</operator> <name>start_col</name> <operator>&lt;=</operator> <name><name>splice</name><operator>-&gt;</operator><name>start_col</name></name><operator>+</operator><name><name>splice</name><operator>-&gt;</operator><name>newextent_col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>splice</name><operator>-&gt;</operator><name>newextent_col</name></name> <operator>+=</operator> <name>newextent_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newextent_col</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>start_col</name> <operator>==</operator> <name><name>splice</name><operator>-&gt;</operator><name>start_col</name></name><operator>+</operator><name><name>splice</name><operator>-&gt;</operator><name>newextent_col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>splice</name><operator>-&gt;</operator><name>oldextent_col</name></name> <operator>+=</operator> <name>oldextent_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newextent_col</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>start_col</name> <operator>+</operator> <name>oldextent_col</name> <operator>==</operator> <name><name>splice</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>splice</name><operator>-&gt;</operator><name>start_col</name></name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>-&gt;</operator><name>oldextent_col</name></name> <operator>+=</operator> <name>oldextent_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merged</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkSplice</name></type> <name>splice</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name>start_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>oldextent_row</name></name> <operator>=</operator> <name>oldextent_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>oldextent_col</name></name> <operator>=</operator> <name>oldextent_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>newextent_row</name></name> <operator>=</operator> <name>newextent_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>splice</name><operator>.</operator><name>newextent_col</name></name> <operator>=</operator> <name>newextent_col</name></expr>;</expr_stmt>

<macro><name>kv_push</name><argument_list>(<argument>uhp-&gt;uh_extmark</argument>,
<argument>((ExtmarkUndoObject){ .type = kExtmarkSplice,
.data.splice = splice })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>extmark_move_region</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>extent_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>extent_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>new_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>new_col</name></decl></parameter>,
<parameter><decl><type><name>ExtmarkOp</name></type> <name>undo</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>buf_updates_send_splice</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>,
<argument><expr><name>extent_row</name></expr></argument>, <argument><expr><name>extent_col</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marktree_move_region</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>,
<argument><expr><name>extent_row</name></expr></argument>, <argument><expr><name>extent_col</name></expr></argument>,
<argument><expr><name>new_row</name></expr></argument>, <argument><expr><name>new_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>buf_updates_send_splice</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>new_row</name></expr></argument>, <argument><expr><name>new_col</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>extent_row</name></expr></argument>, <argument><expr><name>extent_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>undo</name> <operator>==</operator> <name>kExtmarkUndo</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>uhp</name> <init>= <expr><call><name>u_force_get_undo_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uhp</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ExtmarkMove</name></type> <name>move</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>start_row</name></name> <operator>=</operator> <name>start_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>start_col</name></name> <operator>=</operator> <name>start_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>extent_row</name></name> <operator>=</operator> <name>extent_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>extent_col</name></name> <operator>=</operator> <name>extent_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>new_row</name></name> <operator>=</operator> <name>new_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>move</name><operator>.</operator><name>new_col</name></name> <operator>=</operator> <name>new_col</name></expr>;</expr_stmt>

<macro><name>kv_push</name><argument_list>(<argument>uhp-&gt;uh_extmark</argument>,
<argument>((ExtmarkUndoObject){ .type = kExtmarkMove,
.data.move = move })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>src2ns</name><parameter_list>(<parameter><decl><type><name>Integer</name> <modifier>*</modifier></type><name>src_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>src_id</name> <operator>=</operator> <operator>(</operator><name>Integer</name><operator>)</operator><call><name>nvim_create_namespace</name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><name>STRING_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src_id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>UINT64_MAX</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>src_id</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>















<function><type><name>uint64_t</name></type> <name>extmark_add_decoration</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_row</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>end_col</name></decl></parameter>,
<parameter><decl><type><name>VirtText</name></type> <name>virt_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ExtmarkNs</name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>buf_ns_ref</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ns_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name></type> <name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>ns_id</name></name> <operator>=</operator> <name>ns_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>mark_id</name></name> <operator>=</operator> <name><name>ns</name><operator>-&gt;</operator><name>free_id</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>hl_id</name></name> <operator>=</operator> <name>hl_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>virt_text</name></name> <operator>=</operator> <name>virt_text</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>mark</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end_row</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>marktree_put_pair</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>,
<argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>end_row</name></expr></argument>, <argument><expr><name>end_col</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mark</name> <operator>=</operator> <call><name>marktree_put</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>start_row</name></expr></argument>, <argument><expr><name>start_col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ns</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>mark_id</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>redraw_buf_range_later</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start_row</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>end_row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>end_row</name></expr> </then><else>: <expr><name>start_row</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>item</name><operator>.</operator><name>mark_id</name></name></expr>;</return>
</block_content>}</block></function>











<function><type><name>void</name></type> <name>bufhl_add_hl_pos_offset</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>src_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>hl_id</name></decl></parameter>,
<parameter><decl><type><name>lpos_T</name></type> <name>pos_start</name></decl></parameter>,
<parameter><decl><type><name>lpos_T</name></type> <name>pos_end</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>hl_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>hl_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><name><name>pos_start</name><operator>.</operator><name>lnum</name></name></expr></init></decl>;</init> <condition><expr><name>lnum</name> <operator>&lt;=</operator> <name><name>pos_end</name><operator>.</operator><name>lnum</name></name></expr>;</condition> <incr><expr><name>lnum</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos_start</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>pos_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>hl_start</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>offset</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hl_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lnum</name> <operator>==</operator> <name><name>pos_start</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>&lt;</operator> <name><name>pos_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hl_start</name> <operator>=</operator> <name><name>pos_start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hl_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos_start</name><operator>.</operator><name>lnum</name></name> <operator>&lt;</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <name>lnum</name> <operator>==</operator> <name><name>pos_end</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hl_start</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>offset</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hl_end</name> <operator>=</operator> <name><name>pos_end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pos_start</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name> <operator>&amp;&amp;</operator> <name><name>pos_end</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hl_start</name> <operator>=</operator> <name><name>pos_start</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hl_end</name> <operator>=</operator> <name><name>pos_end</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>extmark_add_decoration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>src_id</name></expr></argument>, <argument><expr><name>hl_id</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>hl_start</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>end_off</name></expr></argument>, <argument><expr><name>hl_end</name></expr></argument>,
<argument><expr><name>VIRTTEXT_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_virttext</name><parameter_list>(<parameter><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><operator>*</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><call><name>kv_A</name><argument_list>(<argument><expr><operator>*</operator><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>text</name> <operator>=</operator> <operator>(</operator><name>VirtText</name><operator>)</operator><name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VirtText</name> <modifier>*</modifier></type><name>extmark_find_virttext</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ns_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MarkTreeIter</name></type> <name><name>itr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>marktree_itr_get</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name>row</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><call><name>map_ref</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>,
<argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ns_id</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ns_id</name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>ns_id</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>decorations_redraw_reset</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>DecorationRedrawState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name> <operator>||</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_luahl</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>decorations_redraw_start</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_row</name></decl></parameter>,
<parameter><decl><type><name>DecorationRedrawState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>top_row</name></name> <operator>=</operator> <name>top_row</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>marktree_itr_get</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name>top_row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>itr</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_itr_rewind</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name>top_row</name> <operator>&amp;&amp;</operator> <name><name>mark</name><operator>.</operator><name>id</name></name><operator>&amp;</operator><name>MARKTREE_END_FLAG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>next_mark</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>altpos</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>,
<argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name><operator>^</operator><name>MARKTREE_END_FLAG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start_id</name> <init>= <expr><name><name>mark</name><operator>.</operator><name>id</name></name> <operator>&amp;</operator> <operator>~</operator><name>MARKTREE_END_FLAG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExtmarkItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><call><name>map_ref</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>,
<argument><expr><name>start_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name><name>mark</name><operator>.</operator><name>id</name></name><operator>&amp;</operator><name>MARKTREE_END_FLAG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>altpos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name>top_row</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name><name>mark</name><operator>.</operator><name>id</name></name><operator>&amp;</operator><name>MARKTREE_END_FLAG</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>altpos</name><operator>.</operator><name>row</name></name> <operator>&gt;=</operator> <name>top_row</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<goto>goto <name>next_mark</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr_id</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><ternary><condition><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HlRange</name></type> <name>range</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>id</name></name><operator>&amp;</operator><name>MARKTREE_END_FLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <operator>(</operator><name>HlRange</name><operator>)</operator><block>{ <expr><name><name>altpos</name><operator>.</operator><name>row</name></name></expr>, <expr><name><name>altpos</name><operator>.</operator><name>col</name></name></expr>, <expr><name><name>mark</name><operator>.</operator><name>row</name></name></expr>, <expr><name><name>mark</name><operator>.</operator><name>col</name></name></expr>,
<expr><name>attr_id</name></expr>, <expr><name>vt</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>range</name> <operator>=</operator> <operator>(</operator><name>HlRange</name><operator>)</operator><block>{ <expr><name><name>mark</name><operator>.</operator><name>row</name></name></expr>, <expr><name><name>mark</name><operator>.</operator><name>col</name></name></expr>, <expr><name><name>altpos</name><operator>.</operator><name>row</name></name></expr>,
<expr><name><name>altpos</name><operator>.</operator><name>col</name></name></expr>, <expr><name>attr_id</name></expr>, <expr><name>vt</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>next_mark</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>marktree_itr_node_done</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>decorations_redraw_line</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>DecorationRedrawState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decorations_redraw_start</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return> 
</block_content>}</block></function>

<function><type><name>int</name></type> <name>decorations_redraw_col</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>DecorationRedrawState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>col_until</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>mtmark_t</name></type> <name>mark</name> <init>= <expr><call><name>marktree_itr_current</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mark</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>mark</name><operator>.</operator><name>col</name></name> <operator>&gt;</operator> <name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name> <operator>=</operator> <name><name>mark</name><operator>.</operator><name>col</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mark</name><operator>.</operator><name>id</name></name><operator>&amp;</operator><name>MARKTREE_END_FLAG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_mark</name>;</goto>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>mtpos_t</name></type> <name>endpos</name> <init>= <expr><call><name>marktree_lookup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>,
<argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name><operator>|</operator><name>MARKTREE_END_FLAG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExtmarkItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><call><name>map_ref</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ExtmarkItem</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_extmark_index</name></name></expr></argument>,
<argument><expr><name><name>mark</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>endpos</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>mark</name><operator>.</operator><name>row</name></name>
<operator>||</operator> <operator>(</operator><name><name>endpos</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name><name>mark</name><operator>.</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>endpos</name><operator>.</operator><name>col</name></name> <operator>&lt;=</operator> <name><name>mark</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<goto>goto <name>next_mark</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr_id</name> <init>= <expr><ternary><condition><expr><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>hl_id</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VirtText</name> <modifier>*</modifier></type><name>vt</name> <init>= <expr><ternary><condition><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>virt_text</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<macro><name>kv_push</name><argument_list>(<argument>state-&gt;active</argument>, <argument>((HlRange){ mark.row, mark.col,
endpos.row, endpos.col,
attr_id, vt })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<label><name>next_mark</name>:</label>
<expr_stmt><expr><call><name>marktree_itr_next</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_marktree</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>itr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HlRange</name></type> <name>item</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>keep</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>end_row</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name>
<operator>||</operator> <operator>(</operator><name><name>item</name><operator>.</operator><name>end_row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>end_col</name></name> <operator>&lt;=</operator> <name>col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>item</name><operator>.</operator><name>start_row</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>virt_text</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>start_row</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name>
<operator>||</operator> <operator>(</operator><name><name>item</name><operator>.</operator><name>start_row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>start_col</name></name> <operator>&lt;=</operator> <name>col</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>end_row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>end_col</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>start_row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>col_until</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>start_col</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>attr_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>attr_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>kv_A</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VirtText</name> <modifier>*</modifier></type><name>decorations_redraw_virt_text</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>DecorationRedrawState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decorations_redraw_col</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXCOL</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>HlRange</name></type> <name>item</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>start_row</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>.</operator><name>virt_text</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>item</name><operator>.</operator><name>virt_text</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
