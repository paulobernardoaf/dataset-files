<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\normal.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_NORMAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_NORMAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_IDENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_STRING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIND_EVAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 





<typedef>typedef <type><enum>enum <block>{
<decl><name>kMTCharWise</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>kMTLineWise</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>kMTBlockWise</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>kMTUnknown</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> 
}</block></enum></type> <name>MotionType</name>;</typedef>




<typedef>typedef <type><struct>struct <name>oparg_S</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>op_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>regname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MotionType</name></type> <name>motion_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>motion_force</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>use_reg_one</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>inclusive</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>end_adjusted</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pos_T</name></type> <name>start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>cursor_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>line_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>empty</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>is_VIsual</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_vcol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_vcol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>prev_opcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>prev_count0</name></decl>;</decl_stmt> 
}</block></struct></type> <name>oparg_T</name>;</typedef>




<typedef>typedef <type><struct>struct <name>cmdarg_S</name> <block>{
<decl_stmt><decl><type><name>oparg_T</name> <modifier>*</modifier></type><name>oap</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>prechar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cmdchar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nchar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ncharC1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ncharC2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>extra_char</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>opcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>count0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>count1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>searchbuf</name></decl>;</decl_stmt> 
}</block></struct></type> <name>cmdarg_T</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CA_COMMAND_BUSY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CA_NO_ADJ_OP_END</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"normal.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
