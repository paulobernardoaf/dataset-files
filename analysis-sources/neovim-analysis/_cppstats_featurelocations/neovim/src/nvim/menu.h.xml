<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\menu.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MENU_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_MENU_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_INVALID</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_VISUAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_SELECT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_OP_PENDING</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_INSERT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_CMDLINE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INDEX_TIP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_MODES</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_NORMAL_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_NORMAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_VISUAL_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_VISUAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_SELECT_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_SELECT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_OP_PENDING_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_OP_PENDING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_INSERT_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_INSERT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_CMDLINE_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_CMDLINE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_TIP_MODE</name></cpp:macro> <cpp:value>(1 &lt;&lt; MENU_INDEX_TIP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MENU_ALL_MODES</name></cpp:macro> <cpp:value>((1 &lt;&lt; MENU_INDEX_TIP) - 1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MNU_HIDDEN_CHAR</name></cpp:macro> <cpp:value>']'</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>VimMenu</name></name></type> <name>vimmenu_T</name>;</typedef>

<struct>struct <name>VimMenu</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>modes</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>en_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>en_dname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mnemonic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>actext</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>priority</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name><name>strings</name><index>[<expr><name>MENU_MODES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>noremap</name><index>[<expr><name>MENU_MODES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>silent</name><index>[<expr><name>MENU_MODES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vimmenu_T</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"menu.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
