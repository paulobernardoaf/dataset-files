<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\ui.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_UI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_UI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kUICmdline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>kUIPopupmenu</name></decl>,
<decl><name>kUITabline</name></decl>,
<decl><name>kUIWildmenu</name></decl>,
<decl><name>kUIMessages</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kUIGlobalCount</name></cpp:macro> <cpp:value>kUILinegrid</cpp:value></cpp:define>
<decl><name>kUILinegrid</name></decl>,
<decl><name>kUIMultigrid</name></decl>,
<decl><name>kUIHlState</name></decl>,
<decl><name>kUITermColors</name></decl>,
<decl><name>kUIFloatDebug</name></decl>,
<decl><name>kUIExtCount</name></decl>,
}</block></enum></type> <name>UIExtension</name>;</typedef>

<decl_stmt><decl><type><name>EXTERN</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><name><name>ui_ext_names</name><index>[]</index></name></type> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <block>{
<expr><literal type="string">"ext_cmdline"</literal></expr>,
<expr><literal type="string">"ext_popupmenu"</literal></expr>,
<expr><literal type="string">"ext_tabline"</literal></expr>,
<expr><literal type="string">"ext_wildmenu"</literal></expr>,
<expr><literal type="string">"ext_messages"</literal></expr>,
<expr><literal type="string">"ext_linegrid"</literal></expr>,
<expr><literal type="string">"ext_multigrid"</literal></expr>,
<expr><literal type="string">"ext_hlstate"</literal></expr>,
<expr><literal type="string">"ext_termcolors"</literal></expr>,
<expr><literal type="string">"_debug_float"</literal></expr>,
}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>ui_t</name></name></type> <name>UI</name>;</typedef>

<enum>enum <block>{
<decl><name>kLineFlagWrap</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>kLineFlagInvalid</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
}</block>;</enum>

<typedef>typedef <type><name>int</name></type> <name>LineFlags</name>;</typedef>

<struct>struct <name>ui_t</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>override</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>composed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ui_ext</name><index>[<expr><name>kUIExtCount</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pum_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_events.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>inspect</name>)<parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui.h.generated.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ui_events_call.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>EXTERN</name> <name>MultiQueue</name> <modifier>*</modifier></type><name>resize_events</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
