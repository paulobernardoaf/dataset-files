<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\popupmnu.c">






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui_compositor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/search.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pumitem_T</name> <modifier>*</modifier></type><name>pum_array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_selected</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_base_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_kind_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_extra_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_scrollbar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_rl</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_anchor_grid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pum_col</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_above</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_is_visible</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_is_drawn</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_external</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pum_invalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"popupmnu.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUM_DEF_HEIGHT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pum_compute_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name>pum_base_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_kind_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_extra_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pum_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>pum_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_base_width</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_base_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pum_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_kind</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>pum_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_kind</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_kind_width</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_kind_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pum_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>vim_strsize</name><argument_list>(<argument><expr><name><name>pum_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_extra</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_extra_width</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_extra_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>













<function><type><name>void</name></type> <name>pum_display</name><parameter_list>(<parameter><decl><type><name>pumitem_T</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>array_changed</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cmd_startcol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>context_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>above_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>below_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redo_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pum_win_row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cursor_col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pum_is_visible</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>pum_external</name> <operator>=</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIPopupmenu</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>State</name> <operator>==</operator> <name>CMDLINE</name> <operator>&amp;&amp;</operator> <call><name>ui_has</name><argument_list>(<argument><expr><name>kUIWildmenu</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pum_rl</name> <operator>=</operator> <operator>(</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_p_rl</name></name> <operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>CMDLINE</name><operator>)</operator></expr>;</expr_stmt>

<do>do <block>{<block_content>


<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_is_drawn</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>validate_cursor_col</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>above_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>below_row</name> <operator>=</operator> <name>cmdline_row</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>State</name> <operator>==</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_win_row</name> <operator>=</operator> <ternary><condition><expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>cmdline_row</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name>cmd_startcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_anchor_grid</name> <operator>=</operator> <ternary><condition><expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUICmdline</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>DEFAULT_GRID_HANDLE</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pum_win_row</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cursor_col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pum_anchor_grid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_grid</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_anchor_grid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>default_grid</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_win_row</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cursor_col</name> <operator>+=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_external</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>array_changed</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>arr</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_extra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pum_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><call><name>ARRAY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ui_call_popupmenu_show</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>, <argument><expr><name>pum_win_row</name></expr></argument>, <argument><expr><name>cursor_col</name></expr></argument>,
<argument><expr><name>pum_anchor_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_popupmenu_select</name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>def_width</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>p_pw</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>pvwin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<macro><name>FOR_ALL_WINDOWS_IN_TAB</name><argument_list>(<argument>wp</argument>, <argument>curtab</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pvwin</name> <operator>=</operator> <name>wp</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>pvwin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pvwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>above_row</name> <operator>=</operator> <name><name>pvwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>pvwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pvwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>&gt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_winrow</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>below_row</name> <operator>=</operator> <name><name>pvwin</name><operator>-&gt;</operator><name>w_winrow</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>PUM_DEF_HEIGHT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>PUM_DEF_HEIGHT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_ph</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pum_height</name> <operator>&gt;</operator> <name>p_ph</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_ph</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pum_win_row</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>below_row</name> <operator>-</operator> <name>pum_height</name>
<operator>&amp;&amp;</operator> <name>pum_win_row</name> <operator>-</operator> <name>above_row</name> <operator>&gt;</operator> <operator>(</operator><name>below_row</name> <operator>-</operator> <name>above_row</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pum_above</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>context_lines</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>context_lines</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_win_row</name> <operator>&gt;=</operator> <name>size</name> <operator>+</operator> <name>context_lines</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_row</name> <operator>=</operator> <name>pum_win_row</name> <operator>-</operator> <name>size</name> <operator>-</operator> <name>context_lines</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>pum_win_row</name> <operator>-</operator> <name>context_lines</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_ph</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pum_height</name> <operator>&gt;</operator> <name>p_ph</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_row</name> <operator>+=</operator> <name>pum_height</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_ph</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_ph</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pum_above</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>context_lines</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>context_lines</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name>
<operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_height</name></name> <operator>-</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pum_row</name> <operator>=</operator> <name>pum_win_row</name> <operator>+</operator> <name>context_lines</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>below_row</name> <operator>-</operator> <name>pum_row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>below_row</name> <operator>-</operator> <name>pum_row</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_ph</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pum_height</name> <operator>&gt;</operator> <name>p_ph</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_ph</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pum_height</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>pum_height</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pvwin</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pum_row</name> <argument_list type="generic">&lt; <argument><expr><name>above_row</name> <operator>&amp;&amp;</operator> <name>pum_height</name></expr></argument> &gt;</argument_list></name> <name>above_row</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_row</name> <operator>=</operator> <name>above_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_height</name> <operator>=</operator> <name>pum_win_row</name> <operator>-</operator> <name>above_row</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_external</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pum_array</name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pum_compute_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_width</name> <init>= <expr><name>pum_base_width</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>pum_height</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_scrollbar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_width</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_scrollbar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>def_width</name> <operator>&lt;</operator> <name>max_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>def_width</name> <operator>=</operator> <name>max_width</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>cursor_col</name> <operator>&lt;</operator> <name>Columns</name> <operator>-</operator> <name>p_pw</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cursor_col</name> <operator>&lt;</operator> <name>Columns</name> <operator>-</operator> <name>max_width</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><name>pum_rl</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>pum_rl</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cursor_col</name> <operator>&gt;</operator> <name>p_pw</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cursor_col</name> <operator>&gt;</operator> <name>max_width</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <name>cursor_col</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>-</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name> <operator>&gt;=</operator> <name>INT_MIN</name>
<operator>&amp;&amp;</operator> <name>Columns</name> <operator>-</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pum_width</name> <operator>&gt;</operator> <name>max_width</name> <operator>+</operator> <name>pum_kind_width</name> <operator>+</operator> <name>pum_extra_width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>pum_width</name> <operator>&gt;</operator> <name>p_pw</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>max_width</name> <operator>+</operator> <name>pum_kind_width</name> <operator>+</operator> <name>pum_extra_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_width</name> <operator>&lt;</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>cursor_col</name> <operator>&gt;</operator> <name>p_pw</name> <operator>||</operator> <name>cursor_col</name> <operator>&gt;</operator> <name>max_width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>pum_rl</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>pum_rl</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cursor_col</name> <operator>&lt;</operator> <name>Columns</name> <operator>-</operator> <name>p_pw</name>
<operator>||</operator> <name>cursor_col</name> <operator>&lt;</operator> <name>Columns</name> <operator>-</operator> <name>max_width</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name> <operator>&amp;&amp;</operator> <call><name>W_ENDCOL</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>max_width</name> <operator>+</operator> <name>pum_scrollbar</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <name>cursor_col</name> <operator>+</operator> <name>max_width</name> <operator>+</operator> <name>pum_scrollbar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_col</name> <operator>&gt;=</operator> <name>Columns</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>&gt;</operator> <name>Columns</name> <operator>-</operator> <name>max_width</name> <operator>-</operator> <name>pum_scrollbar</name>
<operator>&amp;&amp;</operator> <name>max_width</name> <operator>&lt;=</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <name>cursor_col</name> <operator>-</operator> <name>max_width</name> <operator>-</operator> <name>pum_scrollbar</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_col</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>pum_col</name> <operator>-</operator> <name>pum_scrollbar</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_width</name> <operator>&lt;</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pw</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_width</name> <operator>&gt;</operator> <name>pum_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>pum_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_width</name> <operator>&gt;=</operator> <name>Columns</name> <operator>-</operator> <name>pum_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>Columns</name> <operator>-</operator> <name>pum_col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pum_width</name> <operator>&gt;</operator> <name>max_width</name> <operator>+</operator> <name>pum_kind_width</name> <operator>+</operator> <name>pum_extra_width</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>pum_width</name> <operator>&gt;</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>max_width</name> <operator>+</operator> <name>pum_kind_width</name> <operator>+</operator> <name>pum_extra_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_width</name> <operator>&lt;</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>Columns</name> <operator>&lt;</operator> <name>def_width</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>INT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>INT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max_width</name> <operator>&gt;</operator> <name>p_pw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pw</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <name>max_width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Columns</name> <operator>-</operator> <name>max_width</name> <operator>&gt;=</operator> <name>INT_MIN</name>
<operator>&amp;&amp;</operator> <name>Columns</name> <operator>-</operator> <name>max_width</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>Columns</name> <operator>-</operator> <name>max_width</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pum_width</name> <operator>=</operator> <name>max_width</name> <operator>-</operator> <name>pum_scrollbar</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




</block_content>}</block> while <condition>(<expr><call><name>pum_set_selected</name><argument_list>(<argument><expr><name>selected</name></expr></argument>, <argument><expr><name>redo_count</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>++</operator><name>redo_count</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>;</do>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>pum_redraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_norm</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>HLF_PNI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_select</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>HLF_PSI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_scroll</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>HLF_PSB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_thumb</name> <init>= <expr><call><name>win_hl_attr</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>HLF_PST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>totwidth</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thumb_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thumb_heigth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>grid_width</name> <init>= <expr><name>pum_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>extra_space</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col_off</name> <operator>=</operator> <name>pum_width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wincol</name></name> <operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>grid_width</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_space</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pum_col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>grid_width</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_space</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_scrollbar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>grid_width</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_assign_handle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><call><name>ui_comp_put_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>pum_row</name></expr></argument>, <argument><expr><name>pum_col</name><operator>-</operator><name>col_off</name></expr></argument>,
<argument><expr><name>pum_height</name></expr></argument>, <argument><expr><name>grid_width</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>invalid_grid</name> <init>= <expr><name>moved</name> <operator>||</operator> <name>pum_invalid</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pum_invalid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw_pum</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pum_grid</name><operator>.</operator><name>chars</name></name>
<operator>||</operator> <name><name>pum_grid</name><operator>.</operator><name>Rows</name></name> <operator>!=</operator> <name>pum_height</name> <operator>||</operator> <name><name>pum_grid</name><operator>.</operator><name>Columns</name></name> <operator>!=</operator> <name>grid_width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>pum_height</name></expr></argument>, <argument><expr><name>grid_width</name></expr></argument>, <argument><expr><operator>!</operator><name>invalid_grid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_grid_resize</name><argument_list>(<argument><expr><name><name>pum_grid</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pum_grid</name><operator>.</operator><name>Columns</name></name></expr></argument>, <argument><expr><name><name>pum_grid</name><operator>.</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>invalid_grid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_invalidate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><ternary><condition><expr><name>pum_above</name></expr> ?</condition><then> <expr><literal type="string">"SW"</literal></expr> </then><else>: <expr><literal type="string">"NW"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row_off</name> <init>= <expr><ternary><condition><expr><name>pum_above</name></expr> ?</condition><then> <expr><name>pum_height</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ui_call_win_float_pos</name><argument_list>(<argument><expr><name><name>pum_grid</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pum_anchor_grid</name></expr></argument>, <argument><expr><name>pum_row</name><operator>-</operator><name>row_off</name></expr></argument>, <argument><expr><name>pum_col</name><operator>-</operator><name>col_off</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&gt;</operator> <name>pum_size</name> <operator>-</operator> <name>pum_height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_size</name> <operator>-</operator> <name>pum_height</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_scrollbar</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>thumb_heigth</name> <operator>=</operator> <name>pum_height</name> <operator>*</operator> <name>pum_height</name> <operator>/</operator> <name>pum_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>thumb_heigth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>thumb_heigth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>thumb_pos</name> <operator>=</operator> <operator>(</operator><name>pum_first</name> <operator>*</operator> <operator>(</operator><name>pum_height</name> <operator>-</operator> <name>thumb_heigth</name><operator>)</operator>
<operator>+</operator> <operator>(</operator><name>pum_size</name> <operator>-</operator> <name>pum_height</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator>
<operator>/</operator> <operator>(</operator><name>pum_size</name> <operator>-</operator> <name>pum_height</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pum_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>pum_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idx</name> <operator>==</operator> <name>pum_selected</name><operator>)</operator></expr> ?</condition><then> <expr><name>attr_select</name></expr> </then><else>: <expr><name>attr_norm</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>grid_puts_line_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>extra_space</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col_off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col_off</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totwidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>round</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_text</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_kind</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_extra</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>TAB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>totwidth</name> <operator>+</operator> <name>w</name> <operator>&gt;</operator> <name>pum_width</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>saved</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>transstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><call><name>reverse_text</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rt_start</name> <init>= <expr><name>rt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vim_strsize</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>pum_width</name></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>pum_width</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>pum_width</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>rt</name><operator>)</operator> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>,
<argument><expr><name>col</name> <operator>-</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>rt_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>TAB</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_puts_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>totwidth</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pum_kind_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_extra</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_kind</name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pum_array</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>pum_extra</name> <operator>==</operator> <name>NULL</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>pum_base_width</name> <operator>+</operator> <name>n</name> <operator>&gt;=</operator> <name>pum_width</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col_off</name> <operator>-</operator> <name>pum_base_width</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col_off</name> <operator>-</operator> <name>pum_base_width</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name>col_off</name> <operator>+</operator> <name>pum_base_width</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name>col_off</name> <operator>+</operator> <name>pum_base_width</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>totwidth</name> <operator>=</operator> <name>pum_base_width</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col_off</name> <operator>-</operator> <name>pum_width</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>col_off</name> <operator>+</operator> <name>pum_width</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_scrollbar</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_rl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col_off</name> <operator>-</operator> <name>pum_width</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name>thumb_pos</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>thumb_pos</name> <operator>+</operator> <name>thumb_heigth</name></expr>
?</condition><then> <expr><name>attr_thumb</name></expr> </then><else>: <expr><name>attr_scroll</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>grid_putchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col_off</name> <operator>+</operator> <name>pum_width</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <name>thumb_pos</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>thumb_pos</name> <operator>+</operator> <name>thumb_heigth</name></expr>
?</condition><then> <expr><name>attr_thumb</name></expr> </then><else>: <expr><name>attr_scroll</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grid_puts_line_flush</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>pum_set_selected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>resized</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>context</name> <init>= <expr><name>pum_height</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pum_selected</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pum_selected</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pum_selected</name> <operator>&lt;</operator> <name>pum_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&gt;</operator> <name>pum_selected</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&gt;</operator> <name>pum_selected</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>-=</operator> <name>pum_height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pum_first</name> <operator>&gt;</operator> <name>pum_selected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <name>pum_selected</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <name>pum_selected</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>+=</operator> <name>pum_height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <name>pum_selected</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>context</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>context</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_height</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&gt;</operator> <name>pum_selected</name> <operator>-</operator> <name>context</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name> <operator>-</operator> <name>context</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pum_first</name> <operator>&lt;</operator> <name>pum_selected</name> <operator>+</operator> <name>context</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <name>pum_selected</name> <operator>+</operator> <name>context</name> <operator>-</operator> <name>pum_height</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pum_array</name><index>[<expr><name>pum_selected</name></expr>]</index></name><operator>.</operator><name>pum_info</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>Rows</name> <operator>&gt;</operator> <literal type="number">10</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>repeat</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cot</name></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>curwin_save</name> <init>= <expr><name>curwin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tabpage_T</name> <modifier>*</modifier></type><name>curtab_save</name> <init>= <expr><name>curtab</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p_pvh</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_pvh</name> <operator>&lt;</operator> <name>g_do_tagpreview</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pvh</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>RedrawingDisabled</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>no_u_sync</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>resized</name> <operator>=</operator> <call><name>prepare_tagpreview</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_u_sync</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>RedrawingDisabled</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>g_do_tagpreview</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_pvw</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resized</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_nwindows</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_fname</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>BUFEMPTY</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ml_delete</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>no_u_sync</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>do_ecmd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ECMD_ONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_u_sync</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"swf"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bt"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"nofile"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"bh"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="string">"wipe"</literal></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"diff"</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPT_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>pum_array</name><index>[<expr><name>pum_selected</name></expr>]</index></name><operator>.</operator><name>pum_info</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ml_append</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name>p_pvh</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>p_pvh</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_height</name></name> <operator>&lt;</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>win_setheight</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resized</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_changed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_ma</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curwin</name> <operator>!=</operator> <name>curwin_save</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>curtab</name> <operator>!=</operator> <name>curtab_save</name> <operator>&amp;&amp;</operator> <call><name>valid_tabpage</name><argument_list>(<argument><expr><name>curtab_save</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curtab</name> <operator>!=</operator> <name>curtab_save</name> <operator>&amp;&amp;</operator> <call><name>valid_tabpage</name><argument_list>(<argument><expr><name>curtab_save</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>goto_tabpage_tp</name><argument_list>(<argument><expr><name>curtab_save</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ins_compl_active</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>resized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_redr_status</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_later</name><argument_list>(<argument><expr><name>SOME_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>resized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_u_sync</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_u_sync</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_topline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resized</name> <operator>&amp;&amp;</operator> <call><name>win_valid</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_u_sync</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_enter</name><argument_list>(<argument><expr><name>curwin_save</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_u_sync</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resized</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pum_redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>resized</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>pum_undisplay</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>immediate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pum_is_visible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pum_array</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>must_redraw_pum</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pum_check_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pum_check_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pum_is_visible</name> <operator>&amp;&amp;</operator> <name>pum_is_drawn</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_external</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_popupmenu_hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_remove_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ui_has</name><argument_list>(<argument><expr><name>kUIMultigrid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ui_call_win_close</name><argument_list>(<argument><expr><name><name>pum_grid</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_call_grid_destroy</name><argument_list>(<argument><expr><name><name>pum_grid</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>grid_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pum_is_drawn</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>pum_clear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pum_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>pum_visible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>pum_is_visible</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>pum_drawn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pum_visible</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>pum_external</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>pum_invalidate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pum_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pum_recompose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ui_comp_compose_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pum_grid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>pum_get_height</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pum_external</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ui_pum_height</name> <init>= <expr><call><name>ui_pum_get_height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ui_pum_height</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ui_pum_height</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pum_height</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>pum_set_event_info</name><parameter_list>(<parameter><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pum_visible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pum_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"width"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pum_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"row"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pum_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"col"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pum_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_nr</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pum_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_dict_add_special</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"scrollbar"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>pum_scrollbar</name></expr> ?</condition><then> <expr><name>kSpecialVarTrue</name></expr> </then><else>: <expr><name>kSpecialVarFalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
