<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\map.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MAP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_MAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>uint64_t</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint64_t</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_DECLS</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KHASH_DECLARE(T##_##U##_map, T, U) typedef struct { khash_t(T##_##U##_map) *table; } Map(T, U); Map(T, U) *map_##T##_##U##_new(void); void map_##T##_##U##_free(Map(T, U) *map); U map_##T##_##U##_get(Map(T, U) *map, T key); bool map_##T##_##U##_has(Map(T, U) *map, T key); T map_##T##_##U##_key(Map(T, U) *map, T key); U map_##T##_##U##_put(Map(T, U) *map, T key, U value); U *map_##T##_##U##_ref(Map(T, U) *map, T key, bool put); U map_##T##_##U##_del(Map(T, U) *map, T key); void map_##T##_##U##_clear(Map(T, U) *map);</cpp:value></cpp:define>



















<macro><name>MAP_DECLS</name><argument_list>(<argument>int</argument>, <argument>int</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>cstr_t</argument>, <argument>ptr_t</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>ptr_t</argument>, <argument>ptr_t</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>uint64_t</argument>, <argument>ptr_t</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>uint64_t</argument>, <argument>ssize_t</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>uint64_t</argument>, <argument>uint64_t</argument>)</argument_list></macro>



<typedef>typedef <type><struct>struct <name>ExtmarkNs</name> <block>{ 
<expr_stmt><expr><call><name>Map</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>map</name></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>free_id</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ExtmarkNs</name>;</typedef>

<macro><name>MAP_DECLS</name><argument_list>(<argument>uint64_t</argument>, <argument>ExtmarkNs</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>uint64_t</argument>, <argument>ExtmarkItem</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>handle_T</argument>, <argument>ptr_t</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>String</argument>, <argument>MsgpackRpcRequestHandler</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>HlEntry</argument>, <argument>int</argument>)</argument_list></macro>
<macro><name>MAP_DECLS</name><argument_list>(<argument>String</argument>, <argument>handle_T</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_new</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_new</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_free</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_get</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_get</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_has</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_has</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_key</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_put</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_put</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_ref</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_ref</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_del</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_del</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_clear</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>U</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_##T##_##U##_clear</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_size</name><parameter_list>(<parameter><type><name>map</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((map)-&gt;table-&gt;size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_new</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_new(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_free</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_free(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_get</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_get(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_has</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_has(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_key</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_key(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_put</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_put(T, ptr_t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_del</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_del(T, ptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pmap_clear</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>map_clear(T, ptr_t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_foreach</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>block</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_foreach(map-&gt;table, key, value, block)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_foreach_value</name><parameter_list>(<parameter><type><name>map</name></type></parameter>, <parameter><type><name>value</name></type></parameter>, <parameter><type><name>block</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kh_foreach_value(map-&gt;table, value, block)</cpp:value></cpp:define>


<decl_stmt><decl><type><name>void</name></type> <name>pmap_del2</name><argument_list>(<argument><expr><call><name>PMap</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>map</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
