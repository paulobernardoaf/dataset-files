<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\mbyte.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/iconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/spell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/arabic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rangeStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rangeEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>convertStruct</name>;</typedef>

<struct>struct <name>interval</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>last</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbyte.c.generated.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unicode_tables.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char_u</name></type> <name><name>e_loadlib</name><index>[]</index></name> <init>= <expr><literal type="string">"E370: Could not load library %s"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>e_loadfunc</name><index>[]</index></name> <init>= <expr><literal type="string">"E448: Could not load library function %s"</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>utf8len_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>utf8len_tab_zero</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>





<struct><specifier>static</specifier> struct
<block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>prop</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>codepage</name></decl>;</decl_stmt> }</block>
<decl><name><name>enc_canon_table</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_LATIN_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"latin1"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_LATIN1</name></expr>, <expr><literal type="number">1252</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-2"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_3</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-3"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-4"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_5</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-5"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_6</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-6"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_7</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-7"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-8"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_9</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-9"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_10</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-10"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_11</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-11"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_13</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-13"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_14</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-14"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_ISO_15</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"iso-8859-15"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_LATIN9</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_KOI8_R</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"koi8-r"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_KOI8_U</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"koi8-u"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF8</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-8"</literal></expr>, <expr><name>ENC_UNICODE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS2</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-2"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_2BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS2LE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-2le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_2BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF16</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-16"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_2WORD</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UTF16LE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"utf-16le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_2WORD</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS4</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-4"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_B</name> <operator>+</operator> <name>ENC_4BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_UCS4LE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"ucs-4le"</literal></expr>, <expr><name>ENC_UNICODE</name> <operator>+</operator> <name>ENC_ENDIAN_L</name> <operator>+</operator> <name>ENC_4BYTE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_DEBUG</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_DEBUG</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_JP</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-jp"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPNU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_SJIS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"sjis"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPN</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_KR</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-kr"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_KORU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_CN</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-cn"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHSU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_EUC_TW</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"euc-tw"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHTU</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_BIG5</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"big5"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHT</name></expr>}</block></expr>,




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP437</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp437"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">437</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP737</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp737"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">737</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP775</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp775"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">775</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP850</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp850"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">850</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP852</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp852"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">852</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP855</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp855"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">855</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP857</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp857"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">857</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP860</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp860"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">860</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP861</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp861"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">861</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP862</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp862"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">862</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP863</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp863"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">863</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP865</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp865"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">865</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP866</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp866"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">866</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP869</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp869"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">869</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP874</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp874"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">874</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP932</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp932"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_JPN</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP936</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp936"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHS</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP949</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp949"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_KOR</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP950</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp950"</literal></expr>, <expr><name>ENC_DBCS</name></expr>, <expr><name>DBCS_CHT</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1250</name></cpp:macro> <cpp:value>49</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1250"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1250</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1251</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1251"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1251</literal></expr>}</block></expr>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1253</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1253"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1253</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1254</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1254"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1254</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1255</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1255"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1255</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1256</name></cpp:macro> <cpp:value>54</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1256"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1256</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1257</name></cpp:macro> <cpp:value>55</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1257"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1257</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_CP1258</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"cp1258"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">1258</literal></expr>}</block></expr>, 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_MACROMAN</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"macroman"</literal></expr>, <expr><name>ENC_8BIT</name> <operator>+</operator> <name>ENC_MACROMAN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_HPROMAN8</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>
<expr><block>{<expr><literal type="string">"hp-roman8"</literal></expr>, <expr><name>ENC_8BIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_COUNT</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
}</block></expr></init></decl>;</struct>




<struct><specifier>static</specifier> struct
<block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>canon</name></decl>;</decl_stmt> }</block>
<decl><name><name>enc_alias_table</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"ansi"</literal></expr>, <expr><name>IDX_LATIN_1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iso-8859-1"</literal></expr>, <expr><name>IDX_LATIN_1</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin2"</literal></expr>, <expr><name>IDX_ISO_2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin3"</literal></expr>, <expr><name>IDX_ISO_3</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin4"</literal></expr>, <expr><name>IDX_ISO_4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cyrillic"</literal></expr>, <expr><name>IDX_ISO_5</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arabic"</literal></expr>, <expr><name>IDX_ISO_6</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"greek"</literal></expr>, <expr><name>IDX_ISO_7</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hebrew"</literal></expr>, <expr><name>IDX_ISO_8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin5"</literal></expr>, <expr><name>IDX_ISO_9</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"turkish"</literal></expr>, <expr><name>IDX_ISO_9</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"latin6"</literal></expr>, <expr><name>IDX_ISO_10</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"nordic"</literal></expr>, <expr><name>IDX_ISO_10</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"thai"</literal></expr>, <expr><name>IDX_ISO_11</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"latin7"</literal></expr>, <expr><name>IDX_ISO_13</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin8"</literal></expr>, <expr><name>IDX_ISO_14</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin9"</literal></expr>, <expr><name>IDX_ISO_15</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf8"</literal></expr>, <expr><name>IDX_UTF8</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unicode"</literal></expr>, <expr><name>IDX_UCS2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs2"</literal></expr>, <expr><name>IDX_UCS2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs2be"</literal></expr>, <expr><name>IDX_UCS2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs-2be"</literal></expr>, <expr><name>IDX_UCS2</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs2le"</literal></expr>, <expr><name>IDX_UCS2LE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf16"</literal></expr>, <expr><name>IDX_UTF16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf16be"</literal></expr>, <expr><name>IDX_UTF16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf-16be"</literal></expr>, <expr><name>IDX_UTF16</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf16le"</literal></expr>, <expr><name>IDX_UTF16LE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs4"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs4be"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs-4be"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ucs4le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf32"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf-32"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf32be"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf-32be"</literal></expr>, <expr><name>IDX_UCS4</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf32le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf-32le"</literal></expr>, <expr><name>IDX_UCS4LE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"932"</literal></expr>, <expr><name>IDX_CP932</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"949"</literal></expr>, <expr><name>IDX_CP949</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"936"</literal></expr>, <expr><name>IDX_CP936</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gbk"</literal></expr>, <expr><name>IDX_CP936</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"950"</literal></expr>, <expr><name>IDX_CP950</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"eucjp"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"unix-jis"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ujis"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shift-jis"</literal></expr>, <expr><name>IDX_SJIS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pck"</literal></expr>, <expr><name>IDX_SJIS</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"euckr"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"5601"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="string">"euccn"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"gb2312"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"euctw"</literal></expr>, <expr><name>IDX_EUC_TW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"japan"</literal></expr>, <expr><name>IDX_EUC_JP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"korea"</literal></expr>, <expr><name>IDX_EUC_KR</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prc"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"zh-cn"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"chinese"</literal></expr>, <expr><name>IDX_EUC_CN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"zh-tw"</literal></expr>, <expr><name>IDX_EUC_TW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"taiwan"</literal></expr>, <expr><name>IDX_EUC_TW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cp950"</literal></expr>, <expr><name>IDX_BIG5</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"950"</literal></expr>, <expr><name>IDX_BIG5</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mac"</literal></expr>, <expr><name>IDX_MACROMAN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"mac-roman"</literal></expr>, <expr><name>IDX_MACROMAN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>





<function><type><specifier>static</specifier> <name>int</name></type> <name>enc_canon_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IDX_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>enc_canon_props</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>enc_canon_search</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENC_DBCS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENC_8BIT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>bomb_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bomb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_bin</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"ucs-2"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"utf-16"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>, <argument><expr><literal type="string">"ucs-4"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>remove_bom</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xef</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbb</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbf</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>mb_get_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mb_get_class_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>chartab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc_tab</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chartab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>utf_class_tab</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chartab</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type> <name>intable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>interval</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>n_items</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>bot</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>utf_char2cells</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WCHAR_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_printable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>intable</name><argument_list>(<argument><expr><name>doublewidth</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>doublewidth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p_emoji</name> <operator>&amp;&amp;</operator> <call><name>intable</name><argument_list>(<argument><expr><name>emoji_width</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>emoji_width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">4</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p_ambw</name> <operator>==</operator> <literal type="char">'d'</literal>
<operator>&amp;&amp;</operator> <call><name>intable</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>utf_ptr2cells</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>utf_ptr2cells_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>size_t</name></type> <name>mb_string2cells</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>size_t</name></type> <name>mb_string2cells_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>str</name><operator>+</operator><name>size</name></expr>;</condition>
<incr><expr><name>p</name> <operator>+=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>+=</operator> <call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>clen</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>utf_ptr2char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>len</name> <init>= <expr><name><name>utf8len_tab_zero</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type> <name>utf_safe_read_char_adv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>k</name> <init>= <expr><name><name>utf8len_tab_zero</name><index>[<expr><operator>*</operator><operator>*</operator><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>n</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <operator>*</operator><name>n</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>s</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xC3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0x83</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>mb_ptr2char_adv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>mb_cptr2char_adv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>utf_composinglike</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>utfc_ptr2char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal>
<operator>&amp;&amp;</operator> <call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>cc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>utfc_ptr2char_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COMPOSING</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(i == 0 ? UTF_COMPOSINGLIKE((s1), (s2)) : utf_iscomposing((s3)))</cpp:value></cpp:define>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>safe</name> <init>= <expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <name>maxlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><name>safe</name></expr> ?</condition><then> <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>*</operator><name>p</name></expr></else></ternary></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>safe</name> <operator>||</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_cc</name> <init>= <expr><call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>maxlen</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>safe</name> <operator>=</operator> <name>len_cc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len_cc</name> <operator>&lt;=</operator> <name>maxlen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>safe</name> <operator>||</operator> <operator>(</operator><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0x80</literal>
<operator>||</operator> <operator>!</operator><call><name>IS_COMPOSING</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>len_cc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_MCO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pcc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ISCOMPOSING</name></cpp:undef>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>utf_ptr2len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>utf_byte2len</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>utf8len_tab</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>utf_ptr2len_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>utfc_ptr2len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b0</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>!</operator><call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>utfc_ptr2len_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len_next_char</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<expr_stmt><expr><name>len_next_char</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len_next_char</name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>len_next_char</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>utf_char2len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>utf_char2bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfc</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">6</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>bool</name></type> <name>utf_iscomposing</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>intable</name><argument_list>(<argument><expr><name>combining</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>combining</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>utf_printable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WCHAR_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<return>return <expr><call><name>iswprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>interval</name></name></type> <name><name>nonprint</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x070f</literal></expr>, <expr><literal type="number">0x070f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x180b</literal></expr>, <expr><literal type="number">0x180e</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x200b</literal></expr>, <expr><literal type="number">0x200f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x202a</literal></expr>, <expr><literal type="number">0x202e</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x206a</literal></expr>, <expr><literal type="number">0x206f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xfeff</literal></expr>, <expr><literal type="number">0xfeff</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0xfff9</literal></expr>, <expr><literal type="number">0xfffb</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xfffe</literal></expr>, <expr><literal type="number">0xffff</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><call><name>intable</name><argument_list>(<argument><expr><name>nonprint</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>nonprint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>utf_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>utf_class_tab</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>utf_class_tab</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>chartab</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<struct><specifier>static</specifier> struct <name>clinterval</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>class</name></decl>;</decl_stmt>
}</block> <decl><name><name>classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0x037e</literal></expr>, <expr><literal type="number">0x037e</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x055a</literal></expr>, <expr><literal type="number">0x055f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x0589</literal></expr>, <expr><literal type="number">0x0589</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x05be</literal></expr>, <expr><literal type="number">0x05be</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x05c0</literal></expr>, <expr><literal type="number">0x05c0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x05c3</literal></expr>, <expr><literal type="number">0x05c3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x05f3</literal></expr>, <expr><literal type="number">0x05f4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x060c</literal></expr>, <expr><literal type="number">0x060c</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x061b</literal></expr>, <expr><literal type="number">0x061b</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x061f</literal></expr>, <expr><literal type="number">0x061f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x066a</literal></expr>, <expr><literal type="number">0x066d</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x06d4</literal></expr>, <expr><literal type="number">0x06d4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0700</literal></expr>, <expr><literal type="number">0x070d</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x0964</literal></expr>, <expr><literal type="number">0x0965</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0970</literal></expr>, <expr><literal type="number">0x0970</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0df4</literal></expr>, <expr><literal type="number">0x0df4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0e4f</literal></expr>, <expr><literal type="number">0x0e4f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0e5a</literal></expr>, <expr><literal type="number">0x0e5b</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0f04</literal></expr>, <expr><literal type="number">0x0f12</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0f3a</literal></expr>, <expr><literal type="number">0x0f3d</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0f85</literal></expr>, <expr><literal type="number">0x0f85</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x104a</literal></expr>, <expr><literal type="number">0x104f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x10fb</literal></expr>, <expr><literal type="number">0x10fb</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1361</literal></expr>, <expr><literal type="number">0x1368</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x166d</literal></expr>, <expr><literal type="number">0x166e</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1680</literal></expr>, <expr><literal type="number">0x1680</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x169b</literal></expr>, <expr><literal type="number">0x169c</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x16eb</literal></expr>, <expr><literal type="number">0x16ed</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1735</literal></expr>, <expr><literal type="number">0x1736</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x17d4</literal></expr>, <expr><literal type="number">0x17dc</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">0x180a</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x200b</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x200c</literal></expr>, <expr><literal type="number">0x2027</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2028</literal></expr>, <expr><literal type="number">0x2029</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x202a</literal></expr>, <expr><literal type="number">0x202e</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x202f</literal></expr>, <expr><literal type="number">0x202f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2030</literal></expr>, <expr><literal type="number">0x205e</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x205f</literal></expr>, <expr><literal type="number">0x205f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2060</literal></expr>, <expr><literal type="number">0x27ff</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2070</literal></expr>, <expr><literal type="number">0x207f</literal></expr>, <expr><literal type="number">0x2070</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2080</literal></expr>, <expr><literal type="number">0x2094</literal></expr>, <expr><literal type="number">0x2080</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x20a0</literal></expr>, <expr><literal type="number">0x27ff</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2800</literal></expr>, <expr><literal type="number">0x28ff</literal></expr>, <expr><literal type="number">0x2800</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2900</literal></expr>, <expr><literal type="number">0x2998</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x29d8</literal></expr>, <expr><literal type="number">0x29db</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x29fc</literal></expr>, <expr><literal type="number">0x29fd</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2e00</literal></expr>, <expr><literal type="number">0x2e7f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3001</literal></expr>, <expr><literal type="number">0x3020</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3030</literal></expr>, <expr><literal type="number">0x3030</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x303d</literal></expr>, <expr><literal type="number">0x303d</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x3040</literal></expr>, <expr><literal type="number">0x309f</literal></expr>, <expr><literal type="number">0x3040</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x30a0</literal></expr>, <expr><literal type="number">0x30ff</literal></expr>, <expr><literal type="number">0x30a0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x3300</literal></expr>, <expr><literal type="number">0x9fff</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xac00</literal></expr>, <expr><literal type="number">0xd7a3</literal></expr>, <expr><literal type="number">0xac00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xf900</literal></expr>, <expr><literal type="number">0xfaff</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xfd3e</literal></expr>, <expr><literal type="number">0xfd3f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xfe30</literal></expr>, <expr><literal type="number">0xfe6b</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xff00</literal></expr>, <expr><literal type="number">0xff0f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xff1a</literal></expr>, <expr><literal type="number">0xff20</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xff3b</literal></expr>, <expr><literal type="number">0xff40</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0xff5b</literal></expr>, <expr><literal type="number">0xff65</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1d000</literal></expr>, <expr><literal type="number">0x1d24f</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1d400</literal></expr>, <expr><literal type="number">0x1d7ff</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1f000</literal></expr>, <expr><literal type="number">0x1f2ff</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x1f300</literal></expr>, <expr><literal type="number">0x1f9ff</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x20000</literal></expr>, <expr><literal type="number">0x2a6df</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2a700</literal></expr>, <expr><literal type="number">0x2b73f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2b740</literal></expr>, <expr><literal type="number">0x2b81f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0x2f800</literal></expr>, <expr><literal type="number">0x2fa1f</literal></expr>, <expr><literal type="number">0x4e00</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc_tab</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>chartab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>bot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>bot</name> <operator>+</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>last</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>classes</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>class</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><call><name>intable</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>utf_ambiguous_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>intable</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ambiguous</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>intable</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>emoji_all</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>utf_convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>convertStruct</name> <modifier>*</modifier><specifier>const</specifier></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>n_items</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>end</name> <operator>+</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>rangeEnd</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>n_items</name>
<operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeStart</name> <operator>&lt;=</operator> <name>a</name>
<operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeEnd</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>rangeStart</name><operator>)</operator> <operator>%</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>a</name> <operator>+</operator> <name><name>table</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>a</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>utf_fold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;=</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <literal type="number">0x5a</literal></expr> ?</condition><then> <expr><name>a</name> <operator>+</operator> <literal type="number">32</literal></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>foldCase</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>foldCase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>mb_toupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towupper</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOUPPER_LOC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>toUpper</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>toUpper</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mb_islower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>mb_toupper</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>a</name><operator>)</operator> <operator>||</operator> <name>a</name> <operator>==</operator> <literal type="number">0xdf</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>mb_tolower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_KEEPASCII</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_ISO_10646__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmp_flags</name> <operator>&amp;</operator> <name>CMP_INTERNAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>towlower</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>TOLOWER_LOC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>utf_convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>toLower</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>toLower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mb_isupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mb_tolower</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>utf_strnicmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n1</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>n2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>cdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>utf_safe_read_char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>utf_safe_read_char_adv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cdiff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s1</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s2</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cdiff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>cdiff</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n1</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>n1</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP_UTF8</name></cpp:macro> <cpp:value>65001</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>int</name></type> <name>utf8_to_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utf8len</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>utf16</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, 
<argument><expr><name>utf8</name></expr></argument>, 
<argument><expr><name>utf8len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>utf16</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>uv_translate_sys_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>utf16</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>bufsize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>utf8len</name></expr></argument>, <argument><expr><operator>*</operator><name>utf16</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>utf16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>uv_translate_sys_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>utf16</name><operator>)</operator><index>[<expr><name>bufsize</name></expr>]</index> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>utf16_to_utf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>utf16</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utf16len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>utf8</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>bufsize</name> <init>= <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>utf16</name></expr></argument>,
<argument><expr><name>utf16len</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>utf8</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>uv_translate_sys_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><operator>*</operator><name>utf8</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>bufsize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>utf16</name></expr></argument>,
<argument><expr><name>utf16len</name></expr></argument>,
<argument><expr><operator>*</operator><name>utf8</name></expr></argument>,
<argument><expr><name>bufsize</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><operator>*</operator><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>uv_translate_sys_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>utf8</name><operator>)</operator><index>[<expr><name>bufsize</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function><type><name>void</name></type> <name>mb_utflen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>codepoints</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>codeunits</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>clen</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>clen</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>codepoints</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>codeunits</name> <operator>+=</operator> <name>count</name> <operator>+</operator> <name>extra</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>mb_utf_index_to_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_utf16_units</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>clen</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>clen</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_utf16_units</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>index</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name><operator>+</operator><name>clen</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>mb_strnicmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>utf_strnicmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><name>int</name></type> <name>mb_stricmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>mb_strnicmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>s2</name></expr></argument>, <argument><expr><name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>show_utf8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>, <argument><expr><literal type="string">"+ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NUL</name></expr> </then><else>: <expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>--</operator><name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>IObuff</name> <operator>+</operator> <name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <name>IOSIZE</name> <operator>-</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>utf_head_off</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</init><condition>;</condition> <incr><expr><operator>--</operator><name>q</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>q</name></expr>;</init> <condition><expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content/>}</block></for>


<while>while <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>base</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>q</name></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>utf8len_tab</name><index>[<expr><operator>*</operator><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>arabic_maycombine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>j</name> <init>= <expr><name>q</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>base</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>arabic_combine</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>mb_copy_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>, <argument><expr><operator>*</operator><name>fp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>mb_off_next</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>-</operator> <name>j</name> <operator>&gt;</operator> <name>base</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>utf8len_tab</name><index>[<expr><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>mb_tail_off</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content/>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>-</operator> <name>j</name> <operator>&gt;</operator> <name>base</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>utf8len_tab</name><index>[<expr><name><name>p</name><index>[<expr><operator>-</operator><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>utf_find_illegal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>pos</name> <init>= <expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vimconv_T</name></type> <name>vimconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_NONE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>enc_canon_props</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ENC_8BIT</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>p_enc</name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_p_fenc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>!=</operator> <name>CONV_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tofree</name> <operator>=</operator> <call><name>string_convert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tofree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tofree</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal>
<operator>||</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vimconv</name><operator>.</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>tofree</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>get_cursor_pos_ptr</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>l</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>beep_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convert_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vimconv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>mb_adjust_cursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mark_mb_adjustpos</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>mb_check_adjust_col</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>win_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><operator>(</operator><name>win_T</name> <operator>*</operator><operator>)</operator><name>win_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>oldcol</name> <init>= <expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>oldcol</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_buffer</name></name></expr></argument>, <argument><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>oldcol</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oldcol</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>]</index></name> <operator>!=</operator> <name>TAB</name>
<operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>coladd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>char_u</name> <modifier>*</modifier></type> <name>mb_prevptr</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>mb_charlen</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>mb_charlen_len</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>str</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mb_unescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>pp</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buf_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><decl><type><name>size_t</name></type> <name>str_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>str_idx</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>buf_idx</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>str_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>str_idx</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>str_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>str_idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FILLER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str_idx</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><name>str_idx</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>str_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>
<operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>str_idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_CSI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str_idx</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>str_idx</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>str</name><index>[<expr><name>str_idx</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buf_idx</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name> <operator>+</operator> <name>str_idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type> <name>enc_skip</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"2byte-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"8bit-"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char_u</name> <modifier>*</modifier></type><name>enc_canonize</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name>fenc_default</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>enc</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>enc_skip</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"microsoft-cp"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iso8859"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"iso-8859"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"latin-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>enc_canon_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>enc_alias_search</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>enc_canon_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>enc_alias_search</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>enc_alias_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>canon</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>char_u</name> <modifier>*</modifier></type> <name>enc_locale</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NL_LANGINFO_CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LOCALE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>os_getenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>s</name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRNICMP</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"EUC"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"euc-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>enc_locale_copy_enc</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>enc_locale_copy_enc</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ASCII_ISALNUM</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>enc_canonize</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>void</name> <modifier>*</modifier></type> <name>my_iconv_open</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>iconv_t</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONV_TESTLEN</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>tobuf</name><index>[<expr><name>ICONV_TESTLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WorkingStatus</name></type> <name>iconv_working</name> <init>= <expr><name>kUnknown</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv_working</name> <operator>==</operator> <name>kBroken</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>enc_skip</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>enc_skip</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iconv_working</name> <operator>==</operator> <name>kUnknown</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tobuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tolen</name> <operator>=</operator> <name>ICONV_TESTLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>iconv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iconv_working</name> <operator>=</operator> <name>kBroken</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>iconv_working</name> <operator>=</operator> <name>kWorking</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fd</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>iconv_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vimconv_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>resultlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fromlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tolen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_E2BIG</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>fromlen</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>+</operator> <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tolen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>done</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tolen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name> <operator>&amp;&amp;</operator> <name>unconvlenp</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EINVAL</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <name>fromlen</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EILSEQ</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EILSEQ</name>
<operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>ICONV_EINVAL</name> <operator>||</operator> <name>ICONV_ERRNO</name> <operator>==</operator> <name>EINVAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len_len</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fromlen</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ICONV_ERRNO</name> <operator>!=</operator> <name>ICONV_E2BIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>to</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>resultlenp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>resultlenp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>to</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 













<function><type><name>int</name></type> <name>convert_setup</name><parameter_list>(<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>convert_setup_ext</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>convert_setup_ext</name><parameter_list>(<parameter><decl><type><name>vimconv_T</name> <modifier>*</modifier></type><name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_unicode_is_utf8</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>to_unicode_is_utf8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>from_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>from_is_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>to_is_utf8</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_ICONV</name> <operator>&amp;&amp;</operator> <name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>vcp</name> <operator>=</operator> <operator>(</operator><name>vimconv_T</name><operator>)</operator><name>MBYTE_NONE_CONV</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>from</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <name>to</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>to</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>from_prop</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to_prop</name> <operator>=</operator> <call><name>enc_canon_props</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>from_unicode_is_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>from_is_utf8</name> <operator>=</operator> <name>from_prop</name> <operator>&amp;</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>from_is_utf8</name> <operator>=</operator> <name>from_prop</name> <operator>==</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to_unicode_is_utf8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_is_utf8</name> <operator>=</operator> <name>to_prop</name> <operator>&amp;</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>to_is_utf8</name> <operator>=</operator> <name>to_prop</name> <operator>==</operator> <name>ENC_UNICODE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>to_is_utf8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>from_prop</name> <operator>&amp;</operator> <name>ENC_LATIN9</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>to_is_utf8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_9_TO_UTF8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>from_is_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_LATIN1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_LATIN1</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>from_is_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>to_prop</name> <operator>&amp;</operator> <name>ENC_LATIN9</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_TO_LATIN9</name></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content> 

<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><call><name>my_iconv_open</name><argument_list>(
<argument><expr><ternary><condition><expr><name>to_is_utf8</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr> </then><else>: <expr><name>to</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>from_is_utf8</name></expr> ?</condition><then> <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"utf-8"</literal></expr> </then><else>: <expr><name>from</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fd</name></name> <operator>!=</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>=</operator> <name>CONV_ICONV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_factor</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>char_u</name> <modifier>*</modifier></type><name>string_convert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vimconv_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>string_convert_ext</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type> <name>string_convert_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vimconv_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vcp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>unconvlenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>lenp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CONV_TO_UTF8</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0xc0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONV_9_TO_UTF8</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x20ac</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0160</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0161</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xb4</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017d</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xb8</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x017e</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0152</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0153</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x0178</literal></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CONV_TO_LATIN1</name></expr>:</case> 
<case>case <expr><name>CONV_TO_LATIN9</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len_len</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>l_w</name> <init>= <expr><name><name>utf8len_tab_zero</name><index>[<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l_w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>unconvlenp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>l_w</name> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>unconvlenp</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_type</name></name> <operator>==</operator> <name>CONV_TO_LATIN9</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x20ac</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa4</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0160</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa6</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0161</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xa8</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x017d</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xb4</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x017e</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xb8</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0152</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbc</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0153</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0x0178</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xbe</literal></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="number">0xa4</literal></expr>:</case>
<case>case <expr><literal type="number">0xa6</literal></expr>:</case>
<case>case <expr><literal type="number">0xa8</literal></expr>:</case>
<case>case <expr><literal type="number">0xb4</literal></expr>:</case>
<case>case <expr><literal type="number">0xb8</literal></expr>:</case>
<case>case <expr><literal type="number">0xbc</literal></expr>:</case>
<case>case <expr><literal type="number">0xbd</literal></expr>:</case>
<case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vcp</name><operator>-&gt;</operator><name>vc_fail</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2cells</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>retval</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CONV_ICONV</name></expr>:</case> 
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>iconv_string</name><argument_list>(<argument><expr><name>vcp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>unconvlenp</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
