<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\regexp_nfa.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_REGEXP_ERROR_LOG</name></cpp:macro> <cpp:value>"nfa_regexp_error.log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_REGEXP_DUMP_LOG</name></cpp:macro> <cpp:value>"nfa_regexp_dump.log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_REGEXP_RUN_LOG</name></cpp:macro> <cpp:value>"nfa_regexp_run.log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_REGEXP_DEBUG_LOG</name></cpp:macro> <cpp:value>"nfa_regexp_debug.log"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_ADD_NL</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<enum>enum <block>{
<decl><name>NFA_SPLIT</name> <init>= <expr><operator>-</operator><literal type="number">1024</literal></expr></init></decl>,
<decl><name>NFA_MATCH</name></decl>,
<decl><name>NFA_EMPTY</name></decl>, 

<decl><name>NFA_START_COLL</name></decl>, 
<decl><name>NFA_END_COLL</name></decl>, 
<decl><name>NFA_START_NEG_COLL</name></decl>, 
<decl><name>NFA_END_NEG_COLL</name></decl>, 
<decl><name>NFA_RANGE</name></decl>, 

<decl><name>NFA_RANGE_MIN</name></decl>, 
<decl><name>NFA_RANGE_MAX</name></decl>, 

<decl><name>NFA_CONCAT</name></decl>, 

<decl><name>NFA_OR</name></decl>, 
<decl><name>NFA_STAR</name></decl>, 
<decl><name>NFA_STAR_NONGREEDY</name></decl>, 
<decl><name>NFA_QUEST</name></decl>, 
<decl><name>NFA_QUEST_NONGREEDY</name></decl>, 

<decl><name>NFA_BOL</name></decl>, 
<decl><name>NFA_EOL</name></decl>, 
<decl><name>NFA_BOW</name></decl>, 
<decl><name>NFA_EOW</name></decl>, 
<decl><name>NFA_BOF</name></decl>, 
<decl><name>NFA_EOF</name></decl>, 
<decl><name>NFA_NEWL</name></decl>,
<decl><name>NFA_ZSTART</name></decl>, 
<decl><name>NFA_ZEND</name></decl>, 
<decl><name>NFA_NOPEN</name></decl>, 
<decl><name>NFA_NCLOSE</name></decl>, 
<decl><name>NFA_START_INVISIBLE</name></decl>,
<decl><name>NFA_START_INVISIBLE_FIRST</name></decl>,
<decl><name>NFA_START_INVISIBLE_NEG</name></decl>,
<decl><name>NFA_START_INVISIBLE_NEG_FIRST</name></decl>,
<decl><name>NFA_START_INVISIBLE_BEFORE</name></decl>,
<decl><name>NFA_START_INVISIBLE_BEFORE_FIRST</name></decl>,
<decl><name>NFA_START_INVISIBLE_BEFORE_NEG</name></decl>,
<decl><name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></decl>,
<decl><name>NFA_START_PATTERN</name></decl>,
<decl><name>NFA_END_INVISIBLE</name></decl>,
<decl><name>NFA_END_INVISIBLE_NEG</name></decl>,
<decl><name>NFA_END_PATTERN</name></decl>,
<decl><name>NFA_COMPOSING</name></decl>, 

<decl><name>NFA_END_COMPOSING</name></decl>, 
<decl><name>NFA_ANY_COMPOSING</name></decl>, 
<decl><name>NFA_OPT_CHARS</name></decl>, 


<decl><name>NFA_PREV_ATOM_NO_WIDTH</name></decl>, 
<decl><name>NFA_PREV_ATOM_NO_WIDTH_NEG</name></decl>, 
<decl><name>NFA_PREV_ATOM_JUST_BEFORE</name></decl>, 
<decl><name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></decl>, 
<decl><name>NFA_PREV_ATOM_LIKE_PATTERN</name></decl>, 

<decl><name>NFA_BACKREF1</name></decl>, 
<decl><name>NFA_BACKREF2</name></decl>, 
<decl><name>NFA_BACKREF3</name></decl>, 
<decl><name>NFA_BACKREF4</name></decl>, 
<decl><name>NFA_BACKREF5</name></decl>, 
<decl><name>NFA_BACKREF6</name></decl>, 
<decl><name>NFA_BACKREF7</name></decl>, 
<decl><name>NFA_BACKREF8</name></decl>, 
<decl><name>NFA_BACKREF9</name></decl>, 
<decl><name>NFA_ZREF1</name></decl>, 
<decl><name>NFA_ZREF2</name></decl>, 
<decl><name>NFA_ZREF3</name></decl>, 
<decl><name>NFA_ZREF4</name></decl>, 
<decl><name>NFA_ZREF5</name></decl>, 
<decl><name>NFA_ZREF6</name></decl>, 
<decl><name>NFA_ZREF7</name></decl>, 
<decl><name>NFA_ZREF8</name></decl>, 
<decl><name>NFA_ZREF9</name></decl>, 
<decl><name>NFA_SKIP</name></decl>, 

<decl><name>NFA_MOPEN</name></decl>,
<decl><name>NFA_MOPEN1</name></decl>,
<decl><name>NFA_MOPEN2</name></decl>,
<decl><name>NFA_MOPEN3</name></decl>,
<decl><name>NFA_MOPEN4</name></decl>,
<decl><name>NFA_MOPEN5</name></decl>,
<decl><name>NFA_MOPEN6</name></decl>,
<decl><name>NFA_MOPEN7</name></decl>,
<decl><name>NFA_MOPEN8</name></decl>,
<decl><name>NFA_MOPEN9</name></decl>,

<decl><name>NFA_MCLOSE</name></decl>,
<decl><name>NFA_MCLOSE1</name></decl>,
<decl><name>NFA_MCLOSE2</name></decl>,
<decl><name>NFA_MCLOSE3</name></decl>,
<decl><name>NFA_MCLOSE4</name></decl>,
<decl><name>NFA_MCLOSE5</name></decl>,
<decl><name>NFA_MCLOSE6</name></decl>,
<decl><name>NFA_MCLOSE7</name></decl>,
<decl><name>NFA_MCLOSE8</name></decl>,
<decl><name>NFA_MCLOSE9</name></decl>,

<decl><name>NFA_ZOPEN</name></decl>,
<decl><name>NFA_ZOPEN1</name></decl>,
<decl><name>NFA_ZOPEN2</name></decl>,
<decl><name>NFA_ZOPEN3</name></decl>,
<decl><name>NFA_ZOPEN4</name></decl>,
<decl><name>NFA_ZOPEN5</name></decl>,
<decl><name>NFA_ZOPEN6</name></decl>,
<decl><name>NFA_ZOPEN7</name></decl>,
<decl><name>NFA_ZOPEN8</name></decl>,
<decl><name>NFA_ZOPEN9</name></decl>,

<decl><name>NFA_ZCLOSE</name></decl>,
<decl><name>NFA_ZCLOSE1</name></decl>,
<decl><name>NFA_ZCLOSE2</name></decl>,
<decl><name>NFA_ZCLOSE3</name></decl>,
<decl><name>NFA_ZCLOSE4</name></decl>,
<decl><name>NFA_ZCLOSE5</name></decl>,
<decl><name>NFA_ZCLOSE6</name></decl>,
<decl><name>NFA_ZCLOSE7</name></decl>,
<decl><name>NFA_ZCLOSE8</name></decl>,
<decl><name>NFA_ZCLOSE9</name></decl>,


<decl><name>NFA_ANY</name></decl>, 
<decl><name>NFA_IDENT</name></decl>, 
<decl><name>NFA_SIDENT</name></decl>, 
<decl><name>NFA_KWORD</name></decl>, 
<decl><name>NFA_SKWORD</name></decl>, 
<decl><name>NFA_FNAME</name></decl>, 
<decl><name>NFA_SFNAME</name></decl>, 
<decl><name>NFA_PRINT</name></decl>, 
<decl><name>NFA_SPRINT</name></decl>, 
<decl><name>NFA_WHITE</name></decl>, 
<decl><name>NFA_NWHITE</name></decl>, 
<decl><name>NFA_DIGIT</name></decl>, 
<decl><name>NFA_NDIGIT</name></decl>, 
<decl><name>NFA_HEX</name></decl>, 
<decl><name>NFA_NHEX</name></decl>, 
<decl><name>NFA_OCTAL</name></decl>, 
<decl><name>NFA_NOCTAL</name></decl>, 
<decl><name>NFA_WORD</name></decl>, 
<decl><name>NFA_NWORD</name></decl>, 
<decl><name>NFA_HEAD</name></decl>, 
<decl><name>NFA_NHEAD</name></decl>, 
<decl><name>NFA_ALPHA</name></decl>, 
<decl><name>NFA_NALPHA</name></decl>, 
<decl><name>NFA_LOWER</name></decl>, 
<decl><name>NFA_NLOWER</name></decl>, 
<decl><name>NFA_UPPER</name></decl>, 
<decl><name>NFA_NUPPER</name></decl>, 
<decl><name>NFA_LOWER_IC</name></decl>, 
<decl><name>NFA_NLOWER_IC</name></decl>, 
<decl><name>NFA_UPPER_IC</name></decl>, 
<decl><name>NFA_NUPPER_IC</name></decl>, 

<decl><name>NFA_FIRST_NL</name> <init>= <expr><name>NFA_ANY</name> <operator>+</operator> <name>NFA_ADD_NL</name></expr></init></decl>,
<decl><name>NFA_LAST_NL</name> <init>= <expr><name>NFA_NUPPER_IC</name> <operator>+</operator> <name>NFA_ADD_NL</name></expr></init></decl>,

<decl><name>NFA_CURSOR</name></decl>, 
<decl><name>NFA_LNUM</name></decl>, 
<decl><name>NFA_LNUM_GT</name></decl>, 
<decl><name>NFA_LNUM_LT</name></decl>, 
<decl><name>NFA_COL</name></decl>, 
<decl><name>NFA_COL_GT</name></decl>, 
<decl><name>NFA_COL_LT</name></decl>, 
<decl><name>NFA_VCOL</name></decl>, 
<decl><name>NFA_VCOL_GT</name></decl>, 
<decl><name>NFA_VCOL_LT</name></decl>, 
<decl><name>NFA_MARK</name></decl>, 
<decl><name>NFA_MARK_GT</name></decl>, 
<decl><name>NFA_MARK_LT</name></decl>, 
<decl><name>NFA_VISUAL</name></decl>, 


<decl><name>NFA_CLASS_ALNUM</name></decl>,
<decl><name>NFA_CLASS_ALPHA</name></decl>,
<decl><name>NFA_CLASS_BLANK</name></decl>,
<decl><name>NFA_CLASS_CNTRL</name></decl>,
<decl><name>NFA_CLASS_DIGIT</name></decl>,
<decl><name>NFA_CLASS_GRAPH</name></decl>,
<decl><name>NFA_CLASS_LOWER</name></decl>,
<decl><name>NFA_CLASS_PRINT</name></decl>,
<decl><name>NFA_CLASS_PUNCT</name></decl>,
<decl><name>NFA_CLASS_SPACE</name></decl>,
<decl><name>NFA_CLASS_UPPER</name></decl>,
<decl><name>NFA_CLASS_XDIGIT</name></decl>,
<decl><name>NFA_CLASS_TAB</name></decl>,
<decl><name>NFA_CLASS_RETURN</name></decl>,
<decl><name>NFA_CLASS_BACKSPACE</name></decl>,
<decl><name>NFA_CLASS_ESCAPE</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>nfa_classcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NFA_ANY</name></expr>, <expr><name>NFA_IDENT</name></expr>, <expr><name>NFA_SIDENT</name></expr>, <expr><name>NFA_KWORD</name></expr>,<expr><name>NFA_SKWORD</name></expr>,
<expr><name>NFA_FNAME</name></expr>, <expr><name>NFA_SFNAME</name></expr>, <expr><name>NFA_PRINT</name></expr>, <expr><name>NFA_SPRINT</name></expr>,
<expr><name>NFA_WHITE</name></expr>, <expr><name>NFA_NWHITE</name></expr>, <expr><name>NFA_DIGIT</name></expr>, <expr><name>NFA_NDIGIT</name></expr>,
<expr><name>NFA_HEX</name></expr>, <expr><name>NFA_NHEX</name></expr>, <expr><name>NFA_OCTAL</name></expr>, <expr><name>NFA_NOCTAL</name></expr>,
<expr><name>NFA_WORD</name></expr>, <expr><name>NFA_NWORD</name></expr>, <expr><name>NFA_HEAD</name></expr>, <expr><name>NFA_NHEAD</name></expr>,
<expr><name>NFA_ALPHA</name></expr>, <expr><name>NFA_NALPHA</name></expr>, <expr><name>NFA_LOWER</name></expr>, <expr><name>NFA_NLOWER</name></expr>,
<expr><name>NFA_UPPER</name></expr>, <expr><name>NFA_NUPPER</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_nul_found</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"E865: (NFA) Regexp end encountered prematurely"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_misplaced</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E866: (NFA regexp) Misplaced %c"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_ill_char_class</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"E877: (NFA regexp) Invalid character class: %"</literal> <name>PRId64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<typedef>typedef <type><name><name>union</name> <name>Ptrlist</name></name></type> <name>Ptrlist</name>;</typedef>
<union>union <name>Ptrlist</name> <block>{
<decl_stmt><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>Frag</name> <block>{
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>Frag</name></name></type> <name>Frag_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>in_use</name></decl>;</decl_stmt> 


<union>union <block>{
<struct>struct <name>multipos</name> <block>{
<decl_stmt><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>end_col</name></decl>;</decl_stmt>
}</block> <decl><name><name>multi</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</struct>
<struct>struct <name>linepos</name> <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block> <decl><name><name>line</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</struct>
}</block> <decl><name>list</name></decl>;</union>
}</block></struct></type> <name>regsub_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>regsub_T</name></type> <name>norm</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>regsub_T</name></type> <name>synt</name></decl>;</decl_stmt> 
}</block></struct></type> <name>regsubs_T</name>;</typedef>


<typedef>typedef <type><name><name>struct</name> <name>nfa_pim_S</name></name></type> <name>nfa_pim_T</name>;</typedef>
<struct>struct <name>nfa_pim_S</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>regsubs_T</name></type> <name>subs</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
}</block> <decl><name>end</name></decl>;</union> 
}</block>;</struct>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_pim_T</name></type> <name>pim</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>regsubs_T</name></type> <name>subs</name></decl>;</decl_stmt> 
}</block></struct></type> <name>nfa_thread_T</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>has_pim</name></decl>;</decl_stmt> 
}</block></struct></type> <name>nfa_list_T</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_re_flags</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_has_zend</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_has_backref</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_has_zsubexpr</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_nsubexpr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>post_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>post_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>post_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nstate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>istate</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>static</specifier> <name>save_se_T</name> <modifier>*</modifier></type><name>nfa_endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_listid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_alt_listid</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_ll_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp_nfa.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (post_ptr &gt;= post_end) { realloc_post_list(); } *post_ptr++ = c; } while (0)</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>nfa_regcomp_start</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>postfix_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nstate_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nstate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>istate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nstate_max</name> <operator>=</operator> <operator>(</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">25</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>nstate_max</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>postfix_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nstate_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name>post_start</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>postfix_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>post_ptr</name> <operator>=</operator> <name>post_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>post_end</name> <operator>=</operator> <name>post_start</name> <operator>+</operator> <name>nstate_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_has_zend</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_has_backref</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>regcomp_start</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_get_reganch</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_BOL</name></expr>:</case>
<case>case <expr><name>NFA_BOF</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return> 

<case>case <expr><name>NFA_ZSTART</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<case>case <expr><name>NFA_CURSOR</name></expr>:</case>
<case>case <expr><name>NFA_VISUAL</name></expr>:</case>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SPLIT</name></expr>:</case>
<return>return <expr><call><name>nfa_get_reganch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>nfa_get_reganch</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_get_regstart</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NFA_BOL</name></expr>:</case>
<case>case <expr><name>NFA_BOF</name></expr>:</case>
<case>case <expr><name>NFA_BOW</name></expr>:</case>
<case>case <expr><name>NFA_EOW</name></expr>:</case>
<case>case <expr><name>NFA_ZSTART</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<case>case <expr><name>NFA_CURSOR</name></expr>:</case>
<case>case <expr><name>NFA_VISUAL</name></expr>:</case>
<case>case <expr><name>NFA_LNUM</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case>
<case>case <expr><name>NFA_COL</name></expr>:</case>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case>
<case>case <expr><name>NFA_MARK</name></expr>:</case>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SPLIT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><call><name>nfa_get_regstart</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><call><name>nfa_get_regstart</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c1</name></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>nfa_get_match_text</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_MOPEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>MB_CHAR2LEN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_MCLOSE</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>realloc_post_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_max</name> <init>= <expr><operator>(</operator><name>post_end</name> <operator>-</operator> <name>post_start</name><operator>)</operator> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>new_start</name> <init>= <expr><call><name>xrealloc</name><argument_list>(<argument><expr><name>post_start</name></expr></argument>, <argument><expr><name>new_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>post_ptr</name> <operator>=</operator> <name>new_start</name> <operator>+</operator> <operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>post_end</name> <operator>=</operator> <name>new_start</name> <operator>+</operator> <name>new_max</name></expr>;</expr_stmt>
<expr_stmt><expr><name>post_start</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_recognize_char_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extra_newl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_not</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_af</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_AF</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_az</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_AZ</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_o7</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_o9</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_underscore</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>newl</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>config</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extra_newl</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>newl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_not</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_o9</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_o7</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_az</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_af</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_AZ</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_AF</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>config</name> <operator>|=</operator> <name>CLASS_underscore</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newl</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra_newl</name> <operator>=</operator> <name>NFA_ADD_NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>config</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLASS_o9</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_DIGIT</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_o9</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NDIGIT</name></expr>;</return>
<case>case <expr><name>CLASS_af</name> <operator>|</operator> <name>CLASS_AF</name> <operator>|</operator> <name>CLASS_o9</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_HEX</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_af</name> <operator>|</operator> <name>CLASS_AF</name> <operator>|</operator> <name>CLASS_o9</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NHEX</name></expr>;</return>
<case>case <expr><name>CLASS_o7</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_OCTAL</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_o7</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NOCTAL</name></expr>;</return>
<case>case <expr><name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name> <operator>|</operator> <name>CLASS_o9</name> <operator>|</operator> <name>CLASS_underscore</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_WORD</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name> <operator>|</operator> <name>CLASS_o9</name> <operator>|</operator> <name>CLASS_underscore</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NWORD</name></expr>;</return>
<case>case <expr><name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name> <operator>|</operator> <name>CLASS_underscore</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_HEAD</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name> <operator>|</operator> <name>CLASS_underscore</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NHEAD</name></expr>;</return>
<case>case <expr><name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_ALPHA</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_az</name> <operator>|</operator> <name>CLASS_AZ</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NALPHA</name></expr>;</return>
<case>case <expr><name>CLASS_az</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_LOWER_IC</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_az</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NLOWER_IC</name></expr>;</return>
<case>case <expr><name>CLASS_AZ</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_UPPER_IC</name></expr>;</return>
<case>case <expr><name>CLASS_not</name> <operator>|</operator> <name>CLASS_AZ</name></expr>:</case>
<return>return <expr><name>extra_newl</name> <operator>+</operator> <name>NFA_NUPPER_IC</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_emit_equi_class</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT2</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EMIT(c); EMIT(NFA_CONCAT);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMITMBC</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EMIT(c); EMIT(NFA_CONCAT);</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-15"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_grave</name></cpp:macro> <cpp:value>0xc0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_acute</name></cpp:macro> <cpp:value>0xc1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_circumflex</name></cpp:macro> <cpp:value>0xc2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_virguilla</name></cpp:macro> <cpp:value>0xc3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_diaeresis</name></cpp:macro> <cpp:value>0xc4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ring</name></cpp:macro> <cpp:value>0xc5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_cedilla</name></cpp:macro> <cpp:value>0xc7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_grave</name></cpp:macro> <cpp:value>0xc8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_acute</name></cpp:macro> <cpp:value>0xc9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_circumflex</name></cpp:macro> <cpp:value>0xca</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E_diaeresis</name></cpp:macro> <cpp:value>0xcb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_grave</name></cpp:macro> <cpp:value>0xcc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_acute</name></cpp:macro> <cpp:value>0xcd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_circumflex</name></cpp:macro> <cpp:value>0xce</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_diaeresis</name></cpp:macro> <cpp:value>0xcf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_virguilla</name></cpp:macro> <cpp:value>0xd1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_grave</name></cpp:macro> <cpp:value>0xd2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_acute</name></cpp:macro> <cpp:value>0xd3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_circumflex</name></cpp:macro> <cpp:value>0xd4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_virguilla</name></cpp:macro> <cpp:value>0xd5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_diaeresis</name></cpp:macro> <cpp:value>0xd6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_slash</name></cpp:macro> <cpp:value>0xd8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_grave</name></cpp:macro> <cpp:value>0xd9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_acute</name></cpp:macro> <cpp:value>0xda</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_circumflex</name></cpp:macro> <cpp:value>0xdb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U_diaeresis</name></cpp:macro> <cpp:value>0xdc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y_acute</name></cpp:macro> <cpp:value>0xdd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_grave</name></cpp:macro> <cpp:value>0xe0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_acute</name></cpp:macro> <cpp:value>0xe1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_circumflex</name></cpp:macro> <cpp:value>0xe2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_virguilla</name></cpp:macro> <cpp:value>0xe3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_diaeresis</name></cpp:macro> <cpp:value>0xe4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a_ring</name></cpp:macro> <cpp:value>0xe5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c_cedilla</name></cpp:macro> <cpp:value>0xe7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e_grave</name></cpp:macro> <cpp:value>0xe8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e_acute</name></cpp:macro> <cpp:value>0xe9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e_circumflex</name></cpp:macro> <cpp:value>0xea</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e_diaeresis</name></cpp:macro> <cpp:value>0xeb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i_grave</name></cpp:macro> <cpp:value>0xec</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i_acute</name></cpp:macro> <cpp:value>0xed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i_circumflex</name></cpp:macro> <cpp:value>0xee</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i_diaeresis</name></cpp:macro> <cpp:value>0xef</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_virguilla</name></cpp:macro> <cpp:value>0xf1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_grave</name></cpp:macro> <cpp:value>0xf2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_acute</name></cpp:macro> <cpp:value>0xf3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_circumflex</name></cpp:macro> <cpp:value>0xf4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_virguilla</name></cpp:macro> <cpp:value>0xf5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_diaeresis</name></cpp:macro> <cpp:value>0xf6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o_slash</name></cpp:macro> <cpp:value>0xf8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_grave</name></cpp:macro> <cpp:value>0xf9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_acute</name></cpp:macro> <cpp:value>0xfa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_circumflex</name></cpp:macro> <cpp:value>0xfb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u_diaeresis</name></cpp:macro> <cpp:value>0xfc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y_acute</name></cpp:macro> <cpp:value>0xfd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y_diaeresis</name></cpp:macro> <cpp:value>0xff</cpp:value></cpp:define>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><name>A_grave</name></expr>:</case> <case>case <expr><name>A_acute</name></expr>:</case> <case>case <expr><name>A_circumflex</name></expr>:</case>
<case>case <expr><name>A_virguilla</name></expr>:</case> <case>case <expr><name>A_diaeresis</name></expr>:</case> <case>case <expr><name>A_ring</name></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x100</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x102</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x104</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1cd</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1de</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea2</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>A_ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x100</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x102</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x104</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1cd</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1de</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e0</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ea2</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e02</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e06</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e02</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e06</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><name>C_cedilla</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x106</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x108</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>C_cedilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x106</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x108</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10c</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x110</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e10</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x110</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e0a</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e0e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e10</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><name>E_grave</name></expr>:</case> <case>case <expr><name>E_acute</name></expr>:</case> <case>case <expr><name>E_circumflex</name></expr>:</case>
<case>case <expr><name>E_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x112</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x114</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x116</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x118</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1eba</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebc</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>E_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>E_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>E_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>E_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x112</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x114</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x116</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x118</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1eba</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ebc</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e1e</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x120</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x122</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e4</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f4</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e20</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x120</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x122</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e4</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e6</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1f4</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e20</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x124</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x126</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e22</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e26</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e28</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x124</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x126</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e22</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e26</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e28</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><name>I_grave</name></expr>:</case> <case>case <expr><name>I_acute</name></expr>:</case> <case>case <expr><name>I_circumflex</name></expr>:</case>
<case>case <expr><name>I_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x128</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x130</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1cf</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec8</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>I_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>I_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>I_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>I_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x128</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12a</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x130</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1cf</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ec8</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x134</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x134</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'K'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x136</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e30</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e34</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x136</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e30</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e34</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x139</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13d</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x141</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3a</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x139</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13d</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x141</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e3a</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e40</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e3e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e40</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> <case>case <expr><name>N_virguilla</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x143</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x145</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x147</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e44</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e48</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>N_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x143</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x145</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x147</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e44</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e48</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><name>O_grave</name></expr>:</case> <case>case <expr><name>O_acute</name></expr>:</case> <case>case <expr><name>O_circumflex</name></expr>:</case>
<case>case <expr><name>O_virguilla</name></expr>:</case> <case>case <expr><name>O_diaeresis</name></expr>:</case> <case>case <expr><name>O_slash</name></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x150</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1a0</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d1</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ece</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>O_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x14c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x14e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x150</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1a0</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1d1</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ea</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ec</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ece</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="number">0x1e54</literal></expr>:</case> <case>case <expr><literal type="number">0x1e56</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e54</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e56</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x154</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x156</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x158</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e58</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x154</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x156</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x158</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e58</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e5e</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x160</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e60</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15e</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x160</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e60</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x162</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x164</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x166</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x162</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x164</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x166</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e6a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e6e</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> <case>case <expr><name>U_grave</name></expr>:</case> <case>case <expr><name>U_acute</name></expr>:</case> <case>case <expr><name>U_diaeresis</name></expr>:</case>
<case>case <expr><name>U_circumflex</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x168</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x170</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x172</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1af</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d3</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ee6</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>U_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>U_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>U_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>U_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x168</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16a</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x170</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x172</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1af</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1d3</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ee6</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e7c</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x174</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e80</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e82</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e84</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e86</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x174</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e80</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e82</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e84</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e86</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8c</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><name>Y_acute</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x176</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x178</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef2</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef6</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef8</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>Y_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x176</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x178</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8e</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef2</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef6</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef8</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x179</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17d</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b5</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e90</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e94</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x179</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x17b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x17d</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1b5</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e90</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e94</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><name>a_grave</name></expr>:</case> <case>case <expr><name>a_acute</name></expr>:</case> <case>case <expr><name>a_circumflex</name></expr>:</case>
<case>case <expr><name>a_virguilla</name></expr>:</case> <case>case <expr><name>a_diaeresis</name></expr>:</case> <case>case <expr><name>a_ring</name></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x101</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x103</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x105</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ce</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1df</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea3</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>a_ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x101</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x103</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x105</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ce</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1df</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e1</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ea3</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e03</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e07</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e03</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e07</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><name>c_cedilla</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x107</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x109</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>c_cedilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x107</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x109</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10d</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x111</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0b</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e11</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x10f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x111</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e0b</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e0f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e11</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><name>e_grave</name></expr>:</case> <case>case <expr><name>e_acute</name></expr>:</case> <case>case <expr><name>e_circumflex</name></expr>:</case>
<case>case <expr><name>e_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x113</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x115</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x117</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x119</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11b</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebb</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebd</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>e_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>e_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>e_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>e_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x113</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x115</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x117</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x119</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11b</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ebb</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ebd</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1f</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e1f</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x121</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x123</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f5</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e21</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11d</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x11f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x121</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x123</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e5</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e7</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1f5</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e21</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'h'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x125</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x127</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e23</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e27</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e29</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e96</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x125</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x127</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e23</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e27</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e29</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e96</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><name>i_grave</name></expr>:</case> <case>case <expr><name>i_acute</name></expr>:</case> <case>case <expr><name>i_circumflex</name></expr>:</case>
<case>case <expr><name>i_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x129</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12b</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d0</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec9</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>i_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>i_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>i_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>i_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x129</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12b</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12d</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x12f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1d0</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ec9</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x135</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x135</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1f0</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x137</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e9</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e31</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e35</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x137</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e9</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e31</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e35</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x140</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x142</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3b</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x13e</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x140</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x142</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e3b</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e41</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e3f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e41</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><name>n_virguilla</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x144</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x146</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x148</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x149</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e45</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e49</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>n_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x144</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x146</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x148</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x149</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e45</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e49</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><name>o_grave</name></expr>:</case> <case>case <expr><name>o_acute</name></expr>:</case> <case>case <expr><name>o_circumflex</name></expr>:</case>
<case>case <expr><name>o_virguilla</name></expr>:</case> <case>case <expr><name>o_diaeresis</name></expr>:</case> <case>case <expr><name>o_slash</name></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x151</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1a1</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d2</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1eb</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ed</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ecf</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_virguilla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>o_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x14d</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x14f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x151</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1a1</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1d2</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1eb</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ed</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ecf</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e55</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e57</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e55</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e57</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x155</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x157</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x159</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e59</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5f</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x155</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x157</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x159</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e59</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e5f</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15f</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x161</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e61</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15d</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x15f</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x161</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e61</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x163</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x165</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x167</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e97</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x163</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x165</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x167</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e6b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e6f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e97</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><name>u_grave</name></expr>:</case> <case>case <expr><name>u_acute</name></expr>:</case> <case>case <expr><name>u_circumflex</name></expr>:</case>
<case>case <expr><name>u_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x169</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16b</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x171</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x173</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b0</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d4</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ee7</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>u_grave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>u_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>u_circumflex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>u_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x169</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16b</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16d</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x16f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x171</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x173</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1b0</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1d4</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ee7</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'v'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e7d</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x175</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e81</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e83</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e85</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e87</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e98</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x175</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e81</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e83</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e85</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e87</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e98</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8b</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8d</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><name>y_acute</name></expr>:</case> <case>case <expr><name>y_diaeresis</name></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x177</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e99</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef3</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef7</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef9</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>y_acute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>y_diaeresis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x177</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e8f</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e99</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef3</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef7</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1ef9</literal></argument>)</argument_list></macro>
<return>return;</return>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b6</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e91</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e95</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x17a</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x17c</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x17e</literal></argument>)</argument_list></macro>
<macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1b6</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e91</literal></argument>)</argument_list></macro> <macro><name>EMITMBC</name><argument_list>(<argument><literal type="number">0x1e95</literal></argument>)</argument_list></macro>
<return>return;</return>


</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EMIT2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMITMBC</name></cpp:undef>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_regatom</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>charclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>equiclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>collclass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_coll_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>old_regparse</name> <init>= <expr><name>regparse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emit_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>startc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldstartc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_prev_at_start</name> <init>= <expr><name>prev_at_start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUL</name></expr>:</case>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nul_found</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_eol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_BOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nul_found</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_eol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>NFA_ADD_NL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>collection</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>




<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>classchars</name></expr></argument>, <argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <name>NFA_ADD_NL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_ill_char_class</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_did_emsg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>IEMSGN</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: Unknown character class char: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>old_regparse</name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>nfa_do_multibyte</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name><name>nfa_classcodes</name><index>[<expr><name>p</name> <operator>-</operator> <name>classchars</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <name>NFA_ADD_NL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NEWL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_HASNL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reg_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NEWL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_HASNL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>nfa_reg</name><argument_list>(<argument><expr><name>REG_PAREN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_misplaced</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>FAIL</name></expr>;</return>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><call><name>EMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_misplaced</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>reg_prev_sub</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nopresub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <name>reg_prev_sub</name></expr>;</init> <condition><expr><operator>*</operator><name>lp</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_CPTR_ADV</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lp</name> <operator>!=</operator> <name>reg_prev_sub</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>refnum</name> <init>= <expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seen_endbrace</name><argument_list>(<argument><expr><name>refnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_BACKREF1</name> <operator>+</operator> <name>refnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_has_backref</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_ZSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_mult_next</name><argument_list>(<argument><expr><literal type="string">"\\zs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_ZEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_has_zend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_mult_next</name><argument_list>(<argument><expr><literal type="string">"\\zs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg_do_extmatch</name> <operator>&amp;</operator> <name>REX_USE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_z1_not_allowed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_ZREF1</name> <operator>+</operator> <operator>(</operator><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'1'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>re_has_z</name> <operator>=</operator> <name>REX_USE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'('</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_do_extmatch</name> <operator>!=</operator> <name>REX_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_z_not_allowed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_reg</name><argument_list>(<argument><expr><name>REG_ZPAREN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>re_has_z</name> <operator>=</operator> <name>REX_SET</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E867: (NFA) Unknown operator '\\z%c'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'('</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>nfa_reg</name><argument_list>(<argument><expr><name>REG_NPAREN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<case>case <expr><literal type="char">'o'</literal></expr>:</case> 
<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<case>case <expr><literal type="char">'U'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>getdecchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>getoctchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>nr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nr</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E678: Invalid character after %s%%[dxouU]"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x0a</literal></expr> </then><else>: <expr><name>nr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>



<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_BOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_VISUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_ANY_COMPOSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'['</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>peekchr</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">']'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missing_sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfa_regatom</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_empty_sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_OPT_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmp</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><name>INT32_MAX</name> <operator>-</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E951: \\% value too large"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>limit</name> <init>= <expr><name>INT32_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>NFA_LNUM_LT</name></expr> </then><else>:
<expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> ?</condition><then> <expr><name>NFA_LNUM_GT</name></expr> </then><else>: <expr><name>NFA_LNUM</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_prev_at_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>NFA_COL_LT</name></expr> </then><else>:
<expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> ?</condition><then> <expr><name>NFA_COL_GT</name></expr> </then><else>: <expr><name>NFA_COL</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>NFA_VCOL_LT</name></expr> </then><else>:
<expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> ?</condition><then> <expr><name>NFA_VCOL_GT</name></expr> </then><else>: <expr><name>NFA_VCOL</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>INT32_MAX</name> <operator>/</operator> <name>MB_MAXBYTES</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E951: \\% value too large"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>NFA_MARK_LT</name></expr> </then><else>:
<expr><ternary><condition><expr><name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr> ?</condition><then> <expr><name>NFA_MARK_GT</name></expr> </then><else>: <expr><name>NFA_MARK</name></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E867: (NFA) Unknown operator '\\%%%c'"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case>
<label><name>collection</name>:</label>










<expr_stmt><expr><name>p</name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>skip_anyof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>nfa_recognize_char_class</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>,
<argument><expr><name>extra</name> <operator>==</operator> <name>NFA_ADD_NL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <name>NFA_FIRST_NL</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;=</operator> <name>NFA_LAST_NL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>result</name> <operator>-</operator> <name>NFA_ADD_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NEWL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>startc</name> <operator>=</operator> <name>endc</name> <operator>=</operator> <name>oldstartc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negated</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>negated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_START_NEG_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_START_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>emit_range</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>regparse</name> <operator>&lt;</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldstartc</name> <operator>=</operator> <name>startc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>got_coll_char</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>equiclass</name> <operator>=</operator> <name>collclass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>charclass</name> <operator>=</operator> <call><name>get_char_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>charclass</name> <operator>==</operator> <name>CLASS_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>equiclass</name> <operator>=</operator> <call><name>get_equi_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>equiclass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>collclass</name> <operator>=</operator> <call><name>get_coll_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>charclass</name> <operator>!=</operator> <name>CLASS_NONE</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>charclass</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLASS_ALNUM</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_ALNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_ALPHA</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_BLANK</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_CNTRL</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_CNTRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_DIGIT</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_DIGIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_GRAPH</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_GRAPH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_LOWER</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_PRINT</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_PRINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_PUNCT</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_PUNCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_SPACE</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_UPPER</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_XDIGIT</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_XDIGIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_TAB</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_RETURN</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_BACKSPACE</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_BACKSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_ESCAPE</name></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CLASS_ESCAPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>equiclass</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nfa_emit_equi_class</name><argument_list>(<argument><expr><name>equiclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>collclass</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <name>collclass</name></expr>;</expr_stmt> 


</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>oldstartc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>emit_range</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <name>oldstartc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <name>regparse</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>endp</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_INRANGE</name></expr></argument>, <argument><expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>reg_cpo_lit</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>, <argument><expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>reg_string</name> <operator>||</operator> <name>emit_range</name> <operator>||</operator> <name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>
?</condition><then> <expr><name>NL</name></expr> </then><else>: <expr><name>NFA_NEWL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'d'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'o'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'x'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'u'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'U'</literal></expr>
)</condition> <block>{<block_content>

<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>coll_get_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>got_coll_char</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>old_regparse</name></expr></argument>, <argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>backslash_trans</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>emit_range</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endc</name> <operator>=</operator> <name>startc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <name>oldstartc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>&gt;</operator> <name>endc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_reverse_range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endc</name> <operator>&gt;</operator> <name>startc</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>post_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>endc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>endc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>startc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>endc</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>startc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>endc</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>emit_range</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>==</operator> <name>NFA_NEWL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>negated</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>NFA_ADD_NL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_coll_char</name> <operator>==</operator> <name>TRUE</name> <operator>&amp;&amp;</operator> <name>startc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while> 

<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>old_regparse</name></expr></argument>, <argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>endp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>negated</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_END_NEG_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_END_COLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>==</operator> <name>NFA_ADD_NL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><ternary><condition><expr><name>reg_string</name></expr> ?</condition><then> <expr><name>NL</name></expr> </then><else>: <expr><name>NFA_NEWL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>reg_strict</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missingbracket</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plen</name></decl>;</decl_stmt>

<label><name>nfa_do_multibyte</name>:</label>

<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>(</operator><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <operator>(</operator><name>plen</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>old_regparse</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>









<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>plen</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>old_regparse</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_COMPOSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>old_regparse</name> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_regpiece</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>minval</name></decl>, <decl><type ref="prev"/><name>maxval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>greedy</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>parse_state_T</name></type> <name>old_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parse_state_T</name></type> <name>new_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_post_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my_post_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quest</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>save_parse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>my_post_start</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nfa_regatom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>peekchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOT_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>











<expr_stmt><expr><call><name>restore_parse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_regatom</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>getdecchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NFA_PREV_ATOM_NO_WIDTH</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NFA_PREV_ATOM_NO_WIDTH_NEG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NFA_PREV_ATOM_JUST_BEFORE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>NFA_PREV_ATOM_LIKE_PATTERN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E869: (NFA) Unknown operator '\\@%c'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>NFA_PREV_ATOM_JUST_BEFORE</name>
<operator>||</operator> <name>i</name> <operator>==</operator> <name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_QUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>







<expr_stmt><expr><name>greedy</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>peekchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>greedy</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_limits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E870: (NFA regexp) Error reading repetition limits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>minval</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxval</name> <operator>==</operator> <name>MAX_LIMIT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>greedy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR_NONGREEDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>maxval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>post_ptr</name> <operator>=</operator> <name>post_start</name> <operator>+</operator> <name>my_post_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfa_re_flags</name> <operator>&amp;</operator> <name>RE_AUTO</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>maxval</name> <operator>&gt;</operator> <literal type="number">500</literal> <operator>||</operator> <name>maxval</name> <operator>&gt;</operator> <name>minval</name> <operator>+</operator> <literal type="number">200</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>post_ptr</name> <operator>=</operator> <name>post_start</name> <operator>+</operator> <name>my_post_start</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>save_parse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quest</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>greedy</name> <operator>==</operator> <name>TRUE</name></expr> ?</condition><then> <expr><name>NFA_QUEST</name></expr> </then><else>: <expr><name>NFA_QUEST_NONGREEDY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxval</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>restore_parse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_post_pos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_regatom</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>minval</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maxval</name> <operator>==</operator> <name>MAX_LIMIT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>greedy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_STAR_NONGREEDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>quest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>old_post_pos</name> <operator>!=</operator> <name>my_post_start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>minval</name> <operator>&amp;&amp;</operator> <name>maxval</name> <operator>==</operator> <name>MAX_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>restore_parse_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>


<default>default:</default>
<break>break;</break>
</block_content>}</block></switch> 

<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NOT_MULTI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E871: (NFA regexp) Can't have a multi follow a multi"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_regconcat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cont</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUL</name></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>cont</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_ICOMBINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_ICASE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_NOICASE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>nfa_regpiece</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_regbranch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_post_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_post_pos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>nfa_regconcat</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>


<while>while <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_post_pos</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_NOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_PREV_ATOM_NO_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_post_pos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_regconcat</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_post_pos</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_CONCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>old_post_pos</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>post_ptr</name> <operator>-</operator> <name>post_start</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> 
<name>nfa_reg</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>paren</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>parno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_PAREN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regnpar</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E872: (NFA regexp) Too many '('"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parno</name> <operator>=</operator> <name>regnpar</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_ZPAREN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regnzpar</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E879: (NFA regexp) Too many \\z("</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parno</name> <operator>=</operator> <name>regnzpar</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nfa_regbranch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_regbranch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>!=</operator> <name>REG_NOPAREN</name> <operator>&amp;&amp;</operator> <call><name>getchr</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_NPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedpp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_NOPAREN</name> <operator>&amp;&amp;</operator> <call><name>peekchr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedpar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E873: (NFA regexp) proper termination error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_PAREN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>had_endbrace</name><index>[<expr><name>parno</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_MOPEN</name> <operator>+</operator> <name>parno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_ZPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_ZOPEN</name> <operator>+</operator> <name>parno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>code</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_set_code</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>addnl</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>NFA_FIRST_NL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>NFA_LAST_NL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addnl</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>NFA_ADD_NL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_MATCH</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MATCH "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SPLIT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SPLIT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CONCAT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CONCAT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NEWL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NEWL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZSTART</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZSTART"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZEND</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZEND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_BACKREF1</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF2</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF3</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF4</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF5</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF6</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF7</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF8</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BACKREF9</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BACKREF9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF1</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF2</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF3</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF4</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF5</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF6</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF7</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF8</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZREF9</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZREF9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SKIP</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SKIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PREV_ATOM_NO_WIDTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH_NEG</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PREV_ATOM_NO_WIDTH_NEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PREV_ATOM_JUST_BEFORE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PREV_ATOM_JUST_BEFORE_NEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_LIKE_PATTERN</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PREV_ATOM_LIKE_PATTERN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_NOPEN</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NOPEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NCLOSE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NCLOSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_FIRST</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_FIRST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_NEG</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_NEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_NEG_FIRST</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_NEG_FIRST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_BEFORE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_FIRST</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_BEFORE_FIRST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_BEFORE_NEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_INVISIBLE_BEFORE_NEG_FIRST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_PATTERN</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_PATTERN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_INVISIBLE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_INVISIBLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_INVISIBLE_NEG</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_INVISIBLE_NEG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_PATTERN</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_PATTERN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_COMPOSING</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_COMPOSING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_COMPOSING</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_COMPOSING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_OPT_CHARS</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_OPT_CHARS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MOPEN(x)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>NFA_MOPEN</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE9</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MCLOSE(x)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>NFA_MCLOSE</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZOPEN(x)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>NFA_ZOPEN</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_ZCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE9</name></expr>:</case>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ZCLOSE(x)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>NFA_ZCLOSE</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_EOL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_EOL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BOL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BOL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_EOW</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_EOW "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BOW</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BOW "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_EOF</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_EOF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_BOF</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_BOF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_LNUM</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_LNUM "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_LNUM_GT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_LNUM_LT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_COL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_COL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_COL_GT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_COL_LT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_VCOL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_VCOL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_VCOL_GT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_VCOL_LT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_MARK</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MARK "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MARK_GT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_MARK_LT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CURSOR</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CURSOR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_VISUAL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_VISUAL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ANY_COMPOSING</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ANY_COMPOSING "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_STAR</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_STAR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_STAR_NONGREEDY</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_STAR_NONGREEDY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_QUEST</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_QUEST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_QUEST_NONGREEDY</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_QUEST_NON_GREEDY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_EMPTY</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_EMPTY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_OR</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_OR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_START_COLL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_COLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_COLL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_COLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_START_NEG_COLL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_NEG_COLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_END_NEG_COLL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_END_NEG_COLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_RANGE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_RANGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_RANGE_MIN</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_RANGE_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_RANGE_MAX</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_RANGE_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_CLASS_ALNUM</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_ALNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_ALPHA</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_ALPHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_BLANK</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_BLANK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_CNTRL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_CNTRL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_DIGIT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_DIGIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_GRAPH</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_GRAPH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_LOWER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_LOWER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_PRINT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_PRINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_PUNCT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_PUNCT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_SPACE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_SPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_UPPER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_UPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_XDIGIT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_XDIGIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_TAB</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_TAB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_RETURN</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_RETURN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_BACKSPACE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_BACKSPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_CLASS_ESCAPE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_CLASS_ESCAPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>NFA_ANY</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ANY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_IDENT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_IDENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SIDENT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SIDENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_KWORD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_KWORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SKWORD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SKWORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_FNAME</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_FNAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SFNAME</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SFNAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_PRINT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_PRINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_SPRINT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_SPRINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_WHITE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_WHITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NWHITE</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NWHITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_DIGIT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_DIGIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NDIGIT</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NDIGIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_HEX</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_HEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NHEX</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NHEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_OCTAL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_OCTAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NOCTAL</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NOCTAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_WORD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_WORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NWORD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NWORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_HEAD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NHEAD</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NHEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ALPHA</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_ALPHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NALPHA</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NALPHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_LOWER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_LOWER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NLOWER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NLOWER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_UPPER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_UPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NUPPER</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NUPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_LOWER_IC</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_LOWER_IC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NLOWER_IC</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NLOWER_IC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_UPPER_IC</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_UPPER_IC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_NUPPER_IC</name></expr>:</case> <expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"NFA_NUPPER_IC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"CHAR(x)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>code</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>addnl</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">" + NEWLINE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>log_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_log_open_failed</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(
<argument><expr><literal type="string">"Could not open temporary log file for writing, displaying on stderr... "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_postfix_dump</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_DUMP_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n-------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; NFA engine failed... \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; NFA engine succeeded !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Regexp: \"%s\"\nPostfix notation (char): \""</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>post_start</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>post_ptr</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\"\nPostfix notation (int): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>post_start</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>post_ptr</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_print_state</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debugf</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>indent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfa_print_state2</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_print_state2</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debugf</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">"(%2d)"</literal></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>indent</name><operator>-&gt;</operator><name>ga_data</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>indent</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name><name>indent</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>save</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>save</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"+-"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>last</name></expr>]</index></name></expr></argument>, <argument><expr><name>save</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">"%s (%d) (id=%d) val=%d\n"</literal></expr></argument>,
<argument><expr><name>code</name></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>,
<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>indent</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nfa_print_state2</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>indent</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nfa_print_state2</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>indent</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_dump</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debugf</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_DUMP_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debugf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>nfa_print_state</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">"reganch: %d\n"</literal></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">"regstart: %c (decimal: %d)\n"</literal></expr></argument>,
<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>match_text</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>, <argument><expr><literal type="string">"match_text: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>match_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>debugf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>re2post</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nfa_reg</name><argument_list>(<argument><expr><name>REG_NOPAREN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>EMIT</name><argument_list>(<argument><expr><name>NFA_MOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>post_start</name></expr>;</return>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <name>nfa_state_T</name> <modifier>*</modifier></type><name>state_ptr</name></decl>;</decl_stmt> 




<function><type><specifier>static</specifier> <name>nfa_state_T</name> <modifier>*</modifier></type><name>alloc_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>out1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>istate</name> <operator>&gt;=</operator> <name>nstate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>&amp;</operator><name><name>state_ptr</name><index>[<expr><name>istate</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out1</name></name> <operator>=</operator> <name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>istate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>Frag_T</name></type> <name>frag</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frag_T</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>n</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>Ptrlist</name> <modifier>*</modifier></type><name>list1</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>outp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>Ptrlist</name> <operator>*</operator><operator>)</operator><name>outp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>patch</name><parameter_list>(<parameter><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>Ptrlist</name> <modifier>*</modifier></type><name>append</name><parameter_list>(<parameter><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>l1</name></decl></parameter>, <parameter><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>l2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Ptrlist</name> <modifier>*</modifier></type><name>oldl1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>oldl1</name> <operator>=</operator> <name>l1</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>l1</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>l1</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>l2</name></expr>;</expr_stmt>
<return>return <expr><name>oldl1</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <name>Frag_T</name></type> <name>empty</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>st_error</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>postfix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_ERROR_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>df</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_ERROR_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"Error popping the stack!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"Current regexp is \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"Postfix form is: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>postfix</name></expr>;</init> <condition><expr><name>p2</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"\nCurrent position is: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>postfix</name></expr>;</init> <condition><expr><name>p2</name> <operator>&lt;=</operator> <name>p</name></expr>;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>postfix</name></expr>;</init> <condition><expr><name>p2</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"%d, "</literal></expr></argument>, <argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"\nCurrent position is: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p2</name> <operator>=</operator> <name>postfix</name></expr>;</init> <condition><expr><name>p2</name> <operator>&lt;=</operator> <name>p</name></expr>;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"%d, "</literal></expr></argument>, <argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="string">"\n--------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E874: (NFA) Could not pop the stack!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>st_push</name><parameter_list>(<parameter><decl><type><name>Frag_T</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Frag_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stack_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stackp</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>&gt;=</operator> <name>stack_end</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>stackp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>Frag_T</name></type> <name>st_pop</name><parameter_list>(<parameter><decl><type><name>Frag_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stackp</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>&lt;</operator> <name>stack</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>empty</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><operator>*</operator><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_max_width</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>startstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>startstate</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_END_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_END_INVISIBLE_NEG</name></expr>:</case>

<return>return <expr><name>len</name></expr>;</return>

<case>case <expr><name>NFA_SPLIT</name></expr>:</case>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>nfa_max_width</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>nfa_max_width</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>len</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>: <expr><name>r</name></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><name>NFA_ANY</name></expr>:</case>
<case>case <expr><name>NFA_START_COLL</name></expr>:</case>
<case>case <expr><name>NFA_START_NEG_COLL</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>MB_MAXBYTES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_ANY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_DIGIT</name></expr>:</case>
<case>case <expr><name>NFA_WHITE</name></expr>:</case>
<case>case <expr><name>NFA_HEX</name></expr>:</case>
<case>case <expr><name>NFA_OCTAL</name></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_IDENT</name></expr>:</case>
<case>case <expr><name>NFA_SIDENT</name></expr>:</case>
<case>case <expr><name>NFA_KWORD</name></expr>:</case>
<case>case <expr><name>NFA_SKWORD</name></expr>:</case>
<case>case <expr><name>NFA_FNAME</name></expr>:</case>
<case>case <expr><name>NFA_SFNAME</name></expr>:</case>
<case>case <expr><name>NFA_PRINT</name></expr>:</case>
<case>case <expr><name>NFA_SPRINT</name></expr>:</case>
<case>case <expr><name>NFA_NWHITE</name></expr>:</case>
<case>case <expr><name>NFA_NDIGIT</name></expr>:</case>
<case>case <expr><name>NFA_NHEX</name></expr>:</case>
<case>case <expr><name>NFA_NOCTAL</name></expr>:</case>
<case>case <expr><name>NFA_WORD</name></expr>:</case>
<case>case <expr><name>NFA_NWORD</name></expr>:</case>
<case>case <expr><name>NFA_HEAD</name></expr>:</case>
<case>case <expr><name>NFA_NHEAD</name></expr>:</case>
<case>case <expr><name>NFA_ALPHA</name></expr>:</case>
<case>case <expr><name>NFA_NALPHA</name></expr>:</case>
<case>case <expr><name>NFA_LOWER</name></expr>:</case>
<case>case <expr><name>NFA_NLOWER</name></expr>:</case>
<case>case <expr><name>NFA_UPPER</name></expr>:</case>
<case>case <expr><name>NFA_NUPPER</name></expr>:</case>
<case>case <expr><name>NFA_LOWER_IC</name></expr>:</case>
<case>case <expr><name>NFA_NLOWER_IC</name></expr>:</case>
<case>case <expr><name>NFA_UPPER_IC</name></expr>:</case>
<case>case <expr><name>NFA_NUPPER_IC</name></expr>:</case>
<case>case <expr><name>NFA_ANY_COMPOSING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_START_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>:</case>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NFA_BACKREF1</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF2</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF3</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF4</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF5</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF6</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF7</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF8</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF9</name></expr>:</case>
<case>case <expr><name>NFA_ZREF1</name></expr>:</case>
<case>case <expr><name>NFA_ZREF2</name></expr>:</case>
<case>case <expr><name>NFA_ZREF3</name></expr>:</case>
<case>case <expr><name>NFA_ZREF4</name></expr>:</case>
<case>case <expr><name>NFA_ZREF5</name></expr>:</case>
<case>case <expr><name>NFA_ZREF6</name></expr>:</case>
<case>case <expr><name>NFA_ZREF7</name></expr>:</case>
<case>case <expr><name>NFA_ZREF8</name></expr>:</case>
<case>case <expr><name>NFA_ZREF9</name></expr>:</case>
<case>case <expr><name>NFA_NEWL</name></expr>:</case>
<case>case <expr><name>NFA_SKIP</name></expr>:</case>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>NFA_BOL</name></expr>:</case>
<case>case <expr><name>NFA_EOL</name></expr>:</case>
<case>case <expr><name>NFA_BOF</name></expr>:</case>
<case>case <expr><name>NFA_EOF</name></expr>:</case>
<case>case <expr><name>NFA_BOW</name></expr>:</case>
<case>case <expr><name>NFA_EOW</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_NCLOSE</name></expr>:</case>

<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case>
<case>case <expr><name>NFA_VISUAL</name></expr>:</case>
<case>case <expr><name>NFA_LNUM</name></expr>:</case>
<case>case <expr><name>NFA_CURSOR</name></expr>:</case>
<case>case <expr><name>NFA_COL</name></expr>:</case>
<case>case <expr><name>NFA_VCOL</name></expr>:</case>
<case>case <expr><name>NFA_MARK</name></expr>:</case>

<case>case <expr><name>NFA_ZSTART</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<case>case <expr><name>NFA_OPT_CHARS</name></expr>:</case>
<case>case <expr><name>NFA_EMPTY</name></expr>:</case>
<case>case <expr><name>NFA_START_PATTERN</name></expr>:</case>
<case>case <expr><name>NFA_END_PATTERN</name></expr>:</case>
<case>case <expr><name>NFA_COMPOSING</name></expr>:</case>
<case>case <expr><name>NFA_END_COMPOSING</name></expr>:</case>

<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>MB_CHAR2LEN</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>


<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>nfa_state_T</name> <modifier>*</modifier></type><name>post2nfa</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>postfix</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfa_calc_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mopen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mclose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stackp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name> <modifier>*</modifier></type><name>stack_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name></type> <name>e1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name></type> <name>e2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Frag_T</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>matchstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>postfix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>st_push((s), &amp;stackp, stack_end)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>st_pop(&amp;stackp, stack); if (stackp &lt; stack) { st_error(postfix, end, p); xfree(stack); return NULL; }</cpp:value></cpp:define>






<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stack</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>nstate</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Frag_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stackp</name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stack_end</name> <operator>=</operator> <name>stack</name> <operator>+</operator> <operator>(</operator><name>nstate</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>postfix</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_CONCAT</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_OR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name><name>e1</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>append</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_STAR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_STAR_NONGREEDY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_QUEST</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>append</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_QUEST_NONGREEDY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>append</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_END_COLL</name></expr>:</case>
<case>case <expr><name>NFA_END_NEG_COLL</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_END_COLL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>out1</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_RANGE</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>e2</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>NFA_RANGE_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e1</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>e1</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e1</name><operator>.</operator><name>start</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>NFA_RANGE_MIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>e2</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_EMPTY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_EMPTY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_OPT_CHARS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>













<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>e1</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SPLIT</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e1</name><operator>.</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name><name>e1</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>e1</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH</name></expr>:</case>
<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH_NEG</name></expr>:</case>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE</name></expr>:</case>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_PREV_ATOM_LIKE_PATTERN</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>before</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NFA_PREV_ATOM_JUST_BEFORE</name>
<operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pattern</name> <init>= <expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>NFA_PREV_ATOM_LIKE_PATTERN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>zend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>skip</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH</name></expr>:</case>
<expr_stmt><expr><name>start_state</name> <operator>=</operator> <name>NFA_START_INVISIBLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_state</name> <operator>=</operator> <name>NFA_END_INVISIBLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_NO_WIDTH_NEG</name></expr>:</case>
<expr_stmt><expr><name>start_state</name> <operator>=</operator> <name>NFA_START_INVISIBLE_NEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_state</name> <operator>=</operator> <name>NFA_END_INVISIBLE_NEG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE</name></expr>:</case>
<expr_stmt><expr><name>start_state</name> <operator>=</operator> <name>NFA_START_INVISIBLE_BEFORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_state</name> <operator>=</operator> <name>NFA_END_INVISIBLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NFA_PREV_ATOM_JUST_BEFORE_NEG</name></expr>:</case>
<expr_stmt><expr><name>start_state</name> <operator>=</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_state</name> <operator>=</operator> <name>NFA_END_INVISIBLE_NEG</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>start_state</name> <operator>=</operator> <name>NFA_START_PATTERN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_state</name> <operator>=</operator> <name>NFA_END_PATTERN</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 








<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name> <operator>+=</operator> <ternary><condition><expr><name>pattern</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>end_state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>start_state</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SKIP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zend</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_ZEND</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zend</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s1</name><operator>-&gt;</operator><name>out</name></name><operator>=</operator> <name>skip</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>zend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>skip</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>nfa_max_width</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_COMPOSING</name></expr>:</case> 
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case> 
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case> 
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mopen</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_NCLOSE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE2</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE3</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE6</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE7</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE8</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_ZCLOSE9</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>NFA_COMPOSING</name></expr>:</case> <expr_stmt><expr><name>mclose</name> <operator>=</operator> <name>NFA_END_COMPOSING</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>

<expr_stmt><expr><name>mclose</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>NSUBEXP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>





<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>==</operator> <name>stack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>mopen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>mclose</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>mopen</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>mclose</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mopen</name> <operator>==</operator> <name>NFA_COMPOSING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_BACKREF1</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF2</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF3</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF4</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF5</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF6</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF7</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF8</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF9</name></expr>:</case>
<case>case <expr><name>NFA_ZREF1</name></expr>:</case>
<case>case <expr><name>NFA_ZREF2</name></expr>:</case>
<case>case <expr><name>NFA_ZREF3</name></expr>:</case>
<case>case <expr><name>NFA_ZREF4</name></expr>:</case>
<case>case <expr><name>NFA_ZREF5</name></expr>:</case>
<case>case <expr><name>NFA_ZREF6</name></expr>:</case>
<case>case <expr><name>NFA_ZREF7</name></expr>:</case>
<case>case <expr><name>NFA_ZREF8</name></expr>:</case>
<case>case <expr><name>NFA_ZREF9</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name>NFA_SKIP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_LNUM</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case>
<case>case <expr><name>NFA_COL</name></expr>:</case>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case>
<case>case <expr><name>NFA_MARK</name></expr>:</case>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><operator>++</operator><name>p</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_ZSTART</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>alloc_state</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><call><name>frag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>list1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

</block_content>}</block></switch> 

</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>nfa_calc_size</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nstate</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto> 
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stackp</name> <operator>!=</operator> <name>stack</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E875: (NFA regexp) (While converting from postfix to NFA),"</literal>
<literal type="string">"too many states left on stack"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>istate</name> <operator>&gt;=</operator> <name>nstate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E876: (NFA regexp) "</literal>
<literal type="string">"Not enough space to store the whole NFA "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchstate</name> <operator>=</operator> <operator>&amp;</operator><name><name>state_ptr</name><index>[<expr><name>istate</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>matchstate</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>NFA_MATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matchstate</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <name><name>matchstate</name><operator>-&gt;</operator><name>out1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matchstate</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>matchstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POP1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUSH1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POP2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUSH2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PUSH</name></cpp:undef>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_postprocess</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prog</name><operator>-&gt;</operator><name>nstate</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>directly</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>match_follows</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch_invisible</name> <init>= <expr><call><name>failure_chance</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch_follows</name> <init>= <expr><call><name>failure_chance</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE</name>
<operator>||</operator> <name>c</name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ch_follows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>ch_follows</name> <operator>*</operator> <literal type="number">10</literal> <operator>&lt;</operator> <name>ch_invisible</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>directly</name> <operator>=</operator> <name>ch_follows</name> <operator>&lt;</operator> <name>ch_invisible</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>directly</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_PIM_UNUSED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_PIM_TODO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_PIM_MATCH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFA_PIM_NOMATCH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_subsexpr</name><parameter_list>(<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>log_subexpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>log_subexpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_subexpr</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"*** group %d, start: c=%d, l=%d, end: c=%d, l=%d\n"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start_lnum</name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end_col</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>end</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"*** group %d, start: \"%s\", end: \"%s\"\n"</literal></expr></argument>,
<argument><expr><name>j</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>s</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>e</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><name>e</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pim_info</name><parameter_list>(<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" PIM col %d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>REG_MULTI</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>
</then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>ptr</name></name> <operator>-</operator> <name>reginput</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>proftime_T</name> <modifier>*</modifier></type><name>nfa_time_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>nfa_timed_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfa_time_count</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_pim</name><parameter_list>(<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_sub</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>multipos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfa_nsubexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linepos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfa_nsubexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_sub</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>multipos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>from</name><operator>-&gt;</operator><name>in_use</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linepos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>from</name><operator>-&gt;</operator><name>in_use</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_sub_off</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&lt;</operator> <name><name>from</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>multipos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>in_use</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linepos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>in_use</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_ze_off</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zend</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_col</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>sub_equal</name><parameter_list>(<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub1</name></decl></parameter>, <parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>todo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>sp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>todo</name> <operator>=</operator> <ternary><condition><expr><name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&gt;</operator> <name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr> ?</condition><then> <expr><name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name></expr> </then><else>: <expr><name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>todo</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_lnum</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_col</name>
<operator>!=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nfa_has_backref</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_col</name> <operator>!=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_col</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>todo</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp1</name> <operator>!=</operator> <name>sp2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nfa_has_backref</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub1</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name><name>sub1</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sp1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>sub2</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name><name>sub2</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sp1</name> <operator>!=</operator> <name>sp2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>report_state</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>,
<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lid</name></decl></parameter>,
<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_col</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"&gt; %s state %d to list %d. char %d: %s (start col %d)%s\n"</literal></expr></argument>,
<argument><expr><name>action</name></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lid</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><call><name>pim_info</name><argument_list>(<argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type> 
<name>has_state_with_pos</name> <parameter_list>(
<parameter><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, 
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, 
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs</name></decl></parameter>, 
<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>thread</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>id</name></name>
<operator>&amp;&amp;</operator> <call><name>sub_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>nfa_has_zsubexpr</name>
<operator>||</operator> <call><name>sub_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>pim_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>pim</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>pim_equal</name><parameter_list>(<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>one_unused</name> <init>= <expr><operator>(</operator><name>one</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>one</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_UNUSED</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>two_unused</name> <init>= <expr><operator>(</operator><name>two</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>two</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_UNUSED</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>one_unused</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>two_unused</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>two_unused</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>two</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>one</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <name><name>two</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>one</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name><name>two</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>one</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name><name>two</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>match_follows</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>startstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>startstate</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_MATCH</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_END_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_END_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_END_PATTERN</name></expr>:</case>
<return>return <expr><name>TRUE</name></expr>;</return>

<case>case <expr><name>NFA_SPLIT</name></expr>:</case>
<return>return <expr><call><name>match_follows</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>match_follows</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>NFA_START_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_COMPOSING</name></expr>:</case>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NFA_ANY</name></expr>:</case>
<case>case <expr><name>NFA_ANY_COMPOSING</name></expr>:</case>
<case>case <expr><name>NFA_IDENT</name></expr>:</case>
<case>case <expr><name>NFA_SIDENT</name></expr>:</case>
<case>case <expr><name>NFA_KWORD</name></expr>:</case>
<case>case <expr><name>NFA_SKWORD</name></expr>:</case>
<case>case <expr><name>NFA_FNAME</name></expr>:</case>
<case>case <expr><name>NFA_SFNAME</name></expr>:</case>
<case>case <expr><name>NFA_PRINT</name></expr>:</case>
<case>case <expr><name>NFA_SPRINT</name></expr>:</case>
<case>case <expr><name>NFA_WHITE</name></expr>:</case>
<case>case <expr><name>NFA_NWHITE</name></expr>:</case>
<case>case <expr><name>NFA_DIGIT</name></expr>:</case>
<case>case <expr><name>NFA_NDIGIT</name></expr>:</case>
<case>case <expr><name>NFA_HEX</name></expr>:</case>
<case>case <expr><name>NFA_NHEX</name></expr>:</case>
<case>case <expr><name>NFA_OCTAL</name></expr>:</case>
<case>case <expr><name>NFA_NOCTAL</name></expr>:</case>
<case>case <expr><name>NFA_WORD</name></expr>:</case>
<case>case <expr><name>NFA_NWORD</name></expr>:</case>
<case>case <expr><name>NFA_HEAD</name></expr>:</case>
<case>case <expr><name>NFA_NHEAD</name></expr>:</case>
<case>case <expr><name>NFA_ALPHA</name></expr>:</case>
<case>case <expr><name>NFA_NALPHA</name></expr>:</case>
<case>case <expr><name>NFA_LOWER</name></expr>:</case>
<case>case <expr><name>NFA_NLOWER</name></expr>:</case>
<case>case <expr><name>NFA_UPPER</name></expr>:</case>
<case>case <expr><name>NFA_NUPPER</name></expr>:</case>
<case>case <expr><name>NFA_LOWER_IC</name></expr>:</case>
<case>case <expr><name>NFA_NLOWER_IC</name></expr>:</case>
<case>case <expr><name>NFA_UPPER_IC</name></expr>:</case>
<case>case <expr><name>NFA_NUPPER_IC</name></expr>:</case>
<case>case <expr><name>NFA_START_COLL</name></expr>:</case>
<case>case <expr><name>NFA_START_NEG_COLL</name></expr>:</case>
<case>case <expr><name>NFA_NEWL</name></expr>:</case>

<return>return <expr><name>FALSE</name></expr>;</return>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>



<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> 
<name>state_in_list</name> <parameter_list>(
<parameter><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, 
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, 
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><name>nfa_ll_index</name></expr>]</index></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nfa_has_backref</name> <operator>||</operator> <call><name>has_state_with_pos</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDSTATE_HERE_OFFSET</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>regsubs_T</name> <modifier>*</modifier></type><name>addstate</name><parameter_list>(
<parameter><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, 
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, 
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs_arg</name></decl></parameter>, 
<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>off_arg</name></decl></parameter>)</parameter_list> 
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>subidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>off_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_here</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>multipos</name></name></type> <name>save_multipos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_in_use</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs</name> <init>= <expr><name>subs_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>regsubs_T</name></type> <name>temp_subs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>did_print</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>++</operator><name>depth</name> <operator>&gt;=</operator> <literal type="number">5000</literal> <operator>||</operator> <name>subs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>off_arg</name> <operator>&lt;=</operator> <operator>-</operator><name>ADDSTATE_HERE_OFFSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>listindex</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>off_arg</name> <operator>+</operator> <name>ADDSTATE_HERE_OFFSET</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_NCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<case>case <expr><name>NFA_SPLIT</name></expr>:</case>
<case>case <expr><name>NFA_EMPTY</name></expr>:</case>


<break>break;</break>

<case>case <expr><name>NFA_BOL</name></expr>:</case>
<case>case <expr><name>NFA_BOF</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>&gt;</operator> <name>regline</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>reginput</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>nfa_endp</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>!</operator><name>REG_MULTI</name>
<operator>||</operator> <name>reglnum</name> <operator>==</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_add</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZSTART</name></expr>:</case>




<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><name>nfa_ll_index</name></expr>]</index></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_SKIP</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nfa_has_backref</name> <operator>&amp;&amp;</operator> <name>pim</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>l</name><operator>-&gt;</operator><name>has_pim</name></name>
<operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_MATCH</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>add_here</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>listindex</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>state</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>add_here</name> <operator>||</operator> <name>found</name></expr>)</condition> <block>{<block_content>
<label><name>skip_add</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"&gt; Not adding state %d to list %d. char %d: %s pim: %s has_pim: %d found: %d\n"</literal></expr></argument>,
<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>pim</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><literal type="string">"yes"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>has_pim</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>subs</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>has_state_with_pos</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>skip_add</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>newlen</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>newsize</name> <init>= <expr><name>newlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>newsize</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <name>p_mmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_maxmempat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>subs</name> <operator>!=</operator> <operator>&amp;</operator><name>temp_subs</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp_subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp_subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subs</name> <operator>=</operator> <operator>&amp;</operator><name>temp_subs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>newt</name> <init>= <expr><call><name>xrealloc</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>newt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><name>nfa_ll_index</name></expr>]</index></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>thread</name> <operator>=</operator> <operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>pim</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>NFA_PIM_UNUSED</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_pim</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>pim</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>has_pim</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>report_state</name><argument_list>(<argument><expr><literal type="string">"Adding"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_print</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_print</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>report_state</name><argument_list>(<argument><expr><literal type="string">"Processing"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_MATCH</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>NFA_SPLIT</name></expr>:</case>

<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_EMPTY</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_NCLOSE</name></expr>:</case>
<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZSTART</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_ZSTART</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>NFA_ZOPEN</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name>NFA_ZOPEN9</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_ZOPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_MOPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>save_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_multipos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>save_multipos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subidx</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_multipos</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_in_use</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>save_in_use</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subidx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>subidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>=</operator> <name>reglnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_col</name> <operator>=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>subidx</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_in_use</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>save_in_use</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subidx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>subidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>reginput</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>NFA_ZOPEN</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name>NFA_ZOPEN9</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_in_use</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name> <operator>=</operator> <name>save_multipos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>save_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>save_in_use</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zend</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>REG_MULTI</name></expr>
?</condition><then> <expr><name><name>subs</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>
</then><else>: <expr><name><name>subs</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>!=</operator> <name>NULL</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>NFA_MCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_ZEND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_ZEND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>NFA_ZCLOSE</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name>NFA_ZCLOSE9</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_ZCLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_MCLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>save_in_use</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&lt;=</operator> <name>subidx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>subidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>save_multipos</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>=</operator> <name>reglnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_col</name> <operator>=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>save_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>save_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>reginput</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_multipos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>save_multipos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>subs</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>off_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>subs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>NFA_ZCLOSE</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name>NFA_ZCLOSE9</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>synt</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>subs</name><operator>-&gt;</operator><name>norm</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name> <operator>=</operator> <name>save_multipos</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name>save_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>save_in_use</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>depth</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>subs</name></expr>;</return>
</block_content>}</block>







<function><type><specifier>static</specifier> <name>regsubs_T</name> <modifier>*</modifier></type><name>addstate_here</name><parameter_list>(
<parameter><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, 
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, 
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>subs</name></decl></parameter>, 
<parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>
)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2<operator>,</operator> 5</function>) <macro><name>FUNC_ATTR_WARN_UNUSED_RESULT</name></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tlen</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listidx</name> <init>= <expr><operator>*</operator><name>ip</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>addstate</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><operator>-</operator><name>listidx</name> <operator>-</operator> <name>ADDSTATE_HERE_OFFSET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>listidx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>tlen</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>tlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>r</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name></expr>]</index></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>newlen</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>newsize</name> <init>= <expr><name>newlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>newsize</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <name>p_mmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_maxmempat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>newl</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>newl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>listidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>newl</name><index>[<expr><name>listidx</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>count</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>newl</name><index>[<expr><name>listidx</name> <operator>+</operator> <name>count</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>count</name> <operator>-</operator> <name>listidx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name>newl</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name> <operator>+</operator> <name>count</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>listidx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>t</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>l</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name>listidx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block>




<function><type><specifier>static</specifier> <name>int</name></type> <name>check_char_class</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>class</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_CLASS_ALNUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_BLANK</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_CNTRL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_DIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_GRAPH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <call><name>isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_LOWER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>mb_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">170</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">186</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_PRINT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_PUNCT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_SPACE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">13</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_UPPER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_XDIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_TAB</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_RETURN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_BACKSPACE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>OK</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NFA_CLASS_ESCAPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>IEMSGN</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_ill_char_class</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> 
<name>match_backref</name> <parameter_list>(
<parameter><decl><type><name>regsub_T</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>subidx</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytelen</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&lt;=</operator> <name>subidx</name></expr>)</condition> <block>{<block_content>
<label><name>retempty</name>:</label>

<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retempty</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>==</operator> <name>reglnum</name>
<operator>&amp;&amp;</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name> <operator>==</operator> <name>reglnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_col</name>
<operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr></argument>,
<argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>match_with_backref</name><argument_list>(
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_lnum</name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr></argument>,
<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end_col</name></expr></argument>,
<argument><expr><name>bytelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RA_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retempty</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>subidx</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> 
<name>match_zref</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>subidx</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytelen</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>re_extmatch_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>subidx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>subidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>subidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_save_listids</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>nstate</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_restore_listids</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>nstate</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>nfa_re_num_cmp</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>uintmax_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name> <operator>&gt;</operator> <name>val</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name> <operator>&lt;</operator> <name>val</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>val</name> <operator>==</operator> <name>pos</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>recursive_regmatch</name><parameter_list>(
<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl></parameter>, <parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>submatch</name></decl></parameter>, <parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>listids</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>listids_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_reginput_col</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_reglnum</name> <init>= <expr><name>reglnum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_nfa_match</name> <init>= <expr><name>nfa_match</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_nfa_listid</name> <init>= <expr><name>nfa_listid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>save_se_T</name> <modifier>*</modifier></type><name>save_nfa_endp</name> <init>= <expr><name>nfa_endp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>save_se_T</name></type> <name>endpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>save_se_T</name> <modifier>*</modifier></type><name>endposp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_restore</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE</name>
<operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_FIRST</name>
<operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name>
<operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>endposp</name> <operator>=</operator> <operator>&amp;</operator><name>endpos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>se_u</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>endpos</name><operator>.</operator><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>pim</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>--</operator><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>regline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>--</operator><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>regline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reginput</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>reginput</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>regline</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>stderr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>nfa_ll_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>listids</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>listids_len</name> <operator>&lt;</operator> <name>nstate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>listids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>listids</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>listids</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>listids_len</name> <operator>=</operator> <name>nstate</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>nfa_save_listids</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><operator>*</operator><name>listids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_restore</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>++</operator><name>nfa_ll_index</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_listid</name> <operator>&lt;=</operator> <name>nfa_alt_listid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nfa_listid</name> <operator>=</operator> <name>nfa_alt_listid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>nfa_endp</name> <operator>=</operator> <name>endposp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nfa_regmatch</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>submatch</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_restore</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>nfa_restore_listids</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><operator>*</operator><name>listids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>nfa_ll_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_alt_listid</name> <operator>=</operator> <name>nfa_listid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <name>save_reglnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>save_reginput_col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>save_nfa_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_listid</name> <operator>=</operator> <name>save_nfa_listid</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nfa_endp</name> <operator>=</operator> <name>save_nfa_endp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_RUN_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"****************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"FINISHED RUNNING nfa_regmatch() recursively\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"MATCH = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name>result</name></expr> ?</condition><then> <expr><literal type="string">"FALSE"</literal></expr> </then><else>: <expr><literal type="string">"OK"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"****************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_log_open_failed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>failure_chance</name><parameter_list>(<parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_SPLIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_SPLIT</name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_SPLIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>failure_chance</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>failure_chance</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr> ?</condition><then> <expr><name>l</name></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>NFA_ANY</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>NFA_MATCH</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ANY_COMPOSING</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>NFA_START_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_PATTERN</name></expr>:</case>

<return>return <expr><literal type="number">5</literal></expr>;</return>

<case>case <expr><name>NFA_BOL</name></expr>:</case>
<case>case <expr><name>NFA_EOL</name></expr>:</case>
<case>case <expr><name>NFA_BOF</name></expr>:</case>
<case>case <expr><name>NFA_EOF</name></expr>:</case>
<case>case <expr><name>NFA_NEWL</name></expr>:</case>
<return>return <expr><literal type="number">99</literal></expr>;</return>

<case>case <expr><name>NFA_BOW</name></expr>:</case>
<case>case <expr><name>NFA_EOW</name></expr>:</case>
<return>return <expr><literal type="number">90</literal></expr>;</return>

<case>case <expr><name>NFA_MOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_ZCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE1</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE2</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE3</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE4</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE5</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE6</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE7</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE8</name></expr>:</case>
<case>case <expr><name>NFA_MCLOSE9</name></expr>:</case>
<case>case <expr><name>NFA_NCLOSE</name></expr>:</case>
<return>return <expr><call><name>failure_chance</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>NFA_BACKREF1</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF2</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF3</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF4</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF5</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF6</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF7</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF8</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF9</name></expr>:</case>
<case>case <expr><name>NFA_ZREF1</name></expr>:</case>
<case>case <expr><name>NFA_ZREF2</name></expr>:</case>
<case>case <expr><name>NFA_ZREF3</name></expr>:</case>
<case>case <expr><name>NFA_ZREF4</name></expr>:</case>
<case>case <expr><name>NFA_ZREF5</name></expr>:</case>
<case>case <expr><name>NFA_ZREF6</name></expr>:</case>
<case>case <expr><name>NFA_ZREF7</name></expr>:</case>
<case>case <expr><name>NFA_ZREF8</name></expr>:</case>
<case>case <expr><name>NFA_ZREF9</name></expr>:</case>

<return>return <expr><literal type="number">94</literal></expr>;</return>

<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case>
<case>case <expr><name>NFA_VISUAL</name></expr>:</case>

<return>return <expr><literal type="number">85</literal></expr>;</return>

<case>case <expr><name>NFA_LNUM</name></expr>:</case>
<return>return <expr><literal type="number">90</literal></expr>;</return>

<case>case <expr><name>NFA_CURSOR</name></expr>:</case>
<case>case <expr><name>NFA_COL</name></expr>:</case>
<case>case <expr><name>NFA_VCOL</name></expr>:</case>
<case>case <expr><name>NFA_MARK</name></expr>:</case>

<return>return <expr><literal type="number">98</literal></expr>;</return>

<case>case <expr><name>NFA_COMPOSING</name></expr>:</case>
<return>return <expr><literal type="number">95</literal></expr>;</return>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">95</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></switch>


<return>return <expr><literal type="number">50</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_to_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name> <modifier>*</modifier></type><name>colp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>cstrchr</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <operator>*</operator><name>colp</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>colp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>long</name></type> <name>find_match_text</name><parameter_list>(<parameter><decl><type><name>colnr_T</name></type> <name>startcol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regstart</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>match_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR2LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>utf_ptr2len(x)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name>startcol</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regstart_len</name> <init>= <expr><call><name>PTR2LEN</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name>startcol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><name>match_text</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>regline</name> <operator>+</operator> <name>col</name> <operator>+</operator> <name>regstart_len</name></expr></init></decl>;</decl_stmt> 
<while>while <condition>(<expr><operator>*</operator><name>s1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c1_len</name> <init>= <expr><call><name>PTR2LEN</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2_len</name> <init>= <expr><call><name>PTR2LEN</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>!=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
<operator>||</operator> <name>c1_len</name> <operator>!=</operator> <name>c2_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>c1_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>c2_len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>match</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>s2</name> <operator>-</operator> <name>regline</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1L</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>regstart_len</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>skip_to_start</name><argument_list>(<argument><expr><name>regstart</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0L</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR2LEN</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_did_time_out</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nfa_time_limit</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>*</operator><name>nfa_time_limit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nfa_timed_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nfa_timed_out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>nfa_regmatch</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>submatch</name></decl></parameter>, <parameter><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>go_to_nextline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_thread_T</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_list_T</name></type> <name><name>list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>thislist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_list_T</name> <modifier>*</modifier></type><name>nextlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>listids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listids_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>add_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>add_here</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>add_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toplevel</name> <init>= <expr><name><name>start</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MOPEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsubs_T</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>debug</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>debug</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"(NFA) COULD NOT OPEN %s!"</literal></expr></argument>, <argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_did_time_out</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>nstate</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nfa_thread_T</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>nstate</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>nstate</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_RUN_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"**********************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>start</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">" RUNNING nfa_regmatch() starting with state %d, code %s\n"</literal></expr></argument>,
<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>start</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"**********************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_log_open_failed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>thislist</name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thislist</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thislist</name><operator>-&gt;</operator><name>has_pim</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextlist</name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>has_pim</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"(---) STARTSTATE first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>thislist</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>nfa_listid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>toplevel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>thislist</name></expr></argument>, <argument><expr><name><name>start</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>thislist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_STATE_IF_MATCH</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (result) { add_state = state-&gt;out; add_off = clen; }</cpp:value></cpp:define>








<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curc</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>go_to_nextline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>thislist</name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><index>[<expr><name>flag</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextlist</name> <operator>=</operator> <operator>&amp;</operator><name><name>list</name><index>[<expr><name>flag</name> <operator>^=</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>has_pim</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_listid</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>nfa_listid</name> <operator>&gt;=</operator> <name>NFA_MAX_STATES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>thislist</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>nfa_listid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>nfa_listid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; Reginput is \"%s\"\n"</literal></expr></argument>, <argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>,
<argument><expr><literal type="string">"&gt;&gt;&gt; Advanced one character... Current char is %c (code %d) \n"</literal></expr></argument>,
<argument><expr><name>curc</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; Thislist has %d states available: "</literal></expr></argument>, <argument><expr><name><name>thislist</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thislist</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>thislist</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debug</name></expr></argument>, <argument><expr><literal type="string">"\n-------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name><name>thislist</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>listidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>listidx</name> <operator>&lt;</operator> <name><name>thislist</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>listidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_time_limit</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>nfa_time_count</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_time_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_did_time_out</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>thislist</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>listidx</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debug</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>in_use</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"(%d) char %d %s (start col %d)%s... \n"</literal></expr></argument>,
<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><call><name>pim_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>pim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NFA_MATCH</name></expr>:</case>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>submatch</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>submatch</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>log_subsexpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>nextchar</name>;</goto>
</block_content>}</block>

<case>case <expr><name>NFA_END_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_END_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_END_PATTERN</name></expr>:</case>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nfa_endp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(
<argument><expr><name>log_fd</name></expr></argument>,
<argument><expr><literal type="string">"Current lnum: %d, endp lnum: %d; current col: %d, endp col: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>reglnum</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"Current col: %d, endp col: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>-</operator> <name>reginput</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>nfa_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>REG_MULTI</name></expr>
?</condition><then> <expr><operator>(</operator><name>reglnum</name> <operator>!=</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator>
<operator>!=</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>
</then><else>: <expr><name>reginput</name> <operator>!=</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>ptr</name></name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_END_INVISIBLE_NEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"Match found:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_subsexpr</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>nextchar</name>;</goto>

<case>case <expr><name>NFA_START_INVISIBLE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_NEG_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_FIRST</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG</name></expr>:</case>
<case>case <expr><name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"Failure chance invisible: %d, what follows: %d\n"</literal></expr></argument>,
<argument><expr><call><name>failure_chance</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>failure_chance</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>pim</name><operator>.</operator><name>result</name></name> <operator>!=</operator> <name>NFA_PIM_UNUSED</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_FIRST</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG_FIRST</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_FIRST</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>in_use</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>in_use</name></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>recursive_regmatch</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>submatch</name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>listids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listids_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG_FIRST</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name>
<operator>||</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>copy_ze_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <name>in_use</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>nfa_pim_T</name></type> <name>pim</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>NFA_PIM_TODO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>subs</name><operator>.</operator><name>synt</name><operator>.</operator><name>in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>end</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pim</name><operator>.</operator><name>end</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>addstate_here</name><argument_list>(<argument><expr><name>thislist</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listidx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>NFA_START_PATTERN</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>skip</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>skip_lid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><call><name>state_in_list</name><argument_list>(<argument><expr><name>nextlist</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>skip_lid</name> <operator>=</operator> <name><name>nextlist</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>state_in_list</name><argument_list>(<argument><expr><name>nextlist</name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>skip_lid</name> <operator>=</operator> <name><name>nextlist</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>state_in_list</name><argument_list>(<argument><expr><name>thislist</name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>skip_lid</name> <operator>=</operator> <name><name>thislist</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nfa_set_code</name><argument_list>(<argument><expr><name><name>skip</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(
<argument><expr><name>log_fd</name></expr></argument>,
<argument><expr><literal type="string">"&gt; Not trying to match pattern, output state %d is already in list %d. char %d: %s\n"</literal></expr></argument>,
<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>skip</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>skip_lid</name></expr></argument>, <argument><expr><name><name>skip</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>recursive_regmatch</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>submatch</name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>listids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listids_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bytelen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_PATTERN matches:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_subsexpr</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytelen</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end_col</name>
<operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>bytelen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name>reginput</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"NFA_START_PATTERN length: %d\n"</literal></expr></argument>, <argument><expr><name>bytelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytelen</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>bytelen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_count</name> <operator>=</operator> <name>bytelen</name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_BOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>==</operator> <name>regline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_EOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_BOW</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>this_class</name></decl>;</decl_stmt>


<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>reg_prev_class</name><argument_list>()</argument_list></call> <operator>==</operator> <name>this_class</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>curc</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>reginput</name> <operator>&gt;</operator> <name>regline</name>
<operator>&amp;&amp;</operator> <call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name><name>reginput</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_EOW</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>==</operator> <name>regline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>this_class</name></decl>, <decl><type ref="prev"/><name>prev_class</name></decl>;</decl_stmt>


<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_class</name> <operator>=</operator> <call><name>reg_prev_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>==</operator> <name>prev_class</name>
<operator>||</operator> <name>prev_class</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>prev_class</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name><name>reginput</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>reginput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>curc</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_BOF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reginput</name> <operator>==</operator> <name>regline</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_EOF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>==</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>&amp;&amp;</operator> <name>curc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_COMPOSING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mc</name> <init>= <expr><name>curc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>sta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cchars</name><index>[<expr><name>MAX_MCO</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ccount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sta</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name><name>sta</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>sta</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>curc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><name><name>sta</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_END_COMPOSING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sta</name> <operator>=</operator> <name><name>sta</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>mc</name> <operator>==</operator> <name><name>sta</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sta</name> <operator>=</operator> <name><name>sta</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>reginput</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cchars</name><index>[<expr><name>ccount</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>mb_char2len</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ccount</name> <operator>==</operator> <name>MAX_MCO</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>




<expr_stmt><expr><name>result</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>sta</name><operator>-&gt;</operator><name>c</name></name> <operator>!=</operator> <name>NFA_END_COMPOSING</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ccount</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>cchars</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>sta</name><operator>-&gt;</operator><name>c</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>ccount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sta</name> <operator>=</operator> <name><name>sta</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_NEWL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <name>REG_MULTI</name>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&lt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>go_to_nextline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curc</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_START_COLL</name></expr>:</case>
<case>case <expr><name>NFA_START_NEG_COLL</name></expr>:</case>
<block>{<block_content>


<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result_if_matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result_if_matched</name> <operator>=</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_COLL</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_END_COLL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><name>result_if_matched</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_RANGE_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"NFA_RANGE_MIN curc=%d c1=%d c2=%d\n"</literal></expr></argument>,
<argument><expr><name>curc</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>&gt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>curc</name> <operator>&lt;=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result_if_matched</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curc_low</name> <init>= <expr><call><name>mb_tolower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c1</name> <operator>&lt;=</operator> <name>c2</name></expr>;</condition> <incr><expr><name>c1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mb_tolower</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>curc_low</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result_if_matched</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>check_char_class</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><operator>(</operator><name>curc</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result_if_matched</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out1</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_ANY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>curc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_ANY_COMPOSING</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><name>NFA_IDENT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_isIDc</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SIDENT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_isIDc</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_KWORD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SKWORD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_FNAME</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SFNAME</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_isfilec</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_PRINT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_SPRINT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_WHITE</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NWHITE</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_DIGIT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_digit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NDIGIT</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_digit</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_HEX</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_hex</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NHEX</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_hex</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_OCTAL</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_octal</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NOCTAL</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_octal</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_WORD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_word</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NWORD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_word</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_HEAD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_head</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NHEAD</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_head</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_ALPHA</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_alpha</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NALPHA</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_alpha</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_LOWER</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NLOWER</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_UPPER</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NUPPER</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_LOWER_IC</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NLOWER_IC</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_UPPER_IC</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_NUPPER_IC</name></expr>:</case> 
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>curc</name> <operator>!=</operator> <name>NUL</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ri_upper</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <call><name>ri_lower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NFA_BACKREF1</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF2</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF3</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF4</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF5</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF6</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF7</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF8</name></expr>:</case>
<case>case <expr><name>NFA_BACKREF9</name></expr>:</case>
<case>case <expr><name>NFA_ZREF1</name></expr>:</case>
<case>case <expr><name>NFA_ZREF2</name></expr>:</case>
<case>case <expr><name>NFA_ZREF3</name></expr>:</case>
<case>case <expr><name>NFA_ZREF4</name></expr>:</case>
<case>case <expr><name>NFA_ZREF5</name></expr>:</case>
<case>case <expr><name>NFA_ZREF6</name></expr>:</case>
<case>case <expr><name>NFA_ZREF7</name></expr>:</case>
<case>case <expr><name>NFA_ZREF8</name></expr>:</case>
<case>case <expr><name>NFA_ZREF9</name></expr>:</case>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>subidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bytelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name>NFA_BACKREF9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_BACKREF1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>match_backref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><name>subidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>subidx</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_ZREF1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>match_zref</name><argument_list>(<argument><expr><name>subidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytelen</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>bytelen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_count</name> <operator>=</operator> <name>bytelen</name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>NFA_SKIP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>clen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>add_count</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_LNUM</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_GT</name></expr>:</case>
<case>case <expr><name>NFA_LNUM_LT</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&gt;</operator> <name>LONG_MAX</name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&lt;</operator> <name>LONG_MIN</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>REG_MULTI</name>
<operator>&amp;&amp;</operator> <call><name>nfa_re_num_cmp</name><argument_list>(<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_LNUM</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_COL</name></expr>:</case>
<case>case <expr><name>NFA_COL_GT</name></expr>:</case>
<case>case <expr><name>NFA_COL_LT</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>reginput</name> <operator>&gt;=</operator> <name>regline</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>&lt;=</operator> <name>UINTMAX_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nfa_re_num_cmp</name><argument_list>(<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name></expr></argument>,
<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_COL</name></expr></argument>,
<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_VCOL</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_GT</name></expr>:</case>
<case>case <expr><name>NFA_VCOL_LT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <name>NFA_VCOL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>has_mbyte</name></expr> ?</condition><then> <expr><name>MB_MAXBYTES</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><ternary><condition><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ts</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_buffer</name><operator>-&gt;</operator><name>b_p_ts</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>col</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>*</operator> <name>ts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>lts</name> <init>= <expr><call><name>win_linetabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>regline</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>nfa_re_num_cmp</name><argument_list>(<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lts</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>NFA_MARK</name></expr>:</case>
<case>case <expr><name>NFA_MARK_GT</name></expr>:</case>
<case>case <expr><name>NFA_MARK_LT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><call><name>getmark_buf</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>!=</operator> <name>NULL</name> 
<operator>&amp;&amp;</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> 
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MARK</name></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>
?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MARK_GT</name></expr>
</then><else>: <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MARK_LT</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>
?</condition><then> <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MARK_GT</name></expr>
</then><else>: <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_MARK_LT</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>NFA_CURSOR</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>==</operator> <name><name>rex</name><operator>.</operator><name>reg_win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator>
<operator>==</operator> <name><name>rex</name><operator>.</operator><name>reg_win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_VISUAL</name></expr>:</case>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>reg_match_visual</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add_here</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>add_state</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>out</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NFA_MOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_MOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN1</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN2</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN3</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN4</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN5</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN6</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN7</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN8</name></expr>:</case>
<case>case <expr><name>NFA_ZOPEN9</name></expr>:</case>
<case>case <expr><name>NFA_NOPEN</name></expr>:</case>
<case>case <expr><name>NFA_ZSTART</name></expr>:</case>


<break>break;</break>

<default>default:</default> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>IEMSGN</name><argument_list>(<argument><expr><literal type="string">"INTERNAL: Negative state char: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <name>curc</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>curc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ADD_STATE_IF_MATCH</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch> 

<if_stmt><if>if <condition>(<expr><name>add_state</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>nfa_pim_T</name> <modifier>*</modifier></type><name>pim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_pim_T</name></type> <name>pim_copy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>pim</name><operator>.</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pim</name> <operator>=</operator> <operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>pim</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>clen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>match_follows</name><argument_list>(<argument><expr><name>add_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pim</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_TODO</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"==================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"Postponed recursive nfa_regmatch()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>recursive_regmatch</name><argument_list>(<argument><expr><name><name>pim</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>submatch</name></expr></argument>, <argument><expr><name>m</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>listids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listids_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pim</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><name>NFA_PIM_MATCH</name></expr> </then><else>: <expr><name>NFA_PIM_NOMATCH</name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>(</operator><name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG_FIRST</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pim</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pim</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>pim</name><operator>-&gt;</operator><name>result</name></name> <operator>==</operator> <name>NFA_PIM_MATCH</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(
<argument><expr><name>log_fd</name></expr></argument>,
<argument><expr><literal type="string">"Using previous recursive nfa_regmatch() result, result == %d\n"</literal></expr></argument>,
<argument><expr><name><name>pim</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"MATCH = %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>(</operator><name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name> <operator>==</operator> <name>NFA_START_INVISIBLE_NEG_FIRST</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG</name>
<operator>||</operator> <name><name>pim</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>c</name></name>
<operator>==</operator> <name>NFA_START_INVISIBLE_BEFORE_NEG_FIRST</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pim</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nfa_has_zsubexpr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>copy_sub_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pim</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>pim</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>pim</name> <operator>==</operator> <operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>pim</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_pim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pim_copy</name></expr></argument>, <argument><expr><name>pim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pim</name> <operator>=</operator> <operator>&amp;</operator><name>pim_copy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_here</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>addstate_here</name><argument_list>(<argument><expr><name>thislist</name></expr></argument>, <argument><expr><name>add_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>addstate</name><argument_list>(<argument><expr><name>nextlist</name></expr></argument>, <argument><expr><name>add_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>subs</name></name></expr></argument>, <argument><expr><name>pim</name></expr></argument>, <argument><expr><name>add_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>add_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nextlist</name><operator>-&gt;</operator><name>t</name><index>[<expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>add_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 









<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nfa_match</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>toplevel</name>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>clen</name> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>&lt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>nfa_endp</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>REG_MULTI</name></expr>
?</condition><then> <expr><operator>(</operator><name>reglnum</name> <operator>&lt;</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <operator>(</operator><name>reglnum</name> <operator>==</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator>
<operator>&lt;</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><name>reginput</name> <operator>&lt;</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>ptr</name></name></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"(---) STARTSTATE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name>toplevel</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>add</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>clen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nextlist</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>+</operator> <name>clen</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>skip_to_start</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">" Skipping ahead %d bytes to regstart\n"</literal></expr></argument>,
<argument><expr><name>col</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>+</operator> <name>clen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>reginput</name> <operator>+</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>,
<argument><expr><literal type="string">" Skipping start state, regstart does not match\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>add</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start_col</name> <operator>=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>+</operator> <name>clen</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>reginput</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>addstate</name><argument_list>(<argument><expr><name>nextlist</name></expr></argument>, <argument><expr><name><name>start</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>addstate</name><argument_list>(<argument><expr><name>nextlist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_match</name> <operator>=</operator> <name>NFA_TOO_EXPENSIVE</name></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt; Thislist had %d states available: "</literal></expr></argument>, <argument><expr><name><name>thislist</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>thislist</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>thislist</name><operator>-&gt;</operator><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>state</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>nextchar</name>:</label>


<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>go_to_nextline</name> <operator>||</operator> <operator>(</operator><name>nfa_endp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>REG_MULTI</name>
<operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&lt;</operator> <name><name>nfa_endp</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nfa_time_limit</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>nfa_time_count</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_time_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>nfa_did_time_out</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>log_fd</name> <operator>!=</operator> <name>stderr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>log_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>log_fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>theend</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>listids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_STATE_IF_MATCH</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NFA_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>nfa_match</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>long</name></type> <name>nfa_regtry</name><parameter_list>(<parameter><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsubs_T</name></type> <name>subs</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nfa_state_T</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_time_limit</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_timed_out</name> <operator>=</operator> <name>timed_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_time_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_RUN_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
<argument><expr><literal type="string">"\n\n\t=======================================================\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\tRegexp is \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\tInput text is \"%s\" \n"</literal></expr></argument>, <argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\t=======================================================\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfa_print_state</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><literal type="string">"Could not open temporary log file for writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>clear_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subs</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>.</operator><name>norm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>subs</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>.</operator><name>synt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>nfa_regmatch</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>in_use</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_col</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>in_use</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>subs</name><operator>.</operator><name>norm</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>==</operator> <name>REX_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <call><name>make_extmatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>subs</name><operator>.</operator><name>synt</name><operator>.</operator><name>in_use</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>multipos</name></name> <modifier>*</modifier></type><name>mpos</name> <init>= <expr><operator>&amp;</operator><name><name>subs</name><operator>.</operator><name>synt</name><operator>.</operator><name>list</name><operator>.</operator><name>multi</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mpos</name><operator>-&gt;</operator><name>start_lnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>mpos</name><operator>-&gt;</operator><name>start_lnum</name></name> <operator>==</operator> <name><name>mpos</name><operator>-&gt;</operator><name>end_lnum</name></name>
<operator>&amp;&amp;</operator> <name><name>mpos</name><operator>-&gt;</operator><name>end_col</name></name> <operator>&gt;=</operator> <name><name>mpos</name><operator>-&gt;</operator><name>start_col</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>re_extmatch_out</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vim_strnsave</name><argument_list>(<argument><expr><call><name>reg_getline</name><argument_list>(<argument><expr><name><name>mpos</name><operator>-&gt;</operator><name>start_lnum</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>mpos</name><operator>-&gt;</operator><name>start_col</name></name></expr></argument>,
<argument><expr><name><name>mpos</name><operator>-&gt;</operator><name>end_col</name></name> <operator>-</operator> <name><name>mpos</name><operator>-&gt;</operator><name>start_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linepos</name></name> <modifier>*</modifier></type><name>lpos</name> <init>= <expr><operator>&amp;</operator><name><name>subs</name><operator>.</operator><name>synt</name><operator>.</operator><name>list</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lpos</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>lpos</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>re_extmatch_out</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>lpos</name><operator>-&gt;</operator><name>start</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>lpos</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>lpos</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>reglnum</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>long</name></type> <name>nfa_regexec_both</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>startcol</name></decl></parameter>,
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><name>startcol</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>regprog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>regprog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>startp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_ICASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_NOICASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_ICOMBINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regline</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>nfa_has_zend</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>has_zend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_has_backref</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>has_backref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_nsubexpr</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>nsubexp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_listid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_alt_listid</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>pattern</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need_clear_subexpr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>==</operator> <name>REX_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nfa_has_zsubexpr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_clear_zsubexpr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nfa_has_zsubexpr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>skip_to_start</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>match_text</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>find_match_text</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>match_text</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nstate</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>nstate</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstate</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lastlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lastlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>nfa_regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>theend</name>:</label>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>regprog_T</name> <modifier>*</modifier></type><name>nfa_regcomp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>nfa_regprog_T</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>postfix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nfa_re_flags</name> <operator>=</operator> <name>re_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_class_tab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nfa_regcomp_start</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>postfix</name> <operator>=</operator> <call><name>re2post</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>postfix</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto> 
</block_content>}</block></if></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>NFA_REGEXP_RUN_LOG</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
<argument><expr><literal type="string">"\n*****************************\n\n\n\n\t"</literal>
<literal type="string">"Compiling regexp \"%s\"... hold on !\n"</literal></expr></argument>,
<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>post2nfa</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>, <argument><expr><name>post_ptr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>prog_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>nfa_regprog_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nfa_state_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nstate</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>prog_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state_ptr</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>post2nfa</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>, <argument><expr><name>post_ptr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>=</operator> <name>regflags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>engine</name></name> <operator>=</operator> <operator>&amp;</operator><name>nfa_regengine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>nstate</name></name> <operator>=</operator> <name>nstate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>has_zend</name></name> <operator>=</operator> <name>nfa_has_zend</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>has_backref</name></name> <operator>=</operator> <name>nfa_has_backref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>nsubexp</name></name> <operator>=</operator> <name>regnpar</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nfa_postprocess</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name> <operator>=</operator> <call><name>nfa_get_reganch</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <call><name>nfa_get_regstart</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>match_text</name></name> <operator>=</operator> <call><name>nfa_get_match_text</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nfa_postfix_dump</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nfa_dump</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>=</operator> <name>re_has_z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>post_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>post_start</name> <operator>=</operator> <name>post_ptr</name> <operator>=</operator> <name>post_end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>state_ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>regprog_T</name> <operator>*</operator><operator>)</operator><name>prog</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nfa_postfix_dump</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>nfa_regfree</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name>prog</name><operator>)</operator><operator>-&gt;</operator><name>match_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name>prog</name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> 
<name>nfa_regexec_nl</name> <parameter_list>(
<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>line_lbr</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>line_lbr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rm_ic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>nfa_regexec_both</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




































<function><type><specifier>static</specifier> <name>long</name></type> <name>nfa_regexec_multi</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_ic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_maxcol</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>nfa_regexec_both</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
