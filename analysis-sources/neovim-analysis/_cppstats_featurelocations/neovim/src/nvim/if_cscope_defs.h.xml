<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\if_cscope_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_IF_CSCOPE_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_IF_CSCOPE_DEFS_H</name></cpp:macro></cpp:define>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fs_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSCOPE_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSCOPE_FAILURE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSCOPE_DBFILE</name></cpp:macro> <cpp:value>"cscope.out"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSCOPE_PROMPT</name></cpp:macro> <cpp:value>"&gt;&gt; "</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>exarg_T</name> <modifier>*</modifier></type><name>eap</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cansplit</name></decl>;</decl_stmt> 
}</block></struct></type> <name>cscmd_T</name>;</typedef>

<typedef>typedef <type><struct>struct <name>csi</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>fname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ppath</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>flags</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>DWORD</name></type> <name>pid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DWORD</name></type> <name>nVolume</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DWORD</name></type> <name>nIndexHigh</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DWORD</name></type> <name>nIndexLow</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>FileID</name></type> <name>file_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>fr_fp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>to_fp</name></decl>;</decl_stmt> 
}</block></struct></type> <name>csinfo_T</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>Add</name></decl>, <decl><name>Find</name></decl>, <decl><name>Help</name></decl>, <decl><name>Kill</name></decl>, <decl><name>Reset</name></decl>, <decl><name>Show</name></decl> }</block></enum></type> <name>csid_e</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>Store</name></decl>,
<decl><name>Get</name></decl>,
<decl><name>Free</name></decl>,
<decl><name>Print</name></decl>
}</block></enum></type> <name>mcmd_e</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
