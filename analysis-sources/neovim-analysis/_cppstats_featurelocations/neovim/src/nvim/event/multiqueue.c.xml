<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\multiqueue.c">














































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/multiqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/time.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>multiqueue_item</name></name></type> <name>MultiQueueItem</name>;</typedef>
<struct>struct <name>multiqueue_item</name> <block>{
<union>union <block>{
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>Event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>parent_item</name></decl>;</decl_stmt>
}</block> <decl><name>item</name></decl>;</struct>
}</block> <decl><name>data</name></decl>;</union>
<decl_stmt><decl><type><name>bool</name></type> <name>link</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>QUEUE</name></type> <name>node</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>multiqueue</name> <block>{
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QUEUE</name></type> <name>headtail</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>put_callback</name></type> <name>put_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Event</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>MulticastEvent</name>;</typedef> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/multiqueue.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>Event</name></type> <name>NILEVENT</name> <init>= <expr><block>{ <expr><operator>.</operator><name>handler</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>argv</name> <operator>=</operator> <block>{<expr><name>NULL</name></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>MultiQueue</name> <modifier>*</modifier></type><name>multiqueue_new_parent</name><parameter_list>(<parameter><decl><type><name>put_callback</name></type> <name>put_cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>multiqueue_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>put_cb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MultiQueue</name> <modifier>*</modifier></type><name>multiqueue_new_child</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>multiqueue_new</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MultiQueue</name> <modifier>*</modifier></type><name>multiqueue_new</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>put_callback</name></type> <name>put_cb</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultiQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>put_cb</name></name> <operator>=</operator> <name>put_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>multiqueue_free</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>multiqueue_node_data</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Event</name></type> <name>multiqueue_get</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NILEVENT</name></expr> </then><else>: <expr><call><name>multiqueue_remove</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>multiqueue_put_event</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multiqueue_push</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>put_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>put_cb</name></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>multiqueue_process_events</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Event</name></type> <name>event</name> <init>= <expr><call><name>multiqueue_remove</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>event</name><operator>.</operator><name>handler</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>multiqueue_purge_events</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>multiqueue_remove</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>multiqueue_empty</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>multiqueue_replace_parent</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>new_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>new_parent</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>multiqueue_size</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>Event</name></type> <name>multiqueueitem_get_event</name><parameter_list>(<parameter><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Event</name></type> <name>ev</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>link</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>linked</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>linked</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>child</name> <init>=
<expr><call><name>multiqueue_node_data</name><argument_list>(<argument><expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>linked</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>event</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remove</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>remove</name> <operator>&amp;&amp;</operator> <name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ev</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>event</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Event</name></type> <name>multiqueue_remove</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>multiqueue_empty</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>QUEUE_HEAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>QUEUE_REMOVE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>multiqueue_node_data</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>link</name></name> <operator>||</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>Event</name></type> <name>ev</name> <init>= <expr><call><name>multiqueueitem_get_event</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ev</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>multiqueue_push</name><parameter_list>(<parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MultiQueueItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultiQueueItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MultiQueueItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>headtail</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>item</name><operator>.</operator><name>parent_item</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MultiQueueItem</name> <modifier>*</modifier></type><name>multiqueue_node_data</name><parameter_list>(<parameter><decl><type><name>QUEUE</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>QUEUE_DATA</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>MultiQueueItem</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><name>Event</name></type> <name>event_create_oneshot</name><parameter_list>(<parameter><decl><type><name>Event</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MulticastEvent</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <name>ev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<return>return <expr><call><name>event_create</name><argument_list>(<argument><expr><name>multiqueue_oneshot_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>multiqueue_oneshot_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MulticastEvent</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>fired</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>fired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handler</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>handler</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>event</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>--</operator><name><name>data</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
