<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\process.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_EVENT_PROCESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_EVENT_PROCESS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kProcessTypeUv</name></decl>,
<decl><name>kProcessTypePty</name></decl>
}</block></enum></type> <name>ProcessType</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>process</name></name></type> <name>Process</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>process_exit_cb</name>)<parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>internal_process_cb</name>)<parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>process</name> <block>{
<decl_stmt><decl><type><name>ProcessType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>status</name></decl>, <decl><type ref="prev"/><name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exit_signal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>stopped_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stream</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>out</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>process_exit_cb</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>internal_process_cb</name></type> <name>internal_exit_cb</name></decl>, <decl><type ref="prev"/><name>internal_close_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>, <decl><type ref="prev"/><name>detach</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Process</name></type> <name>process_init</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ProcessType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>Process</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>,
<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>,
<expr><operator>.</operator><name>loop</name> <operator>=</operator> <name>loop</name></expr>,
<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>refcount</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>stopped_time</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>cwd</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>argv</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>in</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>false</name></expr> }</block></expr>,
<expr><operator>.</operator><name>out</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>false</name></expr> }</block></expr>,
<expr><operator>.</operator><name>err</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>false</name></expr> }</block></expr>,
<expr><operator>.</operator><name>cb</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>closed</name> <operator>=</operator> <name>false</name></expr>,
<expr><operator>.</operator><name>internal_close_cb</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>internal_exit_cb</name> <operator>=</operator> <name>NULL</name></expr>,
<expr><operator>.</operator><name>detach</name> <operator>=</operator> <name>false</name></expr>
}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>process_is_stopped</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>exited</name> <init>= <expr><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>exited</name> <operator>||</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/process.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
