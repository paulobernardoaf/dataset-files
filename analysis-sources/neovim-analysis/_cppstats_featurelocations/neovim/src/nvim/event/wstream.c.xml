<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\wstream.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAXMEM</name></cpp:macro> <cpp:value>1024 * 1024 * 2000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uv_write_t</name></type> <name>uv_req</name></decl>;</decl_stmt>
}</block></struct></type> <name>WRequest</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/wstream.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>wstream_init_fd</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxmem</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_init</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>maxmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>wstream_init_stream</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>uvstream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxmem</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>uvstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_init</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>maxmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>wstream_init</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxmem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>maxmem</name></name> <operator>=</operator> <ternary><condition><expr><name>maxmem</name></expr> ?</condition><then> <expr><name>maxmem</name></expr> </then><else>: <expr><name>DEFAULT_MAXMEM</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><name>void</name></type> <name>wstream_set_write_cb</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>stream_write_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1<operator>,</operator> 2</function>)
<block>{<block_content>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block>








<function><type><name>bool</name></type> <name>wstream_write</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>maxmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>curmem</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>maxmem</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>curmem</name></name> <operator>+=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>WRequest</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WRequest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uv_req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uv_buf_t</name></type> <name>uvbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>uvbuf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>UV_BUF_LEN</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>uv_req</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>uvstream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uvbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>write_cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

<label><name>err</name>:</label>
<expr_stmt><expr><call><name>wstream_release_wbuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>WBuffer</name> <modifier>*</modifier></type><name>wstream_new_buffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>refcount</name></decl></parameter>,
<parameter><decl><type><name>wbuffer_data_finalizer</name></type> <name>cb</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <name>refcount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_cb</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WRequest</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>curmem</name></name> <operator>-=</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wstream_release_wbuffer</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>write_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>write_cb</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>pending_reqs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stream_close_handle</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wstream_release_wbuffer</name><parameter_list>(<parameter><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>buffer</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
