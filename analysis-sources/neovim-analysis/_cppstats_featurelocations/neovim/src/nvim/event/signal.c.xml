<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\signal.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/signal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/signal.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>signal_watcher_init</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>) <macro><name>FUNC_ATTR_NONNULL_ARG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>watcher</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name><name>loop</name><operator>-&gt;</operator><name>fast_events</name></name></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>signal_watcher_start</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>signal_cb</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>signal_watcher_cb</name></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_watcher_stop</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>uv_signal_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>signal_watcher_close</name><parameter_list>(<parameter><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>signal_close_cb</name></type> <name>cb</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>watcher</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>watcher</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>signum</name></name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_watcher_cb</name><parameter_list>(<parameter><decl><type><name>uv_signal_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>signal_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SignalWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>watcher</name><operator>-&gt;</operator><name>close_cb</name></name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
