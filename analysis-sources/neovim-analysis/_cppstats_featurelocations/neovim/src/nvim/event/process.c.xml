<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\process.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/shell.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/libuv_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/globals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/process.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KILL_TIMEOUT_MS</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>__gcov_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>process_is_tearing_down</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>process_spawn</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>err</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GCOV</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>__gcov_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kProcessTypeUv</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>libuv_process_spawn</name><argument_list>(<argument><expr><operator>(</operator><name>LibuvProcess</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kProcessTypePty</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>pty_process_spawn</name><argument_list>(<argument><expr><operator>(</operator><name>PtyProcess</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypeUv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>LibuvProcess</name> <operator>*</operator><operator>)</operator><name>proc</name><operator>)</operator><operator>-&gt;</operator><name>uv</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>process_close</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>shell_free_argv</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>internal_data</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>on_process_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>internal_data</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>on_process_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stream_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>internal_data</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>on_process_stream_close</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>internal_exit_cb</name></name> <operator>=</operator> <name>on_process_exit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name> <operator>=</operator> <name>decref</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kl_push</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"new: pid=%d argv=[%s]"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>proc</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_teardown</name><parameter_list>(<parameter><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><name>process_is_tearing_down</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<macro><name>kl_iter</name><argument_list>(<argument>WatcherPtr</argument>, <argument>loop-&gt;children</argument>, <argument>current</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>detach</name></name> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>process_close_handles</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>process_stop</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>


<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(
<argument><expr><name>loop</name></expr></argument>, <argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>kl_empty</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>multiqueue_empty</name><argument_list>(<argument><expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pty_process_teardown</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>process_close_streams</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_may_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>process_wait</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>events</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>events</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>,

<argument><expr><name>got_int</name> 
<operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_stop</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decref</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block>


<function><type><name>void</name></type> <name>process_stop</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>exited</name> <init>= <expr><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exited</name> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name> <operator>=</operator> <call><name>os_hrtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name> <operator>=</operator> <name>SIGTERM</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kProcessTypeUv</name></expr>:</case>
<expr_stmt><expr><call><name>os_proc_tree_kill</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kProcessTypePty</name></expr>:</case>

<expr_stmt><expr><call><name>process_close_streams</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pty_process_close_master</name><argument_list>(<argument><expr><operator>(</operator><name>PtyProcess</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>children_kill_timer</name></name></expr></argument>, <argument><expr><name>children_kill_cb</name></expr></argument>,
<argument><expr><name>KILL_TIMEOUT_MS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>children_kill_cb</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<macro><name>kl_iter</name><argument_list>(<argument>WatcherPtr</argument>, <argument>loop-&gt;children</argument>, <argument>current</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exited</name> <init>= <expr><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exited</name> <operator>||</operator> <operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>term_sent</name> <init>= <expr><name>UINT64_MAX</name> <operator>==</operator> <name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>kProcessTypePty</name> <operator>!=</operator> <name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>||</operator> <name>term_sent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name> <operator>=</operator> <name>SIGKILL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_proc_tree_kill</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name> <operator>=</operator> <name>SIGTERM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>os_proc_tree_kill</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>children_kill_timer</name></name></expr></argument>, <argument><expr><name>children_kill_cb</name></expr></argument>,
<argument><expr><name>KILL_TIMEOUT_MS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_close_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>shell_free_argv</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PtyProcess</name> <operator>*</operator><operator>)</operator><name>proc</name><operator>)</operator><operator>-&gt;</operator><name>term_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>cb</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decref</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>proc</name><operator>-&gt;</operator><name>refcount</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kliter_t</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>*</operator><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<macro><name>kl_iter</name><argument_list>(<argument>WatcherPtr</argument>, <argument>loop-&gt;children</argument>, <argument>current</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>current</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>proc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kl_shift_at</name><argument_list>(<argument><expr><name>WatcherPtr</name></expr></argument>, <argument><expr><name><name>loop</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>process_close_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_close</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>process_is_tearing_down</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>detach</name></name> <operator>||</operator> <name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypePty</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>proc</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>


<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>detach</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kProcessTypeUv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>LibuvProcess</name> <operator>*</operator><operator>)</operator><name>proc</name><operator>)</operator><operator>-&gt;</operator><name>uv</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kProcessTypeUv</name></expr>:</case>
<expr_stmt><expr><call><name>libuv_process_close</name><argument_list>(<argument><expr><operator>(</operator><name>LibuvProcess</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>kProcessTypePty</name></expr>:</case>
<expr_stmt><expr><call><name>pty_process_close</name><argument_list>(<argument><expr><operator>(</operator><name>PtyProcess</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>





<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_stream</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>system_buffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>uv_recv_buffer_size</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>system_buffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>system_buffer_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>max_bytes</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>num_bytes</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>system_buffer_size</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>num_bytes</name></name> <operator>&lt;</operator> <name>max_bytes</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_bytes</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>num_bytes</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>loop_poll_events</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>events</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_process_events</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bytes</name> <operator>==</operator> <name><name>stream</name><operator>-&gt;</operator><name>num_bytes</name></name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>did_eof</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>read_cb</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_close_handles</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush_stream</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_stream</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_close_streams</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_close</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_process_exit</name><parameter_list>(<parameter><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Loop</name> <modifier>*</modifier></type><name>loop</name> <init>= <expr><name><name>proc</name><operator>-&gt;</operator><name>loop</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ILOG</name><argument_list>(<argument><expr><literal type="string">"exited: pid=%d status=%d stoptime=%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>,
<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>stopped_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>queue</name> <init>= <expr><ternary><condition><expr><name><name>proc</name><operator>-&gt;</operator><name>events</name></name></expr> ?</condition><then> <expr><name><name>proc</name><operator>-&gt;</operator><name>events</name></name></expr> </then><else>: <expr><name><name>loop</name><operator>-&gt;</operator><name>events</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>process_close_handles</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_process_stream_close</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decref</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
