<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\socket.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_EVENT_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_EVENT_SOCKET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESS_MAX_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>socket_watcher</name></name></type> <name>SocketWatcher</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>socket_cb</name>)<parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>socket_close_cb</name>)<parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>socket_watcher</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>ADDRESS_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>uv_tcp_t</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
}</block> <decl><name>tcp</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>uv_pipe_t</name></type> <name>handle</name></decl>;</decl_stmt>
}</block> <decl><name>pipe</name></decl>;</struct>
}</block> <decl><name>uv</name></decl>;</union>
<decl_stmt><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socket_cb</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socket_close_cb</name></type> <name>close_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/socket.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
