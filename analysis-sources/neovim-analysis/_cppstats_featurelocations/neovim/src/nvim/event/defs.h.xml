<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_EVENT_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_EVENT_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_HANDLER_MAX_ARGC</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>argv_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>message</name> <block>{
<decl_stmt><decl><type><name>argv_callback</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>EVENT_HANDLER_MAX_ARGC</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>Event</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>event_scheduler</name>)<parameter_list>(<parameter><decl><type><name>Event</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VA_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { assert(a &lt;= EVENT_HANDLER_MAX_ARGC); (event)-&gt;handler = h; if (a) { va_list args; va_start(args, a); for (int i = 0; i &lt; a; i++) { (event)-&gt;argv[i] = va_arg(args, void *); } va_end(args); } } while (0)</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Event</name></type> <name>event_create</name><parameter_list>(<parameter><decl><type><name>argv_callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>argc</name> <operator>&lt;=</operator> <name>EVENT_HANDLER_MAX_ARGC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Event</name></type> <name>event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VA_EVENT_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>event</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
