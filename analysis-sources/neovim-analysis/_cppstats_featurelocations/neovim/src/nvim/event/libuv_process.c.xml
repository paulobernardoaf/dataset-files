<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\event\libuv_process.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/libuv_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/libuv_process.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type> <name>libuv_process_spawn</name><parameter_list>(<parameter><decl><type><name>LibuvProcess</name> <modifier>*</modifier></type><name>uvproc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>(</operator><name>Process</name> <operator>*</operator><operator>)</operator><name>uvproc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>argv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>UV_PROCESS_WINDOWS_HIDE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>os_shell_is_cmdexe</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>detach</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UV_PROCESS_DETACHED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>UV_PROCESS_DETACHED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>exit_cb</name></name> <operator>=</operator> <name>exit_cb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>cwd</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>cwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>env</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>stdio</name></name> <operator>=</operator> <name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name><operator>.</operator><name>stdio_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_IGNORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_CREATE_PIPE</name> <operator>|</operator> <name>UV_READABLE_PIPE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>UV_OVERLAPPED_PIPE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_CREATE_PIPE</name> <operator>|</operator> <name>UV_WRITABLE_PIPE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>UV_READABLE_PIPE</name> <operator>|</operator> <name>UV_OVERLAPPED_PIPE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>out</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>UV_CREATE_PIPE</name> <operator>|</operator> <name>UV_WRITABLE_PIPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvproc</name><operator>-&gt;</operator><name>uvstdio</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <call><name>STRUCT_CAST</name><argument_list>(<argument><expr><name>uv_stream_t</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>err</name><operator>.</operator><name>uv</name><operator>.</operator><name>pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>uv_spawn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>loop</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvproc</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uvproc</name><operator>-&gt;</operator><name>uvopts</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"uv_spawn failed: %s"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>uvproc</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>pid</name></name></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>libuv_process_close</name><parameter_list>(<parameter><decl><type><name>LibuvProcess</name> <modifier>*</modifier></type><name>uvproc</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>1</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>uvproc</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>, <argument><expr><name>close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_cb</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_close_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_cb</name><parameter_list>(<parameter><decl><type><name>uv_process_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>term_signal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Process</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>term_signal</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>exit_signal</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <ternary><condition><expr><name>term_signal</name></expr> ?</condition><then> <expr><literal type="number">128</literal> <operator>+</operator> <name>term_signal</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>proc</name><operator>-&gt;</operator><name>internal_exit_cb</name></name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
