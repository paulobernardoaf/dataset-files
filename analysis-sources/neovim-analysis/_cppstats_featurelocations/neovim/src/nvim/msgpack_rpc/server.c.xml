<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\msgpack_rpc\server.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONNECTIONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LISTEN_ADDRESS_ENV_VAR</name></cpp:macro> <cpp:value>"NVIM_LISTEN_ADDRESS"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>watchers</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msgpack_rpc/server.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>bool</name></type> <name>server_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>listen_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SocketWatcher</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env_addr</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>LISTEN_ADDRESS_ENV_VAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><ternary><condition><expr><name>listen_addr</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>server_start</name><argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <ternary><condition><expr><name>env_addr</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>server_start</name><argument_list>(<argument><expr><name>env_addr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>rv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>listen_addr</name> <operator>=</operator> <call><name>server_address_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>listen_addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>server_start</name><argument_list>(<argument><expr><name>listen_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>listen_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>close_socket_watcher</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier><modifier>*</modifier></type><name>watcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>socket_watcher_close</name><argument_list>(<argument><expr><operator>*</operator><name>watcher</name></expr></argument>, <argument><expr><name>free_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vservername</name><parameter_list>(<parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>srvs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_server</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>srvs</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>srvs</name><operator>-&gt;</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>-&gt;</operator><name>addr</name></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_vim_var_string</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>, <argument><expr><name>default_server</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>server_teardown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>GA_DEEP_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchers</name></expr></argument>, <argument><expr><name>SocketWatcher</name> <operator>*</operator></expr></argument>, <argument><expr><name>close_socket_watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>char</name> <modifier>*</modifier></type><name>server_address_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>template</name><index>[<expr><name>ADDRESS_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>ADDRESS_MAX_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"\\\\.\\pipe\\nvim-%"</literal> <name>PRIu64</name> <literal type="string">"-%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><call><name>os_get_pid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>vim_tempname</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>server_owns_pipe_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>watchers</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>int</name></type> <name>server_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>endpoint</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>endpoint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"Empty or NULL endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SocketWatcher</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>socket_watcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>watchers</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Already listening on %s"</literal></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>watcher</name><operator>-&gt;</operator><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>UV_TCP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>uv_freeaddrinfo</name><argument_list>(<argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tcp</name><operator>.</operator><name>addrinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>socket_watcher_close</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>free_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>socket_watcher_start</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>MAX_CONNECTIONS</name></expr></argument>, <argument><expr><name>connection_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"Failed to start server: %s: %s"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socket_watcher_close</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>free_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>listen_address</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>LISTEN_ADDRESS_ENV_VAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>listen_address</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_setenv</name><argument_list>(<argument><expr><name>LISTEN_ADDRESS_ENV_VAR</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchers</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>watchers</name><operator>.</operator><name>ga_len</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>watcher</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vservername</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>server_stop</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>endpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>watcher_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>ADDRESS_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>watchers</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>watcher</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>watcher</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>watcher_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>watcher_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"Not listening on %s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>listen_address</name> <init>= <expr><call><name>os_getenv</name><argument_list>(<argument><expr><name>LISTEN_ADDRESS_ENV_VAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>listen_address</name> <operator>&amp;&amp;</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>listen_address</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_unsetenv</name><argument_list>(<argument><expr><name>LISTEN_ADDRESS_ENV_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>socket_watcher_close</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>, <argument><expr><name>free_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>watchers</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name><name>watchers</name><operator>.</operator><name>ga_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>watchers</name><operator>.</operator><name>ga_len</name></name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>get_vim_var_str</name><argument_list>(<argument><expr><name>VV_SEND_SERVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_vservername</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>server_address_list</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_len</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>addrs</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>watchers</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SocketWatcher</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>watchers</name><operator>.</operator><name>ga_data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>-&gt;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>addrs</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connection_cb</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ELOG</name><argument_list>(<argument><expr><literal type="string">"Failed to accept connection: %s"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_from_connection</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_server</name><parameter_list>(<parameter><decl><type><name>SocketWatcher</name> <modifier>*</modifier></type><name>watcher</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>watcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
