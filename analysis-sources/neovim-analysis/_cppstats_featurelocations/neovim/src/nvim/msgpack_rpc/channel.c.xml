<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\msgpack_rpc\channel.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/libuv_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/rstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/wstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os_unix.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_LOG_LEVEL</name> <operator>&gt;</operator> <name>DEBUG_LOG_LEVEL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_client_msg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log_server_msg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <call><name>PMap</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>event_strings</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>msgpack_sbuffer</name></type> <name>out_buffer</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msgpack_rpc/channel.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>rpc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>ch_before_blocking_events</name> <operator>=</operator> <call><name>multiqueue_new_child</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>event_strings</name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rpc_start</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>is_rpc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RpcState</name> <modifier>*</modifier></type><name>rpc</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>rpc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>unpacker</name></name> <operator>=</operator> <call><name>msgpack_unpacker_new</name><argument_list>(<argument><expr><name>MSGPACK_UNPACKER_INIT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>subscribed_events</name></name> <operator>=</operator> <call><call><name>pmap_new</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>next_request_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rpc</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <operator>(</operator><name>Dictionary</name><operator>)</operator><name>ARRAY_DICT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_init</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>!=</operator> <name>kChannelStreamInternal</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>channel_outstream</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_LOG_LEVEL</name> <operator>&lt;=</operator> <name>DEBUG_LOG_LEVEL</name></expr></cpp:if>
<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>channel_instream</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"rpc ch %"</literal> <name>PRIu64</name> <literal type="string">" in-stream=%p out-stream=%p"</literal></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rstream_start</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>receive_msgpack</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Channel</name> <modifier>*</modifier></type><name>find_rpc_channel</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>find_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chan</name> <operator>||</operator> <operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name> <operator>||</operator> <name><name>chan</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>chan</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>bool</name></type> <name>rpc_send_event</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>channel</name> <operator>=</operator> <call><name>find_rpc_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>send_event</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>broadcast_event</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>Object</name></type> <name>rpc_send_call</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method_name</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>channel</name> <operator>=</operator> <call><name>find_rpc_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel: %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>RpcState</name> <modifier>*</modifier></type><name>rpc</name> <init>= <expr><operator>&amp;</operator><name><name>channel</name><operator>-&gt;</operator><name>rpc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>request_id</name> <init>= <expr><name><name>rpc</name><operator>-&gt;</operator><name>next_request_id</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>send_request</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr><name>method_name</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ChannelCallFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><name>request_id</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>NIL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>call_stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOOP_PROCESS_EVENTS_UNTIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>main_loop</name></expr></argument>, <argument><expr><name><name>channel</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>returned</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name><name>rpc</name><operator>-&gt;</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>.</operator><name>errored</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>.</operator><name>result</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>.</operator><name>result</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeArray</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><name><name>frame</name><operator>.</operator><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>kObjectTypeInteger</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>kErrorTypeException</name>
<operator>||</operator> <name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name> <operator>==</operator> <name>kErrorTypeValidation</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>(</operator><name>ErrorType</name><operator>)</operator><name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
<argument><expr><name><name>array</name><operator>.</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name><name>frame</name><operator>.</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>frame</name><operator>.</operator><name>errored</name></name></expr> ?</condition><then> <expr><name>NIL</name></expr> </then><else>: <expr><name><name>frame</name><operator>.</operator><name>result</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rpc_subscribe</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>channel</name> <operator>=</operator> <call><name>find_rpc_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>event_string</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>event_strings</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event_string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>event_string</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>pmap_put</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name>event_strings</name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>pmap_put</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>subscribed_events</name></name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rpc_unsubscribe</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>channel</name> <operator>=</operator> <call><name>find_rpc_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unsubscribe</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>receive_msgpack</name><parameter_list>(<parameter><decl><type><name>Stream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>rbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_close</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>kChannelPartRpc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ch %"</literal> <name>PRIu64</name> <literal type="string">" was closed by the client"</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_set_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WARN_LOG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>rbuffer_size</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"ch %"</literal> <name>PRIu64</name> <literal type="string">": parsing %zu bytes from msgpack Stream: %p"</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>msgpack_unpacker_reserve_buffer</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><call><name>msgpack_unpacker_buffer</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_unpacker_buffer_consumed</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_msgpack</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_msgpack</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_unpacked</name></type> <name>unpacked</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_unpacked_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>msgpack_unpack_return</name></type> <name>result</name></decl>;</decl_stmt>


<while>while <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>msgpack_unpacker_next</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>MSGPACK_UNPACK_SUCCESS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_response</name> <init>= <expr><call><name>is_rpc_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log_client_msg</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>!</operator><name>is_response</name></expr></argument>, <argument><expr><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_response</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_valid_rpc_response</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>complete_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ch %"</literal> <name>PRIu64</name> <literal type="string">" returned a response with an unknown request "</literal>
<literal type="string">"id. Ensure the client is properly synchronized"</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_set_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ERROR_LOG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>msgpack_unpacked_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>handle_request</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>MSGPACK_UNPACK_NOMEM_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><name>e_outofmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>preserve_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>MSGPACK_UNPACK_PARSE_ERROR</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>send_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>kMessageTypeRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Invalid msgpack payload. "</literal>
<literal type="string">"This error can also happen when deserializing "</literal>
<literal type="string">"an object with high level of nesting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_request</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>request_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>error</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MessageType</name></type> <name>type</name> <init>= <expr><call><name>msgpack_rpc_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>request_id</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>channel_write</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
<argument><expr><call><name>serialize_response</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>request_id</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>NIL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ch %"</literal> <name>PRIu64</name> <literal type="string">" sent an invalid message, closed."</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_set_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ERROR_LOG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>kMessageTypeRequest</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>kMessageTypeNotification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><call><name>msgpack_rpc_method</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name>msgpack_rpc_get_handler_for</name><argument_list>(<argument><expr><name><name>method</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>ptr</name></name></expr></argument>,
<argument><expr><name><name>method</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>size</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>msgpack_rpc_to_array</name><argument_list>(<argument><expr><call><name>msgpack_rpc_args</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"Invalid method arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>send_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RequestEvent</name> <modifier>*</modifier></type><name>evdata</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RequestEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>evdata</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evdata</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evdata</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evdata</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>evdata</name><operator>-&gt;</operator><name>request_id</name></name> <operator>=</operator> <name>request_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handler</name><operator>.</operator><name>fast</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_get_mode</name> <init>= <expr><name><name>handler</name><operator>.</operator><name>fn</name></name> <operator>==</operator> <name>handle_nvim_get_mode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_get_mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>input_blocking</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name>ch_before_blocking_events</name></expr></argument>, <argument><expr><name>request_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>evdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>request_event</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>evdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>is_resize</name> <init>= <expr><name><name>handler</name><operator>.</operator><name>fn</name></name> <operator>==</operator> <name>handle_nvim_ui_try_resize</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>is_resize</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Event</name></type> <name>ev</name> <init>= <expr><call><name>event_create_oneshot</name><argument_list>(<argument><expr><call><name>event_create</name><argument_list>(<argument><expr><name>request_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>evdata</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>multiqueue_put_event</name><argument_list>(<argument><expr><name>resize_events</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>request_event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>evdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLOG</name><argument_list>(<argument><expr><literal type="string">"RPC: scheduled %.*s"</literal></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>method</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>request_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RequestEvent</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>channel</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>handler</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>handler</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Error</name></type> <name>error</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><call><name><name>handler</name><operator>.</operator><name>fn</name></name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>kMessageTypeRequest</name> <operator>||</operator> <call><name>ERROR_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>msgpack_packer</name></type> <name>response</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_packer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>response</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>, <argument><expr><name>msgpack_sbuffer_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_write</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><call><name>serialize_response</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
<argument><expr><name><name>e</name><operator>-&gt;</operator><name>request_id</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><name>result</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>channel_write</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wstream_release_wbuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>==</operator> <name>kChannelStreamInternal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>channel_incref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CREATE_EVENT</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>internal_read_event</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>Stream</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>channel_instream</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>wstream_write</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ch %"</literal> <name>PRIu64</name> <literal type="string">": stream write failed. "</literal>
<literal type="string">"RPC canceled; closing channel"</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_set_error</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ERROR_LOG_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>internal_read_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msgpack_unpacker_reserve_buffer</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>msgpack_unpacker_buffer</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_unpacker_buffer_consumed</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_msgpack</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>wstream_release_wbuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_error</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>MessageType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Error</name></type> <name>e</name> <init>= <expr><name>ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_write</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><call><name>serialize_response</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>id</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>,
<argument><expr><name>NIL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_request</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>method</name> <init>= <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>channel_write</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><call><name>serialize_request</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><name>id</name></expr></argument>,
<argument><expr><name>method</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_event</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>method</name> <init>= <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>channel_write</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><call><name>serialize_request</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>method</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>broadcast_event</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>kvec_t</name><argument_list>(<argument>Channel *</argument>)</argument_list></macro> <expr_stmt><expr><name>subscribed</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>

<macro><name>map_foreach_value</name><argument_list>(<argument>channels</argument>, <argument>channel</argument>, <argument>{
if (channel-&gt;is_rpc
&amp;&amp; pmap_has(cstr_t)(channel-&gt;rpc.subscribed_events, name)) {
kv_push(subscribed, channel);
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>subscribed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>String</name></type> <name>method</name> <init>= <expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>serialize_request</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>method</name></expr></argument>,
<argument><expr><name>args</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>out_buffer</name></expr></argument>,
<argument><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>subscribed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>subscribed</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>subscribed</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>channel_write</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>end</name>:</label>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>subscribed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unsubscribe</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>event_string</name> <init>= <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>event_strings</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>event_string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WLOG</name><argument_list>(<argument><expr><literal type="string">"RPC: ch %"</literal> <name>PRIu64</name> <literal type="string">": tried to unsubscribe unknown event '%s'"</literal></expr></argument>,
<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<function_decl><type><name>pmap_del</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>subscribed_events</name></name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>map_foreach_value</name><argument_list>(<argument>channels</argument>, <argument>channel</argument>, <argument>{
if (channel-&gt;is_rpc
&amp;&amp; pmap_has(cstr_t)(channel-&gt;rpc.subscribed_events, event_string)) {
return;
}
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<function_decl><type><name>pmap_del</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name>event_strings</name></type></decl></parameter>, <parameter><decl><type><name>event_string</name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>event_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>rpc_close</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>closed</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_decref</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>streamtype</name></name> <operator>==</operator> <name>kChannelStreamStdio</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>multiqueue_put</name><argument_list>(<argument><expr><name><name>main_loop</name><operator>.</operator><name>fast_events</name></name></expr></argument>, <argument><expr><name>exit_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_event</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exiting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>os_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rpc_free</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>remote_ui_disconnect</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_unpacker_free</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>unpacker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>event_string</name></decl>;</decl_stmt>
<macro><name>map_foreach_value</name><argument_list>(<argument>channel-&gt;rpc.subscribed_events</argument>, <argument>event_string</argument>, <argument>{
unsubscribe(channel, event_string);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>pmap_free</name></type>(<name>cstr_t</name>)<parameter_list>(<parameter><decl><type><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>subscribed_events</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_rpc_response</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_ARRAY</name>
<operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal>
<operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>MSGPACK_OBJECT_POSITIVE_INTEGER</name>
<operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>via</name><operator>.</operator><name>u64</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>MSGPACK_OBJECT_POSITIVE_INTEGER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid_rpc_response</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>response_id</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>via</name><operator>.</operator><name>u64</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ChannelCallFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>response_id</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>request_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>complete_call</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ChannelCallFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>returned</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>errored</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>MSGPACK_OBJECT_NIL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>errored</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_to_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_to_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>call_set_error</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loglevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"RPC: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ChannelCallFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>call_stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>returned</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>errored</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>channel_close</name><argument_list>(<argument><expr><name><name>channel</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>kChannelPartRpc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WBuffer</name> <modifier>*</modifier></type><name>serialize_request</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>request_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>String</name></type> <name>method</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name>msgpack_sbuffer</name> <modifier>*</modifier></type><name>sbuffer</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>refcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_packer</name></type> <name>pac</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_packer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pac</name></expr></argument>, <argument><expr><name>sbuffer</name></expr></argument>, <argument><expr><name>msgpack_sbuffer_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_serialize_request</name><argument_list>(<argument><expr><name>request_id</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_server_msg</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>sbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>wstream_new_buffer</name><argument_list>(<argument><expr><call><name>xmemdup</name><argument_list>(<argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>refcount</name></expr></argument>,
<argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_sbuffer_clear</name><argument_list>(<argument><expr><name>sbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WBuffer</name> <modifier>*</modifier></type><name>serialize_response</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,
<parameter><decl><type><name>MessageType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>response_id</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><name>Object</name></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>msgpack_sbuffer</name> <modifier>*</modifier></type><name>sbuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_packer</name></type> <name>pac</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_packer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pac</name></expr></argument>, <argument><expr><name>sbuffer</name></expr></argument>, <argument><expr><name>msgpack_sbuffer_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>kMessageTypeNotification</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>args</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_serialize_request</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><literal type="string">"nvim_error_event"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_serialize_response</name><argument_list>(<argument><expr><name>response_id</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>log_server_msg</name><argument_list>(<argument><expr><name>channel_id</name></expr></argument>, <argument><expr><name>sbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>WBuffer</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>wstream_new_buffer</name><argument_list>(<argument><expr><call><name>xmemdup</name><argument_list>(<argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>sbuffer</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, 
<argument><expr><name>xfree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_sbuffer_clear</name><argument_list>(<argument><expr><name>sbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_object</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rpc_set_client_info</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Dictionary</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><call><name>find_rpc_channel</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chan</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>api_free_dictionary</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>channel_info_changed</name><argument_list>(<argument><expr><name>chan</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Dictionary</name></type> <name>rpc_client_info</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>copy_dictionary</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpc_client_name</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>is_rpc</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name> <init>= <expr><name><name>chan</name><operator>-&gt;</operator><name>rpc</name><operator>.</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strequal</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>kObjectTypeString</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>info</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>data</name><operator>.</operator><name>string</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIN_LOG_LEVEL</name> <operator>&lt;=</operator> <name>DEBUG_LOG_LEVEL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ</name></cpp:macro> <cpp:value>"[request] "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RES</name></cpp:macro> <cpp:value>"[response] "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT</name></cpp:macro> <cpp:value>"[notify] "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name></cpp:macro> <cpp:value>"[error] "</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUR_OFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>msgpack_error_messages</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>MSGPACK_UNPACK_EXTRA_BYTES</name> <operator>+</operator> <name>MUR_OFF</name></expr>]</index> <operator>=</operator> <literal type="string">"extra bytes found"</literal></expr>,
<expr><index>[<expr><name>MSGPACK_UNPACK_CONTINUE</name> <operator>+</operator> <name>MUR_OFF</name></expr>]</index> <operator>=</operator> <literal type="string">"incomplete string"</literal></expr>,
<expr><index>[<expr><name>MSGPACK_UNPACK_PARSE_ERROR</name> <operator>+</operator> <name>MUR_OFF</name></expr>]</index> <operator>=</operator> <literal type="string">"parse error"</literal></expr>,
<expr><index>[<expr><name>MSGPACK_UNPACK_NOMEM_ERROR</name> <operator>+</operator> <name>MUR_OFF</name></expr>]</index> <operator>=</operator> <literal type="string">"not enough memory"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_server_msg</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,
<parameter><decl><type><name>msgpack_sbuffer</name> <modifier>*</modifier></type><name>packed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_unpacked</name></type> <name>unpacked</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msgpack_unpacked_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DLOGN</name><argument_list>(<argument><expr><literal type="string">"RPC -&gt;ch %"</literal> <name>PRIu64</name> <literal type="string">": "</literal></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>msgpack_unpack_return</name></type> <name>result</name> <init>=
<expr><call><name>msgpack_unpack_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>, <argument><expr><name><name>packed</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>packed</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MSGPACK_UNPACK_SUCCESS</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>type</name> <init>= <expr><name><name>unpacked</name><operator>.</operator><name>data</name><operator>.</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>via</name><operator>.</operator><name>u64</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>RES</name></expr> </then><else>: <expr><name>NOT</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>REQ</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_msg_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>unpacked</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_unpacked_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_UNPACK_EXTRA_BYTES</name></expr>:</case>
<case>case <expr><name>MSGPACK_UNPACK_CONTINUE</name></expr>:</case>
<case>case <expr><name>MSGPACK_UNPACK_PARSE_ERROR</name></expr>:</case>
<case>case <expr><name>MSGPACK_UNPACK_NOMEM_ERROR</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>log_msg_close</name><argument_list>(<argument>f</argument>, <argument>(msgpack_object) {
.type = MSGPACK_OBJECT_STR</argument>,
<argument>.via.str = {
.ptr = (char *)msgpack_error_messages[result + MUR_OFF]</argument>,
<argument>.size = (uint32_t)strlen(
msgpack_error_messages[result + MUR_OFF])</argument>,
<argument>}</argument>,
<argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_client_msg</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_id</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>is_request</name></decl></parameter>,
<parameter><decl><type><name>msgpack_object</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DLOGN</name><argument_list>(<argument><expr><literal type="string">"RPC &lt;-ch %"</literal> <name>PRIu64</name> <literal type="string">": "</literal></expr></argument>, <argument><expr><name>channel_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>open_log_file</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_request</name></expr> ?</condition><then> <expr><name>REQ</name></expr> </then><else>: <expr><name>RES</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_msg_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_msg_close</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>msgpack_object</name></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_object_print</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
