<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\msgpack_rpc\helpers.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/lib/kvec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msgpack_rpc/helpers.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>msgpack_zone</name></type> <name>zone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>msgpack_sbuffer</name></type> <name>sbuffer</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_TYPE_CONVERSION_IMPL</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>lt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static bool msgpack_rpc_to_##lt(const msgpack_object *const obj, Integer *const arg) FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT { if (obj-&gt;type != MSGPACK_OBJECT_EXT || obj-&gt;via.ext.type + EXT_OBJECT_TYPE_SHIFT != kObjectType##t) { return false; } msgpack_object data; msgpack_unpack_return ret = msgpack_unpack(obj-&gt;via.ext.ptr, obj-&gt;via.ext.size, NULL, &amp;zone, &amp;data); if (ret != MSGPACK_UNPACK_SUCCESS) { return false; } *arg = (handle_T)data.via.i64; return true; } static void msgpack_rpc_from_##lt(Integer o, msgpack_packer *res) FUNC_ATTR_NONNULL_ARG(2) { msgpack_packer pac; msgpack_packer_init(&amp;pac, &amp;sbuffer, msgpack_sbuffer_write); msgpack_pack_int64(&amp;pac, (handle_T)o); msgpack_pack_ext(res, sbuffer.size, kObjectType##t - EXT_OBJECT_TYPE_SHIFT); msgpack_pack_ext_body(res, sbuffer.data, sbuffer.size); msgpack_sbuffer_clear(&amp;sbuffer); }</cpp:value></cpp:define>




































<function><type><name>void</name></type> <name>msgpack_rpc_helpers_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_zone_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>, <argument><expr><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_sbuffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>HANDLE_TYPE_CONVERSION_IMPL</name><argument_list>(<argument>Buffer</argument>, <argument>buffer</argument>)</argument_list></macro>
<macro><name>HANDLE_TYPE_CONVERSION_IMPL</name><argument_list>(<argument>Window</argument>, <argument>window</argument>)</argument_list></macro>
<macro><name>HANDLE_TYPE_CONVERSION_IMPL</name><argument_list>(<argument>Tabpage</argument>, <argument>tabpage</argument>)</argument_list></macro>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier></type><name>mobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name> <modifier>*</modifier></type><name>aobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>MPToAPIObjectStackItem</name>;</typedef>







<function><type><name>bool</name></type> <name>msgpack_rpc_to_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>Object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>MPToAPIObjectStackItem</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((MPToAPIObjectStackItem) {
.mobj = obj,
.aobj = arg,
.container = false,
.idx = <literal type="number">0</literal>,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>MPToAPIObjectStackItem</name></type> <name>cur</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MSGPACK_OBJECT_NIL</name></expr>:</case> <block>{<block_content>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_OBJECT_BOOLEAN</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_OBJECT_NEGATIVE_INTEGER</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Integer</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Msgpack integer size does not match API integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_OBJECT_POSITIVE_INTEGER</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Integer</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Msgpack integer size does not match API integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>u64</name></name> <operator>&gt;</operator> <name>API_INTEGER_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MSGPACK_HAS_FLOAT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT32</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT64</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Float</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Msgpack floating-point size does not match API integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <call><name>FLOAT_OBJ</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>f64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_CASE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>attr</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>, <parameter><type><name>conv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case type: { dest = conv(((String) { .size = obj-&gt;via.attr.size, .data = (obj-&gt;via.attr.ptr == NULL || obj-&gt;via.attr.size == 0 ? xmemdupz("", 0) : xmemdupz(obj-&gt;via.attr.ptr, obj-&gt;via.attr.size)), })); break; }</cpp:value></cpp:define>









<macro><name>STR_CASE</name><argument_list>(<argument>MSGPACK_OBJECT_STR</argument>, <argument>str</argument>, <argument>cur.mobj</argument>, <argument>*cur.aobj</argument>, <argument>STRING_OBJ</argument>)</argument_list></macro>
<macro><name>STR_CASE</name><argument_list>(<argument>MSGPACK_OBJECT_BIN</argument>, <argument>bin</argument>, <argument>cur.mobj</argument>, <argument>*cur.aobj</argument>, <argument>STRING_OBJ</argument>)</argument_list></macro>
<case>case <expr><name>MSGPACK_OBJECT_ARRAY</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((MPToAPIObjectStackItem) {
.mobj = &amp;cur.mobj-&gt;via.array.ptr[idx],
.aobj = &amp;cur.aobj-&gt;data.array.items[idx],
.container = false,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <macro><name>ARRAY_OBJ</name><argument_list>(<argument>((Array) {
.size = size,
.capacity = size,
.items = (size &gt; <literal type="number">0</literal>
? xcalloc(size, sizeof(*cur.aobj-&gt;data.array.items))
: NULL),
})</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_OBJECT_MAP</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>ptr</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>key</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<macro><name>STR_CASE</name><argument_list>(<argument>MSGPACK_OBJECT_STR</argument>, <argument>str</argument>, <argument>key</argument>,
<argument>cur.aobj-&gt;data.dictionary.items[idx].key</argument>, <argument>ID</argument>)</argument_list></macro>
<macro><name>STR_CASE</name><argument_list>(<argument>MSGPACK_OBJECT_BIN</argument>, <argument>bin</argument>, <argument>key</argument>,
<argument>cur.aobj-&gt;data.dictionary.items[idx].key</argument>, <argument>ID</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ID</name></cpp:undef>
<case>case <expr><name>MSGPACK_OBJECT_NIL</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_BOOLEAN</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_POSITIVE_INTEGER</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_NEGATIVE_INTEGER</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MSGPACK_HAS_FLOAT32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT32</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT64</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>MSGPACK_OBJECT_FLOAT</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>MSGPACK_OBJECT_EXT</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_MAP</name></expr>:</case>
<case>case <expr><name>MSGPACK_OBJECT_ARRAY</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((MPToAPIObjectStackItem) {
.mobj = &amp;cur.mobj-&gt;via.map.ptr[idx].val,
.aobj = &amp;cur.aobj-&gt;data.dictionary.items[idx].value,
.container = false,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>cur</name><operator>.</operator><name>aobj</name></name> <operator>=</operator> <macro><name>DICTIONARY_OBJ</name><argument_list>(<argument>((Dictionary) {
.size = size,
.capacity = size,
.items = (size &gt; <literal type="number">0</literal>
? xcalloc(size, sizeof(*cur.aobj-&gt;data.dictionary.items))
: NULL),
})</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>MSGPACK_OBJECT_EXT</name></expr>:</case> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name>ObjectType</name><operator>)</operator><operator>(</operator><name><name>cur</name><operator>.</operator><name>mobj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>ext</name><operator>.</operator><name>type</name></name> <operator>+</operator> <name>EXT_OBJECT_TYPE_SHIFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeBuffer</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>msgpack_rpc_to_buffer</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeWindow</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeWindow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>msgpack_rpc_to_window</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeTabpage</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>kObjectTypeTabpage</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>msgpack_rpc_to_tabpage</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>mobj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeNil</name></expr>:</case>
<case>case <expr><name>kObjectTypeBoolean</name></expr>:</case>
<case>case <expr><name>kObjectTypeInteger</name></expr>:</case>
<case>case <expr><name>kObjectTypeFloat</name></expr>:</case>
<case>case <expr><name>kObjectTypeString</name></expr>:</case>
<case>case <expr><name>kObjectTypeArray</name></expr>:</case>
<case>case <expr><name>kObjectTypeDictionary</name></expr>:</case>
<case>case <expr><name>kObjectTypeLuaRef</name></expr>:</case> <block>{<block_content>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STR_CASE</name></cpp:undef>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>msgpack_rpc_to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>obj</name></decl></parameter>,
<parameter><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_BIN</name> <operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_STR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>bin</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msgpack_rpc_to_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>Array</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MSGPACK_OBJECT_ARRAY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msgpack_rpc_to_object</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>msgpack_rpc_to_dictionary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>msgpack_object</name> <modifier>*</modifier><specifier>const</specifier></type> <name>obj</name></decl></parameter>,
<parameter><decl><type><name>Dictionary</name> <modifier>*</modifier><specifier>const</specifier></type> <name>arg</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MSGPACK_OBJECT_MAP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KeyValuePair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msgpack_rpc_to_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msgpack_rpc_to_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>map</name><operator>.</operator><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>msgpack_rpc_from_boolean</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_true</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_false</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>msgpack_rpc_from_integer</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_int64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>msgpack_rpc_from_float</name><parameter_list>(<parameter><decl><type><name>Float</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_double</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>msgpack_rpc_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_str</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_str_body</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Object</name> <modifier>*</modifier></type><name>aobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>container</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>APIToMPObjectStackItem</name>;</typedef>







<function><type><name>void</name></type> <name>msgpack_rpc_from_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Object</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<macro><name>kvec_t</name><argument_list>(<argument>APIToMPObjectStackItem</argument>)</argument_list></macro> <expr_stmt><expr><name>stack</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((APIToMPObjectStackItem) { &amp;result, false, <literal type="number">0</literal> })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<while>while <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>APIToMPObjectStackItem</name></type> <name>cur</name> <init>= <expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>kObjectTypeWindow</name> <operator>==</operator> <name>kObjectTypeBuffer</name> <operator>+</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name>kObjectTypeTabpage</name> <operator>==</operator> <name>kObjectTypeWindow</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"Buffer, window and tabpage enum items are in order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kObjectTypeNil</name></expr>:</case>
<case>case <expr><name>kObjectTypeLuaRef</name></expr>:</case> <block>{<block_content>



<expr_stmt><expr><call><name>msgpack_pack_nil</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeBoolean</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_boolean</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>boolean</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeInteger</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_integer</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeFloat</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_float</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>floating</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeString</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_string</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeBuffer</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_buffer</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeWindow</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_window</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeTabpage</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_tabpage</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>integer</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeArray</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((APIToMPObjectStackItem) {
.aobj = &amp;cur.aobj-&gt;data.array.items[idx],
.container = false,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_array</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>kObjectTypeDictionary</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>idx</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>idx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_string</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>aobj</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>dictionary</name><operator>.</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,
<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>kv_push</name><argument_list>(<argument>stack</argument>, <argument>((APIToMPObjectStackItem) {
.aobj = &amp;cur.aobj-&gt;data.dictionary.items[idx].value,
.container = false,
})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_map</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>container</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_last</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cur</name><operator>.</operator><name>container</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>kv_pop</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type> <name>msgpack_rpc_from_array</name><parameter_list>(<parameter><decl><type><name>Array</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_array</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_object</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>

<function><type><name>void</name></type> <name>msgpack_rpc_from_dictionary</name><parameter_list>(<parameter><decl><type><name>Dictionary</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_map</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_rpc_from_string</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_object</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>


<function><type><name>void</name></type> <name>msgpack_rpc_serialize_request</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>request_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>String</name></type> <name>method</name></decl></parameter>,
<parameter><decl><type><name>Array</name></type> <name>args</name></decl></parameter>,
<parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>pac</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>4</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_array</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><ternary><condition><expr><name>request_id</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_pack_int</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><ternary><condition><expr><name>request_id</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>request_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_uint32</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msgpack_rpc_from_string</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_array</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<function><type><name>void</name></type> <name>msgpack_rpc_serialize_response</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>response_id</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>,
<parameter><decl><type><name>Object</name></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>msgpack_packer</name> <modifier>*</modifier></type><name>pac</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ARG<parameter_list>(</parameter_list>2<operator>,</operator> 4</function>)
<block>{<block_content>
<expr_stmt><expr><call><name>msgpack_pack_array</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_pack_int</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_pack_uint32</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><name>response_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ERROR_SET</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msgpack_pack_array</name><argument_list>(<argument><expr><name>pac</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_integer</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msgpack_rpc_from_string</name><argument_list>(<argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgpack_pack_nil</name><argument_list>(<argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msgpack_pack_nil</name><argument_list>(<argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msgpack_rpc_from_object</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>msgpack_rpc_is_notification</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>via</name><operator>.</operator><name>u64</name></name> <operator>==</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>msgpack_object</name> <modifier>*</modifier></type><name>msgpack_rpc_method</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name></name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>msgpack_rpc_is_notification</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_STR</name> <operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_BIN</name></expr> ?</condition><then>
<expr><name>obj</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>msgpack_object</name> <modifier>*</modifier></type><name>msgpack_rpc_args</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name></name>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>msgpack_rpc_is_notification</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_ARRAY</name></expr> ?</condition><then> <expr><name>obj</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>msgpack_object</name> <modifier>*</modifier></type><name>msgpack_rpc_msg_id</name><parameter_list>(<parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>msgpack_rpc_is_notification</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MSGPACK_OBJECT_POSITIVE_INTEGER</name></expr> ?</condition><then> <expr><name>obj</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>MessageType</name></type> <name>msgpack_rpc_validate</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>response_id</name></decl></parameter>, <parameter><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>response_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MSGPACK_OBJECT_ARRAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Message is not an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMessageTypeUnknown</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Message is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMessageTypeUnknown</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>MSGPACK_OBJECT_POSITIVE_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Message type must be an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMessageTypeUnknown</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MessageType</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>MessageType</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>via</name><operator>.</operator><name>u64</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>kMessageTypeRequest</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>kMessageTypeNotification</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Unknown message type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kMessageTypeUnknown</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>kMessageTypeRequest</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">4</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>kMessageTypeNotification</name> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>array</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>,
<argument><expr><literal type="string">"Request array size must be 4 (request) or 3 (notification)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>kMessageTypeRequest</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>msgpack_object</name> <modifier>*</modifier></type><name>id_obj</name> <init>= <expr><call><name>msgpack_rpc_msg_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>id_obj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"ID must be a positive integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>response_id</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>id_obj</name><operator>-&gt;</operator><name>via</name><operator>.</operator><name>u64</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msgpack_rpc_method</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Method must be a string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>msgpack_rpc_args</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeValidation</name></expr></argument>, <argument><expr><literal type="string">"Parameters must be an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>
</unit>
