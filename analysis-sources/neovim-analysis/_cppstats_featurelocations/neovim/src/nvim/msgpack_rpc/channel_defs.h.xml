<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\msgpack_rpc\channel_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MSGPACK_RPC_CHANNEL_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_MSGPACK_RPC_CHANNEL_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;msgpack.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Channel</name></name></type> <name>Channel</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>request_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>returned</name></decl>, <name>errored</name>;</decl_stmt>
<decl_stmt><decl><type><name>Object</name></type> <name>result</name></decl>;</decl_stmt>
}</block></struct></type> <name>ChannelCallFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>MessageType</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Channel</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MsgpackRpcRequestHandler</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Array</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>request_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>RequestEvent</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><call><name>PMap</name><argument_list>(<argument><expr><name>cstr_t</name></expr></argument>)</argument_list></call> <operator>*</operator><name>subscribed_events</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>msgpack_unpacker</name> <modifier>*</modifier></type><name>unpacker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>next_request_id</name></decl>;</decl_stmt>
<macro><name>kvec_t</name><argument_list>(<argument>ChannelCallFrame *</argument>)</argument_list></macro> <expr_stmt><expr><name>call_stack</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>info</name></decl>;</decl_stmt>
}</block></struct></type> <name>RpcState</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
