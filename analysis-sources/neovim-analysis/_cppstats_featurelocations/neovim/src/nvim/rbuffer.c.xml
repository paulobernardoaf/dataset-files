<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\rbuffer.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/rbuffer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rbuffer.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>RBuffer</name> <modifier>*</modifier></type><name>rbuffer_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>capacity</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>capacity</name> <operator>=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>full_cb</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>nonfull_cb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>start_ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>start_ptr</name></name> <operator>+</operator> <name>capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rbuffer_free</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>rbuffer_size</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>rbuffer_capacity</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>start_ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>rbuffer_space</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<return>return <expr><call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type><name>rbuffer_write_ptr</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>write_count</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>write_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>write_count</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>write_count</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rbuffer_reset</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>temp_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>temp_size</name> <operator>=</operator> <call><name>rbuffer_size</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>temp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>temp</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rbuffer_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>start_ptr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rbuffer_write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>temp</name></name></expr></argument>, <argument><expr><name>temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rbuffer_produced</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;=</operator> <call><name>rbuffer_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>-=</operator> <call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>full_cb</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rbuffer_space</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>buf</name><operator>-&gt;</operator><name>full_cb</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><name>char</name> <modifier>*</modifier></type><name>rbuffer_read_ptr</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>read_count</name></decl></parameter>)</parameter_list> FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>read_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>read_count</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>write_ptr</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>read_count</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>rbuffer_consumed</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-=</operator> <call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>was_full</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>nonfull_cb</name></name> <operator>&amp;&amp;</operator> <name>was_full</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>buf</name><operator>-&gt;</operator><name>nonfull_cb</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>size_t</name></type> <name>rbuffer_write</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>src_size</name></expr></init></decl>;</decl_stmt>

<macro><name>RBUFFER_UNTIL_FULL</name><argument_list>(<argument>buf</argument>, <argument>wptr</argument>, <argument>wcnt</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>copy_count</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>wcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rbuffer_produced</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src_size</name> <operator>-=</operator> <name>copy_count</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>copy_count</name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>size</name> <operator>-</operator> <name>src_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>rbuffer_read</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name>dst_size</name></expr></init></decl>;</decl_stmt>

<macro><name>RBUFFER_UNTIL_EMPTY</name><argument_list>(<argument>buf</argument>, <argument>rptr</argument>, <argument>rcnt</argument>)</argument_list></macro> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>copy_count</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>dst_size</name></expr></argument>, <argument><expr><name>rcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>rptr</name></expr></argument>, <argument><expr><name>copy_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rbuffer_consumed</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst_size</name> <operator>-=</operator> <name>copy_count</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>copy_count</name></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>size</name> <operator>-</operator> <name>dst_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>rbuffer_get</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rptr</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+</operator> <name>index</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rptr</name> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>end_ptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rptr</name> <operator>-=</operator> <call><name>rbuffer_capacity</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rbuffer_cmp</name><parameter_list>(<parameter><decl><type><name>RBuffer</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rcnt</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rbuffer_read_ptr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>rcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>rcnt</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>||</operator> <operator>!</operator><name>count</name> <operator>||</operator> <operator>!</operator><name>remaining</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>start_ptr</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
