<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\syntax_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_SYNTAX_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_SYNTAX_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SST_MIN_ENTRIES</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SST_MAX_ENTRIES</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SST_FIX_STATES</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SST_DIST</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SST_INVALID</name></cpp:macro> <cpp:value>(synstate_T *)-1</cpp:value></cpp:define> 

<typedef>typedef <type><name><name>struct</name> <name>syn_state</name></name></type> <name>synstate_T</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp_defs.h"</cpp:file></cpp:include>


<struct>struct <name>sp_syn</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>inc_tag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cont_in_list</name></decl>;</decl_stmt> 
}</block>;</struct>




<typedef>typedef <type><name><name>struct</name> <name>keyentry</name></name></type> <name>keyentry_T</name>;</typedef>

<struct>struct <name>keyentry</name> <block>{
<decl_stmt><decl><type><name>keyentry_T</name> <modifier>*</modifier></type><name>ke_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>sp_syn</name></name></type> <name>k_syn</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>next_list</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k_char</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name></type> <name><name>keyword</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>




<typedef>typedef <type><struct>struct <name>buf_state</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bs_idx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bs_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bs_seqnr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bs_cchar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>bs_extmatch</name></decl>;</decl_stmt> 
}</block></struct></type> <name>bufstate_T</name>;</typedef>





<struct>struct <name>syn_state</name> <block>{
<decl_stmt><decl><type><name>synstate_T</name> <modifier>*</modifier></type><name>sst_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>sst_lnum</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>bufstate_T</name></type> <name><name>sst_stack</name><index>[<expr><name>SST_FIX_STATES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>garray_T</name></type> <name>sst_ga</name></decl>;</decl_stmt> 
}</block> <decl><name>sst_union</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>sst_next_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>sst_stacksize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sst_next_list</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>disptick_T</name></type> <name>sst_tick</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>sst_change_lnum</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
