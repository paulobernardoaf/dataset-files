<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\highlight.c">




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/highlight_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/popupmnu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/syntax.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/helpers.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"highlight.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>hlstate_active</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>kvec_t</name><argument_list>(<argument>HlEntry</argument>)</argument_list></macro> <name>attr_entries</name> <operator>=</operator> <name>KV_INITIAL_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>*</operator><name>attr_entry_ids</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>*</operator><name>combine_attr_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>*</operator><name>blend_attr_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>Map</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>*</operator><name>blendthrough_attr_entries</name></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>highlight_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>attr_entry_ids</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>combine_attr_entries</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blend_attr_entries</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blendthrough_attr_entries</name> <operator>=</operator> <call><call><name>map_new</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>


<macro><name>kv_push</name><argument_list>(<argument>attr_entries</argument>, <argument>((HlEntry){ .attr = HLATTRS_INIT, .kind = kHlUnknown,
.id1 = <literal type="number">0</literal>, .id2 = <literal type="number">0</literal> })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>highlight_use_hlstate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hlstate_active</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hlstate_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_hl_tables</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>get_attr_entry</name><parameter_list>(<parameter><decl><type><name>HlEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hlstate_active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kHlUnknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>id1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>id2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>attr_entry_ids</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>recursive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_TYPENR</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>recursive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E424: Too many different highlighting attributes in use"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_hl_tables</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>recursive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name>kHlCombine</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kv_push</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>attr_entry_ids</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Array</name></type> <name>inspect</name> <init>= <expr><call><name>hl_inspect</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>ui_call_hl_attr_define</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ui_send_all_hls</name><parameter_list>(<parameter><decl><type><name>UI</name> <modifier>*</modifier></type><name>ui</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>hl_attr_define</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>inspect</name> <init>= <expr><call><name>hl_inspect</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>hl_attr_define</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><operator>(</operator><name>Integer</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>attr</name></expr></argument>,
<argument><expr><call><name>kv_A</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>attr</name></expr></argument>, <argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>api_free_array</name><argument_list>(<argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ui</name><operator>-&gt;</operator><name>hl_group_set</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>hlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <name>HLF_COUNT</name></expr>;</condition> <incr><expr><name>hlf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>hl_group_set</name></name><argument_list>(<argument><expr><name>ui</name></expr></argument>, <argument><expr><call><name>cstr_as_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>hlf_names</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>highlight_attr</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hl_get_syn_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>HlAttrs</name></type> <name>at_en</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>at_en</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>at_en</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>at_en</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>at_en</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
<operator>||</operator> <name><name>at_en</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>at_en</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>!=</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>at_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){ .attr = at_en</argument>, <argument>.kind = kHlSyntax</argument>,
<argument>.id1 = idx</argument>, <argument>.id2 = <literal type="number">0</literal> }</argument>)</argument_list></macro>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>hl_get_ui_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>final_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>optional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>attrs</name> <init>= <expr><name>HLATTRS_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>available</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>final_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>syn_attr</name> <init>= <expr><call><name>syn_id2attr</name><argument_list>(<argument><expr><name>final_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>syn_attr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>syn_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>available</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HLF_PNI</name> <operator>&lt;=</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;=</operator> <name>HLF_PST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>hl_blend</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>p_pb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>hl_blend</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_pb</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pum_drawn</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>must_redraw_pum</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name>HLF_MSG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>msg_grid</name><operator>.</operator><name>blending</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>hl_blend</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optional</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>available</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){ .attr = attrs</argument>, <argument>.kind = kHlUI</argument>,
<argument>.id1 = idx</argument>, <argument>.id2 = final_id }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>update_window_hl</name><parameter_list>(<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invalid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_hl_needs_update</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>invalid</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_needs_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>has_blend</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>float_win</name> <init>= <expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wp</name><operator>-&gt;</operator><name>w_float_config</name><operator>.</operator><name>external</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>HLF_INACTIVE</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <call><name>hl_get_ui_attr</name><argument_list>(<argument><expr><name>HLF_INACTIVE</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>HLF_INACTIVE</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>!</operator><name>has_blend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>float_win</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>HLF_NFLOAT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <call><name>hl_get_ui_attr</name><argument_list>(<argument><expr><name>HLF_NFLOAT</name></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>HLF_NFLOAT</name></expr>]</index></name></expr></argument>, <argument><expr><operator>!</operator><name>has_blend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_id_normal</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <call><name>hl_get_ui_attr</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_id_normal</name></name></expr></argument>, <argument><expr><operator>!</operator><name>has_blend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <ternary><condition><expr><name>float_win</name></expr> ?</condition><then> <expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_NFLOAT</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_floating</name></name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_p_winbl</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HlEntry</name></type> <name>entry</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>attr</name><operator>.</operator><name>hl_blend</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>attr</name><operator>.</operator><name>hl_blend</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wp</name><operator>-&gt;</operator><name>w_p_winbl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <call><name>get_attr_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>curwin</name> <operator>&amp;&amp;</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>HLF_INACTIVE</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name> <operator>=</operator> <call><name>hl_combine_attr</name><argument_list>(<argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_INACTIVE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attr_normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>hlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hlf</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>HLF_COUNT</name></expr>;</condition> <incr><expr><name>hlf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>hl_get_ui_attr</name><argument_list>(<argument><expr><name>hlf</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_ids</name><index>[<expr><name>hlf</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>HL_ATTR</name><argument_list>(<argument><expr><name>hlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>w_hl_attrs</name><index>[<expr><name>hlf</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hl_get_underline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){
.attr = (HlAttrs){
.cterm_ae_attr = (int16_t)HL_UNDERLINE</argument>,
<argument>.cterm_fg_color = <literal type="number">0</literal></argument>,
<argument>.cterm_bg_color = <literal type="number">0</literal></argument>,
<argument>.rgb_ae_attr = (int16_t)HL_UNDERLINE</argument>,
<argument>.rgb_fg_color = -<literal type="number">1</literal></argument>,
<argument>.rgb_bg_color = -<literal type="number">1</literal></argument>,
<argument>.rgb_sp_color = -<literal type="number">1</literal></argument>,
<argument>.hl_blend = -<literal type="number">1</literal></argument>,
<argument>}</argument>,
<argument>.kind = kHlUI</argument>,
<argument>.id1 = <literal type="number">0</literal></argument>,
<argument>.id2 = <literal type="number">0</literal></argument>,
<argument>}</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>hl_get_term_attr</name><parameter_list>(<parameter><decl><type><name>HlAttrs</name> <modifier>*</modifier></type><name>aep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){ .attr= *aep</argument>, <argument>.kind = kHlTerminal</argument>,
<argument>.id1 = <literal type="number">0</literal></argument>, <argument>.id2 = <literal type="number">0</literal> }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clear_hl_tables</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>reinit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reinit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>attr_entry_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>combine_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blend_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blendthrough_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>highlight_attr_last</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>highlight_attr_last</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>highlight_attr_set_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>screen_invalidate_highlights</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>kv_destroy</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>HlEntry</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>attr_entry_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>combine_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blend_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_free</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blendthrough_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hl_invalidate_blends</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blend_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><call><name>map_clear</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>blendthrough_attr_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>highlight_changed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_window_hl</name><argument_list>(<argument><expr><name>curwin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>hl_combine_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>char_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prim_attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>char_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>prim_attr</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prim_attr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>char_attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>combine_tag</name> <init>= <expr><operator>(</operator><name>char_attr</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>prim_attr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>combine_attr_entries</name></expr></argument>, <argument><expr><name>combine_tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>char_aep</name> <init>= <expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>char_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>spell_aep</name> <init>= <expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>prim_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>HlAttrs</name></type> <name>new_en</name> <init>= <expr><name>char_aep</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>&amp;</operator> <name>HL_NOCOMBINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>cterm_ae_attr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>cterm_ae_attr</name></name> <operator>|=</operator> <name><name>spell_aep</name><operator>.</operator><name>cterm_ae_attr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_NOCOMBINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>|=</operator> <name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>cterm_fg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>HL_FG_INDEXED</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_FG_INDEXED</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>cterm_bg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>HL_BG_INDEXED</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_BG_INDEXED</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>rgb_fg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>HL_FG_INDEXED</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_FG_INDEXED</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>rgb_bg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>HL_BG_INDEXED</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>spell_aep</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_BG_INDEXED</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>rgb_sp_color</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spell_aep</name><operator>.</operator><name>hl_blend</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_en</name><operator>.</operator><name>hl_blend</name></name> <operator>=</operator> <name><name>spell_aep</name><operator>.</operator><name>hl_blend</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){ .attr = new_en</argument>, <argument>.kind = kHlCombine</argument>,
<argument>.id1 = char_attr</argument>, <argument>.id2 = prim_attr }</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>combine_attr_entries</name></expr></argument>, <argument><expr><name>combine_tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>HlAttrs</name></type> <name>get_colors_force</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>attrs</name> <init>= <expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <name>normal_bg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <name>normal_fg</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <name>normal_sp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>HL_SET_DEFAULT_COLORS</name><argument_list>(<argument><expr><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr></argument>, <argument><expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>,
<argument><expr><name><name>attrs</name><operator>.</operator><name>rgb_sp_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HL_INVERSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>attrs</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>hl_blend_attrs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>back_attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>front_attr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>through</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>fattrs</name> <init>= <expr><call><name>get_colors_force</name><argument_list>(<argument><expr><name>front_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ratio</name> <init>= <expr><name><name>fattrs</name><operator>.</operator><name>hl_blend</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>through</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<return>return <expr><name>front_attr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>combine_tag</name> <init>= <expr><operator>(</operator><name>back_attr</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>front_attr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Map</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>*</operator><name>map</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>through</name></expr>
?</condition><then> <expr><name>blendthrough_attr_entries</name></expr>
</then><else>: <expr><name>blend_attr_entries</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><call><name>map_get</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>combine_tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HlAttrs</name></type> <name>battrs</name> <init>= <expr><call><name>get_colors_force</name><argument_list>(<argument><expr><name>back_attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HlAttrs</name></type> <name>cattrs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>through</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cattrs</name> <operator>=</operator> <name>battrs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cattrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_UNDERLINE</name><operator>|</operator><name>HL_UNDERCURL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>rgb_sp_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>=</operator> <name><name>fattrs</name><operator>.</operator><name>cterm_bg_color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>=</operator> <call><name>cterm_blend</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>cterm_fg_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>cterm_bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HL_FG_INDEXED</name> <operator>|</operator> <name>HL_BG_INDEXED</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cattrs</name> <operator>=</operator> <name>fattrs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>&gt;=</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>|=</operator> <name><name>battrs</name><operator>.</operator><name>rgb_ae_attr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>=</operator> <call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>rgb_fg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cattrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;</operator> <operator>(</operator><name>HL_UNDERLINE</name><operator>|</operator><name>HL_UNDERCURL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>rgb_sp_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_ae_attr</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HL_BG_INDEXED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>=</operator> <call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><name><name>battrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>,
<argument><expr><name><name>fattrs</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cattrs</name><operator>.</operator><name>hl_blend</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>HlKind</name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><operator>*</operator><name>through</name></expr> ?</condition><then> <expr><name>kHlBlendThrough</name></expr> </then><else>: <expr><name>kHlBlend</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <macro><name>get_attr_entry</name><argument_list>(<argument>(HlEntry){ .attr = cattrs</argument>, <argument>.kind = kind</argument>,
<argument>.id1 = back_attr</argument>, <argument>.id2 = front_attr }</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><call><name>map_put</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>combine_tag</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rgb_blend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ratio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rgb1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rgb2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>ratio</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">100</literal><operator>-</operator><name>ratio</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><operator>(</operator><name>rgb1</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g1</name> <init>= <expr><operator>(</operator><name>rgb1</name> <operator>&amp;</operator> <literal type="number">0x00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>rgb1</name> <operator>&amp;</operator> <literal type="number">0x0000FF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><operator>(</operator><name>rgb2</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g2</name> <init>= <expr><operator>(</operator><name>rgb2</name> <operator>&amp;</operator> <literal type="number">0x00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b2</name> <init>= <expr><operator>(</operator><name>rgb2</name> <operator>&amp;</operator> <literal type="number">0x0000FF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mr</name> <init>= <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>r1</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>r2</name><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mg</name> <init>= <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>g1</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>g2</name><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb</name> <init>= <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>b1</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>b2</name><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>mr</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mg</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>mb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cterm_blend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ratio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>rgb1</name> <init>= <expr><call><name>hl_cterm2rgb_color</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rgb2</name> <init>= <expr><call><name>hl_cterm2rgb_color</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rgb_blended</name> <init>= <expr><call><name>rgb_blend</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><name>rgb1</name></expr></argument>, <argument><expr><name>rgb2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>hl_rgb2cterm_color</name><argument_list>(<argument><expr><name>rgb_blended</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>hl_rgb2cterm_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0x00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0x0000FF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <literal type="number">36</literal> <operator>+</operator> <operator>(</operator><name>g</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <literal type="number">256</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>hl_cterm2rgb_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>cube_value</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xFF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>grey_ramp</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xEE</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>ansi_table</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr> , 

<expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr> , 
<expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr> , 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ansi_table</name><index>[<expr><name>nr</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">232</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>/</operator> <literal type="number">36</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>/</operator> <literal type="number">6</literal> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>cube_value</name><index>[<expr><name>idx</name> <operator>%</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>nr</name> <operator>-</operator> <literal type="number">232</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>grey_ramp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>HlAttrs</name></type> <name>syn_attr2entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>attr</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>HLATTRS_INIT</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call><operator>.</operator><name>attr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Dictionary</name></type> <name>hl_get_attr_by_id</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>attr_id</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>rgb</name></decl></parameter>, <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>dic</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>dic</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_id</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>attr_id</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>api_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>kErrorTypeException</name></expr></argument>,
<argument><expr><literal type="string">"Invalid attribute id: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>attr_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dic</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>hlattrs2dict</name><argument_list>(<argument><expr><call><name>syn_attr2entry</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>attr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>Dictionary</name></type> <name>hlattrs2dict</name><parameter_list>(<parameter><decl><type><name>HlAttrs</name></type> <name>ae</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_rgb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>hl</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><name>use_rgb</name></expr> ?</condition><then> <expr><name><name>ae</name><operator>.</operator><name>rgb_ae_attr</name></name></expr> </then><else>: <expr><name><name>ae</name><operator>.</operator><name>cterm_ae_attr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_BOLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"bold"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_STANDOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"standout"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_UNDERLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"underline"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_UNDERCURL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"undercurl"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_ITALIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"italic"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_INVERSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"reverse"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_STRIKETHROUGH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"strikethrough"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_rgb</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_FG_INDEXED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"fg_indexed"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>HL_BG_INDEXED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"bg_indexed"</literal></expr></argument>, <argument><expr><call><name>BOOLEAN_OBJ</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ae</name><operator>.</operator><name>rgb_fg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>rgb_fg_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ae</name><operator>.</operator><name>rgb_bg_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"background"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>rgb_bg_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ae</name><operator>.</operator><name>rgb_sp_color</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"special"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>rgb_sp_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cterm_normal_fg_color</name> <operator>!=</operator> <name><name>ae</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>&amp;&amp;</operator> <name><name>ae</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"foreground"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>cterm_fg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cterm_normal_bg_color</name> <operator>!=</operator> <name><name>ae</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>&amp;&amp;</operator> <name><name>ae</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"background"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>cterm_bg_color</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ae</name><operator>.</operator><name>hl_blend</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>hl</name></expr></argument>, <argument><expr><literal type="string">"blend"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name><name>ae</name><operator>.</operator><name>hl_blend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>hl</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Array</name></type> <name>hl_inspect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Array</name></type> <name>ret</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hlstate_active</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hl_inspect_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hl_inspect_impl</name><parameter_list>(<parameter><decl><type><name>Array</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Dictionary</name></type> <name>item</name> <init>= <expr><name>ARRAY_DICT_INIT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>attr</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>kv_size</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>HlEntry</name></type> <name>e</name> <init>= <expr><call><name>kv_A</name><argument_list>(<argument><expr><name>attr_entries</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>e</name><operator>.</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kHlSyntax</name></expr>:</case>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"syntax"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"hi_name"</literal></expr></argument>,
<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>id1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kHlUI</name></expr>:</case>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"ui"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ui_name</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>e</name><operator>.</operator><name>id1</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Normal"</literal></expr> </then><else>: <expr><name><name>hlf_names</name><index>[<expr><name><name>e</name><operator>.</operator><name>id1</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"ui_name"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><name>ui_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"hi_name"</literal></expr></argument>,
<argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>syn_id2name</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>id2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kHlTerminal</name></expr>:</case>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name>STRING_OBJ</name><argument_list>(<argument><expr><call><name>cstr_to_string</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>kHlCombine</name></expr>:</case>
<case>case <expr><name>kHlBlend</name></expr>:</case>
<case>case <expr><name>kHlBlendThrough</name></expr>:</case>

<expr_stmt><expr><call><name>hl_inspect_impl</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>id1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hl_inspect_impl</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>id2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>kHlUnknown</name></expr>:</case>
<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>PUT</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name>INTEGER_OBJ</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD</name><argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>, <argument><expr><call><name>DICTIONARY_OBJ</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
