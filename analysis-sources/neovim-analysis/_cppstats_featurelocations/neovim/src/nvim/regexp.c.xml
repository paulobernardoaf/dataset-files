<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\regexp.c">















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DUMP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_LOG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DEBUG_LOG</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT_REGEXP_DEBUG_LOG_NAME</name></cpp:macro> <cpp:value>"bt_regexp_debug.log"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXACTLY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTHING</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAR</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMATCH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEHIND</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOBEHIND</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBPAT</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRACE_SIMPLE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOW</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOW</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRACE_LIMITS</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWL</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BHPOS</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_NL</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_NL</name></cpp:macro> <cpp:value>ANY + ADD_NL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANY</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYOF</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYBUT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDENT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KWORD</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKWORD</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNAME</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SFNAME</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPRINT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITE</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NWHITE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIGIT</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NHEX</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCTAL</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCTAL</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NWORD</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAD</name></cpp:macro> <cpp:value>41</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NHEAD</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NALPHA</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER</name></cpp:macro> <cpp:value>45</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NLOWER</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUPPER</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_NL</name></cpp:macro> <cpp:value>NUPPER + ADD_NL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WITH_NL</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op) &gt;= FIRST_NL &amp;&amp; (op) &lt;= LAST_NL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOPEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCLOSE</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKREF</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZOPEN</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZCLOSE</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZREF</name></cpp:macro> <cpp:value>130</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRACE_COMPLEX</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOPEN</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCLOSE</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIBYTECODE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_BOF</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_EOF</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSOR</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_LNUM</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_COL</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_VCOL</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_MARK</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_VISUAL</name></cpp:macro> <cpp:value>208</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_COMPOSING</name></cpp:macro> <cpp:value>209</cpp:value></cpp:define> 






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x) - 256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>un_Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) + 256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_Magic</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; 0)</cpp:value></cpp:define>







<typedef>typedef <expr_stmt><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call>(<modifier>*</modifier><name>fptr_T</name>)<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>regparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevchr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curchr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevchr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevprevchr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nextchr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_at_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regnpar</name></decl>;</decl_stmt>
}</block></struct></type> <name>parse_state_T</name>;</typedef>






<typedef>typedef <type><struct>struct <block>{
<union>union <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt> 
}</block> <decl><name>rs_u</name></decl>;</union>
<decl_stmt><decl><type><name>int</name></type> <name>rs_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>regsave_T</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<union>union <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lpos_T</name></type> <name>pos</name></decl>;</decl_stmt>
}</block> <decl><name>se_u</name></decl>;</union>
}</block></struct></type> <name>save_se_T</name>;</typedef>


<typedef>typedef <type><struct>struct <name>regbehind_S</name> <block>{
<decl_stmt><decl><type><name>regsave_T</name></type> <name>save_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsave_T</name></type> <name>save_behind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_need_clear_subexpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>save_se_T</name></type> <name><name>save_start</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>save_se_T</name></type> <name><name>save_end</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>regbehind_T</name>;</typedef>


<typedef>typedef <type><enum>enum <name>regstate_E</name> <block>{
<decl><name>RS_NOPEN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> 
, <decl><name>RS_MOPEN</name></decl> 
, <decl><name>RS_MCLOSE</name></decl> 
, <decl><name>RS_ZOPEN</name></decl> 
, <decl><name>RS_ZCLOSE</name></decl> 
, <decl><name>RS_BRANCH</name></decl> 
, <decl><name>RS_BRCPLX_MORE</name></decl> 
, <decl><name>RS_BRCPLX_LONG</name></decl> 
, <decl><name>RS_BRCPLX_SHORT</name></decl> 
, <decl><name>RS_NOMATCH</name></decl> 
, <decl><name>RS_BEHIND1</name></decl> 
, <decl><name>RS_BEHIND2</name></decl> 
, <decl><name>RS_STAR_LONG</name></decl> 
, <decl><name>RS_STAR_SHORT</name></decl> 
}</block></enum></type> <name>regstate_T</name>;</typedef>







<typedef>typedef <type><struct>struct <name>regitem_S</name> <block>{
<decl_stmt><decl><type><name>regstate_T</name></type> <name>rs_state</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rs_no</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rs_scan</name></decl>;</decl_stmt> 
<union>union <block>{
<decl_stmt><decl><type><name>save_se_T</name></type> <name>sesave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsave_T</name></type> <name>regsave</name></decl>;</decl_stmt>
}</block> <decl><name>rs_un</name></decl>;</union> 
}</block></struct></type> <name>regitem_T</name>;</typedef>



<typedef>typedef <type><struct>struct <name>regstar_S</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nextb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nextb_ic</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>minval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxval</name></decl>;</decl_stmt>
}</block></struct></type> <name>regstar_T</name>;</typedef>



<typedef>typedef <type><struct>struct <name>backpos_S</name> <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>bp_scan</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>regsave_T</name></type> <name>bp_pos</name></decl>;</decl_stmt> 
}</block></struct></type> <name>backpos_T</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <name>b</name>, <name>c</name>;</decl_stmt>
}</block></struct></type> <name>decomp_T</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>no_Magic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>un_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>toggle_Magic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>un_Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Magic</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGMAGIC</name></cpp:macro> <cpp:value>0234</cpp:value></cpp:define>






































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)*(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((*((p) + 1) &amp; 0377) &lt;&lt; 8) + (*((p) + 2) &amp; 0377))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) + 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND_MIN</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((long)(p)[3] &lt;&lt; 24) + ((long)(p)[4] &lt;&lt; 16) + ((long)(p)[5] &lt;&lt; 8) + (long)(p)[6])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND_MAX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPERAND_MIN((p) + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND_CMP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)[7]</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHARAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)*(char_u *)(p))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (EMSG(m), rc_did_emsg = true, (void *)NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEMSG_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (IEMSG(m), rc_did_emsg = true, (void *)NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_RET_FAIL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (EMSG(m), rc_did_emsg = true, FAIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG2_RET_NULL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (EMSG2((m), (c) ? "" : "\\"), rc_did_emsg = true, (void *)NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG2_RET_FAIL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (EMSG2((m), (c) ? "" : "\\"), rc_did_emsg = true, FAIL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG_ONE_RET_NULL</name></cpp:macro> <cpp:value>EMSG2_RET_NULL(_( "E369: invalid item in %s%%[]"), reg_magic == MAGIC_ALL)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LIMIT</name></cpp:macro> <cpp:value>(32767L &lt;&lt; 16L)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>regdump</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bt_regprog_T</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regprop</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_missingbracket</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E769: Missing ] after %s["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_reverse_range</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E944: Reverse range in character class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_large_class</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E945: Range too large in character class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedpp</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E53: Unmatched %s%%("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedp</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E54: Unmatched %s("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_unmatchedpar</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E55: Unmatched %s)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_z_not_allowed</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E66: \\z( not allowed here"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_z1_not_allowed</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E67: \\z1 - \\z9 not allowed here"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_missing_sb</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E69: Missing ] after %s%%["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>e_empty_sb</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"E70: Empty %s%%[]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_MULTI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTI_MULT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>int</name></type> <name>re_multi_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MULTI_ONE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>MULTI_MULT</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>NOT_MULTI</name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASWIDTH</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPSTART</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASNL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASLOOKBH</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUST_CALC_SIZE</name></cpp:macro> <cpp:value>((char_u *) -1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_prev_sub</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

















<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>REGEXP_INRANGE</name><index>[]</index></name> <init>= <expr><literal type="string">"]^-n\\"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>REGEXP_ABBR</name><index>[]</index></name> <init>= <expr><literal type="string">"nrtebdoxuU"</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type> <name>backslash_trans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><name>CAR</name></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <return>return <expr><name>TAB</name></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <return>return <expr><name>ESC</name></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><name>BS</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>get_char_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><name><name>class_names</name><index>[]</index></name><operator>)</operator> <operator>=</operator>
<block>{
<expr><literal type="string">"alnum:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ALNUM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><literal type="string">"alpha:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ALPHA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<expr><literal type="string">"blank:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_BLANK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<expr><literal type="string">"cntrl:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_CNTRL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<expr><literal type="string">"digit:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_DIGIT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<expr><literal type="string">"graph:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_GRAPH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<expr><literal type="string">"lower:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_LOWER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<expr><literal type="string">"print:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_PRINT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<expr><literal type="string">"punct:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_PUNCT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<expr><literal type="string">"space:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_SPACE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<expr><literal type="string">"upper:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_UPPER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<expr><literal type="string">"xdigit:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_XDIGIT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<expr><literal type="string">"tab:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_TAB</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<expr><literal type="string">"return:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_RETURN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<expr><literal type="string">"backspace:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_BACKSPACE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<expr><literal type="string">"escape:]"</literal></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_ESCAPE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
}</block></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_NONE</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>class_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>class_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CLASS_NONE</name></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>short</name></type> <name><name>class_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_DIGIT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_HEX</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_OCTAL</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_WORD</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_HEAD</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_ALPHA</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_LOWER</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_UPPER</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI_WHITE</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_class_tab</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_DIGIT</name> <operator>+</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_OCTAL</name> <operator>+</operator> <name>RI_WORD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'8'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_DIGIT</name> <operator>+</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_LOWER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_LOWER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_HEX</name> <operator>+</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_UPPER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="char">'G'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name> <operator>+</operator> <name>RI_ALPHA</name> <operator>+</operator> <name>RI_UPPER</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>RI_WORD</name> <operator>+</operator> <name>RI_HEAD</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><literal type="char">' '</literal></expr>]</index></name> <operator>|=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>class_tab</name><index>[<expr><literal type="char">'\t'</literal></expr>]</index></name> <operator>|=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_digit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_DIGIT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_hex</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_HEX))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_octal</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_OCTAL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_word</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_WORD))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_head</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_HEAD))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_alpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_ALPHA))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_lower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_LOWER))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_upper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_UPPER))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri_white</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c &lt; 0x100 &amp;&amp; (class_tab[c] &amp; RI_WHITE))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_ICASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_NOICASE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_HASNL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_ICOMBINE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RF_LOOKBH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 





<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regparse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevchr_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_complex_braces</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regnpar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regnzpar</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>re_has_z</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regcode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>regsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_toolong</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>had_endbrace</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>regflags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name><name>brace_min</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name><name>brace_max</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>brace_count</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>had_eol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>one_exactly</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_magic</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_OFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_ON</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC_ALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_string</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_strict</name></decl>;</decl_stmt> 






<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>META_flags</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curchr</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevchr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prevprevchr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextchr</name></decl>;</decl_stmt> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_NOPAREN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_PAREN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_ZPAREN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_NPAREN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGMBC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>regmbc(x);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASEMBC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case x:</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>bt_regengine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>nfa_regengine</name></decl>;</decl_stmt>




<function><type><name>int</name></type> <name>re_multiline</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_HASNL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>get_equi_class</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>reg_equi_class</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"latin1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>STRCMP</name><argument_list>(<argument><expr><name>p_enc</name></expr></argument>, <argument><expr><literal type="string">"iso-8859-15"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="number">0xc0</literal></expr>:</case> <case>case <expr><literal type="number">0xc1</literal></expr>:</case> <case>case <expr><literal type="number">0xc2</literal></expr>:</case>
<case>case <expr><literal type="number">0xc3</literal></expr>:</case> <case>case <expr><literal type="number">0xc4</literal></expr>:</case> <case>case <expr><literal type="number">0xc5</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x100</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x102</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x104</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1cd</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1de</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea2</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x100</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x102</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x104</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1cd</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1de</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e0</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ea2</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e02</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e06</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e02</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e06</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="number">0xc7</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x106</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x108</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x106</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x108</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10a</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10c</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x110</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0a</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e10</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x110</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e0a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e0e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e10</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="number">0xc8</literal></expr>:</case> <case>case <expr><literal type="number">0xc9</literal></expr>:</case> <case>case <expr><literal type="number">0xca</literal></expr>:</case> <case>case <expr><literal type="number">0xcb</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x112</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x114</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x116</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x118</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1eba</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebc</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xc9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xca</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xcb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x112</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x114</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x116</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x118</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1eba</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ebc</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'F'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e1e</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'G'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x120</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x122</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e4</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f4</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e20</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11c</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11e</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x120</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x122</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e4</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e6</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1f4</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e20</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x124</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x126</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e22</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e26</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e28</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x124</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x126</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e22</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e26</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e28</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><literal type="number">0xcc</literal></expr>:</case> <case>case <expr><literal type="number">0xcd</literal></expr>:</case> <case>case <expr><literal type="number">0xce</literal></expr>:</case> <case>case <expr><literal type="number">0xcf</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x128</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x130</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1cf</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec8</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xcc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xcd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xce</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xcf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x128</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12c</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x130</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1cf</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ec8</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'J'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x134</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'J'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x134</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'K'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x136</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e30</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e34</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x136</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e30</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e34</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x139</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13d</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x141</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3a</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x139</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13b</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13d</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x141</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e3a</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e40</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e3e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e40</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case> <case>case <expr><literal type="number">0xd1</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x143</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x145</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x147</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e44</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e48</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x143</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x145</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x147</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e44</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e48</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="number">0xd2</literal></expr>:</case> <case>case <expr><literal type="number">0xd3</literal></expr>:</case> <case>case <expr><literal type="number">0xd4</literal></expr>:</case> <case>case <expr><literal type="number">0xd5</literal></expr>:</case>
<case>case <expr><literal type="number">0xd6</literal></expr>:</case> <case>case <expr><literal type="number">0xd8</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x150</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1a0</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d1</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ece</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x14c</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x14e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x150</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1a0</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1d1</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ea</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ec</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ece</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="number">0x1e54</literal></expr>:</case> <case>case <expr><literal type="number">0x1e56</literal></expr>:</case>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e54</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e56</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x154</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x156</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x158</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e58</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x154</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x156</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x158</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e58</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e5e</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x160</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e60</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15c</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x160</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e60</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'T'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x162</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x164</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x166</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6e</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x162</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x164</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x166</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e6a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e6e</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <case>case <expr><literal type="number">0xd9</literal></expr>:</case> <case>case <expr><literal type="number">0xda</literal></expr>:</case> <case>case <expr><literal type="number">0xdb</literal></expr>:</case> <case>case <expr><literal type="number">0xdc</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x168</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x170</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x172</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1af</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d3</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ee6</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xd9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xda</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xdb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xdc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x168</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16c</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x170</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x172</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1af</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1d3</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ee6</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'V'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e7c</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x174</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e80</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e82</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e84</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e86</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x174</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e80</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e82</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e84</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e86</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'X'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8c</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8c</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><literal type="number">0xdd</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x176</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x178</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8e</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef2</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef6</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef8</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xdd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x176</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x178</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8e</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef2</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef6</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef8</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x179</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17d</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b5</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e90</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e94</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x179</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x17b</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x17d</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1b5</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e90</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e94</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="number">0xe0</literal></expr>:</case> <case>case <expr><literal type="number">0xe1</literal></expr>:</case> <case>case <expr><literal type="number">0xe2</literal></expr>:</case>
<case>case <expr><literal type="number">0xe3</literal></expr>:</case> <case>case <expr><literal type="number">0xe4</literal></expr>:</case> <case>case <expr><literal type="number">0xe5</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x101</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x103</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x105</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ce</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1df</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ea3</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x101</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x103</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x105</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ce</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1df</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e1</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ea3</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e03</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e07</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e03</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e07</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="number">0xe7</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x107</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x109</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x107</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x109</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10b</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10d</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x10f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x111</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0b</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e0f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e11</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x10f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x111</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e0b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e0f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e11</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="number">0xe8</literal></expr>:</case> <case>case <expr><literal type="number">0xe9</literal></expr>:</case> <case>case <expr><literal type="number">0xea</literal></expr>:</case> <case>case <expr><literal type="number">0xeb</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x113</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x115</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x117</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x119</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebb</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ebd</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xe9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xea</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xeb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x113</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x115</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x117</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x119</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ebb</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ebd</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e1f</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e1f</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x11f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x121</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x123</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f5</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e21</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11d</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x11f</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x121</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x123</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e5</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e7</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1f5</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e21</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x125</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x127</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e23</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e27</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e29</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e96</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x125</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x127</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e23</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e27</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e29</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e96</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="number">0xec</literal></expr>:</case> <case>case <expr><literal type="number">0xed</literal></expr>:</case> <case>case <expr><literal type="number">0xee</literal></expr>:</case> <case>case <expr><literal type="number">0xef</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x129</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x12f</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d0</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ec9</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xec</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xed</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xee</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x129</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12d</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x12f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1d0</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ec9</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x135</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1f0</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x135</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1f0</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x137</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e9</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e31</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e35</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x137</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e9</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e31</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e35</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x13e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x140</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x142</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3b</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13c</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x13e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x140</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x142</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e3b</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e3f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e41</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e3f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e41</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><literal type="number">0xf1</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x144</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x146</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x148</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x149</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e45</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e49</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x144</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x146</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x148</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x149</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e45</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e49</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="number">0xf2</literal></expr>:</case> <case>case <expr><literal type="number">0xf3</literal></expr>:</case> <case>case <expr><literal type="number">0xf4</literal></expr>:</case> <case>case <expr><literal type="number">0xf5</literal></expr>:</case>
<case>case <expr><literal type="number">0xf6</literal></expr>:</case> <case>case <expr><literal type="number">0xf8</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x14f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x151</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1a1</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d2</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1eb</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ed</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ecf</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x14d</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x14f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x151</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1a1</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1d2</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1eb</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ed</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ecf</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e55</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e57</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e55</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e57</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x155</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x157</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x159</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e59</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e5f</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x155</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x157</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x159</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e59</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e5f</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x15f</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x161</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e61</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15d</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x15f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x161</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e61</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x163</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x165</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x167</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e6f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e97</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x163</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x165</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x167</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e6b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e6f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e97</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="number">0xf9</literal></expr>:</case> <case>case <expr><literal type="number">0xfa</literal></expr>:</case> <case>case <expr><literal type="number">0xfb</literal></expr>:</case> <case>case <expr><literal type="number">0xfc</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x169</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16d</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x16f</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x171</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x173</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b0</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1d4</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ee7</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xf9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xfa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xfb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xfc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x169</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16d</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x16f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x171</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x173</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1b0</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1d4</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ee7</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e7d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e7d</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x175</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e81</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e83</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e85</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e87</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e98</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x175</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e81</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e83</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e85</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e87</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e98</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8b</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8d</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8b</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8d</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="number">0xfd</literal></expr>:</case> <case>case <expr><literal type="number">0xff</literal></expr>:</case>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x177</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e8f</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e99</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef3</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef7</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1ef9</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xfd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x177</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e8f</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e99</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef3</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef7</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1ef9</literal></argument>)</argument_list></macro>
<return>return;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17a</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17c</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x17e</literal></argument>)</argument_list></macro>
<macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1b6</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e91</literal></argument>)</argument_list></macro> <macro><name>CASEMBC</name><argument_list>(<argument><literal type="number">0x1e95</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x17a</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x17c</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x17e</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1b6</literal></argument>)</argument_list></macro> <macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e91</literal></argument>)</argument_list></macro>
<macro><name>REGMBC</name><argument_list>(<argument><literal type="number">0x1e95</literal></argument>)</argument_list></macro>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>get_coll_element</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>l</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reg_cpo_lit</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_cpo_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>reg_cpo_lit</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_LITERAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>skip_anyof</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_INRANGE</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>reg_cpo_lit</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_char_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CLASS_NONE</name>
<operator>&amp;&amp;</operator> <call><name>get_equi_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>get_coll_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>char_u</name> <modifier>*</modifier></type><name>skip_regexp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>startp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mymagic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>startp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>magic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_ON</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_OFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>get_cpo_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>dirc</name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>mymagic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal> <operator>&amp;&amp;</operator> <name>mymagic</name> <operator>&lt;=</operator> <name>MAGIC_OFF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skip_anyof</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dirc</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>newp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>newp</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>startp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>newp</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>startp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_ALL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mymagic</name> <operator>=</operator> <name>MAGIC_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>seen_endbrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>refnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>had_endbrace</name><index>[<expr><name>refnum</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>regparse</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E65: Illegal back reference"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_did_emsg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>regprog_T</name> <modifier>*</modifier></type><name>bt_regcomp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>longest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_class_tab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>regcomp_start</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>=</operator> <name>JUST_CALC_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>REGMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reg</name><argument_list>(<argument><expr><name>REG_NOPAREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>bt_regprog_T</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bt_regprog_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>regsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><call><name>regcomp_start</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>REGMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reg</name><argument_list>(<argument><expr><name>REG_NOPAREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg_toolong</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_toolong</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E339: Pattern too long"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regflags</name></name> <operator>=</operator> <name>regflags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HASNL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regflags</name></name> <operator>|=</operator> <name>RF_HASNL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>HASLOOKBH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regflags</name></name> <operator>|=</operator> <name>RF_LOOKBH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>=</operator> <name>re_has_z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>END</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BOL</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RE_BOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BOW</name>
<operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOW</name>
<operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOTHING</name>
<operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MOPEN</name> <operator>+</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOPEN</name>
<operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>MCLOSE</name> <operator>+</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NCLOSE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>regnext_scan</name> <init>= <expr><call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>regnext_scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>regnext_scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SPSTART</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BOW</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOW</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASNL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>scan</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name> <operator>&amp;&amp;</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>=</operator> <name>longest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>regdump</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>engine</name></name> <operator>=</operator> <operator>&amp;</operator><name>bt_regengine</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>regprog_T</name> <operator>*</operator><operator>)</operator><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>bt_regfree</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> 
<name>regcomp_start</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>initchr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>re_flags</name> <operator>&amp;</operator> <name>RE_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_ON</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_OFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>reg_string</name> <operator>=</operator> <operator>(</operator><name>re_flags</name> <operator>&amp;</operator> <name>RE_STRING</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_strict</name> <operator>=</operator> <operator>(</operator><name>re_flags</name> <operator>&amp;</operator> <name>RE_STRICT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_cpo_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_complex_braces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regnpar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>had_endbrace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>had_endbrace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regnzpar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>re_has_z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_toolong</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>had_eol</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>vim_regcomp_had_eol</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>had_eol</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>at_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>prev_at_start</name></decl>;</decl_stmt> 










<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>reg</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>paren</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>br</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>HASWIDTH</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_ZPAREN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regnzpar</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E50: Too many \\z("</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parno</name> <operator>=</operator> <name>regnzpar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regnzpar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ZOPEN</name> <operator>+</operator> <name>parno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_PAREN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>regnpar</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E51: Too many %s("</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parno</name> <operator>=</operator> <name>regnpar</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>regnpar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>MOPEN</name> <operator>+</operator> <name>parno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_NPAREN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regbranch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>br</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>br</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASWIDTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><name>HASWIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SPSTART</name> <operator>|</operator> <name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regbranch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>br</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg_toolong</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASWIDTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><name>HASWIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SPSTART</name> <operator>|</operator> <name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>ender</name> <operator>=</operator> <call><name>regnode</name><argument_list>(
<argument><expr><ternary><condition><expr><name>paren</name> <operator>==</operator> <name>REG_ZPAREN</name></expr> ?</condition><then> <expr><name>ZCLOSE</name> <operator>+</operator> <name>parno</name></expr> </then><else>:
<expr><ternary><condition><expr><name>paren</name> <operator>==</operator> <name>REG_PAREN</name></expr> ?</condition><then> <expr><name>MCLOSE</name> <operator>+</operator> <name>parno</name></expr> </then><else>:
<expr><ternary><condition><expr><name>paren</name> <operator>==</operator> <name>REG_NPAREN</name></expr> ?</condition><then> <expr><name>NCLOSE</name></expr> </then><else>: <expr><name>END</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>br</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><name>br</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>br</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>ender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>!=</operator> <name>REG_NOPAREN</name> <operator>&amp;&amp;</operator> <call><name>getchr</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_ZPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E52: Unmatched \\z("</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_NPAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedpp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_NOPAREN</name> <operator>&amp;&amp;</operator> <call><name>peekchr</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_unmatchedpar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_trailing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>==</operator> <name>REG_PAREN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>had_endbrace</name><index>[<expr><name>parno</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regbranch</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>WORST</name> <operator>|</operator> <name>HASNL</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>latest</name> <operator>=</operator> <call><name>regconcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>latest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <name>SPSTART</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><name>HASNL</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HASNL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>latest</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>reg_toolong</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>MATCH</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>latest</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regconcat</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>WORST</name></expr>;</expr_stmt> 

<while>while <condition>(<expr><name>cont</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NUL</name></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>cont</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_ICOMBINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_ICASE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>regflags</name> <operator>|=</operator> <name>RF_NOICASE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>reg_magic</name> <operator>=</operator> <name>MAGIC_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr_keepstart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>latest</name> <operator>=</operator> <call><name>regpiece</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>latest</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>reg_toolong</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <name>SPSTART</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>latest</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>latest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regpiece</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>minval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regatom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>peekchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOT_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>(</operator><name>WORST</name> <operator>|</operator> <name>SPSTART</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIMPLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>STAR</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIMPLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>PLUS</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>(</operator><name>WORST</name> <operator>|</operator> <name>HASWIDTH</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lop</name> <init>= <expr><name>END</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name> <init>= <expr><call><name>getdecchrs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>lop</name> <operator>=</operator> <name>MATCH</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>lop</name> <operator>=</operator> <name>NOMATCH</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name>lop</name> <operator>=</operator> <name>SUBPAT</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <switch>switch <condition>(<expr><call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>lop</name> <operator>=</operator> <name>BEHIND</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><literal type="char">'!'</literal></expr>:</case> <expr_stmt><expr><name>lop</name> <operator>=</operator> <name>NOBEHIND</name></expr>;</expr_stmt> <break>break;</break> 
</block_content>}</block></switch>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>lop</name> <operator>==</operator> <name>END</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E59: invalid character after %s@"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lop</name> <operator>==</operator> <name>BEHIND</name> <operator>||</operator> <name>lop</name> <operator>==</operator> <name>NOBEHIND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BHPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASLOOKBH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>END</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>lop</name> <operator>==</operator> <name>BEHIND</name> <operator>||</operator> <name>lop</name> <operator>==</operator> <name>NOBEHIND</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>reginsert_nr</name><argument_list>(<argument><expr><name>lop</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>nr</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>lop</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_limits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIMPLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRACE_SIMPLE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reginsert_limits</name><argument_list>(<argument><expr><name>BRACE_LIMITS</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_complex_braces</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E60: Too many complex %s{...}s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRACE_COMPLEX</name> <operator>+</operator> <name>num_complex_braces</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reginsert_limits</name><argument_list>(<argument><expr><name>BRACE_LIMITS</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>num_complex_braces</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>minval</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NOT_MULTI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>peekchr</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E61: Nested %s*"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\\"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E62: Nested %s%c"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\\"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>classchars</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">".iIkKfFpPsSdDxXoOwWhHaAlLuU"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>classcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>ANY</name></expr>, <expr><name>IDENT</name></expr>, <expr><name>SIDENT</name></expr>, <expr><name>KWORD</name></expr>, <expr><name>SKWORD</name></expr>,
<expr><name>FNAME</name></expr>, <expr><name>SFNAME</name></expr>, <expr><name>PRINT</name></expr>, <expr><name>SPRINT</name></expr>,
<expr><name>WHITE</name></expr>, <expr><name>NWHITE</name></expr>, <expr><name>DIGIT</name></expr>, <expr><name>NDIGIT</name></expr>,
<expr><name>HEX</name></expr>, <expr><name>NHEX</name></expr>, <expr><name>OCTAL</name></expr>, <expr><name>NOCTAL</name></expr>,
<expr><name>WORD</name></expr>, <expr><name>NWORD</name></expr>, <expr><name>HEAD</name></expr>, <expr><name>NHEAD</name></expr>,
<expr><name>ALPHA</name></expr>, <expr><name>NALPHA</name></expr>, <expr><name>LOWER</name></expr>, <expr><name>NLOWER</name></expr>,
<expr><name>UPPER</name></expr>, <expr><name>NUPPER</name></expr>
}</block></expr></init></decl>;</decl_stmt>








<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regatom</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_prev_at_start</name> <init>= <expr><name>prev_at_start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>WORST</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_eol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>had_eol</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>ADD_NL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASNL</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>collection</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>




<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>classchars</name></expr></argument>, <argument><expr><call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E63: invalid use of \\_"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>do_multibyte</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name><name>classcodes</name><index>[<expr><name>p</name> <operator>-</operator> <name>classchars</name></expr>]</index></name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name> <operator>|</operator> <name>SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reg_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name> <operator>|</operator> <name>SIMPLE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NEWL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name> <operator>|</operator> <name>HASNL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>one_exactly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EMSG_ONE_RET_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reg</name><argument_list>(<argument><expr><name>REG_PAREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <name>SPSTART</name> <operator>|</operator> <name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>NUL</name></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>one_exactly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EMSG_ONE_RET_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>IEMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_internal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E64: %s%c follows nothing"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'*'</literal></expr> ?</condition><then> <expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name></expr> </then><else>: <expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></else></ternary><operator>)</operator></expr>
?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\\"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>reg_prev_sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lp</name> <operator>=</operator> <name>reg_prev_sub</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>lp</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>lp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reg_prev_sub</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lp</name> <operator>-</operator> <name>reg_prev_sub</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>SIMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nopresub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'7'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>refnum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>refnum</name> <operator>=</operator> <name>c</name> <operator>-</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seen_endbrace</name><argument_list>(<argument><expr><name>refnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BACKREF</name> <operator>+</operator> <name>refnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'('</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg_do_extmatch</name> <operator>&amp;</operator> <name>REX_SET</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_z_not_allowed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>one_exactly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EMSG_ONE_RET_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reg</name><argument_list>(<argument><expr><name>REG_ZPAREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASWIDTH</name><operator>|</operator><name>SPSTART</name><operator>|</operator><name>HASNL</name><operator>|</operator><name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>re_has_z</name> <operator>=</operator> <name>REX_SET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg_do_extmatch</name> <operator>&amp;</operator> <name>REX_USE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_z1_not_allowed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ZREF</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>re_has_z</name> <operator>=</operator> <name>REX_USE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>MOPEN</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_mult_next</name><argument_list>(<argument><expr><literal type="string">"\\zs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_mult_next</name><argument_list>(<argument><expr><literal type="string">"\\ze"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E68: Invalid character after \\z"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><call><name>getchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'('</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>one_exactly</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EMSG_ONE_RET_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reg</name><argument_list>(<argument><expr><name>REG_NPAREN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <name>SPSTART</name> <operator>|</operator> <name>HASNL</name> <operator>|</operator> <name>HASLOOKBH</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_BOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'V'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_VISUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_COMPOSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><literal type="char">'['</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>one_exactly</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>EMSG_ONE_RET_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lastbranch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lastnode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>br</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missing_sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>br</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>lastnode</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_toolong</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ungetchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>one_exactly</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastnode</name> <operator>=</operator> <call><name>regatom</name><argument_list>(<argument><expr><name>flagp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>one_exactly</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lastnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_empty_sb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lastbranch</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>lastnode</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>lastbranch</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>br</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><name>br</name> <operator>!=</operator> <name>lastnode</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BRANCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>lastbranch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_toolong</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HASWIDTH</name> <operator>|</operator> <name>SIMPLE</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<case>case <expr><literal type="char">'o'</literal></expr>:</case> 
<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<case>case <expr><literal type="char">'U'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getdecchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>getoctchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E678: Invalid character after %s%%[dxouU]"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>use_multibytecode</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>MULTIBYTECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'&gt;'</literal>
<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_MARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>cmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_LNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_prev_at_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_COL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>RE_VCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>regcode</name> <operator>=</operator> <call><name>re_put_uint32</name><argument_list>(<argument><expr><name>regcode</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>cmp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E71: Invalid character after %s%%"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block>
<break>break;</break>

<case>case <expr><call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>:</case>
<label><name>collection</name>:</label>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>





<expr_stmt><expr><name>lp</name> <operator>=</operator> <call><name>skip_anyof</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lp</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>startc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>endc</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ANYBUT</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ANYOF</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>*</operator><name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <name>startc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
<operator>||</operator> <operator>(</operator><name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>endc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>endc</name> <operator>=</operator> <call><name>get_coll_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>endc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>endc</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>endc</name> <operator>=</operator> <operator>*</operator><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>endc</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>reg_cpo_lit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>endc</name> <operator>=</operator> <call><name>coll_get_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>&gt;</operator> <name>endc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_reverse_range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>||</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>endc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>endc</name> <operator>&gt;</operator> <name>startc</name> <operator>+</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_large_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>++</operator><name>startc</name> <operator>&lt;=</operator> <name>endc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>startc</name> <operator>&lt;=</operator> <name>endc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>





<if type="elseif">else if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_INRANGE</name></expr></argument>, <argument><expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>reg_cpo_lit</name>
<operator>&amp;&amp;</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>,
<argument><expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ret</name> <operator>==</operator> <name>ANYOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>ANYOF</name> <operator>+</operator> <name>ADD_NL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASNL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'d'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'o'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'x'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'u'</literal>
<operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>coll_get_char</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>startc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="number">0x0a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>backslash_trans</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cu</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c_class</name> <operator>=</operator> <call><name>get_char_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>c_class</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLASS_NONE</name></expr>:</case>
<expr_stmt><expr><name>c_class</name> <operator>=</operator> <call><name>get_equi_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_class</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reg_equi_class</name><argument_list>(<argument><expr><name>c_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c_class</name> <operator>=</operator>
<call><name>get_coll_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>c_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>*</operator><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_ALNUM</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_ALPHA</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_BLANK</name></expr>:</case>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_CNTRL</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>iscntrl</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_DIGIT</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_GRAPH</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">127</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isgraph</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_LOWER</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mb_islower</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <literal type="number">170</literal> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <literal type="number">186</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_PRINT</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_PUNCT</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ispunct</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_SPACE</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_UPPER</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_XDIGIT</name></expr>:</case>
<for>for <control>(<init><expr><name>cu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cu</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>cu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>CLASS_TAB</name></expr>:</case>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_RETURN</name></expr>:</case>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_BACKSPACE</name></expr>:</case>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLASS_ESCAPE</name></expr>:</case>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>startc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_char2len</name><argument_list>(<argument><expr><name>startc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>startc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toomsbra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name> <operator>|</operator> <name>SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_strict</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2_RET_NULL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_missingbracket</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_magic</name> <operator>&gt;</operator> <name>MAGIC_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<default>default:</default>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>use_multibytecode</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>do_multibyte</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>MULTIBYTECODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name> <operator>|</operator> <name>SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NOT_MULTI</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>one_exactly</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>no_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>


<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>, <argument><expr><name>regparse</name> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regmbc</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ungetchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>SIMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>re_mult_next</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>MULTI_MULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2_RET_FAIL</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E888: (NFA regexp) cannot repeat %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>use_multibytecode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_char2len</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>re_multi_type</name><argument_list>(<argument><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NOT_MULTI</name>
<operator>||</operator> <operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regnode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regsize</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regmbc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>regcode</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>regcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>reginsert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>place</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&gt;</operator> <name>opnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>place</name> <operator>=</operator> <name>opnd</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>reginsert_nr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>place</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&gt;</operator> <name>opnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>place</name> <operator>=</operator> <name>opnd</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>val</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>re_put_uint32</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>reginsert_limits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minval</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>place</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&gt;</operator> <name>opnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>place</name> <operator>=</operator> <name>opnd</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>minval</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>minval</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <call><name>re_put_uint32</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>minval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>maxval</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><name>maxval</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <call><name>re_put_uint32</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>re_put_uint32</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regtail</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>JUST_CALC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>scan</name> <operator>-</operator> <name>val</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name> <operator>-</operator> <name>scan</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reg_toolong</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>scan</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>scan</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0377</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regoptail</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>==</operator> <name>JUST_CALC_SIZE</name>
<operator>||</operator> <operator>(</operator><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BRANCH</name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>BRACE_COMPLEX</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>initchr</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>prevprevchr</name> <operator>=</operator> <name>prevchr</name> <operator>=</operator> <name>nextchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>save_parse_state</name><parameter_list>(<parameter><decl><type><name>parse_state_T</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>regparse</name></name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevchr_len</name></name> <operator>=</operator> <name>prevchr_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>curchr</name></name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevchr</name></name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prevprevchr</name></name> <operator>=</operator> <name>prevprevchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>nextchr</name></name> <operator>=</operator> <name>nextchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>at_start</name></name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>prev_at_start</name></name> <operator>=</operator> <name>prev_at_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>regnpar</name></name> <operator>=</operator> <name>regnpar</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_parse_state</name><parameter_list>(<parameter><decl><type><name>parse_state_T</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>regparse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevchr_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>curchr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevchr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prevprevchr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>nextchr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>at_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>prev_at_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>regnpar</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>regnpar</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>peekchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>after_slash</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curchr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>curchr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>curchr</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'#'</literal></expr>:</case> 
<case>case <expr><literal type="char">'"'</literal></expr>:</case> 
<case>case <expr><literal type="char">'\''</literal></expr>:</case> 
<case>case <expr><literal type="char">','</literal></expr>:</case> 
<case>case <expr><literal type="char">'-'</literal></expr>:</case> 
<case>case <expr><literal type="char">':'</literal></expr>:</case> 
<case>case <expr><literal type="char">';'</literal></expr>:</case> 
<case>case <expr><literal type="char">'`'</literal></expr>:</case> 
<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_ON</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>at_start</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>prev_at_start</name> <operator>&amp;&amp;</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>after_slash</name>
<operator>||</operator> <operator>(</operator><name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name>prevchr</name> <operator>!=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_OFF</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>at_start</name>
<operator>||</operator> <name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name>
<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <name>prevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><call><name>no_Magic</name><argument_list>(<argument><expr><name>prevchr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'('</literal>
<operator>&amp;&amp;</operator> <name>prevprevchr</name> <operator>==</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>reg_magic</name> <operator>&gt;=</operator> <name>MAGIC_OFF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>regparse</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>is_magic_all</name> <init>= <expr><operator>(</operator><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal>
<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal>
<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal>
<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_magic_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_magic_all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal>
<operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>is_magic_all</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>Magic</name><argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>regparse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(
<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name><name>META_flags</name><index>[<expr><name>c</name></expr>]</index></name></expr>
)</condition> <block>{<block_content>







<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>after_slash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>after_slash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>toggle_Magic</name><argument_list>(<argument><expr><name>curchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>REGEXP_ABBR</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>backslash_trans</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_NONE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>toggle_Magic</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>regparse</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>curchr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>skipchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prevchr_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regparse</name><index>[<expr><name>prevchr_len</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prevchr_len</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>regparse</name> <operator>+</operator> <name>prevchr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>regparse</name> <operator>+=</operator> <name>prevchr_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>at_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>nextchr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>skipchr_keepstart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>as</name> <init>= <expr><name>prev_at_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pr</name> <init>= <expr><name>prevchr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prpr</name> <init>= <expr><name>prevprevchr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>as</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>pr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevprevchr</name> <operator>=</operator> <name>prpr</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>getchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chr</name> <init>= <expr><call><name>peekchr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>chr</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>ungetchr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>nextchr</name> <operator>=</operator> <name>curchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <name>prevchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevchr</name> <operator>=</operator> <name>prevprevchr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at_start</name> <operator>=</operator> <name>prev_at_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_at_start</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><name>regparse</name> <operator>-=</operator> <name>prevchr_len</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>gethexchrs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxinputlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxinputlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>|=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nr</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getdecchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curchr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nr</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getoctchrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nr</name> <operator>&lt;</operator> <literal type="number">040</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>regparse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nr</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>|=</operator> <call><name>hex2nr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>regparse</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>nr</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>coll_get_char</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>nr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>regparse</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>getdecchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'o'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>getoctchrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>gethexchrs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>nr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nr</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>regparse</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nr</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>read_limits</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>minval</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>maxval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>reverse</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>first_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reverse</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first_char</name> <operator>=</operator> <name>regparse</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>minval</name> <operator>=</operator> <call><name>getdigits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <call><name>getdigits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regparse</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>MAX_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>MAX_LIMIT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>first_char</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <operator>*</operator><name>minval</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>MAX_LIMIT</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>IObuff</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E554: Syntax error in %s{...}"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>reg_magic</name> <operator>==</operator> <name>MAGIC_ALL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\\"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EMSG_RET_FAIL</name><argument_list>(<argument><expr><name>IObuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>minval</name> <operator>&gt;</operator> <operator>*</operator><name>maxval</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>reverse</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>minval</name> <operator>&lt;</operator> <operator>*</operator><name>maxval</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>minval</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>minval</name> <operator>=</operator> <operator>*</operator><name>maxval</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxval</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>skipchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>










<decl_stmt><decl><type><specifier>static</specifier> <name>linenr_T</name></type> <name>reglnum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regline</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reginput</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_clear_subexpr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>need_clear_zsubexpr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>save_se</name><parameter_list>(<parameter><type><name>savep</name></type></parameter>, <parameter><type><name>posp</name></type></parameter>, <parameter><type><name>pp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REG_MULTI ? save_se_multi((savep), (posp)) : save_se_one((savep), (pp))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>restore_se</name><parameter_list>(<parameter><type><name>savep</name></type></parameter>, <parameter><type><name>posp</name></type></parameter>, <parameter><type><name>pp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (REG_MULTI) *(posp) = (savep)-&gt;se_u.pos; else *(pp) = (savep)-&gt;se_u.ptr; }</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>regnarrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_tofree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>reg_tofreelen</name></decl>;</decl_stmt>
















<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>reg_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>reg_mmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>reg_startp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>reg_endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>reg_startpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>reg_endpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>reg_win</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>reg_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>reg_firstlnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>reg_maxline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reg_line_lbr</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>bool</name></type> <name>reg_ic</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>reg_icombine</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>colnr_T</name></type> <name>reg_maxcol</name></decl>;</decl_stmt>
}</block></struct></type> <name>regexec_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>regexec_T</name></type> <name>rex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>rex_in_use</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>regstack</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>garray_T</name></type> <name>backpos</name> <init>= <expr><name>GA_EMPTY_INIT_VALUE</name></expr></init></decl>;</decl_stmt>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGSTACK_INITIAL</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKPOS_INITIAL</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>free_regexp_stuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_getline</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>+</operator> <name>lnum</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ml_get_buf</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>+</operator> <name>lnum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>regsave_T</name></type> <name>behind_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name><name>reg_startzp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name><name>reg_endzp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name><name>reg_startzpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>lpos_T</name></type> <name><name>reg_endzpos</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_MULTI</name></cpp:macro> <cpp:value>(rex.reg_match == NULL)</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>int</name></type> 
<name>bt_regexec_nl</name> <parameter_list>(
<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, 
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>bool</name></type> <name>line_lbr</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>line_lbr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rm_ic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>r</name> <init>= <expr><call><name>bt_regexec_both</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char_u</name> <modifier>*</modifier></type><name>cstrchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
FUNC_ATTR_ALWAYS_INLINE
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>folded_c</name> <init>= <expr><call><name>utf_fold</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>folded_c</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASCII_ISUPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>TOLOWER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ASCII_ISLOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>TOUPPER_ASC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tofind</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>, <expr><operator>(</operator><name>char</name><operator>)</operator><name>cc</name></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>strpbrk</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>tofind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>long</name></type> <name>bt_regexec_multi</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>=</operator> <name>win</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_ic</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>=</operator> <name><name>rmp</name><operator>-&gt;</operator><name>rmm_maxcol</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>bt_regexec_both</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>long</name></type> <name>bt_regexec_both</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>bt_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>regstack</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>REGSTACK_INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><name>REGSTACK_INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><name>REGSTACK_INITIAL</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>backpos</name><operator>.</operator><name>ga_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backpos_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>BACKPOS_INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>, <argument><expr><name>BACKPOS_INITIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_set_growsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>, <argument><expr><name>BACKPOS_INITIAL</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <operator>(</operator><name>bt_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>regprog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <operator>(</operator><name>bt_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>regprog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>startp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>prog_magic_wrong</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>theend</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_ICASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_NOICASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regflags</name></name> <operator>&amp;</operator> <name>RF_ICOMBINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>vim_strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prog</name><operator>-&gt;</operator><name>regmlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>cstrchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prog</name><operator>-&gt;</operator><name>regmlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>regline</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_toolong</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>==</operator> <name>c</name>
<operator>||</operator> <operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>utf_fold</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>&lt;</operator> <literal type="number">255</literal>
<operator>&amp;&amp;</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tm_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>cstrchr</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxcol</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>(</operator><name>linenr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regline</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>tm_count</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timed_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>timed_out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>

<label><name>theend</name>:</label>


<if_stmt><if>if <condition>(<expr><name>reg_tofreelen</name> <operator>&gt;</operator> <literal type="number">400</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>regstack</name><operator>.</operator><name>ga_maxlen</name></name> <operator>&gt;</operator> <name>REGSTACK_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>backpos</name><operator>.</operator><name>ga_maxlen</name></name> <operator>&gt;</operator> <name>BACKPOS_INITIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>reg_extmatch_T</name> <modifier>*</modifier></type><name>make_extmatch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reg_extmatch_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>em</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>ref_extmatch</name><parameter_list>(<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>em</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>em</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>unref_extmatch</name><parameter_list>(<parameter><decl><type><name>reg_extmatch_T</name> <modifier>*</modifier></type><name>em</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>em</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>em</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>em</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>em</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>long</name></type> <name>regtry</name><parameter_list>(<parameter><decl><type><name>bt_regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>need_clear_subexpr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>==</operator> <name>REX_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_clear_zsubexpr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>program</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>col</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>unref_extmatch</name><argument_list>(<argument><expr><name>re_extmatch_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reghasz</name></name> <operator>==</operator> <name>REX_SET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>re_extmatch_out</name> <operator>=</operator> <call><name>make_extmatch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>reg_endzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name>
<operator>&amp;&amp;</operator> <name><name>reg_endzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>&gt;=</operator> <name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>re_extmatch_out</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vim_strnsave</name><argument_list>(<argument><expr><call><name>reg_getline</name><argument_list>(<argument><expr><name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>)</argument_list></call>
<operator>+</operator> <name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,
<argument><expr><name><name>reg_endzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name>
<operator>-</operator> <name><name>reg_startzpos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>reg_startzp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>reg_endzp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>re_extmatch_out</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>vim_strnsave</name><argument_list>(<argument><expr><name><name>reg_startzp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>reg_endzp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>reg_startzp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>reglnum</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>reg_prev_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>&gt;</operator> <name>regline</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>reginput</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>regline</name></expr></argument>, <argument><expr><name>reginput</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>reg_match_visual</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pos_T</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win_T</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><ternary><condition><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>start2</name></decl>, <decl><type ref="prev"/><name>end2</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>!=</operator> <name>curbuf</name> <operator>||</operator> <name><name>VIsual</name><operator>.</operator><name>lnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>VIsual_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name>VIsual</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>VIsual</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VIsual_mode</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lt</name><argument_list>(<argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr></argument>, <argument><expr><name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_visual</name><operator>.</operator><name>vi_mode</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lnum</name> <argument_list type="generic">&lt; <argument><expr><name><name>top</name><operator>.</operator><name>lnum</name></name> <operator>||</operator> <name>lnum</name></expr></argument> &gt;</argument_list></name> <name><name>bot</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>top</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name><name>top</name><operator>.</operator><name>col</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>lnum</name> <operator>==</operator> <name><name>bot</name><operator>.</operator><name>lnum</name></name> <operator>&amp;&amp;</operator> <name>col</name> <operator>&gt;=</operator> <name><name>bot</name><operator>.</operator><name>col</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>!=</operator> <literal type="char">'e'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>Ctrl_V</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getvvcol</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start2</name> <operator>&lt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name>start2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end2</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>end2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>top</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name> <operator>||</operator> <name><name>bot</name><operator>.</operator><name>col</name></name> <operator>==</operator> <name>MAXCOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>MAXCOL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cols_u</name> <init>= <expr><call><name>win_linetabsize</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name>regline</name></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cols_u</name> <operator>&lt;=</operator> <name>MAXCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>cols</name> <init>= <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>cols_u</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cols</name> <argument_list type="generic">&lt; <argument><expr><name>start</name> <operator>||</operator> <name>cols</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>p_sel</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADVANCE_REGINPUT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>MB_PTR_ADV(reginput)</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>bl_minval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>bl_maxval</name></decl>;</decl_stmt>














<function><type><specifier>static</specifier> <name>int</name></type> <name>regmatch</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, 
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regitem_T</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tm_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_FAIL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_CONT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_BREAK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_MATCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_NOMATCH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 



<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backpos</name><operator>.</operator><name>ga_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>


<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>regnarrate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>regprop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"(\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>got_int</name> <operator>||</operator> <name>scan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>++</operator><name>tm_count</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>profile_passed_limit</name><argument_list>(<argument><expr><operator>*</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timed_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>timed_out</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_CONT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>regnarrate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>regprop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>re_extmatch_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"External submatches:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">" \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mch_errmsg</name><argument_list>(<argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>REG_MULTI</name>
<operator>&amp;&amp;</operator> <operator>*</operator><name>reginput</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&lt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>reginput</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>WITH_NL</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>-=</operator> <name>ADD_NL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>!=</operator> <name>regline</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>EOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_BOF</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>reginput</name> <operator>!=</operator> <name>regline</name>
<operator>||</operator> <operator>(</operator><name>REG_MULTI</name> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_EOF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>!=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>||</operator> <name>c</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>CURSOR</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <operator>(</operator><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>!=</operator> <name><name>rex</name><operator>.</operator><name>reg_win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>lnum</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator> <operator>!=</operator> <name><name>rex</name><operator>.</operator><name>reg_win</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_MARK</name></expr>:</case>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mark</name> <init>= <expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>getmark_buf</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name> 
<operator>||</operator> <name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> 
<operator>||</operator> <operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>==</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>==</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name>cmp</name> <operator>==</operator> <literal type="char">'&gt;'</literal><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>col</name></name> <operator>&lt;</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>
?</condition><then> <expr><name>cmp</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>
</then><else>: <expr><name>cmp</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>pos</name><operator>-&gt;</operator><name>lnum</name></name> <operator>&lt;</operator> <name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>
?</condition><then> <expr><name>cmp</name> <operator>!=</operator> <literal type="char">'&gt;'</literal></expr>
</then><else>: <expr><name>cmp</name> <operator>!=</operator> <literal type="char">'&lt;'</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>RE_VISUAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>reg_match_visual</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_LNUM</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name><operator>)</operator> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name>
<operator>||</operator> <operator>!</operator><call><name>re_num_cmp</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>reglnum</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name><operator>)</operator></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_COL</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>uintmax_t</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_num_cmp</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_VCOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>re_num_cmp</name><argument_list>(<argument><expr><call><name>win_linetabsize</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><name>curwin</name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_win</name></name></expr></else></ternary></expr></argument>,
<argument><expr><name>regline</name></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>BOW</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>this_class</name></decl>;</decl_stmt>


<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>reg_prev_class</name><argument_list>()</argument_list></call> <operator>==</operator> <name>this_class</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name>reginput</name> <operator>&gt;</operator> <name>regline</name>
<operator>&amp;&amp;</operator> <call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name><name>reginput</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>EOW</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>==</operator> <name>regline</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>this_class</name></decl>, <decl><type ref="prev"/><name>prev_class</name></decl>;</decl_stmt>


<expr_stmt><expr><name>this_class</name> <operator>=</operator> <call><name>mb_get_class_tab</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name><operator>-&gt;</operator><name>b_chartab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_class</name> <operator>=</operator> <call><name>reg_prev_class</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>this_class</name> <operator>==</operator> <name>prev_class</name>
<operator>||</operator> <name>prev_class</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>prev_class</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name><name>reginput</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><name><name>reginput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <call><name>vim_iswordc_buf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break> 

<case>case <expr><name>ANY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>IDENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isIDc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SIDENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_isIDc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>KWORD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SKWORD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FNAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SFNAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_isfilec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>PRINT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>SPRINT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>WHITE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NWHITE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>DIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_digit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NDIGIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_digit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>HEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_hex</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NHEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_hex</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>OCTAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_octal</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NOCTAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_octal</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>WORD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_word</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NWORD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_word</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>HEAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_head</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NHEAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_head</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>ALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_alpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NALPHA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_alpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LOWER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_lower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NLOWER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_lower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>UPPER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ri_upper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>NUPPER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <call><name>ri_upper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>EXACTLY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opnd</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opnd</name> <operator>!=</operator> <operator>*</operator><name>reginput</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>enc_utf8</name>
<operator>&amp;&amp;</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><operator>*</operator><name>opnd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>opnd</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>


</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opnd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_ic</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_NOMATCH</name> <operator>&amp;&amp;</operator> <name>enc_utf8</name>
<operator>&amp;&amp;</operator> <call><name>UTF_COMPOSINGLIKE</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>, <argument><expr><name>reginput</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_icombine</name></name>
<operator>&amp;&amp;</operator> <call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RE_COMPOSING</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ANYOF</name></expr>:</case>
<case>case <expr><name>ANYBUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>cstrchr</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>ANYOF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>MULTIBYTECODE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opndc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>inpc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opnd</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>opndc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name> <operator>&amp;&amp;</operator> <call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>opndc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>reginput</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>reginput</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>inpc</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>reginput</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf_iscomposing</name><argument_list>(<argument><expr><name>inpc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>opndc</name> <operator>==</operator> <name>inpc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>reginput</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_MATCH</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>opnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>reginput</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RE_COMPOSING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>enc_utf8</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>utf_iscomposing</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_CPTR_ADV</name><argument_list>(<argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NOTHING</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>BACK</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>backpos_T</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>backpos_T</name> <operator>*</operator><operator>)</operator><name><name>backpos</name><operator>.</operator><name>ga_data</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>backpos</name><operator>.</operator><name>ga_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bp_scan</name> <operator>==</operator> <name>scan</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>backpos</name><operator>.</operator><name>ga_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>backpos_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GA_APPEND_VIA_PTR</name><argument_list>(<argument><expr><name>backpos_T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bp_scan</name></name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>reg_save_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bp_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>RA_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bp_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case> 
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case> 
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>MOPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_MOPEN</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>NOPEN</name></expr>:</case> 
<case>case <expr><name>NCLOSE</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_NOPEN</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>ZOPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_ZOPEN</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reg_startzpos</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>reg_startzp</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case> 
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case> 
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>MCLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_MCLOSE</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case> 
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>ZCLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_ZCLOSE</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>save_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reg_endzpos</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>reg_endzp</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>BACKREF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_subexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>no</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>reglnum</name>
<operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>reglnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>regline</name> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,
<argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>match_with_backref</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>,
<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,
<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr></argument>,
<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>RA_MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cleanup_zsubexpr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>ZREF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>re_extmatch_in</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>no</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name><name>re_extmatch_in</name><operator>-&gt;</operator><name>matches</name><index>[<expr><name>no</name></expr>]</index></name></expr></argument>,
<argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>BRANCH</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BRANCH</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_BRANCH</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_BREAK</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>BRACE_LIMITS</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BRACE_SIMPLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bl_minval</name> <operator>=</operator> <call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bl_maxval</name> <operator>=</operator> <call><name>OPERAND_MAX</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>BRACE_COMPLEX</name>
<operator>&amp;&amp;</operator> <call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>BRACE_COMPLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brace_min</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brace_max</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <call><name>OPERAND_MAX</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brace_count</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"BRACE_LIMITS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>op</name> <operator>-</operator> <name>BRACE_COMPLEX</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>brace_count</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>brace_count</name><index>[<expr><name>no</name></expr>]</index></name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name><name>brace_min</name><index>[<expr><name>no</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>brace_max</name><index>[<expr><name>no</name></expr>]</index></name></expr>
?</condition><then> <expr><name><name>brace_min</name><index>[<expr><name>no</name></expr>]</index></name></expr> </then><else>: <expr><name><name>brace_max</name><index>[<expr><name>no</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_BRCPLX_MORE</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>brace_min</name><index>[<expr><name>no</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>brace_max</name><index>[<expr><name>no</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>brace_count</name><index>[<expr><name>no</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>brace_max</name><index>[<expr><name>no</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_BRCPLX_LONG</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>no</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>brace_count</name><index>[<expr><name>no</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>brace_min</name><index>[<expr><name>no</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_BRCPLX_SHORT</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>BRACE_SIMPLE</name></expr>:</case>
<case>case <expr><name>STAR</name></expr>:</case>
<case>case <expr><name>PLUS</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>regstar_T</name></type> <name>rst</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb</name></name> <operator>=</operator> <operator>*</operator><call><name>OPERAND</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>mb_isupper</name><argument_list>(<argument><expr><name><name>rst</name><operator>.</operator><name>nextb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb_ic</name></name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name><name>rst</name><operator>.</operator><name>nextb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb_ic</name></name> <operator>=</operator> <call><name>mb_toupper</name><argument_list>(<argument><expr><name><name>rst</name><operator>.</operator><name>nextb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb_ic</name></name> <operator>=</operator> <name><name>rst</name><operator>.</operator><name>nextb</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>nextb_ic</name></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>BRACE_SIMPLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>minval</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>STAR</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>maxval</name></name> <operator>=</operator> <name>MAX_LIMIT</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>minval</name></name> <operator>=</operator> <name>bl_minval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>maxval</name></name> <operator>=</operator> <name>bl_maxval</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>







<expr_stmt><expr><name><name>rst</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>regrepeat</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rst</name><operator>.</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>rst</name><operator>.</operator><name>minval</name></name> <operator>&lt;=</operator> <name><name>rst</name><operator>.</operator><name>maxval</name></name></expr>
?</condition><then> <expr><name><name>rst</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>rst</name><operator>.</operator><name>minval</name></name></expr> </then><else>: <expr><name><name>rst</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>rst</name><operator>.</operator><name>maxval</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <name>p_mmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_maxmempat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regstar_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regstar_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>rst</name><operator>.</operator><name>minval</name></name> <operator>&lt;=</operator> <name><name>rst</name><operator>.</operator><name>maxval</name></name></expr>
?</condition><then> <expr><name>RS_STAR_LONG</name></expr> </then><else>: <expr><name>RS_STAR_SHORT</name></expr></else></ternary></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>regstar_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>rst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_BREAK</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>
<break>break;</break>

<case>case <expr><name>NOMATCH</name></expr>:</case>
<case>case <expr><name>MATCH</name></expr>:</case>
<case>case <expr><name>SUBPAT</name></expr>:</case>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_NOMATCH</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>BEHIND</name></expr>:</case>
<case>case <expr><name>NOBEHIND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <name>p_mmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_maxmempat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regbehind_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regbehind_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>regstack_push</name><argument_list>(<argument><expr><name>RS_BEHIND1</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>


<expr_stmt><expr><call><name>save_subexpr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>BHPOS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator>
<operator>||</operator> <name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>!=</operator> <name>reglnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name>reginput</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>NEWL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>||</operator> <operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>END</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_MATCH</name></expr>;</expr_stmt> 
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_corr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Illegal op code %d\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_CONT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for> 





<while>while <condition>(<expr><operator>!</operator><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>RA_FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><name>regitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>regstack</name><operator>.</operator><name>ga_len</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>RS_NOPEN</name></expr>:</case>

<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_MOPEN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_ZOPEN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reg_startzpos</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>reg_startzp</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_MCLOSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_ZCLOSE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>restore_se</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>sesave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reg_endzpos</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>reg_endzp</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_BRANCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_BREAK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BRANCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_BRCPLX_MORE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>brace_count</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RS_BRCPLX_LONG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>brace_count</name><index>[<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_CONT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_CONT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_BRCPLX_SHORT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_CONT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_NOMATCH</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>==</operator> <name>NOMATCH</name></expr> ?</condition><then> <expr><name>RA_MATCH</name></expr> </then><else>: <expr><name>RA_NOMATCH</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_CONT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>!=</operator> <name>SUBPAT</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_CONT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_BEHIND1</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_NOMATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regbehind_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_after</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_behind</name> <operator>=</operator> <name>behind_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>behind_pos</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_state</name></name> <operator>=</operator> <name>RS_BEHIND2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_BEHIND2</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name> <operator>&amp;&amp;</operator> <call><name>reg_save_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>behind_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>behind_pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_behind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>==</operator> <name>BEHIND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_after</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_subexpr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regbehind_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>limit</name></decl>;</decl_stmt>



<expr_stmt><expr><name>no</name> <operator>=</operator> <name>OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>&lt;</operator> <name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr>
?</condition><then> <expr><operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr></else></ternary><operator>)</operator>
<operator>-</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>&gt;=</operator> <name>limit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>&lt;</operator> <name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>||</operator> <call><name>reg_getline</name><argument_list>(
<argument><expr><operator>--</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator>
<operator>(</operator><name>colnr_T</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>line</name> <init>=
<expr><call><name>reg_getline</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>-=</operator>
<call><name>utf_head_off</name><argument_list>(<argument><expr><name>line</name></expr></argument>,
<argument><expr><name>line</name> <operator>+</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name>regline</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>regline</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>behind_pos</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name>
<operator>-</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name><operator>.</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name><operator>)</operator> <operator>&gt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no</name> <operator>==</operator> <name>OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_subexpr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>behind_pos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_behind</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_no</name></name> <operator>==</operator> <name>NOBEHIND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>save_after</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_MATCH</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>restore_subexpr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>regbehind_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regbehind_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>RS_STAR_LONG</name></expr>:</case>
<case>case <expr><name>RS_STAR_SHORT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>regstar_T</name> <modifier>*</modifier></type><name>rst</name> <init>= <expr><operator>(</operator><operator>(</operator><name>regstar_T</name> <operator>*</operator><operator>)</operator><name>rp</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regstar_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_BREAK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reg_restore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_BREAK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>rs_state</name></name> <operator>==</operator> <name>RS_STAR_LONG</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>rst</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>rst</name><operator>-&gt;</operator><name>minval</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>==</operator> <name>regline</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reglnum</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>regline</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_BACK</name><argument_list>(<argument><expr><name>regline</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>rst</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <name><name>rst</name><operator>-&gt;</operator><name>minval</name></name>
<operator>||</operator> <call><name>regrepeat</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>rst</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rst</name><operator>-&gt;</operator><name>nextb</name></name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>*</operator><name>reginput</name> <operator>==</operator> <name><name>rst</name><operator>-&gt;</operator><name>nextb</name></name>
<operator>||</operator> <operator>*</operator><name>reginput</name> <operator>==</operator> <name><name>rst</name><operator>-&gt;</operator><name>nextb_ic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>reg_save</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rp</name><operator>-&gt;</operator><name>rs_un</name><operator>.</operator><name>regsave</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_CONT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>RA_CONT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>regstack_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regstar_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>RA_NOMATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_CONT</name> <operator>||</operator> <name>rp</name> <operator>==</operator> <operator>(</operator><name>regitem_T</name> <operator>*</operator><operator>)</operator>
<operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>regstack</name><operator>.</operator><name>ga_len</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>RA_CONT</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>GA_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>status</name> <operator>==</operator> <name>RA_FAIL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_corr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Premature EOL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name> <operator>==</operator> <name>RA_MATCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for> 


</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>regitem_T</name> <modifier>*</modifier></type><name>regstack_push</name><parameter_list>(<parameter><decl><type><name>regstate_T</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regitem_T</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <name>p_mmp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_maxmempat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regstack</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regitem_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><name>regitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>regstack</name><operator>.</operator><name>ga_len</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regitem_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>rp</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regstack_pop</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regitem_T</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><name>regitem_T</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>regstack</name><operator>.</operator><name>ga_data</name></name> <operator>+</operator> <name><name>regstack</name><operator>.</operator><name>ga_len</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>scan</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>rs_scan</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regstack</name><operator>.</operator><name>ga_len</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regitem_T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> 
<name>regrepeat</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>maxcount</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>testval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>opnd</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANY</name></expr>:</case>
<case>case <expr><name>ANY</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>


<while>while <condition>(<expr><operator>*</operator><name>scan</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>||</operator> <name>count</name> <operator>==</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>IDENT</name></expr>:</case>
<case>case <expr><name>IDENT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>SIDENT</name></expr>:</case>
<case>case <expr><name>SIDENT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_isIDc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>testval</name> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>KWORD</name></expr>:</case>
<case>case <expr><name>KWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>SKWORD</name></expr>:</case>
<case>case <expr><name>SKWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordp_buf</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>testval</name> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>FNAME</name></expr>:</case>
<case>case <expr><name>FNAME</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>SFNAME</name></expr>:</case>
<case>case <expr><name>SFNAME</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_isfilec</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>testval</name> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>PRINT</name></expr>:</case>
<case>case <expr><name>PRINT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><name>SPRINT</name></expr>:</case>
<case>case <expr><name>SPRINT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_isprintc</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>testval</name> <operator>||</operator> <operator>!</operator><call><name>ascii_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>WHITE</name></expr>:</case>
<case>case <expr><name>WHITE</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>
<label><name>do_class</name>:</label>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>testval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>class_tab</name><index>[<expr><operator>*</operator><name>scan</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>testval</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>NWHITE</name></expr>:</case>
<case>case <expr><name>NWHITE</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_WHITE</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>DIGIT</name></expr>:</case>
<case>case <expr><name>DIGIT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_DIGIT</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NDIGIT</name></expr>:</case>
<case>case <expr><name>NDIGIT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_DIGIT</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>HEX</name></expr>:</case>
<case>case <expr><name>HEX</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_HEX</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NHEX</name></expr>:</case>
<case>case <expr><name>NHEX</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_HEX</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>OCTAL</name></expr>:</case>
<case>case <expr><name>OCTAL</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_OCTAL</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NOCTAL</name></expr>:</case>
<case>case <expr><name>NOCTAL</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_OCTAL</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>WORD</name></expr>:</case>
<case>case <expr><name>WORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_WORD</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NWORD</name></expr>:</case>
<case>case <expr><name>NWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_WORD</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>HEAD</name></expr>:</case>
<case>case <expr><name>HEAD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_HEAD</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NHEAD</name></expr>:</case>
<case>case <expr><name>NHEAD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_HEAD</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>ALPHA</name></expr>:</case>
<case>case <expr><name>ALPHA</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_ALPHA</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NALPHA</name></expr>:</case>
<case>case <expr><name>NALPHA</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_ALPHA</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>LOWER</name></expr>:</case>
<case>case <expr><name>LOWER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_LOWER</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NLOWER</name></expr>:</case>
<case>case <expr><name>NLOWER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_LOWER</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>UPPER</name></expr>:</case>
<case>case <expr><name>UPPER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <name>mask</name> <operator>=</operator> <name>RI_UPPER</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>
<case>case <expr><name>NUPPER</name></expr>:</case>
<case>case <expr><name>NUPPER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>RI_UPPER</name></expr>;</expr_stmt>
<goto>goto <name>do_class</name>;</goto>

<case>case <expr><name>EXACTLY</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cu</name></decl>, <decl><type ref="prev"/><name>cl</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <call><name>mb_toupper</name><argument_list>(<argument><expr><operator>*</operator><name>opnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><operator>*</operator><name>opnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>scan</name> <operator>==</operator> <name>cu</name> <operator>||</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <name>cl</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cu</name> <operator>=</operator> <operator>*</operator><name>opnd</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <name>cu</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>MULTIBYTECODE</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>cf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>&amp;&amp;</operator> <name>enc_utf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name> <operator>&amp;&amp;</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <operator>!</operator><name>enc_utf8</name>
<operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cf</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>ANYOF</name></expr>:</case>
<case>case <expr><name>ANYOF</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>testval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>FALLTHROUGH</name></expr>;</expr_stmt>

<case>case <expr><name>ANYBUT</name></expr>:</case>
<case>case <expr><name>ANYBUT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>REG_MULTI</name> <operator>||</operator> <operator>!</operator><call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>reglnum</name> <operator>&gt;</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name>
<operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <call><name>WITH_NL</name><argument_list>(<argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>cstrchr</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <name>testval</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>cstrchr</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <name>testval</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>scan</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>

<case>case <expr><name>NEWL</name></expr>:</case>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>maxcount</name>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>scan</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>reglnum</name> <operator>&lt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name>
<operator>&amp;&amp;</operator> <name>REG_MULTI</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADVANCE_REGINPUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<break>break;</break>

<default>default:</default> 
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_corr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Called regrepeat with op code %d\n"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>count</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regnext</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>JUST_CALC_SIZE</name> <operator>||</operator> <name>reg_toolong</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>NEXT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>-</operator> <name>offset</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>p</name> <operator>+</operator> <name>offset</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>prog_magic_wrong</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <ternary><condition><expr><name>REG_MULTI</name></expr> ?</condition><then> <expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>regprog</name></name></expr> </then><else>: <expr><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>regprog</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>engine</name></name> <operator>==</operator> <operator>&amp;</operator><name>nfa_regengine</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>UCHARAT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>bt_regprog_T</name> <operator>*</operator><operator>)</operator><name>prog</name><operator>)</operator><operator>-&gt;</operator><name>program</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REGMAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_corr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_subexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_clear_subexpr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>need_clear_subexpr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_zsubexpr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>need_clear_zsubexpr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reg_startzpos</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reg_endzpos</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lpos_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reg_startzp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>reg_endzp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NSUBEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>need_clear_zsubexpr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>save_subexpr</name><parameter_list>(<parameter><decl><type><name>regbehind_T</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>save_need_clear_subexpr</name></name> <operator>=</operator> <name>need_clear_subexpr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_clear_subexpr</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>save_start</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>save_end</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>save_start</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>save_end</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_subexpr</name><parameter_list>(<parameter><decl><type><name>regbehind_T</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<expr_stmt><expr><name>need_clear_subexpr</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>save_need_clear_subexpr</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_clear_subexpr</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSUBEXP</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>save_start</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>save_end</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>save_start</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>save_end</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se_u</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>reg_nextline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fast_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>reg_save</name><parameter_list>(<parameter><decl><type><name>regsave_T</name> <modifier>*</modifier></type><name>save</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>save</name><operator>-&gt;</operator><name>rs_len</name></name> <operator>=</operator> <name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>reg_restore</name><parameter_list>(<parameter><decl><type><name>regsave_T</name> <modifier>*</modifier></type><name>save</name></decl></parameter>, <parameter><decl><type><name>garray_T</name> <modifier>*</modifier></type><name>gap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>!=</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>reglnum</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>reglnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>regline</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>gap</name><operator>-&gt;</operator><name>ga_len</name></name> <operator>=</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>reg_save_equal</name><parameter_list>(<parameter><decl><type><name>regsave_T</name> <modifier>*</modifier></type><name>save</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>reglnum</name> <operator>==</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>lnum</name></name>
<operator>&amp;&amp;</operator> <name>reginput</name> <operator>==</operator> <name>regline</name> <operator>+</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>pos</name><operator>.</operator><name>col</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>reginput</name> <operator>==</operator> <name><name>save</name><operator>-&gt;</operator><name>rs_u</name><operator>.</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>save_se_multi</name><parameter_list>(<parameter><decl><type><name>save_se_T</name> <modifier>*</modifier></type><name>savep</name></decl></parameter>, <parameter><decl><type><name>lpos_T</name> <modifier>*</modifier></type><name>posp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>savep</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <operator>*</operator><name>posp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>lnum</name></name> <operator>=</operator> <name>reglnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>posp</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name>colnr_T</name><operator>)</operator><operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>save_se_one</name><parameter_list>(<parameter><decl><type><name>save_se_T</name> <modifier>*</modifier></type><name>savep</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>savep</name><operator>-&gt;</operator><name>se_u</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>re_num_cmp</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OPERAND_CMP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name> <operator>&gt;</operator> <name>n</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OPERAND_CMP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>val</name> <operator>&lt;</operator> <name>n</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>val</name> <operator>==</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>match_with_backref</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>start_lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>start_col</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>end_lnum</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>end_col</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>clnum</name> <init>= <expr><name>start_lnum</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>ccol</name> <init>= <expr><name>start_col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>regline</name> <operator>!=</operator> <name>reg_tofree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reg_tofree</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>reg_tofreelen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_tofree</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_tofreelen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>reg_tofree</name></expr></argument>, <argument><expr><name>regline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>reg_tofree</name> <operator>+</operator> <operator>(</operator><name>reginput</name> <operator>-</operator> <name>regline</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>regline</name> <operator>=</operator> <name>reg_tofree</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>clnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>end_col</name> <operator>-</operator> <name>ccol</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>ccol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cstrncmp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>ccol</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RA_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>==</operator> <name>end_lnum</name></expr>)</condition> <block>{<block_content>
<break>break;</break> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reglnum</name> <operator>&gt;=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>RA_NOMATCH</name></expr>;</return> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>reg_nextline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytelen</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>bytelen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>clnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ccol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RA_FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>



<return>return <expr><name>RA_MATCH</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_DUMP</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type> <name>regdump</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>bt_regprog_T</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name>EXACTLY</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"bt_regexp_log.log"</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"-------------------------------------\n\r\nregcomp(%s):\r\n"</literal></expr></argument>,
<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<while>while <condition>(<expr><name>op</name> <operator>!=</operator> <name>END</name> <operator>||</operator> <name>s</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%2d%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>regprop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>next</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BRACE_LIMITS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" minval %"</literal> <name>PRId64</name> <literal type="string">", maxval %"</literal> <name>PRId64</name></expr></argument>,
<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>OPERAND_MAX</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BEHIND</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>NOBEHIND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" count %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>RE_LNUM</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>RE_COL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>RE_VCOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" count %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>OPERAND_MIN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>ANYOF</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>ANYOF</name> <operator>+</operator> <name>ADD_NL</name>
<operator>||</operator> <name>op</name> <operator>==</operator> <name>ANYBUT</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>ANYBUT</name> <operator>+</operator> <name>ADD_NL</name>
<operator>||</operator> <name>op</name> <operator>==</operator> <name>EXACTLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nxxxxxxxxx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\nxxxxxxxxx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"start `%s' 0x%x; "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr>
?</condition><then> <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>transchar</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><literal type="string">"multibyte"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"anchored; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"must have \"%s\""</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>regprop</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BOL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BOL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EOL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EOL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_BOF</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BOF"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_EOF</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EOF"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CURSOR</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"CURSOR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_VISUAL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"RE_VISUAL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_LNUM</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"RE_LNUM"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_MARK</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"RE_MARK"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_COL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"RE_COL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RE_VCOL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"RE_VCOL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BOW</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BOW"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EOW</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EOW"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANY"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANY</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANY+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYOF</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYOF"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYOF</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYOF+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYBUT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYBUT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYBUT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYBUT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IDENT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"IDENT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IDENT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"IDENT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIDENT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SIDENT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SIDENT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SIDENT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KWORD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"KWORD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>KWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"KWORD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SKWORD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SKWORD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SKWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SKWORD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FNAME</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"FNAME"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FNAME</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"FNAME+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SFNAME</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SFNAME"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SFNAME</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SFNAME+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRINT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"PRINT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRINT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"PRINT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPRINT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SPRINT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SPRINT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SPRINT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WHITE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"WHITE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WHITE</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"WHITE+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NWHITE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NWHITE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NWHITE</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NWHITE+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIGIT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"DIGIT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DIGIT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"DIGIT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NDIGIT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NDIGIT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NDIGIT</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NDIGIT+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEX</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"HEX"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEX</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"HEX+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NHEX</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NHEX"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NHEX</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NHEX+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OCTAL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"OCTAL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OCTAL</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"OCTAL+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOCTAL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOCTAL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOCTAL</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOCTAL+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WORD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"WORD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>WORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"WORD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NWORD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NWORD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NWORD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NWORD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEAD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HEAD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"HEAD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NHEAD</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NHEAD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NHEAD</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NHEAD+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALPHA</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ALPHA"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ALPHA</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ALPHA+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NALPHA</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NALPHA"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NALPHA</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NALPHA+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOWER</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"LOWER"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOWER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"LOWER+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NLOWER</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NLOWER"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NLOWER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NLOWER+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UPPER</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"UPPER"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>UPPER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"UPPER+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUPPER</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NUPPER"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUPPER</name> <operator>+</operator> <name>ADD_NL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NUPPER+NL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRANCH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BRANCH"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXACTLY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EXACTLY"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOTHING</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOTHING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BACK</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BACK"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>END</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"END"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"MATCH START"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>MOPEN</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MOPEN%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>MOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"MATCH END"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>MCLOSE</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MCLOSE%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>MCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>BACKREF</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BACKREF%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>BACKREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOPEN</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOPEN"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NCLOSE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NCLOSE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZOPEN</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ZOPEN%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ZOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZCLOSE</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ZCLOSE%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ZCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>ZREF</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ZREF%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>ZREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STAR</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"STAR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PLUS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"PLUS"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOMATCH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOMATCH"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MATCH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"MATCH"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BEHIND</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BEHIND"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOBEHIND</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOBEHIND"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SUBPAT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"SUBPAT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRACE_LIMITS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BRACE_LIMITS"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRACE_SIMPLE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BRACE_SIMPLE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">0</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">3</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">4</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">5</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">6</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">7</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">8</literal></expr>:</case>
<case>case <expr><name>BRACE_COMPLEX</name> <operator>+</operator> <literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BRACE_COMPLEX%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>BRACE_COMPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MULTIBYTECODE</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"MULTIBYTECODE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NEWL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NEWL"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"corrupt %d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCAT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<decl_stmt><decl><type><specifier>static</specifier> <name>decomp_T</name></type> <name><name>decomp_table</name><index>[<expr><literal type="number">0xfb4f</literal><operator>-</operator><literal type="number">0xfb20</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{<expr><literal type="number">0x5e2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5db</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5dc</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5dd</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e8</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5ea</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="char">'+'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5c2</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5b4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d2</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d3</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d4</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d5</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d6</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfb37</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d8</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d9</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5da</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5db</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5dc</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfb3d</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5de</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfb3f</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e0</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e1</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfb42</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e3</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e4</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0xfb45</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e6</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e7</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e8</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e9</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5ea</literal></expr>, <expr><literal type="number">0x5bc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d5</literal></expr>, <expr><literal type="number">0x5b9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d1</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5db</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5e4</literal></expr>, <expr><literal type="number">0x5bf</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, 
<expr><block>{<expr><literal type="number">0x5d0</literal></expr>, <expr><literal type="number">0x5dc</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> 
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mb_decompose</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>decomp_T</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xfb20</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfb4f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>decomp_table</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">0xfb20</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c1</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c2</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c3</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>c1</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c2</name> <operator>=</operator> <operator>*</operator><name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>cstrncmp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>mb_strnicmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>enc_utf8</name> <operator>&amp;&amp;</operator> <name><name>rex</name><operator>.</operator><name>reg_icombine</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>str2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c11</name></decl>, <decl><type ref="prev"/><name>c12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>junk</name></decl>;</decl_stmt>



<expr_stmt><expr><name>str1</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str2</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str1</name> <operator>-</operator> <name>s1</name><operator>)</operator> <operator>&lt;</operator> <operator>*</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>str1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>str2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mb_decompose</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c11</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mb_decompose</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c12</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c11</name> <operator>!=</operator> <name>c12</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>rex</name><operator>.</operator><name>reg_ic</name></name> <operator>||</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c11</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>utf_fold</name><argument_list>(<argument><expr><name>c12</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>str2</name> <operator>-</operator> <name>s2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>fptr_T</name></type> <name>do_upper</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>mb_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type> <name>do_Upper</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>mb_toupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Upper</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type> <name>do_lower</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fptr_T</name></type> <name>do_Lower</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>mb_tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Lower</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>char_u</name> <modifier>*</modifier></type><name>regtilde</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>newsub</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>tmpsub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prevlen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>newsub</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <name>magic</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>magic</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>reg_prev_sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prevlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpsub</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>newsub</name><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tmpsub</name></expr></argument>, <argument><expr><name>newsub</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>tmpsub</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>reg_prev_sub</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>prevlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>magic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>tmpsub</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>prevlen</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newsub</name> <operator>!=</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newsub</name> <operator>=</operator> <name>tmpsub</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>newsub</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>prevlen</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>magic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRMOVE</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>reg_prev_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newsub</name> <operator>!=</operator> <name>source</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>reg_prev_sub</name> <operator>=</operator> <name>newsub</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>reg_prev_sub</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>newsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>newsub</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>can_f_submatch</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>sm_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>sm_mmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>sm_firstlnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>sm_maxline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sm_line_lbr</name></decl>;</decl_stmt>
}</block></struct></type> <name>regsubmatch_T</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>regsubmatch_T</name></type> <name>rsm</name></decl>;</decl_stmt> 



<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_submatch_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>tv_list_init_static10</name><argument_list>(<argument><expr><operator>(</operator><name>staticList10_T</name> <operator>*</operator><operator>)</operator><name><name>argv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>listitem_T</name> <modifier>*</modifier></type><name>li</name> <init>= <expr><call><name>tv_list_first</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v_type</name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TV_LIST_ITEM_TV</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>li</name> <operator>=</operator> <call><name>TV_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_list</name></name></expr></argument>, <argument><expr><name>li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_submatch_list</name><parameter_list>(<parameter><decl><type><name>staticList10_T</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>TV_LIST_ITER</name><argument_list>(<argument>&amp;sl-&gt;sl_list</argument>, <argument>li</argument>, <argument>{
xfree(TV_LIST_ITEM_TV(li)-&gt;vval.v_string);
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

















<function><type><name>int</name></type> <name>vim_regsub</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>vim_regsub_both</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>backslash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vim_regsub_multi</name><parameter_list>(<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_match</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name> <operator>=</operator> <name>rmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_ml</name><operator>.</operator><name>ml_line_count</name></name> <operator>-</operator> <name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>vim_regsub_both</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><name>magic</name></expr></argument>, <argument><expr><name>backslash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vim_regsub_both</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>typval_T</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fptr_T</name></type> <name>func_all</name> <init>= <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fptr_T</name></type> <name>func_one</name> <init>= <expr><operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>clnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>eval_result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>source</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expr</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>prog_magic_wrong</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev_can_f_submatch</name> <init>= <expr><name>can_f_submatch</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>regsubmatch_T</name></type> <name>rsm_save</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>can_f_submatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rsm_save</name> <operator>=</operator> <name>rsm</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>can_f_submatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_firstlnum</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_maxline</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_line_lbr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>typval_T</name></type> <name>rettv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>staticList10_T</name></type> <name>matchList</name> <init>= <expr><name>TV_LIST_STATIC10_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>v_type</name></name> <operator>=</operator> <name>VAR_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rettv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>v_type</name> <operator>=</operator> <name>VAR_LIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vval</name><operator>.</operator><name>v_list</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>matchList</name><operator>.</operator><name>sl_list</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_FUNC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr><name>fill_submatch_list</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_PARTIAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>partial_T</name> <modifier>*</modifier></type><name>partial</name> <init>= <expr><name><name>expr</name><operator>-&gt;</operator><name>vval</name><operator>.</operator><name>v_partial</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>partial_name</name><argument_list>(<argument><expr><name>partial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>call_func</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr><name>fill_submatch_list</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>partial</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tv_list_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>matchList</name><operator>.</operator><name>sl_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_submatch_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>matchList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NUMBUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>tv_get_string_buf_chk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>tv_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rettv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>source</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eval_result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>had_backslash</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>eval_result</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><call><name>MB_PTR_ADV</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rsm</name><operator>.</operator><name>sm_line_lbr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>had_backslash</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>had_backslash</name> <operator>&amp;&amp;</operator> <name>backslash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave_escaped</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>, <argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eval_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>eval_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>can_f_submatch</name> <operator>=</operator> <name>prev_can_f_submatch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>can_f_submatch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rsm</name> <operator>=</operator> <name>rsm_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <name>magic</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>magic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"uUlLeE"</literal></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>src</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_upper</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Upper</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_lower</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>do_Lower</name></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <expr_stmt><expr><name>func_one</name> <operator>=</operator> <name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>NL</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>TAB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>


<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>src</name></expr>;</expr_stmt> <break>break;</break>



<default>default:</default> <if_stmt><if>if <condition>(<expr><name>backslash</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>func_one</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>func_all</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>totlen</name> <init>= <expr><call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&lt;</operator> <name>totlen</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totlen</name> <operator>-</operator> <name>clen</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>totlen</name> <operator>-</operator> <name>clen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>totlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clnum</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>clnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name>
<operator>-</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rex</name><operator>.</operator><name>reg_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>REG_MULTI</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><operator>++</operator><name>clnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>clnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rex</name><operator>.</operator><name>reg_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_re_damg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>backslash</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>func_one</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_one</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_one</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>func_all</name> <operator>!=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>func_all</name> <operator>=</operator> <operator>(</operator><name>fptr_T</name><operator>)</operator><operator>(</operator><call><name>func_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>



<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>utf_ptr2len</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>utf_char2len</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>no</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>dest</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>reg_getline_submatch</name><parameter_list>(<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_first</name> <init>= <expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>save_max</name> <init>= <expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_firstlnum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_maxline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_firstlnum</name></name> <operator>=</operator> <name>save_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_maxline</name></name> <operator>=</operator> <name>save_max</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>reg_submatch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>lnum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_f_submatch</name> <operator>||</operator> <name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name> <operator>==</operator> <name>lnum</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name> <operator>-</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lnum</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lnum</name> <operator>&lt;</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRCPY</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRNCPY</name><argument_list>(<argument><expr><name>retval</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>lnum</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>retval</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vim_strnsave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>list_T</name> <modifier>*</modifier></type><name>reg_submatch_list</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_f_submatch</name> <operator>||</operator> <name>no</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>linenr_T</name></type> <name>slnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>linenr_T</name></type> <name>elnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>list_T</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rsm</name><operator>.</operator><name>sm_match</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>elnum</name> <operator>=</operator> <name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>lnum</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slnum</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>colnr_T</name></type> <name>scol</name> <init>= <expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>startpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>ecol</name> <init>= <expr><name><name>rsm</name><operator>.</operator><name>sm_mmatch</name><operator>-&gt;</operator><name>endpos</name><index>[<expr><name>no</name></expr>]</index></name><operator>.</operator><name>col</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>tv_list_alloc</name><argument_list>(<argument><expr><name>elnum</name> <operator>-</operator> <name>slnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>slnum</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>scol</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slnum</name> <operator>==</operator> <name>elnum</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ecol</name> <operator>-</operator> <name>scol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elnum</name> <operator>-</operator> <name>slnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>slnum</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>reg_getline_submatch</name><argument_list>(<argument><expr><name>elnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ecol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>startp</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>tv_list_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tv_list_append_string</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>rsm</name><operator>.</operator><name>sm_match</name><operator>-&gt;</operator><name>endp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>bt_regengine</name> <init>=
<expr><block>{
<expr><name>bt_regcomp</name></expr>,
<expr><name>bt_regfree</name></expr>,
<expr><name>bt_regexec_nl</name></expr>,
<expr><name>bt_regexec_multi</name></expr>,
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DO_NOT_DEFINE_EMPTY_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp_nfa.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>regengine_T</name></type> <name>nfa_regengine</name> <init>=
<expr><block>{
<expr><name>nfa_regcomp</name></expr>,
<expr><name>nfa_regfree</name></expr>,
<expr><name>nfa_regexec_nl</name></expr>,
<expr><name>nfa_regexec_multi</name></expr>,
<expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regexp_engine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>regname</name><index>[]</index><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"AUTOMATIC Regexp Engine"</literal></expr>,
<expr><literal type="string">"BACKTRACKING Regexp Engine"</literal></expr>,
<expr><literal type="string">"NFA Regexp Engine"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>regprog_T</name> <modifier>*</modifier></type><name>vim_regcomp</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>re_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><name>expr_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_called_emsg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>p_re</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><literal type="string">"\\%#="</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>newengine</name> <init>= <expr><name><name>expr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newengine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>
<operator>||</operator> <name>newengine</name> <operator>==</operator> <name>BACKTRACKING_ENGINE</name>
<operator>||</operator> <name>newengine</name> <operator>==</operator> <name>NFA_ENGINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name><name>expr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>expr</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REGEXP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>smsg</name><argument_list>(<argument><expr><literal type="string">"New regexp mode selected (%d): %s"</literal></expr></argument>,
<argument><expr><name>regexp_engine</name></expr></argument>,
<argument><expr><name><name>regname</name><index>[<expr><name>newengine</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(
<argument><expr><literal type="string">"E864: \\%#= can only be followed by 0, 1, or 2. The automatic engine will be used "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>AUTOMATIC_ENGINE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bt_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nfa_regengine</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_buf</name></name> <operator>=</operator> <name>curbuf</name></expr>;</expr_stmt>




<expr_stmt><expr><name>save_called_emsg</name> <operator>=</operator> <name>called_emsg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>called_emsg</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>!=</operator> <name>BACKTRACKING_ENGINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>nfa_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>,
<argument><expr><name>re_flags</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>regexp_engine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name></expr> ?</condition><then> <expr><name>RE_AUTO</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>bt_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BT_REGEXP_DEBUG_LOG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>!=</operator> <name>BACKTRACKING_ENGINE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>BT_REGEXP_DEBUG_LOG_NAME</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"Syntax error in \"%s\"\n"</literal></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><literal type="string">"(NFA) Could not open \"%s\" to write !!!"</literal></expr></argument>,
<argument><expr><name>BT_REGEXP_DEBUG_LOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>regexp_engine</name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>called_emsg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regexp_engine</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name><name>bt_regengine</name><operator>.</operator><name>regcomp</name></name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>called_emsg</name> <operator>|=</operator> <name>save_called_emsg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>=</operator> <name>regexp_engine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>re_flags</name></name> <operator>=</operator> <name>re_flags</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>prog</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>vim_regfree</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>prog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regfree</name></name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_re_switch</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>verbose_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switching to backtracking RE engine for pattern: "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MSG_PUTS</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>verbose_leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>vim_regexec_string</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_startpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rex</name><operator>.</operator><name>reg_endpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_nl</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>
<operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_re</name> <init>= <expr><name>p_re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>re_flags</name> <init>= <expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report_re_switch</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_nl</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>save_p_re</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>vim_regexec_prog</name><parameter_list>(<parameter><decl><type><name>regprog_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_case</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_T</name></type> <name>regmatch</name> <init>= <expr><block>{ <expr><operator>.</operator><name>regprog</name> <operator>=</operator> <operator>*</operator><name>prog</name></expr>, <expr><operator>.</operator><name>rm_ic</name> <operator>=</operator> <name>ignore_case</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>vim_regexec_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>regmatch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>prog</name> <operator>=</operator> <name><name>regmatch</name><operator>.</operator><name>regprog</name></name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>vim_regexec</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_regexec_string</name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>vim_regexec_nl</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vim_regexec_string</name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>long</name></type> <name>vim_regexec_multi</name><parameter_list>(
<parameter><decl><type><name>regmmatch_T</name> <modifier>*</modifier></type><name>rmp</name></decl></parameter>,
<parameter><decl><type><name>win_T</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, 
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>linenr_T</name></type> <name>lnum</name></decl></parameter>, 
<parameter><decl><type><name>colnr_T</name></type> <name>col</name></decl></parameter>, 
<parameter><decl><type><name>proftime_T</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>timed_out</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>regexec_T</name></type> <name>rex_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rex_in_use_save</name> <init>= <expr><name>rex_in_use</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rex_save</name> <operator>=</operator> <name>rex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_multi</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_engine</name></name> <operator>==</operator> <name>AUTOMATIC_ENGINE</name>
<operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <name>NFA_TOO_EXPENSIVE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_p_re</name> <init>= <expr><name>p_re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>re_flags</name> <init>= <expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>re_flags</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>nfa_regprog_T</name> <operator>*</operator><operator>)</operator><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name><operator>)</operator><operator>-&gt;</operator><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>BACKTRACKING_ENGINE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_regfree</name><argument_list>(<argument><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>report_re_switch</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <name>REX_ALL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>=</operator> <call><name>vim_regcomp</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>re_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_do_extmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rmp</name><operator>-&gt;</operator><name>regprog</name><operator>-&gt;</operator><name>engine</name><operator>-&gt;</operator><name>regexec_multi</name></name><argument_list>(<argument><expr><name>rmp</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lnum</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>timed_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_re</name> <operator>=</operator> <name>save_p_re</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rex_in_use</name> <operator>=</operator> <name>rex_in_use_save</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rex_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rex</name> <operator>=</operator> <name>rex_save</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
