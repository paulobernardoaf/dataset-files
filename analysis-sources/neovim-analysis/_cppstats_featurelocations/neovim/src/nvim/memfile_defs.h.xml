<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\memfile_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_MEMFILE_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_MEMFILE_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>






<typedef>typedef <type><name>int64_t</name></type> <name>blocknr_T</name>;</typedef>








<typedef>typedef <type><struct>struct <name>mf_hashitem</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>mf_hashitem</name></name> <modifier>*</modifier></type><name>mhi_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mf_hashitem</name></name> <modifier>*</modifier></type><name>mhi_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>mhi_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>mf_hashitem_T</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MHT_INIT_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct <name>mf_hashtab</name> <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>mht_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>mht_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>mht_buckets</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>mf_hashitem_T</name> <modifier>*</modifier></type><name><name>mht_small_buckets</name><index>[<expr><name>MHT_INIT_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>mf_hashtab_T</name>;</typedef>














<typedef>typedef <type><struct>struct <name>bhdr</name> <block>{
<decl_stmt><decl><type><name>mf_hashitem_T</name></type> <name>bh_hashitem</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bh_bnum</name></cpp:macro> <cpp:value>bh_hashitem.mhi_key</cpp:value></cpp:define> 

<decl_stmt><decl><type><name><name>struct</name> <name>bhdr</name></name> <modifier>*</modifier></type><name>bh_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>bhdr</name></name> <modifier>*</modifier></type><name>bh_prev</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>bh_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>bh_page_count</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_DIRTY</name></cpp:macro> <cpp:value>1U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BH_LOCKED</name></cpp:macro> <cpp:value>2U</cpp:value></cpp:define>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bh_flags</name></decl>;</decl_stmt> 
}</block></struct></type> <name>bhdr_T</name>;</typedef>







<typedef>typedef <type><struct>struct <name>mf_blocknr_trans_item</name> <block>{
<decl_stmt><decl><type><name>mf_hashitem_T</name></type> <name>nt_hashitem</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nt_old_bnum</name></cpp:macro> <cpp:value>nt_hashitem.mhi_key</cpp:value></cpp:define> 
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>nt_new_bnum</name></decl>;</decl_stmt> 
}</block></struct></type> <name>mf_blocknr_trans_item_T</name>;</typedef>


<typedef>typedef <type><struct>struct <name>memfile</name> <block>{
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mf_fname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>mf_ffname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mf_fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>mf_free_first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>mf_used_first</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bhdr_T</name> <modifier>*</modifier></type><name>mf_used_last</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mf_hashtab_T</name></type> <name>mf_hash</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>mf_hashtab_T</name></type> <name>mf_trans</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>mf_blocknr_max</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>mf_blocknr_min</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>mf_neg_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>blocknr_T</name></type> <name>mf_infile_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>mf_page_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>mf_dirty</name></decl>;</decl_stmt> 
}</block></struct></type> <name>memfile_T</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
