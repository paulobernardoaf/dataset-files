<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\channel.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_CHANNEL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_CHANNEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/pty_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/libuv_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval/typval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/msgpack_rpc/channel_defs.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAN_STDIO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAN_STDERR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kChannelStreamProc</name></decl>,
<decl><name>kChannelStreamSocket</name></decl>,
<decl><name>kChannelStreamStdio</name></decl>,
<decl><name>kChannelStreamStderr</name></decl>,
<decl><name>kChannelStreamInternal</name></decl>
}</block></enum></type> <name>ChannelStreamType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>kChannelPartStdin</name></decl>,
<decl><name>kChannelPartStdout</name></decl>,
<decl><name>kChannelPartStderr</name></decl>,
<decl><name>kChannelPartRpc</name></decl>,
<decl><name>kChannelPartAll</name></decl>
}</block></enum></type> <name>ChannelPart</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Stream</name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stream</name></type> <name>out</name></decl>;</decl_stmt>
}</block></struct></type> <name>StdioPair</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>;</decl_stmt>
}</block></struct></type> <name>StderrState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Callback</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dict_T</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>garray_T</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>buffered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>CallbackReader</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLBACK_READER_INIT</name></cpp:macro> <cpp:value>((CallbackReader){ .cb = CALLBACK_NONE, .self = NULL, .buffer = GA_EMPTY_INIT_VALUE, .buffered = false, .type = NULL })</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>callback_reader_set</name><parameter_list>(<parameter><decl><type><name>CallbackReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>reader</name><operator>.</operator><name>cb</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>kCallbackNone</name> <operator>||</operator> <name><name>reader</name><operator>.</operator><name>self</name></name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Channel</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MultiQueue</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelStreamType</name></type> <name>streamtype</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>Process</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LibuvProcess</name></type> <name>uv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PtyProcess</name></type> <name>pty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Stream</name></type> <name>socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StdioPair</name></type> <name>stdio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StderrState</name></type> <name>err</name></decl>;</decl_stmt>
}</block> <decl><name>stream</name></decl>;</union>

<decl_stmt><decl><type><name>bool</name></type> <name>is_rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RpcState</name></type> <name>rpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Terminal</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CallbackReader</name></type> <name>on_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CallbackReader</name></type> <name>on_stderr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Callback</name></type> <name>on_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exit_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>callback_busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>callback_scheduled</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>EXTERN</name></type> <name>PMap</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list> <modifier>*</modifier><name>channels</name> <name>INIT</name><argument_list>(<argument><expr><operator>=</operator> <name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"channel.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Channel</name> <modifier>*</modifier></type><name>find_channel</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><call><name>pmap_get</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Stream</name> <modifier>*</modifier></type><name>channel_instream</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kChannelStreamProc</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>in</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamSocket</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamStdio</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>out</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamInternal</name></expr>:</case>
<case>case <expr><name>kChannelStreamStderr</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Stream</name> <modifier>*</modifier></type><name>channel_outstream</name><parameter_list>(<parameter><decl><type><name>Channel</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>streamtype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>kChannelStreamProc</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>proc</name><operator>.</operator><name>out</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamSocket</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>socket</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamStdio</name></expr>:</case>
<return>return <expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>stdio</name><operator>.</operator><name>in</name></name></expr>;</return>

<case>case <expr><name>kChannelStreamInternal</name></expr>:</case>
<case>case <expr><name>kChannelStreamStderr</name></expr>:</case>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
