<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\getchar.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ascii.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/getchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/cursor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/edit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_docmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_getln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mbyte.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/misc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/keymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/garray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/move.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/normal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ui.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/event/loop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/api/private/handle.h"</cpp:file></cpp:include>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curscript</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileDescriptor</name> <modifier>*</modifier></type><name><name>scriptin</name><index>[<expr><name>NSCRIPT</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMAL_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>redobuff</name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NUL</name></expr> }</block></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>old_redobuff</name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NUL</name></expr> }</block></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>recordbuff</name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NUL</name></expr> }</block></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>readbuf1</name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NUL</name></expr> }</block></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>buffheader_T</name></type> <name>readbuf2</name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NUL</name></expr> }</block></expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>typeahead_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>block_redo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_HASH</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((mode) &amp; (NORMAL + VISUAL + SELECTMODE + OP_PENDING + TERM_FOCUS)) ? (c1) : ((c1) ^ 0x80))</cpp:value></cpp:define>






<expr_stmt><expr><specifier>static</specifier> <name>mapblock_T</name> <operator>*</operator><operator>(</operator><name><name>maphash</name><index>[<expr><name>MAX_MAPHASH</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>maphash_valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>mapblock_T</name> <modifier>*</modifier></type><name>first_abbr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>KeyNoremap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_YES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_SCRIPT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM_ABBR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPELEN_INIT</name></cpp:macro> <cpp:value>(5 * (MAXMAPLEN + 3))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>typebuf_init</name><index>[<expr><name>TYPELEN_INIT</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>noremapbuf_init</name><index>[<expr><name>TYPELEN_INIT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>last_recorded_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getchar.c.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type> <name>free_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name>np</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>get_buffcont</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dozero</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>buffblock_T</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr></init></decl>;</init>
<condition><expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>||</operator> <name>dozero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>buffblock_T</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr></init></decl>;</init>
<condition><expr><name>bp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_recorded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>last_recorded_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>last_recorded_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>restart_edit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_O</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>get_inserted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>add_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E222: Add to read buffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>,
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr></argument>,
<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_str</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <name>MINIMAL_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MINIMAL_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffblock_T</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>slen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRLCPY</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>b_str</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>b_next</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name><operator>-&gt;</operator><name>b_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_curr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>add_num_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>number</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>add_char_buff</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bytes</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>read_readbuffers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_readbuf</name><parameter_list>(<parameter><decl><type><name>buffheader_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<return>return <expr><name>NUL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>buffblock_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>curr</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>b_str</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>b_str</name><index>[<expr><operator>++</operator><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>bh_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>start_stuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_curr</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>readbuf2</name><operator>.</operator><name>bh_first</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_space</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>stuff_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>readbuf1_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>typeahead_noflush</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>typeahead_char</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>flush_buffers</name><parameter_list>(<parameter><decl><type><name>flush_buffers_T</name></type> <name>flush_typeahead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>read_readbuffers</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>flush_typeahead</name> <operator>==</operator> <name>FLUSH_MINIMAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flush_typeahead</name> <operator>==</operator> <name>FLUSH_INPUT</name></expr>)</condition> <block>{<block_content>



<while>while <condition>(<expr><call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10L</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>ResetRedobuff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_redobuff</name> <operator>=</operator> <name>redobuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>CancelRedo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redobuff</name> <operator>=</operator> <name>old_redobuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>read_readbuffers</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>saveRedobuff</name><parameter_list>(<parameter><decl><type><name>save_redo_T</name> <modifier>*</modifier></type><name>save_redo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name> <operator>=</operator> <name>redobuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>save_redo</name><operator>-&gt;</operator><name>sr_old_redobuff</name></name> <operator>=</operator> <name>old_redobuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_buffcont</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>restoreRedobuff</name><parameter_list>(<parameter><decl><type><name>save_redo_T</name> <modifier>*</modifier></type><name>save_redo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>redobuff</name> <operator>=</operator> <name><name>save_redo</name><operator>-&gt;</operator><name>sr_redobuff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_redobuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_redobuff</name> <operator>=</operator> <name><name>save_redo</name><operator>-&gt;</operator><name>sr_old_redobuff</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>AppendToRedobuff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>AppendToRedobuffLit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block_redo</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><ternary><condition><expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr> </then><else>: <expr><name>s</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name> <operator>&lt;</operator> <name>len</name></expr></else></ternary></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;</operator> <name>DEL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>str</name> <operator>&gt;=</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>has_mbyte</name></expr>
?</condition><then> <expr><call><name>mb_cptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s</name><operator>++</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>DEL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>Ctrl_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><literal type="string">"048"</literal></expr></argument>, <argument><expr><literal type="number">3L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>AppendCharToRedobuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>AppendNumberToRedobuff</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_redo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>redobuff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>stuffReadbuff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>stuffRedoReadbuff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stuffReadbuffLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>stuffReadbuffSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stuffReadbuffLen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>mb_ptr2char_adv</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>NL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stuffcharReadbuff</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>stuffcharReadbuff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>stuffnumReadbuff</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>read_redo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>buffblock_T</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <ternary><condition><expr><name>old_redo</name></expr> ?</condition><then> <expr><name><name>old_redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr> </then><else>: <expr><name><name>redobuff</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>)</operator> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>has_mbyte</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>!=</operator> <name>K_SPECIAL</name> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MB_BYTE2LEN_CHECK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>b_str</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_redo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>start_redo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>old_redo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>read_redo</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>CAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>VIsual</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>VIsual_reselect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>redo_VIsual_busy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>ascii_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>add_num_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>add_char_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_redo</name><argument_list>(<argument><expr><name>old_redo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>start_redo_ins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_redo</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>read_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"AaIiRrOo"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>, <argument><expr><name>NL_STR</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>copy_redo</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>block_redo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stop_redo_ins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>block_redo</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>init_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <name>typebuf_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <name>noremapbuf_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>TYPELEN_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




















<function><type><name>int</name></type> <name>ins_typebuf</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noremap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nottyped</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>addlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>addlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>addlen</name> <operator>&lt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>-=</operator> <name>addlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>&gt;=</operator> <name>addlen</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <name>addlen</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>newoff</name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newlen</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+</operator> <name>addlen</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_toocompl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>addlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>addlen</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>!=</operator> <name>typebuf_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>newoff</name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>s2</name> <operator>+</operator> <name>newoff</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>addlen</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>!=</operator> <name>noremapbuf_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>newoff</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_SCRIPT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_ABBR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>RM_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>









<if_stmt><if>if <condition>(<expr><name>noremap</name> <operator>==</operator> <name>REMAP_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nrm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>noremap</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nrm</name> <operator>=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nrm</name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>char_u</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>--</operator><name>nrm</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><name>RM_YES</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>




<if_stmt><if>if <condition>(<expr><name>nottyped</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>silent</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>+=</operator> <name>addlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ins_char_typebuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>KeyNoremap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>!</operator><name>KeyTyped</name></expr></argument>, <argument><expr><name>cmd_silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type> 
<name>typebuf_changed</name> <parameter_list>(
<parameter><decl><type><name>int</name></type> <name>tb_change_cnt</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<return>return <expr><name>tb_change_cnt</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>!=</operator> <name>tb_change_cnt</name>
<operator>||</operator> <name>typebuf_was_filled</name>
<operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>typebuf_typed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>typebuf_maplen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>del_typebuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>len</name><operator>)</operator>
<operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if>



<else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>&gt;</operator> <name>MAXMAPLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>len</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&gt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>typebuf_was_filled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>gotchars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>chars</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char_u</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>todo</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>updatescript</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>reg_recording</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>recordbuff</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_recorded_len</name> <operator>+=</operator> <name>buflen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>may_sync_undo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>debug_did_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>



<expr_stmt><expr><operator>++</operator><name>maptick</name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>may_sync_undo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>arrow_used</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>u_sync</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>alloc_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>TYPELEN_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>TYPELEN_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>=</operator> <name>TYPELEN_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>=</operator> <name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>free_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>==</operator> <name>typebuf_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"Free typebuf 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>==</operator> <name>noremapbuf_init</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>internal_error</name><argument_list>(<argument><expr><literal type="string">"Free typebuf 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XFREE_CLEAR</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>typebuf_T</name></type> <name><name>saved_typebuf</name><index>[<expr><name>NSCRIPT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>save_typebuf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>saved_typebuf</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_char</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mod_mask</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mouse_grid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mouse_row</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>old_mouse_col</name></decl>;</decl_stmt> 





<function><type><name>void</name></type> <name>save_typeahead</name><parameter_list>(<parameter><decl><type><name>tasave_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_typebuf</name></name> <operator>=</operator> <name>typebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>typebuf_valid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>old_char</name></name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>old_mod_mask</name></name> <operator>=</operator> <name>old_mod_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_readbuf1</name></name> <operator>=</operator> <name>readbuf1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readbuf1</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>save_readbuf2</name></name> <operator>=</operator> <name>readbuf2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>readbuf2</name><operator>.</operator><name>bh_first</name><operator>.</operator><name>b_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>restore_typeahead</name><parameter_list>(<parameter><decl><type><name>tasave_T</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>typebuf_valid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_typebuf</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_char</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>old_char</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mod_mask</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>old_mod_mask</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>readbuf1</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_readbuf1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_buff</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>readbuf2</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>save_readbuf2</name></name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> 
<name>openscript</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>directly</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curscript</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>NSCRIPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_nesting</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>check_secure</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_script</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>curscript</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>expand_env</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NameBuff</name></expr></argument>, <argument><expr><name>MAXPATHL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <call><name>file_open_new</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NameBuff</name></expr></argument>,
<argument><expr><name>kFileReadOnly</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>emsgf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_notopen_2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>os_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curscript</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curscript</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>save_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>directly</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>oparg_T</name></type> <name>oa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldcurscript</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_State</name> <init>= <expr><name>State</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_restart_edit</name> <init>= <expr><name>restart_edit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_insertmode</name> <init>= <expr><name>p_im</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_finish_op</name> <init>= <expr><name>finish_op</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_scroll</name> <init>= <expr><name>msg_scroll</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>p_im</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>clear_oparg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldcurscript</name> <operator>=</operator> <name>curscript</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>update_topline_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>normal_cmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oa</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block> while <condition>(<expr><name><name>scriptin</name><index>[<expr><name>oldcurscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

<expr_stmt><expr><name>State</name> <operator>=</operator> <name>save_State</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_scroll</name> <operator>=</operator> <name>save_msg_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>restart_edit</name> <operator>=</operator> <name>save_restart_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_im</name> <operator>=</operator> <name>save_insertmode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>finish_op</name> <operator>=</operator> <name>save_finish_op</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>closescript</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typebuf</name> <operator>=</operator> <name><name>saved_typebuf</name><index>[<expr><name>curscript</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>file_free</name><argument_list>(<argument><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curscript</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>curscript</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXITFREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>close_all_scripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>scriptin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type> <name>using_script</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>before_blocking</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>updatescript</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>may_garbage_collect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>garbage_collect</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>updatescript</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>scriptout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>scriptout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>idle</name> <init>= <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idle</name> <operator>||</operator> <operator>(</operator><name>p_uc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>count</name> <operator>&gt;=</operator> <name>p_uc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ml_sync_all</name><argument_list>(<argument><expr><name>idle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><operator>(</operator><operator>!</operator><operator>!</operator><name>p_fs</name> <operator>||</operator> <name>idle</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>










<function><type><name>int</name></type> <name>vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>buf</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>may_garbage_collect</name> <operator>&amp;&amp;</operator> <name>want_garbage_collect</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>garbage_collect</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>old_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>old_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_char</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <name>old_mod_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_grid</name> <operator>=</operator> <name>old_mouse_grid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_row</name> <operator>=</operator> <name>old_mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mouse_col</name> <operator>=</operator> <name>old_mouse_col</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_recorded_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content> 
<decl_stmt><decl><type><name>bool</name></type> <name>did_inc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>did_inc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>did_inc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>K_KPLUS</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KMINUS</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KDIVIDE</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KMULTIPLY</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KENTER</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>CAR</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KPOINT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KCOMMA</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_KEQUAL</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K0</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K1</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K2</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K3</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'3'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K4</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'4'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K5</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'5'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K6</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'6'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K7</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'7'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K8</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'8'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_K9</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>K_XHOME</name></expr>:</case>
<case>case <expr><name>K_ZHOME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_HOME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_CTRL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_HOME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_HOME</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>K_XEND</name></expr>:</case>
<case>case <expr><name>K_ZEND</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_SHIFT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_S_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mod_mask</name> <operator>==</operator> <name>MOD_MASK_CTRL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_C_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_END</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>K_XUP</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XDOWN</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XLEFT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_LEFT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>K_XRIGHT</name></expr>:</case> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>K_RIGHT</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>MB_BYTE2LEN_CHECK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name></expr>
)</condition> <block>{<block_content>





<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>KS_EXTRA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>utf_ptr2char</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>






<expr_stmt><expr><name>may_garbage_collect</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>safe_vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>get_keystroke</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>plain_vgetc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>safe_vgetc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>==</operator> <name>K_IGNORE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_VER_SCROLLBAR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_HOR_SCROLLBAR</name></expr>)</condition>;</do>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>vpeekc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>old_char</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>old_char</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>vpeekc_any</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>char_avail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>vpeekc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><name>retval</name> <operator>!=</operator> <name>NUL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> 
<name>vungetc</name> <parameter_list>( 
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>old_char</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mod_mask</name> <operator>=</operator> <name>mod_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mouse_grid</name> <operator>=</operator> <name>mouse_grid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mouse_row</name> <operator>=</operator> <name>mouse_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_mouse_col</name> <operator>=</operator> <name>mouse_col</name></expr>;</expr_stmt>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>int</name></type> <name>vgetorpeek</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>advance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mp_match_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timedout</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mapdepth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mode_deleted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>local_State</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_mlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_wcol</name></decl>, <decl><type ref="prev"/><name>new_wrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nolmaplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_wcol</name></decl>, <decl><type ref="prev"/><name>old_wrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wait_tb_len</name></decl>;</decl_stmt>












<if_stmt><if>if <condition>(<expr><name>vgetc_busy</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal></expr>
)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NUL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>local_State</name> <operator>=</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>vgetc_busy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>KeyStuffed</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_typebuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_stuff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>advance</name> <operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reg_executing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<do>do <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>typeahead_char</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>typeahead_char</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>typeahead_char</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>read_readbuffers</name><argument_list>(<argument><expr><name>advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>KeyStuffed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>






<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>line_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>os_breakcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>















<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_mlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>no_mapping</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maphash_valid</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>no_zero_mapping</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c1</name> <operator>!=</operator> <literal type="char">'0'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>(</operator><name>p_remap</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name>
<operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_ABBR</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p_paste</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>State</name> <operator>==</operator> <name>HITRETURN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <name>CAR</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>ASKMORE</name>
<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>CONFIRM</name>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><call><name>ctrl_x_mode_not_default</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>vim_is_ctrl_x_key</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>compl_cont_status</name> <operator>&amp;</operator> <name>CONT_LOCAL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <name>Ctrl_N</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>Ctrl_P</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nolmaplen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>CMDLINE</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>get_real_state</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SELECTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nolmaplen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><call><name>MAP_HASH</name><argument_list>(<argument><expr><name>local_State</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><call><name>MAP_HASH</name><argument_list>(<argument><expr><name>local_State</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>mp_match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp_match_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
<incr><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name>mp2</name><operator>,</operator> <name>mp2</name> <operator>=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr></else></ternary></expr></incr>)</control> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>c1</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>local_State</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nomap</name> <init>= <expr><name>nolmaplen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>mlen</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>mlen</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>mlen</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nomap</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>nomap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nomap</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LANGMAP_ADJUST</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><name>mlen</name></expr>]</index></name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>





<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><call><name>mb_unescape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>MB_BYTE2LEN</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>utfc_ptr2len</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>==</operator> <name>keylen</name>
<operator>||</operator> <operator>(</operator><name>mlen</name> <operator>==</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name>
<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&lt;</operator> <name>keylen</name><operator>)</operator></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>RM_SCRIPT</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>K_SPECIAL</name>
<operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_EXTRA</name>
<operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>mlen</name></expr>;</init> <condition><expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_ABBR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timedout</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mp_match</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <name><name>mp_match</name><operator>-&gt;</operator><name>m_nowait</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_MAP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name>mp_match_len</name>
<operator>||</operator> <operator>(</operator><name>keylen</name> <operator>==</operator> <name>mp_match_len</name>
<operator>&amp;&amp;</operator> <name>mp_match</name> <operator>!=</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp_match</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mp_match</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp_match_len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_mlen</name> <operator>&lt;</operator> <name>mlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_mlen</name> <operator>=</operator> <name>mlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <name>KEYLEN_PART_MAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>mp_match_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p_pt</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>mp</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name><operator>|</operator><name>NORMAL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name> <init>= <expr><call><name>typebuf_match_len</name><argument_list>(<argument><expr><name>p_pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>mlen</name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>set_option_value</name><argument_list>(<argument><expr><literal type="string">"paste"</literal></expr></argument>, <argument><expr><operator>!</operator><name>p_paste</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>Rows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_clr_eos</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>status_redraw_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>redraw_statuslines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mlen</name> <operator>==</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>KEYLEN_PART_KEY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>max_mlen</name> <operator>&lt;</operator> <name>mlen</name></expr>)</condition><block type="pseudo"><block_content>


<expr_stmt><expr><name>max_mlen</name> <operator>=</operator> <name>mlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>max_mlen</name> <operator>&gt;=</operator> <name>mp_match_len</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <name>KEYLEN_PART_MAP</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>keylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>keylen</name></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>KeyTyped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>KeyNoremap</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>mp_match_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>&lt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_m_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_m_noremap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_m_silent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_m_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_m_str</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>keylen</name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cmd_silent</name> <operator>=</operator> <operator>(</operator><name><name>typebuf</name><operator>.</operator><name>tb_silent</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>del_typebuf</name><argument_list>(<argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 





<if_stmt><if>if <condition>(<expr><operator>++</operator><name>mapdepth</name> <operator>&gt;=</operator> <name>p_mmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E223: recursive mapping"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>redrawcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>flush_buffers</name><argument_list>(<argument><expr><name>FLUSH_MINIMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mapdepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>VIsual_active</name> <operator>&amp;&amp;</operator> <name>VIsual_select</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>VISUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>VIsual_select</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>K_SELECT_STRING</name></expr></argument>, <argument><expr><name>REMAP_NONE</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>save_m_expr</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_m_noremap</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_m_silent</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_m_keys</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>save_m_str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 






<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_vgetc_busy</name> <init>= <expr><name>vgetc_busy</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>save_m_keys</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_m_str</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>eval_map_expr</name><argument_list>(<argument><expr><name>save_m_str</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vgetc_busy</name> <operator>=</operator> <name>save_vgetc_busy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>









<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>FAIL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>LANGMAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>save_m_noremap</name> <operator>!=</operator> <name>REMAP_YES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>save_m_noremap</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(
<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name>save_m_keys</name> <operator>!=</operator> <name>NULL</name></expr>
?</condition><then> <expr><name>save_m_keys</name></expr> </then><else>: <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>keylen</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_YES</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SKIP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ins_typebuf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>noremap</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>cmd_silent</name> <operator>||</operator> <name>save_m_silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_m_expr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>save_m_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>save_m_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>FAIL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>












<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>new_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>advance</name>
<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name></expr>]</index></name> <operator>==</operator> <name>ESC</name>
<operator>&amp;&amp;</operator> <operator>!</operator><name>no_mapping</name>
<operator>&amp;&amp;</operator> <name>ex_normal_busy</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>p_timeout</name>
<operator>||</operator> <operator>(</operator><name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name> <operator>&amp;&amp;</operator> <name>p_ttimeout</name><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></argument>,
<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">25L</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>colnr_T</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode_displayed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unshowmode</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode_deleted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>validate_cursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>did_ai</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>col</name> <operator>=</operator> <name>vcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>vcol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vcol</name> <operator>+=</operator> <call><name>lbr_chartabsize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>,
<argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><name>vcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cline_row</name></name>
<operator>+</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>/</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>%=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>+=</operator> <call><name>curwin_col_off</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>curwin</name><operator>-&gt;</operator><name>w_p_wrap</name></name> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_width_inner</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>get_cursor_line_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>-=</operator> <call><name>utf_head_off</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>utf_ptr2cells</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>old_wcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>old_wrow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 



<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>c</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name>RM_YES</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_maplen</name></name> <operator>+</operator> <name>MAXMAPLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ex_normal_busy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>p_im</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_L</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>cmdwin_type</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tc</name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>
)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Ctrl_C</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>tc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>p_lz</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name>advance</name> <operator>&amp;&amp;</operator> <name>must_redraw</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>need_wait_return</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>update_screen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>advance</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exmode_active</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>State</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>|</operator> <name>INSERT</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>State</name> <operator>==</operator> <name>LANGMAP</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>State</name> <operator>!=</operator> <name>HITRETURN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name>
<operator>&amp;&amp;</operator> <call><name>ptr2cells</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>
<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>edit_putchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>
<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_wcol</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_wrow</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>new_wcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>new_wrow</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&gt;</operator> <name>SHOWCMD_COLS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <name>SHOWCMD_COLS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>add_to_showcmd</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>
<operator>+</operator> <name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wcol</name></name> <operator>=</operator> <name>old_wcol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_wrow</name></name> <operator>=</operator> <name>old_wrow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>cmdline_star</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ptr2cells</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putcmdline</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>wait_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>advance</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>==</operator> <literal type="number">0</literal>
<operator>||</operator> <operator>!</operator><operator>(</operator><name>p_timeout</name> <operator>||</operator> <operator>(</operator><name>p_ttimeout</name> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>==</operator> <name>KEYLEN_PART_KEY</name> <operator>&amp;&amp;</operator> <name>p_ttm</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>p_ttm</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>p_tm</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wait_tb_len</name> <operator>=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>inchar</name><argument_list>(<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr></argument>,
<argument><expr><name><name>typebuf</name><operator>.</operator><name>tb_buflen</name></name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>-</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>wait_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pop_showcmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>edit_unputchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>State</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unputcmdline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advance</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wait_tb_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>timedout</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<while>while <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>
<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_noremap</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name>
<operator>+</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>RM_YES</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></else></if_stmt> 


</block_content>}</block> while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>advance</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>NUL</name><operator>)</operator></expr>)</condition>;</do>






<if_stmt><if>if <condition>(<expr><name>advance</name> <operator>&amp;&amp;</operator> <name>p_smd</name> <operator>&amp;&amp;</operator> <name>msg_silent</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>State</name> <operator>&amp;</operator> <name>INSERT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mode_deleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_mapping</name> <operator>&amp;&amp;</operator> <name>mode_displayed</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>unshowmode</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>mode_deleted</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>KeyTyped</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>redraw_cmdline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>showmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timedout</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>nop_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KS_EXTRA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nop_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KE_NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gotchars</name><argument_list>(<argument><expr><name>nop_buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>--</operator><name>vgetc_busy</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>
























<function><type><name>int</name></type> <name>inchar</name><parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>wait_time</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>retesc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tb_change_cnt</name> <init>= <expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wait_time</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>||</operator> <name>wait_time</name> <operator>&gt;</operator> <literal type="number">100L</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>State</name> <operator>!=</operator> <name>HITRETURN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_outofmem_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>did_swapwrite_msg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>read_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>read_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_script</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>script_char</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name>
<operator>||</operator> <operator>(</operator><name>read_size</name> <operator>=</operator> <call><name>file_read</name><argument_list>(<argument><expr><name><name>scriptin</name><index>[<expr><name>curscript</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>script_char</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>closescript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retesc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><name>script_char</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>read_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 






<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUM_LEN</name></cpp:macro> <cpp:value>MAXMAPLEN * 3 + 3</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>dum</name><index>[<expr><name>DUM_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>os_inchar</name><argument_list>(<argument><expr><name>dum</name></expr></argument>, <argument><expr><name>DUM_LEN</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>retesc</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>os_inchar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxlen</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wait_time</name></expr></argument>, <argument><expr><name>tb_change_cnt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>typebuf_changed</name><argument_list>(<argument><expr><name>tb_change_cnt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_change_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>fix_input_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>fix_input_buffer</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>using_script</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NUL</name>
<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>KS_EXTRA</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_THIRD</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_SECOND</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>























<function><type><name>void</name></type> <name>set_maparg_lhs_rhs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>orig_lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>orig_lhs_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>orig_rhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>orig_rhs_len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cpo_flags</name></decl></parameter>, <parameter><decl><type><name>MapArguments</name> <modifier>*</modifier></type><name>mapargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lhs_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>replaced</name> <init>= <expr><call><name>replace_termcodes</name><argument_list>(<argument><expr><name>orig_lhs</name></expr></argument>, <argument><expr><name>orig_lhs_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lhs_buf</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>cpo_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>lhs_len</name></name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>replaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mapargs</name><operator>-&gt;</operator><name>lhs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>replaced</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mapargs</name><operator>-&gt;</operator><name>lhs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>orig_rhs_len</name></name> <operator>=</operator> <name>orig_rhs_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>orig_rhs</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>mapargs</name><operator>-&gt;</operator><name>orig_rhs_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mapargs</name><operator>-&gt;</operator><name>orig_rhs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>orig_rhs</name></expr></argument>,
<argument><expr><name><name>mapargs</name><operator>-&gt;</operator><name>orig_rhs_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRICMP</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>, <argument><expr><literal type="string">"&lt;nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_is_noop</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>replaced</name> <operator>=</operator> <call><name>replace_termcodes</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>, <argument><expr><name>orig_rhs_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rhs_buf</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>cpo_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_len</name></name> <operator>=</operator> <call><name>STRLEN</name><argument_list>(<argument><expr><name>replaced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_is_noop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mapargs</name><operator>-&gt;</operator><name>rhs</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>replaced</name></expr></argument>, <argument><expr><name><name>mapargs</name><operator>-&gt;</operator><name>rhs_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>lhs_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>rhs_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><name>int</name></type> <name>str_to_mapargs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>strargs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_unmap</name></decl></parameter>, <parameter><decl><type><name>MapArguments</name> <modifier>*</modifier></type><name>mapargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>to_parse</name> <init>= <expr><name>strargs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MapArguments</name></type> <name>parsed_args</name></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsed_args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parsed_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;nowait&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>nowait</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>silent</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>script</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;expr&gt;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>expr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>to_parse</name></expr></argument>, <argument><expr><literal type="string">"&lt;unique&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>to_parse</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>to_parse</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parsed_args</name><operator>.</operator><name>unique</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></while>











<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>lhs_end</name> <init>= <expr><name>to_parse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>do_backslash</name> <init>= <expr><operator>(</operator><call><name>vim_strchr</name><argument_list>(<argument><expr><name>p_cpo</name></expr></argument>, <argument><expr><name>CPO_BSLASH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>lhs_end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_unmap</name> <operator>||</operator> <operator>!</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><operator>*</operator><name>lhs_end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lhs_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>Ctrl_V</name> <operator>||</operator> <operator>(</operator><name>do_backslash</name> <operator>&amp;&amp;</operator> <name><name>lhs_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>lhs_end</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lhs_end</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>lhs_end</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>



<decl_stmt><decl><type><specifier>const</specifier> <name>char_u</name> <modifier>*</modifier></type><name>rhs_start</name> <init>= <expr><call><name>skipwhite</name><argument_list>(<argument><expr><name>lhs_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>orig_lhs_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>lhs_end</name> <operator>-</operator> <name>to_parse</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lhs_to_replace</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><name>orig_lhs_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xstrlcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>lhs_to_replace</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>to_parse</name></expr></argument>, <argument><expr><name>orig_lhs_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>orig_rhs_len</name> <init>= <expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>rhs_start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set_maparg_lhs_rhs</name><argument_list>(<argument><expr><name>lhs_to_replace</name></expr></argument>, <argument><expr><name>orig_lhs_len</name></expr></argument>,
<argument><expr><name>rhs_start</name></expr></argument>, <argument><expr><name>orig_rhs_len</name></expr></argument>,
<argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>lhs_to_replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mapargs</name> <operator>=</operator> <name>parsed_args</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parsed_args</name><operator>.</operator><name>lhs_len</name></name> <operator>&gt;</operator> <name>MAXMAPLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>buf_do_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maptype</name></decl></parameter>, <parameter><decl><type><name>MapArguments</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_abbrev</name></decl></parameter>,
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>did_it</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>did_local</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>abbr_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>map_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>noremap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name>maphash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr_table</name> <operator>=</operator> <operator>&amp;</operator><name>first_abbr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_NONE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_YES</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>map_table</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>abbr_table</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>script</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>noremap</name> <operator>=</operator> <name>REMAP_SCRIPT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_lhs</name> <init>= <expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>lhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>has_rhs</name> <init>= <expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>rhs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name><operator>)</operator> <operator>||</operator> <name><name>args</name><operator>-&gt;</operator><name>rhs_is_noop</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_lhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>lhs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>rhs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_rhs</name> <init>= <expr><name><name>args</name><operator>-&gt;</operator><name>orig_rhs</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>has_lhs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>args</name><operator>-&gt;</operator><name>lhs_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAXMAPLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_abbrev</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>lhs</name> <operator>+</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>lhs</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>same</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>!=</operator> <name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>same</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>same</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>same</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>lhs</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>lhs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>lhs</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name><name>lhs</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_lhs</name> <operator>&amp;&amp;</operator> <name>has_rhs</name> <operator>&amp;&amp;</operator> <name>is_abbrev</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>no_abbr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lhs</name> <operator>||</operator> <operator>(</operator><name>maptype</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_rhs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name></name> <operator>&amp;&amp;</operator> <name>has_lhs</name> <operator>&amp;&amp;</operator> <name>has_rhs</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>==</operator> <name>len</name>
<operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>unique</name></name>
<operator>&amp;&amp;</operator> <call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E224: global abbreviation already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E225: global mapping already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>!=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_rhs</name> <operator>&amp;&amp;</operator> <name>maptype</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lhs</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_local</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_local</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>







<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>round</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>maptype</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>round</name> <operator>&lt;=</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><name>did_it</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <name>abbr_table</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>map_table</name><index>[<expr><name>hash</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_int</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lhs</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>map_table</name> <operator>!=</operator> <name>maphash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name>round</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 




<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_abbrev</name> <operator>||</operator> <name>round</name> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>len</name>
<operator>||</operator> <operator>*</operator><call><name>skipwhite</name><argument_list>(<argument><expr><name>lhs</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>has_rhs</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>showmap</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>map_table</name> <operator>!=</operator> <name>maphash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>unique</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E226: abbreviation already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E227: mapping already exists for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_it</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>nowait</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>silent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name>did_it</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>mapblock_free</name><argument_list>(<argument><expr><name>mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>new_hash</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_abbrev</name> <operator>&amp;&amp;</operator> <name>new_hash</name> <operator>!=</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_table</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>

<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_it</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>lhs</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_mapped_ctrl_c</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mapped_ctrl_c</name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_lhs</name> <operator>||</operator> <operator>!</operator><name>has_rhs</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_it</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>did_local</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No abbreviation found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>MSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No mapping found"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>theend</name>;</goto> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>did_it</name></expr>)</condition> <block>{<block_content> 
<goto>goto <name>theend</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mapblock_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lhs</name> <operator>==</operator> <name>Ctrl_C</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>map_table</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_mapped_ctrl_c</name></name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mapped_ctrl_c</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>orig_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>=</operator> <name>noremap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>nowait</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>silent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name> <operator>=</operator> <name>current_sctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name><operator>.</operator><name>sc_lnum</name></name> <operator>+=</operator> <name>sourcing_lnum</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>is_abbrev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <operator>*</operator><name>abbr_table</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>abbr_table</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>map_table</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_table</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>theend</name>:</label>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
















































<function><type><name>int</name></type> <name>do_map</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maptype</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_abbrev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MapArguments</name></type> <name>parsed_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>str_to_mapargs</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>maptype</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>

<goto>goto <name>free_and_return</name>;</goto>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name> <operator>&amp;&amp;</operator> <literal type="string">"Unknown return code from str_to_mapargs!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>free_and_return</name>;</goto>
</block_content>}</block></switch> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>buf_do_map</name><argument_list>(<argument><expr><name>maptype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsed_args</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>is_abbrev</name></expr></argument>, <argument><expr><name>curbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_and_return</name>:</label>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>parsed_args</name><operator>.</operator><name>rhs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>parsed_args</name><operator>.</operator><name>orig_rhs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>mapblock_free</name><parameter_list>(<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_orig_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_maphash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maphash_valid</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>maphash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>maphash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maphash_valid</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>get_map_mode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>cmdp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>cmdp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modec</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>INSERT</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>LANGMAP</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>CMDLINE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>NORMAL</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'v'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>SELECTMODE</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></if> 
<if type="elseif">else if <condition>(<expr><name>modec</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>TERM_FOCUS</name></expr>;</expr_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>forceit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cmdp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>map_clear_mode</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmdp</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

<expr_stmt><expr><name>local</name> <operator>=</operator> <operator>(</operator><call><name>STRCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>local</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>arg</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>e_invarg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmdp</name></expr></argument>, <argument><expr><name>forceit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>map_clear_int</name><argument_list>(<argument><expr><name>curbuf</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>local</name></expr></argument>,
<argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> 
<name>map_clear_int</name> <parameter_list>(
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>mpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>mpp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><name>mpp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>mapblock_free</name><argument_list>(<argument><expr><name>mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>new_hash</name> <operator>=</operator> <call><name>MAP_HASH</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbr</name> <operator>&amp;&amp;</operator> <name>new_hash</name> <operator>!=</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mpp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>maphash</name><index>[<expr><name>new_hash</name></expr>]</index></name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mpp</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type><name>map_mode_to_chars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_RET
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>mapmode</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>INSERT</name> <operator>+</operator> <name>CMDLINE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>LANGMAP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CMDLINE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name><operator>)</operator><operator>)</operator>
<operator>==</operator> <name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>NORMAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>OP_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>TERM_FOCUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>(</operator><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>VISUAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>SELECTMODE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mapmode</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mapmode</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> 
<name>showmap</name> <parameter_list>(
<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>local</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>message_filtered</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>message_filtered</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg_didout</name> <operator>||</operator> <name>msg_silent</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mapchars</name> <init>= <expr><call><name>map_mode_to_chars</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>msg_puts</name><argument_list>(<argument><expr><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>mapchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<while>while <condition>(<expr><operator>++</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>msg_putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>msg_puts_attr</name><argument_list>(<argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>, <argument><expr><call><name>HL_ATTR</name><argument_list>(<argument><expr><name>HLF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>msg_outtrans_special</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_verbose</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>last_set_msg</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_script_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ui_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>











<function><type><name>bool</name></type> <name>map_to_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>modechars</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rhs</name> <init>= <expr><call><name>replace_termcodes</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char_u</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPMODE</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>modechars</name></type></parameter>, <parameter><type><name>chr</name></type></parameter>, <parameter><type><name>modeflags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (strchr(modechars, chr) != NULL) { mode |= modeflags; } } while (0)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>VISUAL</name><operator>|</operator><name>SELECTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><name>VISUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>SELECTMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><name>OP_PENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><name>INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>LANGMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPMODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>modechars</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>CMDLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAPMODE</name></cpp:undef>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>map_to_exists_mode</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>abbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>map_to_exists_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>abbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>exp_buffer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exp_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exp_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>exp_buffer</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp_buffer</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_mapmodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_isabbrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>expand_buffer</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>





<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>set_context_in_map_cmd</name> <parameter_list>(
<parameter><decl><type><name>expand_T</name> <modifier>*</modifier></type><name>xp</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>forceit</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>isabbrev</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>isunmap</name></decl></parameter>, 
<parameter><decl><type><name>cmdidx_T</name></type> <name>cmdidx</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forceit</name> <operator>&amp;&amp;</operator> <name>cmdidx</name> <operator>!=</operator> <name>CMD_map</name> <operator>&amp;&amp;</operator> <name>cmdidx</name> <operator>!=</operator> <name>CMD_unmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_NOTHING</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>isunmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>=</operator> <call><name>get_map_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>forceit</name> <operator>||</operator> <name>isabbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>=</operator> <name>INSERT</name> <operator>+</operator> <name>CMDLINE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isabbrev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expand_mapmodes</name> <operator>+=</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>expand_isabbrev</name> <operator>=</operator> <name>isabbrev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_context</name></name> <operator>=</operator> <name>EXPAND_MAPPINGS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>expand_buffer</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;buffer&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expand_buffer</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;unique&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;nowait&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;silent&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;special&gt;"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;script&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"&lt;expr&gt;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>skipwhite</name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></for>
<expr_stmt><expr><name><name>xp</name><operator>-&gt;</operator><name>xp_pattern</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>ExpandMappings</name><parameter_list>(<parameter><decl><type><name>regmatch_T</name> <modifier>*</modifier></type><name>regmatch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_file</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>round</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;silent&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;unique&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;script&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;expr&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>expand_buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;buffer&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;nowait&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">"&lt;special&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>expand_isabbrev</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expand_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>expand_mapmodes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>translate_mapping</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>CPO_TO_CPO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>vim_regexec</name><argument_list>(<argument><expr><name>regmatch</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>colnr_T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>file</name><operator>)</operator><index>[<expr><name>count</name><operator>++</operator></expr>]</index> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>round</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>file</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char_u</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr3</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>sort_strings</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <operator>*</operator><name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr3</name> <operator>=</operator> <name>ptr1</name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ptr2</name> <operator>&lt;</operator> <name>ptr3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STRCMP</name><argument_list>(<argument><expr><operator>*</operator><name>ptr1</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>ptr1</name> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>ptr2</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num_file</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>FAIL</name></expr> </then><else>: <expr><name>OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



















<function><type><name>int</name></type> <name>check_abbr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mincol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scol</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name><name>tb</name><index>[<expr><name>MB_MAXBYTES</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_id</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vim_abbr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>KeyNoremap</name> <operator>&amp;</operator> <operator>(</operator><name>RM_NONE</name><operator>|</operator><name>RM_SCRIPT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>Ctrl_RSB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_id</name> <operator>=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>ptr</name> <operator>+</operator> <name>mincol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mb_prevptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ascii_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>vim_abbr</name> <operator>&amp;&amp;</operator> <name>is_id</name> <operator>!=</operator> <call><name>vim_iswordp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call>(<modifier>*</modifier><name>mb_ptr2len</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>clen</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>scol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if> 
<else>else <block>{<block_content>
<expr_stmt><expr><name>vim_abbr</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>is_id</name> <operator>=</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>scol</name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>scol</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ascii_isspace</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>scol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>(</operator><name>vim_abbr</name> <operator>||</operator> <name>is_id</name> <operator>==</operator> <call><name>vim_iswordc</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>scol</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>scol</name></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>mincol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scol</name> <operator>=</operator> <name>mincol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>scol</name> <operator>&lt;</operator> <name>col</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>scol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>col</name> <operator>-</operator> <name>scol</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition>
<incr><expr><ternary><condition><expr><name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>mp</name> <operator>=</operator> <name>mp2</name><operator>,</operator> <name>mp2</name> <operator>=</operator> <name>NULL</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name><operator>)</operator></expr></else></ternary></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qlen</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>K_SPECIAL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>State</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name>qlen</name> <operator>==</operator> <name>len</name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>STRNCMP</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>













<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>Ctrl_RSB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_SECOND</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char_u</name><operator>)</operator><call><name>K_THIRD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>ABBR_OFF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Ctrl_V</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>ABBR_OFF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>ABBR_OFF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>utf_char2bytes</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tb</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>eval_map_expr</name><argument_list>(<argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>typebuf</name><operator>.</operator><name>tb_no_abbr_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Ctrl_H</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>has_mbyte</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ins_typebuf</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type>
<name>eval_map_expr</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>save_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pos_T</name></type> <name>save_cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_msg_row</name></decl>;</decl_stmt>



<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vim_unescape_csi</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>save_cmd</name> <operator>=</operator> <call><name>save_cmdline_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><operator>++</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ex_normal_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_vim_var_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>save_cursor</name> <operator>=</operator> <name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_msg_col</name> <operator>=</operator> <name>msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_msg_row</name> <operator>=</operator> <name>msg_row</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>eval_to_string</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>textlock</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ex_normal_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curwin</name><operator>-&gt;</operator><name>w_cursor</name></name> <operator>=</operator> <name>save_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_col</name> <operator>=</operator> <name>save_msg_col</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msg_row</name> <operator>=</operator> <name>save_msg_row</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_cmdline_alloc</name><argument_list>(<argument><expr><name>save_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>vim_strsave_escape_csi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>char_u</name> <modifier>*</modifier></type><name>vim_strsave_escape_csi</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><call><name>STRLEN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>add_char2buf</name><argument_list>(<argument><expr><call><name>PTR2CHAR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>MB_CPTR2LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>vim_unescape_csi</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>KE_FILLER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>K_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>CSI</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_CSI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>CSI</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>makemap</name><parameter_list>(
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
<parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>abbr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>did_cpo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>abbr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>abbr</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>abbr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>mp</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>==</operator> <name>REMAP_SCRIPT</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_EXTRA</name>
<operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><name>KE_SNR</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"abbr"</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"map"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>NORMAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>VISUAL</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NORMAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VISUAL</name> <operator>+</operator> <name>SELECTMODE</name> <operator>+</operator> <name>OP_PENDING</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'v'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CMDLINE</name> <operator>+</operator> <name>INSERT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abbr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="string">"map!"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CMDLINE</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INSERT</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LANGMAP</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TERM_FOCUS</name></expr>:</case>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>IEMSG</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"E228: makemap: Illegal mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></switch>
<do>do <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_cpo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>did_cpo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>specials</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><name>K_SPECIAL</name></expr>, <expr><name>NL</name></expr>, <expr><name>NUL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strpbrk</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><name>specials</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><name>specials</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>did_cpo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>did_cpo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"let s:cpo_save=&amp;cpo"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"set cpo&amp;vim"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&amp;&amp;</operator> <call><name>putc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_noremap</name></name> <operator>!=</operator> <name>REMAP_YES</name> <operator>&amp;&amp;</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"nore"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;buffer&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_nowait</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;nowait&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_silent</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;silent&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mp</name><operator>-&gt;</operator><name>m_expr</name></name> <operator>&amp;&amp;</operator> <call><name>fputs</name><argument_list>(<argument><expr><literal type="string">" &lt;expr&gt;"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>putc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_escstr</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FAIL</name>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c1</name> <operator>!=</operator> <name>NUL</name></expr>)</condition>;</do>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>did_cpo</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"let &amp;cpo=s:cpo_save"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"unlet s:cpo_save"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
<operator>||</operator> <call><name>put_eol</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FAIL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>put_escstr</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>strstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>strstart</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name>what</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"&lt;Nop&gt;"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name> <operator>!=</operator> <name>NUL</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mb_unescape</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NUL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>--</operator><name>str</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name>what</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>modifiers</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\\\026\n"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"&lt;NL&gt;"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><name>what</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ascii_iswhite</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'|'</literal>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>==</operator> <name>strstart</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>what</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><name>Ctrl_V</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>putc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FAIL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char_u</name> <modifier>*</modifier></type>
<name>check_map</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>ign_mod</name></decl></parameter>, 
<parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>, 
<parameter><decl><type><name>mapblock_T</name> <modifier>*</modifier><modifier>*</modifier></type><name>mp_ptr</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>local_ptr</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>minlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapblock_T</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>validate_maphash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>STRLEN</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>local</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>local</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>local</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hash</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>abbr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_first_abbr</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>first_abbr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>local</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>curbuf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>maphash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>mp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>mp</name> <operator>=</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_next</name></name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>m_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>exact</name> <operator>||</operator> <name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name> <operator>==</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keys</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name> <init>= <expr><name><name>mp</name><operator>-&gt;</operator><name>m_keylen</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ign_mod</name> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>&gt;=</operator> <literal type="number">3</literal>
<operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>keylen</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>minlen</name> <operator>=</operator> <ternary><condition><expr><name>keylen</name> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>keylen</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STRNCMP</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mp_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mp_ptr</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>local_ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>local_ptr</name> <operator>=</operator> <name>local</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name><name>mp</name><operator>-&gt;</operator><name>m_str</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>add_map</name><parameter_list>(<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>cpo_save</name> <init>= <expr><name>p_cpo</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>vim_strsave</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>do_map</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_cpo</name> <operator>=</operator> <name>cpo_save</name></expr>;</expr_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>char_u</name> <modifier>*</modifier></type> <name>translate_mapping</name> <parameter_list>(
<parameter><decl><type><name>char_u</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cpo_flags</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>ga</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>cpo_bslash</name> <init>= <expr><operator>!</operator><operator>(</operator><name>cpo_flags</name><operator>&amp;</operator><name>FLAG_CPO_BSLASH</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>str</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>modifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>modifiers</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_SPECIAL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>K_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>modifiers</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>ga_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>modifiers</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_J</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>Ctrl_V</name>
<operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cpo_bslash</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cpo_bslash</name></expr> ?</condition><then> <expr><name>Ctrl_V</name></expr> </then><else>: <expr><literal type="char">'\\'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ga</name></expr></argument>, <argument><expr><name>NUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ga</name><operator>.</operator><name>ga_data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>typebuf_match_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>typebuf</name><operator>.</operator><name>tb_len</name></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>typebuf</name><operator>.</operator><name>tb_buf</name><index>[<expr><name><name>typebuf</name><operator>.</operator><name>tb_off</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>mlen</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NUL</name></expr>;</return> 
</block_content>}</block></function>





<function><type><name>mapblock_T</name> <modifier>*</modifier></type><name>get_maphash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
FUNC_ATTR_PURE
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>MAX_MAPHASH</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>maphash</name><index>[<expr><name>index</name></expr>]</index></name></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>b_maphash</name><index>[<expr><name>index</name></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>char_u</name> <modifier>*</modifier></type> <name>getcmdkeycmd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>promptc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>do_concat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>garray_T</name></type> <name>line_ga</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>aborted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ga_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>no_mapping</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>got_int</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c1</name> <operator>!=</operator> <name>NUL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aborted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vgetorpeek</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUL</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><name>e_cmdmap_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>K_SPECIAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>vgetorpeek</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>KS_MODIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmod</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>TO_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>got_int</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>NUL</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>ESC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>K_COMMAND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EMSG</name><argument_list>(<argument><expr><name>e_cmdmap_repeated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPECIAL</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>K_SNR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>K_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>KS_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>KE_SNR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>EMSG2</name><argument_list>(<argument><expr><name>e_cmdmap_key</name></expr></argument>, <argument><expr><call><name>get_special_key_name</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>cmod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ga_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cmod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>no_mapping</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aborted</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ga_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line_ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>char_u</name> <operator>*</operator><operator>)</operator><name><name>line_ga</name><operator>.</operator><name>ga_data</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
