<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\buffer.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_BUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_BUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/window.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/screen.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/func_attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/eval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/macros.h"</cpp:file></cpp:include>


<enum>enum <name>getf_values</name> <block>{
<decl><name>GETF_SETMARK</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 
<decl><name>GETF_ALT</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 
<decl><name>GETF_SWITCH</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 
}</block>;</enum>


<enum>enum <name>getf_retvalues</name> <block>{
<decl><name>GETFILE_ERROR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>GETFILE_NOT_WRITTEN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>GETFILE_SAME_FILE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>GETFILE_OPEN_OTHER</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>GETFILE_UNUSED</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block>;</enum>


<enum>enum <name>bln_values</name> <block>{
<decl><name>BLN_CURBUF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>BLN_LISTED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>BLN_DUMMY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>BLN_NEW</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 
<decl><name>BLN_NOOPT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 
}</block>;</enum>


<enum>enum <name>dobuf_action_values</name> <block>{
<decl><name>DOBUF_GOTO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>DOBUF_SPLIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>DOBUF_UNLOAD</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>DOBUF_DEL</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>DOBUF_WIPE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
}</block>;</enum>


<enum>enum <name>dobuf_start_values</name> <block>{
<decl><name>DOBUF_CURRENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>DOBUF_FIRST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>DOBUF_LAST</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>DOBUF_MOD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
}</block>;</enum>


<enum>enum <name>bfa_values</name> <block>{
<decl><name>BFA_DEL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>BFA_WIPE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>BFA_KEEP_UNDO</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buf_set_changedtick</name><argument_list>(<argument><expr><name>buf_T</name> <operator>*</operator><specifier>const</specifier> <name>buf</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>varnumber_T</name> <name>changedtick</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ALL</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buf_set_changedtick</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>varnumber_T</name></type> <name>changedtick</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>typval_T</name></type> <name>old_val</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name><operator>.</operator><name>di_tv</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>dictitem_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>changedtick_di</name> <init>= <expr><call><name>tv_dict_find</name><argument_list>(
<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>, <argument><expr><call><name>S_LEN</name><argument_list>(<argument><expr><literal type="string">"changedtick"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>changedtick_di</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>changedtick_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_type</name></name> <operator>==</operator> <name>VAR_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>changedtick_di</name><operator>-&gt;</operator><name>di_tv</name><operator>.</operator><name>v_lock</name></name> <operator>==</operator> <name>VAR_FIXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNIT_TESTING_LUA_PREPROCESSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>changedtick_di</name><operator>-&gt;</operator><name>di_flags</name></name> <operator>==</operator> <operator>(</operator><name>DI_FLAGS_RO</name><operator>|</operator><name>DI_FLAGS_FIX</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>changedtick_di</name> <operator>==</operator> <operator>(</operator><name>dictitem_T</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name> <operator>=</operator> <name>changedtick</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tv_dict_is_watched</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>tv_dict_watcher_notify</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>b_vars</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name><operator>.</operator><name>di_key</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name><operator>.</operator><name>di_tv</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>old_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>varnumber_T</name></type> <name>buf_get_changedtick</name><argument_list>(<argument><expr><specifier>const</specifier> <name>buf_T</name> <operator>*</operator><specifier>const</specifier> <name>buf</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ALL</name> <name>REAL_FATTR_ALWAYS_INLINE</name> <name>REAL_FATTR_PURE</name>
<name>REAL_FATTR_WARN_UNUSED_RESULT</name></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>varnumber_T</name></type> <name>buf_get_changedtick</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>changedtick_di</name><operator>.</operator><name>di_tv</name><operator>.</operator><name>vval</name><operator>.</operator><name>v_number</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buf_inc_changedtick</name><argument_list>(<argument><expr><name>buf_T</name> <operator>*</operator><specifier>const</specifier> <name>buf</name></expr></argument>)</argument_list>
<name>REAL_FATTR_NONNULL_ALL</name> <name>REAL_FATTR_ALWAYS_INLINE</name></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buf_inc_changedtick</name><parameter_list>(<parameter><decl><type><name>buf_T</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>buf_set_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>buf_get_changedtick</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
