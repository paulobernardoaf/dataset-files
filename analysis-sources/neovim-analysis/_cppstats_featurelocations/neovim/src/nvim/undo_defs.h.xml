<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\undo_defs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_UNDO_DEFS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_UNDO_DEFS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/pos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/extmark_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/mark_defs.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>u_header</name></name></type> <name>u_header_T</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>pos_T</name></type> <name>vi_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>vi_end</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vi_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>colnr_T</name></type> <name>vi_curswant</name></decl>;</decl_stmt> 
}</block></struct></type> <name>visualinfo_T</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>u_entry</name></name></type> <name>u_entry_T</name>;</typedef>
<struct>struct <name>u_entry</name> <block>{
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>ue_next</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>ue_top</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>ue_bot</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>linenr_T</name></type> <name>ue_lcount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier><modifier>*</modifier></type><name>ue_array</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>ue_size</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ue_magic</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>u_header</name> <block>{


<union>union <block>{
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>seq</name></decl>;</decl_stmt>
}</block> <decl><name>uh_next</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>seq</name></decl>;</decl_stmt>
}</block> <decl><name>uh_prev</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>seq</name></decl>;</decl_stmt>
}</block> <decl><name>uh_alt_next</name></decl>;</union>
<union>union <block>{
<decl_stmt><decl><type><name>u_header_T</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>seq</name></decl>;</decl_stmt>
}</block> <decl><name>uh_alt_prev</name></decl>;</union>
<decl_stmt><decl><type><name>long</name></type> <name>uh_seq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>uh_walk</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uh_entry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>u_entry_T</name> <modifier>*</modifier></type><name>uh_getbot_entry</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pos_T</name></type> <name>uh_cursor</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>uh_cursor_vcol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uh_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>fmark_T</name></type> <name><name>uh_namedm</name><index>[<expr><name>NMARKS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>extmark_undo_vec_t</name></type> <name>uh_extmark</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>visualinfo_T</name></type> <name>uh_visual</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>time_t</name></type> <name>uh_time</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name></type> <name>uh_save_nr</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>U_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>uh_magic</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UH_CHANGED</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UH_EMPTYBUF</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>buf_T</name> <modifier>*</modifier></type><name>bi_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>bi_fp</name></decl>;</decl_stmt>
}</block></struct></type> <name>bufinfo_T</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
