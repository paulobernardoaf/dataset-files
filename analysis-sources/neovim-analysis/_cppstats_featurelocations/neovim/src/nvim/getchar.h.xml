<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\neovim-analysis\_cppstats_featurelocations\neovim\src\nvim\getchar.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NVIM_GETCHAR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVIM_GETCHAR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/os/fileio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/buffer_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/ex_cmds_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvim/vim.h"</cpp:file></cpp:include>




<enum>enum <name>RemapValues</name> <block>{
<decl><name>REMAP_YES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>REMAP_NONE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 
<decl><name>REMAP_SCRIPT</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, 
<decl><name>REMAP_SKIP</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>, 
}</block>;</enum>


<typedef>typedef <type><enum>enum <block>{
<decl><name>FLUSH_MINIMAL</name></decl>,
<decl><name>FLUSH_TYPEAHEAD</name></decl>, 
<decl><name>FLUSH_INPUT</name></decl> 
}</block></enum></type> <name>flush_buffers_T</name>;</typedef>








<struct>struct <name>map_arguments</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>noremap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>nowait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>silent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>unique</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>char_u</name></type> <name><name>lhs</name><index>[<expr><name>MAXMAPLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lhs_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>rhs_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rhs_is_noop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char_u</name> <modifier>*</modifier></type><name>orig_rhs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>orig_rhs_len</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>map_arguments</name></name></type> <name>MapArguments</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLEN_PART_KEY</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYLEN_PART_MAP</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 


<enum>enum <block>{ <decl><name>NSCRIPT</name> <init>= <expr><literal type="number">15</literal></expr></init></decl> }</block>;</enum>


<decl_stmt><decl><type><specifier>extern</specifier> <name>FileDescriptor</name> <modifier>*</modifier></type><name><name>scriptin</name><index>[<expr><name>NSCRIPT</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_GENERATED_DECLARATIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getchar.h.generated.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
